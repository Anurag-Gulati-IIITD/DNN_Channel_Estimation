-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LS_estimator is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_stream_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    in_stream_TVALID : IN STD_LOGIC;
    in_stream_TREADY : OUT STD_LOGIC;
    in_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_stream_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_stream_TVALID : OUT STD_LOGIC;
    out_stream_TREADY : IN STD_LOGIC;
    out_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of LS_estimator is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "LS_estimator,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=397,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=24,HLS_SYN_FF=3968,HLS_SYN_LUT=5867,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_33 : STD_LOGIC_VECTOR (5 downto 0) := "110011";
    constant ap_const_lv6_34 : STD_LOGIC_VECTOR (5 downto 0) := "110100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal in_stream_V_data_0_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal in_stream_V_data_0_vld_in : STD_LOGIC;
    signal in_stream_V_data_0_vld_out : STD_LOGIC;
    signal in_stream_V_data_0_ack_in : STD_LOGIC;
    signal in_stream_V_data_0_ack_out : STD_LOGIC;
    signal in_stream_V_data_0_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal in_stream_V_data_0_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal in_stream_V_data_0_sel_rd : STD_LOGIC := '0';
    signal in_stream_V_data_0_sel_wr : STD_LOGIC := '0';
    signal in_stream_V_data_0_sel : STD_LOGIC;
    signal in_stream_V_data_0_load_A : STD_LOGIC;
    signal in_stream_V_data_0_load_B : STD_LOGIC;
    signal in_stream_V_data_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_stream_V_data_0_state_cmp_full : STD_LOGIC;
    signal in_stream_V_last_V_0_vld_in : STD_LOGIC;
    signal in_stream_V_last_V_0_ack_out : STD_LOGIC;
    signal in_stream_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_V_data_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal out_stream_V_data_1_vld_in : STD_LOGIC;
    signal out_stream_V_data_1_vld_out : STD_LOGIC;
    signal out_stream_V_data_1_ack_in : STD_LOGIC;
    signal out_stream_V_data_1_ack_out : STD_LOGIC;
    signal out_stream_V_data_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal out_stream_V_data_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal out_stream_V_data_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_V_data_1_sel_wr : STD_LOGIC := '0';
    signal out_stream_V_data_1_sel : STD_LOGIC;
    signal out_stream_V_data_1_load_A : STD_LOGIC;
    signal out_stream_V_data_1_load_B : STD_LOGIC;
    signal out_stream_V_data_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_V_data_1_state_cmp_full : STD_LOGIC;
    signal out_stream_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_V_last_V_1_vld_in : STD_LOGIC;
    signal out_stream_V_last_V_1_vld_out : STD_LOGIC;
    signal out_stream_V_last_V_1_ack_in : STD_LOGIC;
    signal out_stream_V_last_V_1_ack_out : STD_LOGIC;
    signal out_stream_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal out_stream_V_last_V_1_sel : STD_LOGIC;
    signal out_stream_V_last_V_1_load_A : STD_LOGIC;
    signal out_stream_V_last_V_1_load_B : STD_LOGIC;
    signal out_stream_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal in_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln30_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln36_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln49_reg_754 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal icmp_ln49_reg_754_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i5_0_reg_335 : STD_LOGIC_VECTOR (5 downto 0);
    signal i6_0_reg_346 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln25_fu_415_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln25_1_fu_433_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln27_fu_451_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_fu_475_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state5 : BOOLEAN;
    signal ap_block_state6 : BOOLEAN;
    signal i_1_fu_507_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln43_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_635 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state7_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln43_reg_635_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_635_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_635_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_635_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_635_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_635_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_635_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_635_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_635_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_635_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_635_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_635_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_635_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_635_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_635_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_635_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_635_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_635_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_635_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_635_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_635_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_635_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_635_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_635_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_635_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_635_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_539_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal zext_ln45_fu_545_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_644 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_644_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_644_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_644_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_644_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_644_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_644_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_644_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_644_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_644_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_644_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_644_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_644_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_644_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_644_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_644_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_644_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_644_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_644_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_644_pp0_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_644_pp0_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_644_pp0_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_644_pp0_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_644_pp0_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_644_pp0_iter24_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_644_pp0_iter25_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_reg_644_pp0_iter26_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal preamble_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_real_reg_670 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal preamble_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_imag_reg_676 : STD_LOGIC_VECTOR (31 downto 0);
    signal training_sym_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_t_real_reg_682 : STD_LOGIC_VECTOR (31 downto 0);
    signal training_sym_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_t_imag_reg_690 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_369_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_reg_698 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_373_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_i_reg_703 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_377_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_i_i_reg_708 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_381_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i_i_reg_713 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_385_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_i_i_reg_718 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_389_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_i_i_reg_723 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_357_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_i_i_reg_728 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_361_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_i_i_reg_733 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_365_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_i_i_reg_739 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_393_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal complex_M_real_writ_reg_744 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_397_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal complex_M_imag_writ_reg_749 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln49_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state36_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state37_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state37_io : BOOLEAN;
    signal ap_block_state38_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state38_io : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal i_3_fu_559_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal tmp_last_V_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_773 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_2_fu_585_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state36 : STD_LOGIC;
    signal preamble_M_real_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal preamble_M_real_ce0 : STD_LOGIC;
    signal preamble_M_real_we0 : STD_LOGIC;
    signal preamble_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal preamble_M_imag_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal preamble_M_imag_ce0 : STD_LOGIC;
    signal preamble_M_imag_we0 : STD_LOGIC;
    signal preamble_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal training_sym_M_real_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal training_sym_M_real_ce0 : STD_LOGIC;
    signal training_sym_M_real_we0 : STD_LOGIC;
    signal training_sym_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal training_sym_M_imag_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal training_sym_M_imag_ce0 : STD_LOGIC;
    signal training_sym_M_imag_we0 : STD_LOGIC;
    signal training_sym_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal LS_out_M_real_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal LS_out_M_real_ce0 : STD_LOGIC;
    signal LS_out_M_real_we0 : STD_LOGIC;
    signal LS_out_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal LS_out_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal LS_out_M_imag_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal LS_out_M_imag_ce0 : STD_LOGIC;
    signal LS_out_M_imag_we0 : STD_LOGIC;
    signal LS_out_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal LS_out_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln25_reg_280 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln25_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln25_1_reg_291 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln25_1_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln27_reg_302 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln27_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_313 : STD_LOGIC_VECTOR (5 downto 0);
    signal i3_0_reg_324 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln25_fu_421_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln25_1_fu_439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_fu_457_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln33_fu_495_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_fu_527_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln53_fu_565_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal bitcast_ln9_fu_485_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln9_1_fu_490_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln9_2_fu_517_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln9_3_fu_522_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln9_fu_481_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_405_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln9_1_fu_513_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln162_1_fu_581_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln162_fu_577_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_block_state39 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component LS_estimator_faddhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LS_estimator_fsubibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LS_estimator_fmuljbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LS_estimator_fdivkbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LS_estimator_preabkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    preamble_M_real_U : component LS_estimator_preabkb
    generic map (
        DataWidth => 32,
        AddressRange => 52,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => preamble_M_real_address0,
        ce0 => preamble_M_real_ce0,
        we0 => preamble_M_real_we0,
        d0 => preamble_M_real_d0,
        q0 => preamble_M_real_q0);

    preamble_M_imag_U : component LS_estimator_preabkb
    generic map (
        DataWidth => 32,
        AddressRange => 52,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => preamble_M_imag_address0,
        ce0 => preamble_M_imag_ce0,
        we0 => preamble_M_imag_we0,
        d0 => preamble_M_imag_d0,
        q0 => preamble_M_imag_q0);

    training_sym_M_real_U : component LS_estimator_preabkb
    generic map (
        DataWidth => 32,
        AddressRange => 52,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => training_sym_M_real_address0,
        ce0 => training_sym_M_real_ce0,
        we0 => training_sym_M_real_we0,
        d0 => training_sym_M_real_d0,
        q0 => training_sym_M_real_q0);

    training_sym_M_imag_U : component LS_estimator_preabkb
    generic map (
        DataWidth => 32,
        AddressRange => 52,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => training_sym_M_imag_address0,
        ce0 => training_sym_M_imag_ce0,
        we0 => training_sym_M_imag_we0,
        d0 => training_sym_M_imag_d0,
        q0 => training_sym_M_imag_q0);

    LS_out_M_real_U : component LS_estimator_preabkb
    generic map (
        DataWidth => 32,
        AddressRange => 52,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => LS_out_M_real_address0,
        ce0 => LS_out_M_real_ce0,
        we0 => LS_out_M_real_we0,
        d0 => LS_out_M_real_d0,
        q0 => LS_out_M_real_q0);

    LS_out_M_imag_U : component LS_estimator_preabkb
    generic map (
        DataWidth => 32,
        AddressRange => 52,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => LS_out_M_imag_address0,
        ce0 => LS_out_M_imag_ce0,
        we0 => LS_out_M_imag_we0,
        d0 => LS_out_M_imag_d0,
        q0 => LS_out_M_imag_q0);

    LS_estimator_faddhbi_U1 : component LS_estimator_faddhbi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_i_i_reg_698,
        din1 => tmp_1_i_i_reg_703,
        ce => ap_const_logic_1,
        dout => grp_fu_357_p2);

    LS_estimator_faddhbi_U2 : component LS_estimator_faddhbi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_3_i_i_reg_708,
        din1 => tmp_4_i_i_reg_713,
        ce => ap_const_logic_1,
        dout => grp_fu_361_p2);

    LS_estimator_fsubibs_U3 : component LS_estimator_fsubibs
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_6_i_i_reg_718,
        din1 => tmp_7_i_i_reg_723,
        ce => ap_const_logic_1,
        dout => grp_fu_365_p2);

    LS_estimator_fmuljbC_U4 : component LS_estimator_fmuljbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => p_r_M_real_reg_670,
        din1 => p_t_real_reg_682,
        ce => ap_const_logic_1,
        dout => grp_fu_369_p2);

    LS_estimator_fmuljbC_U5 : component LS_estimator_fmuljbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => p_r_M_imag_reg_676,
        din1 => p_t_imag_reg_690,
        ce => ap_const_logic_1,
        dout => grp_fu_373_p2);

    LS_estimator_fmuljbC_U6 : component LS_estimator_fmuljbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => p_t_real_reg_682,
        din1 => p_t_real_reg_682,
        ce => ap_const_logic_1,
        dout => grp_fu_377_p2);

    LS_estimator_fmuljbC_U7 : component LS_estimator_fmuljbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => p_t_imag_reg_690,
        din1 => p_t_imag_reg_690,
        ce => ap_const_logic_1,
        dout => grp_fu_381_p2);

    LS_estimator_fmuljbC_U8 : component LS_estimator_fmuljbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => p_r_M_imag_reg_676,
        din1 => p_t_real_reg_682,
        ce => ap_const_logic_1,
        dout => grp_fu_385_p2);

    LS_estimator_fmuljbC_U9 : component LS_estimator_fmuljbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => p_r_M_real_reg_670,
        din1 => p_t_imag_reg_690,
        ce => ap_const_logic_1,
        dout => grp_fu_389_p2);

    LS_estimator_fdivkbM_U10 : component LS_estimator_fdivkbM
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_2_i_i_reg_728,
        din1 => tmp_5_i_i_reg_733,
        ce => ap_const_logic_1,
        dout => grp_fu_393_p2);

    LS_estimator_fdivkbM_U11 : component LS_estimator_fdivkbM
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_8_i_i_reg_739,
        din1 => tmp_5_i_i_reg_733,
        ce => ap_const_logic_1,
        dout => grp_fu_397_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((icmp_ln36_fu_501_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln36_fu_501_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state7)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state7);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                elsif ((not(((icmp_ln36_fu_501_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln36_fu_501_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state36) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state36)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state36);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    in_stream_V_data_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream_V_data_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_stream_V_data_0_ack_out = ap_const_logic_1) and (in_stream_V_data_0_vld_out = ap_const_logic_1))) then 
                                        in_stream_V_data_0_sel_rd <= not(in_stream_V_data_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_stream_V_data_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream_V_data_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_stream_V_data_0_ack_in = ap_const_logic_1) and (in_stream_V_data_0_vld_in = ap_const_logic_1))) then 
                                        in_stream_V_data_0_sel_wr <= not(in_stream_V_data_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_stream_V_data_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream_V_data_0_state <= ap_const_lv2_0;
            else
                if ((((in_stream_V_data_0_state = ap_const_lv2_2) and (in_stream_V_data_0_vld_in = ap_const_logic_0)) or ((in_stream_V_data_0_state = ap_const_lv2_3) and (in_stream_V_data_0_vld_in = ap_const_logic_0) and (in_stream_V_data_0_ack_out = ap_const_logic_1)))) then 
                    in_stream_V_data_0_state <= ap_const_lv2_2;
                elsif ((((in_stream_V_data_0_state = ap_const_lv2_1) and (in_stream_V_data_0_ack_out = ap_const_logic_0)) or ((in_stream_V_data_0_state = ap_const_lv2_3) and (in_stream_V_data_0_ack_out = ap_const_logic_0) and (in_stream_V_data_0_vld_in = ap_const_logic_1)))) then 
                    in_stream_V_data_0_state <= ap_const_lv2_1;
                elsif (((not(((in_stream_V_data_0_vld_in = ap_const_logic_0) and (in_stream_V_data_0_ack_out = ap_const_logic_1))) and not(((in_stream_V_data_0_ack_out = ap_const_logic_0) and (in_stream_V_data_0_vld_in = ap_const_logic_1))) and (in_stream_V_data_0_state = ap_const_lv2_3)) or ((in_stream_V_data_0_state = ap_const_lv2_1) and (in_stream_V_data_0_ack_out = ap_const_logic_1)) or ((in_stream_V_data_0_state = ap_const_lv2_2) and (in_stream_V_data_0_vld_in = ap_const_logic_1)))) then 
                    in_stream_V_data_0_state <= ap_const_lv2_3;
                else 
                    in_stream_V_data_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_stream_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_stream_V_last_V_0_state = ap_const_lv2_2) and (in_stream_V_last_V_0_vld_in = ap_const_logic_0)) or ((in_stream_V_last_V_0_state = ap_const_lv2_3) and (in_stream_V_last_V_0_vld_in = ap_const_logic_0) and (in_stream_V_last_V_0_ack_out = ap_const_logic_1)))) then 
                    in_stream_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((in_stream_V_last_V_0_state = ap_const_lv2_1) and (in_stream_V_last_V_0_ack_out = ap_const_logic_0)) or ((in_stream_V_last_V_0_state = ap_const_lv2_3) and (in_stream_V_last_V_0_ack_out = ap_const_logic_0) and (in_stream_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    in_stream_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_stream_V_last_V_0_vld_in = ap_const_logic_0) and (in_stream_V_last_V_0_ack_out = ap_const_logic_1))) and not(((in_stream_V_last_V_0_ack_out = ap_const_logic_0) and (in_stream_V_last_V_0_vld_in = ap_const_logic_1))) and (in_stream_V_last_V_0_state = ap_const_lv2_3)) or ((in_stream_V_last_V_0_state = ap_const_lv2_1) and (in_stream_V_last_V_0_ack_out = ap_const_logic_1)) or ((in_stream_V_last_V_0_state = ap_const_lv2_2) and (in_stream_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    in_stream_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    in_stream_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_data_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_data_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_V_data_1_ack_out = ap_const_logic_1) and (out_stream_V_data_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_V_data_1_sel_rd <= not(out_stream_V_data_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_data_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_data_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_stream_V_data_1_ack_in = ap_const_logic_1) and (out_stream_V_data_1_vld_in = ap_const_logic_1))) then 
                                        out_stream_V_data_1_sel_wr <= not(out_stream_V_data_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_data_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_data_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_V_data_1_state = ap_const_lv2_2) and (out_stream_V_data_1_vld_in = ap_const_logic_0)) or ((out_stream_V_data_1_state = ap_const_lv2_3) and (out_stream_V_data_1_vld_in = ap_const_logic_0) and (out_stream_V_data_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_V_data_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_V_data_1_state = ap_const_lv2_1) and (out_stream_TREADY = ap_const_logic_0)) or ((out_stream_V_data_1_state = ap_const_lv2_3) and (out_stream_TREADY = ap_const_logic_0) and (out_stream_V_data_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_data_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_V_data_1_vld_in = ap_const_logic_0) and (out_stream_V_data_1_ack_out = ap_const_logic_1))) and not(((out_stream_TREADY = ap_const_logic_0) and (out_stream_V_data_1_vld_in = ap_const_logic_1))) and (out_stream_V_data_1_state = ap_const_lv2_3)) or ((out_stream_V_data_1_state = ap_const_lv2_1) and (out_stream_V_data_1_ack_out = ap_const_logic_1)) or ((out_stream_V_data_1_state = ap_const_lv2_2) and (out_stream_V_data_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_data_1_state <= ap_const_lv2_3;
                else 
                    out_stream_V_data_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_V_last_V_1_ack_out = ap_const_logic_1) and (out_stream_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_V_last_V_1_sel_rd <= not(out_stream_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_stream_V_last_V_1_ack_in = ap_const_logic_1) and (out_stream_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        out_stream_V_last_V_1_sel_wr <= not(out_stream_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_V_last_V_1_state = ap_const_lv2_2) and (out_stream_V_last_V_1_vld_in = ap_const_logic_0)) or ((out_stream_V_last_V_1_state = ap_const_lv2_3) and (out_stream_V_last_V_1_vld_in = ap_const_logic_0) and (out_stream_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_V_last_V_1_state = ap_const_lv2_1) and (out_stream_TREADY = ap_const_logic_0)) or ((out_stream_V_last_V_1_state = ap_const_lv2_3) and (out_stream_TREADY = ap_const_logic_0) and (out_stream_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_V_last_V_1_vld_in = ap_const_logic_0) and (out_stream_V_last_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_TREADY = ap_const_logic_0) and (out_stream_V_last_V_1_vld_in = ap_const_logic_1))) and (out_stream_V_last_V_1_state = ap_const_lv2_3)) or ((out_stream_V_last_V_1_state = ap_const_lv2_1) and (out_stream_V_last_V_1_ack_out = ap_const_logic_1)) or ((out_stream_V_last_V_1_state = ap_const_lv2_2) and (out_stream_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i3_0_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln30_fu_469_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln30_fu_469_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i3_0_reg_324 <= ap_const_lv6_0;
            elsif ((not(((icmp_ln36_fu_501_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln36_fu_501_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i3_0_reg_324 <= i_1_fu_507_p2;
            end if; 
        end if;
    end process;

    i5_0_reg_335_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln36_fu_501_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln36_fu_501_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i5_0_reg_335 <= ap_const_lv6_0;
            elsif (((icmp_ln43_fu_533_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i5_0_reg_335 <= i_2_fu_539_p2;
            end if; 
        end if;
    end process;

    i6_0_reg_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                i6_0_reg_346 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln49_fu_553_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                i6_0_reg_346 <= i_3_fu_559_p2;
            end if; 
        end if;
    end process;

    i_0_reg_313_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_fu_463_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_0_reg_313 <= ap_const_lv6_0;
            elsif ((not(((icmp_ln30_fu_469_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln30_fu_469_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_0_reg_313 <= i_fu_475_p2;
            end if; 
        end if;
    end process;

    phi_ln25_1_reg_291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_fu_427_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln25_1_reg_291 <= ap_const_lv6_0;
            elsif (((icmp_ln25_1_fu_445_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_ln25_1_reg_291 <= add_ln25_1_fu_433_p2;
            end if; 
        end if;
    end process;

    phi_ln25_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_fu_427_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln25_reg_280 <= add_ln25_fu_415_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                phi_ln25_reg_280 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    phi_ln27_reg_302_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_1_fu_445_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_ln27_reg_302 <= ap_const_lv6_0;
            elsif (((icmp_ln27_fu_463_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_ln27_reg_302 <= add_ln27_fu_451_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln43_reg_635_pp0_iter25_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                complex_M_imag_writ_reg_749 <= grp_fu_397_p2;
                complex_M_real_writ_reg_744 <= grp_fu_393_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln43_reg_635 <= icmp_ln43_fu_533_p2;
                icmp_ln43_reg_635_pp0_iter1_reg <= icmp_ln43_reg_635;
                    zext_ln45_reg_644_pp0_iter1_reg(5 downto 0) <= zext_ln45_reg_644(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln43_reg_635_pp0_iter10_reg <= icmp_ln43_reg_635_pp0_iter9_reg;
                icmp_ln43_reg_635_pp0_iter11_reg <= icmp_ln43_reg_635_pp0_iter10_reg;
                icmp_ln43_reg_635_pp0_iter12_reg <= icmp_ln43_reg_635_pp0_iter11_reg;
                icmp_ln43_reg_635_pp0_iter13_reg <= icmp_ln43_reg_635_pp0_iter12_reg;
                icmp_ln43_reg_635_pp0_iter14_reg <= icmp_ln43_reg_635_pp0_iter13_reg;
                icmp_ln43_reg_635_pp0_iter15_reg <= icmp_ln43_reg_635_pp0_iter14_reg;
                icmp_ln43_reg_635_pp0_iter16_reg <= icmp_ln43_reg_635_pp0_iter15_reg;
                icmp_ln43_reg_635_pp0_iter17_reg <= icmp_ln43_reg_635_pp0_iter16_reg;
                icmp_ln43_reg_635_pp0_iter18_reg <= icmp_ln43_reg_635_pp0_iter17_reg;
                icmp_ln43_reg_635_pp0_iter19_reg <= icmp_ln43_reg_635_pp0_iter18_reg;
                icmp_ln43_reg_635_pp0_iter20_reg <= icmp_ln43_reg_635_pp0_iter19_reg;
                icmp_ln43_reg_635_pp0_iter21_reg <= icmp_ln43_reg_635_pp0_iter20_reg;
                icmp_ln43_reg_635_pp0_iter22_reg <= icmp_ln43_reg_635_pp0_iter21_reg;
                icmp_ln43_reg_635_pp0_iter23_reg <= icmp_ln43_reg_635_pp0_iter22_reg;
                icmp_ln43_reg_635_pp0_iter24_reg <= icmp_ln43_reg_635_pp0_iter23_reg;
                icmp_ln43_reg_635_pp0_iter25_reg <= icmp_ln43_reg_635_pp0_iter24_reg;
                icmp_ln43_reg_635_pp0_iter26_reg <= icmp_ln43_reg_635_pp0_iter25_reg;
                icmp_ln43_reg_635_pp0_iter2_reg <= icmp_ln43_reg_635_pp0_iter1_reg;
                icmp_ln43_reg_635_pp0_iter3_reg <= icmp_ln43_reg_635_pp0_iter2_reg;
                icmp_ln43_reg_635_pp0_iter4_reg <= icmp_ln43_reg_635_pp0_iter3_reg;
                icmp_ln43_reg_635_pp0_iter5_reg <= icmp_ln43_reg_635_pp0_iter4_reg;
                icmp_ln43_reg_635_pp0_iter6_reg <= icmp_ln43_reg_635_pp0_iter5_reg;
                icmp_ln43_reg_635_pp0_iter7_reg <= icmp_ln43_reg_635_pp0_iter6_reg;
                icmp_ln43_reg_635_pp0_iter8_reg <= icmp_ln43_reg_635_pp0_iter7_reg;
                icmp_ln43_reg_635_pp0_iter9_reg <= icmp_ln43_reg_635_pp0_iter8_reg;
                    zext_ln45_reg_644_pp0_iter10_reg(5 downto 0) <= zext_ln45_reg_644_pp0_iter9_reg(5 downto 0);
                    zext_ln45_reg_644_pp0_iter11_reg(5 downto 0) <= zext_ln45_reg_644_pp0_iter10_reg(5 downto 0);
                    zext_ln45_reg_644_pp0_iter12_reg(5 downto 0) <= zext_ln45_reg_644_pp0_iter11_reg(5 downto 0);
                    zext_ln45_reg_644_pp0_iter13_reg(5 downto 0) <= zext_ln45_reg_644_pp0_iter12_reg(5 downto 0);
                    zext_ln45_reg_644_pp0_iter14_reg(5 downto 0) <= zext_ln45_reg_644_pp0_iter13_reg(5 downto 0);
                    zext_ln45_reg_644_pp0_iter15_reg(5 downto 0) <= zext_ln45_reg_644_pp0_iter14_reg(5 downto 0);
                    zext_ln45_reg_644_pp0_iter16_reg(5 downto 0) <= zext_ln45_reg_644_pp0_iter15_reg(5 downto 0);
                    zext_ln45_reg_644_pp0_iter17_reg(5 downto 0) <= zext_ln45_reg_644_pp0_iter16_reg(5 downto 0);
                    zext_ln45_reg_644_pp0_iter18_reg(5 downto 0) <= zext_ln45_reg_644_pp0_iter17_reg(5 downto 0);
                    zext_ln45_reg_644_pp0_iter19_reg(5 downto 0) <= zext_ln45_reg_644_pp0_iter18_reg(5 downto 0);
                    zext_ln45_reg_644_pp0_iter20_reg(5 downto 0) <= zext_ln45_reg_644_pp0_iter19_reg(5 downto 0);
                    zext_ln45_reg_644_pp0_iter21_reg(5 downto 0) <= zext_ln45_reg_644_pp0_iter20_reg(5 downto 0);
                    zext_ln45_reg_644_pp0_iter22_reg(5 downto 0) <= zext_ln45_reg_644_pp0_iter21_reg(5 downto 0);
                    zext_ln45_reg_644_pp0_iter23_reg(5 downto 0) <= zext_ln45_reg_644_pp0_iter22_reg(5 downto 0);
                    zext_ln45_reg_644_pp0_iter24_reg(5 downto 0) <= zext_ln45_reg_644_pp0_iter23_reg(5 downto 0);
                    zext_ln45_reg_644_pp0_iter25_reg(5 downto 0) <= zext_ln45_reg_644_pp0_iter24_reg(5 downto 0);
                    zext_ln45_reg_644_pp0_iter26_reg(5 downto 0) <= zext_ln45_reg_644_pp0_iter25_reg(5 downto 0);
                    zext_ln45_reg_644_pp0_iter2_reg(5 downto 0) <= zext_ln45_reg_644_pp0_iter1_reg(5 downto 0);
                    zext_ln45_reg_644_pp0_iter3_reg(5 downto 0) <= zext_ln45_reg_644_pp0_iter2_reg(5 downto 0);
                    zext_ln45_reg_644_pp0_iter4_reg(5 downto 0) <= zext_ln45_reg_644_pp0_iter3_reg(5 downto 0);
                    zext_ln45_reg_644_pp0_iter5_reg(5 downto 0) <= zext_ln45_reg_644_pp0_iter4_reg(5 downto 0);
                    zext_ln45_reg_644_pp0_iter6_reg(5 downto 0) <= zext_ln45_reg_644_pp0_iter5_reg(5 downto 0);
                    zext_ln45_reg_644_pp0_iter7_reg(5 downto 0) <= zext_ln45_reg_644_pp0_iter6_reg(5 downto 0);
                    zext_ln45_reg_644_pp0_iter8_reg(5 downto 0) <= zext_ln45_reg_644_pp0_iter7_reg(5 downto 0);
                    zext_ln45_reg_644_pp0_iter9_reg(5 downto 0) <= zext_ln45_reg_644_pp0_iter8_reg(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln49_reg_754 <= icmp_ln49_fu_553_p2;
                icmp_ln49_reg_754_pp1_iter1_reg <= icmp_ln49_reg_754;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_stream_V_data_0_load_A = ap_const_logic_1)) then
                in_stream_V_data_0_payload_A <= in_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_stream_V_data_0_load_B = ap_const_logic_1)) then
                in_stream_V_data_0_payload_B <= in_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_V_data_1_load_A = ap_const_logic_1)) then
                out_stream_V_data_1_payload_A <= tmp_data_2_fu_585_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_V_data_1_load_B = ap_const_logic_1)) then
                out_stream_V_data_1_payload_B <= tmp_data_2_fu_585_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_V_last_V_1_load_A = ap_const_logic_1)) then
                out_stream_V_last_V_1_payload_A <= tmp_last_V_reg_773;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_V_last_V_1_load_B = ap_const_logic_1)) then
                out_stream_V_last_V_1_payload_B <= tmp_last_V_reg_773;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln43_reg_635 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_r_M_imag_reg_676 <= preamble_M_imag_q0;
                p_r_M_real_reg_670 <= preamble_M_real_q0;
                p_t_imag_reg_690 <= training_sym_M_imag_q0;
                p_t_real_reg_682 <= training_sym_M_real_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln43_reg_635_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_1_i_i_reg_703 <= grp_fu_373_p2;
                tmp_3_i_i_reg_708 <= grp_fu_377_p2;
                tmp_4_i_i_reg_713 <= grp_fu_381_p2;
                tmp_6_i_i_reg_718 <= grp_fu_385_p2;
                tmp_7_i_i_reg_723 <= grp_fu_389_p2;
                tmp_i_i_reg_698 <= grp_fu_369_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln43_reg_635_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_2_i_i_reg_728 <= grp_fu_357_p2;
                tmp_5_i_i_reg_733 <= grp_fu_361_p2;
                tmp_8_i_i_reg_739 <= grp_fu_365_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln49_fu_553_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                tmp_last_V_reg_773 <= tmp_last_V_fu_571_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln43_fu_533_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln45_reg_644(5 downto 0) <= zext_ln45_fu_545_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln45_reg_644(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln45_reg_644_pp0_iter1_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln45_reg_644_pp0_iter2_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln45_reg_644_pp0_iter3_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln45_reg_644_pp0_iter4_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln45_reg_644_pp0_iter5_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln45_reg_644_pp0_iter6_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln45_reg_644_pp0_iter7_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln45_reg_644_pp0_iter8_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln45_reg_644_pp0_iter9_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln45_reg_644_pp0_iter10_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln45_reg_644_pp0_iter11_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln45_reg_644_pp0_iter12_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln45_reg_644_pp0_iter13_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln45_reg_644_pp0_iter14_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln45_reg_644_pp0_iter15_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln45_reg_644_pp0_iter16_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln45_reg_644_pp0_iter17_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln45_reg_644_pp0_iter18_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln45_reg_644_pp0_iter19_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln45_reg_644_pp0_iter20_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln45_reg_644_pp0_iter21_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln45_reg_644_pp0_iter22_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln45_reg_644_pp0_iter23_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln45_reg_644_pp0_iter24_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln45_reg_644_pp0_iter25_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln45_reg_644_pp0_iter26_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (in_stream_V_data_0_vld_out, out_stream_TREADY, out_stream_V_data_1_state, out_stream_V_last_V_1_state, ap_CS_fsm, ap_CS_fsm_state5, icmp_ln30_fu_469_p2, ap_CS_fsm_state6, icmp_ln36_fu_501_p2, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln43_fu_533_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, icmp_ln49_fu_553_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_block_pp1_stage0_subdone, icmp_ln25_fu_427_p2, icmp_ln25_1_fu_445_p2, icmp_ln27_fu_463_p2, ap_CS_fsm_state39)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln25_fu_427_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln25_1_fu_445_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln27_fu_463_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((icmp_ln30_fu_469_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln30_fu_469_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif ((not(((icmp_ln30_fu_469_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln30_fu_469_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if ((not(((icmp_ln36_fu_501_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln36_fu_501_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((icmp_ln36_fu_501_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln36_fu_501_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln43_fu_533_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln43_fu_533_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln49_fu_553_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln49_fu_553_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state39 => 
                if ((not(((out_stream_V_last_V_1_state = ap_const_lv2_1) or (out_stream_V_data_1_state = ap_const_lv2_1) or ((out_stream_V_last_V_1_state = ap_const_lv2_3) and (out_stream_TREADY = ap_const_logic_0)) or ((out_stream_V_data_1_state = ap_const_lv2_3) and (out_stream_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;

    LS_out_M_imag_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_CS_fsm_state4, zext_ln45_reg_644_pp0_iter26_reg, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter27, zext_ln27_fu_457_p1, ap_block_pp0_stage0, zext_ln53_fu_565_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            LS_out_M_imag_address0 <= zext_ln53_fu_565_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            LS_out_M_imag_address0 <= zext_ln45_reg_644_pp0_iter26_reg(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            LS_out_M_imag_address0 <= zext_ln27_fu_457_p1(6 - 1 downto 0);
        else 
            LS_out_M_imag_address0 <= "XXXXXX";
        end if; 
    end process;


    LS_out_M_imag_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_state4, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            LS_out_M_imag_ce0 <= ap_const_logic_1;
        else 
            LS_out_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    LS_out_M_imag_d0_assign_proc : process(ap_CS_fsm_state4, complex_M_imag_writ_reg_749, ap_enable_reg_pp0_iter27, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            LS_out_M_imag_d0 <= complex_M_imag_writ_reg_749;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            LS_out_M_imag_d0 <= ap_const_lv32_0;
        else 
            LS_out_M_imag_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    LS_out_M_imag_we0_assign_proc : process(ap_CS_fsm_state4, ap_block_pp0_stage0_11001, icmp_ln43_reg_635_pp0_iter26_reg, ap_enable_reg_pp0_iter27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln43_reg_635_pp0_iter26_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1)))) then 
            LS_out_M_imag_we0 <= ap_const_logic_1;
        else 
            LS_out_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    LS_out_M_real_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_CS_fsm_state4, zext_ln45_reg_644_pp0_iter26_reg, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter27, zext_ln27_fu_457_p1, ap_block_pp0_stage0, zext_ln53_fu_565_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            LS_out_M_real_address0 <= zext_ln53_fu_565_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            LS_out_M_real_address0 <= zext_ln45_reg_644_pp0_iter26_reg(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            LS_out_M_real_address0 <= zext_ln27_fu_457_p1(6 - 1 downto 0);
        else 
            LS_out_M_real_address0 <= "XXXXXX";
        end if; 
    end process;


    LS_out_M_real_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_state4, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            LS_out_M_real_ce0 <= ap_const_logic_1;
        else 
            LS_out_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    LS_out_M_real_d0_assign_proc : process(ap_CS_fsm_state4, complex_M_real_writ_reg_744, ap_enable_reg_pp0_iter27, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            LS_out_M_real_d0 <= complex_M_real_writ_reg_744;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            LS_out_M_real_d0 <= ap_const_lv32_0;
        else 
            LS_out_M_real_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    LS_out_M_real_we0_assign_proc : process(ap_CS_fsm_state4, ap_block_pp0_stage0_11001, icmp_ln43_reg_635_pp0_iter26_reg, ap_enable_reg_pp0_iter27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln43_reg_635_pp0_iter26_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1)))) then 
            LS_out_M_real_we0 <= ap_const_logic_1;
        else 
            LS_out_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln25_1_fu_433_p2 <= std_logic_vector(unsigned(phi_ln25_1_reg_291) + unsigned(ap_const_lv6_1));
    add_ln25_fu_415_p2 <= std_logic_vector(unsigned(phi_ln25_reg_280) + unsigned(ap_const_lv6_1));
    add_ln27_fu_451_p2 <= std_logic_vector(unsigned(phi_ln27_reg_302) + unsigned(ap_const_lv6_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state35 <= ap_CS_fsm(7);
    ap_CS_fsm_state39 <= ap_CS_fsm(9);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_block_state37_io, ap_block_state38_io)
    begin
                ap_block_pp1_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state38_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state37_io) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_block_state37_io, ap_block_state38_io)
    begin
                ap_block_pp1_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state38_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state37_io) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state37_io_assign_proc : process(out_stream_V_data_1_ack_in, icmp_ln49_reg_754)
    begin
                ap_block_state37_io <= ((icmp_ln49_reg_754 = ap_const_lv1_0) and (out_stream_V_data_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state37_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state38_io_assign_proc : process(out_stream_V_data_1_ack_in, icmp_ln49_reg_754_pp1_iter1_reg)
    begin
                ap_block_state38_io <= ((icmp_ln49_reg_754_pp1_iter1_reg = ap_const_lv1_0) and (out_stream_V_data_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state38_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state39_assign_proc : process(out_stream_TREADY, out_stream_V_data_1_state, out_stream_V_last_V_1_state)
    begin
                ap_block_state39 <= ((out_stream_V_last_V_1_state = ap_const_lv2_1) or (out_stream_V_data_1_state = ap_const_lv2_1) or ((out_stream_V_last_V_1_state = ap_const_lv2_3) and (out_stream_TREADY = ap_const_logic_0)) or ((out_stream_V_data_1_state = ap_const_lv2_3) and (out_stream_TREADY = ap_const_logic_0)));
    end process;


    ap_block_state5_assign_proc : process(in_stream_V_data_0_vld_out, icmp_ln30_fu_469_p2)
    begin
                ap_block_state5 <= ((icmp_ln30_fu_469_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state6_assign_proc : process(in_stream_V_data_0_vld_out, icmp_ln36_fu_501_p2)
    begin
                ap_block_state6 <= ((icmp_ln36_fu_501_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0));
    end process;

        ap_block_state7_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state7_assign_proc : process(icmp_ln43_fu_533_p2)
    begin
        if ((icmp_ln43_fu_533_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state36_assign_proc : process(icmp_ln49_fu_553_p2)
    begin
        if ((icmp_ln49_fu_553_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state36 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state36 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27)
    begin
        if (((ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln162_1_fu_581_p1 <= LS_out_M_imag_q0;
    bitcast_ln162_fu_577_p1 <= LS_out_M_real_q0;
    bitcast_ln9_1_fu_490_p1 <= grp_fu_405_p4;
    bitcast_ln9_2_fu_517_p1 <= trunc_ln9_1_fu_513_p1;
    bitcast_ln9_3_fu_522_p1 <= grp_fu_405_p4;
    bitcast_ln9_fu_485_p1 <= trunc_ln9_fu_481_p1;
    grp_fu_405_p4 <= in_stream_V_data_0_data_out(63 downto 32);
    i_1_fu_507_p2 <= std_logic_vector(unsigned(i3_0_reg_324) + unsigned(ap_const_lv6_1));
    i_2_fu_539_p2 <= std_logic_vector(unsigned(i5_0_reg_335) + unsigned(ap_const_lv6_1));
    i_3_fu_559_p2 <= std_logic_vector(unsigned(i6_0_reg_346) + unsigned(ap_const_lv6_1));
    i_fu_475_p2 <= std_logic_vector(unsigned(i_0_reg_313) + unsigned(ap_const_lv6_1));
    icmp_ln25_1_fu_445_p2 <= "1" when (phi_ln25_1_reg_291 = ap_const_lv6_33) else "0";
    icmp_ln25_fu_427_p2 <= "1" when (phi_ln25_reg_280 = ap_const_lv6_33) else "0";
    icmp_ln27_fu_463_p2 <= "1" when (phi_ln27_reg_302 = ap_const_lv6_33) else "0";
    icmp_ln30_fu_469_p2 <= "1" when (i_0_reg_313 = ap_const_lv6_34) else "0";
    icmp_ln36_fu_501_p2 <= "1" when (i3_0_reg_324 = ap_const_lv6_34) else "0";
    icmp_ln43_fu_533_p2 <= "1" when (i5_0_reg_335 = ap_const_lv6_34) else "0";
    icmp_ln49_fu_553_p2 <= "1" when (i6_0_reg_346 = ap_const_lv6_34) else "0";

    in_stream_TDATA_blk_n_assign_proc : process(in_stream_V_data_0_state, ap_CS_fsm_state5, icmp_ln30_fu_469_p2, ap_CS_fsm_state6, icmp_ln36_fu_501_p2)
    begin
        if ((((icmp_ln36_fu_501_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln30_fu_469_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            in_stream_TDATA_blk_n <= in_stream_V_data_0_state(0);
        else 
            in_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_stream_TREADY <= in_stream_V_last_V_0_state(1);
    in_stream_V_data_0_ack_in <= in_stream_V_data_0_state(1);

    in_stream_V_data_0_ack_out_assign_proc : process(in_stream_V_data_0_vld_out, ap_CS_fsm_state5, icmp_ln30_fu_469_p2, ap_CS_fsm_state6, icmp_ln36_fu_501_p2)
    begin
        if (((not(((icmp_ln36_fu_501_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln36_fu_501_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((icmp_ln30_fu_469_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln30_fu_469_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            in_stream_V_data_0_ack_out <= ap_const_logic_1;
        else 
            in_stream_V_data_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_stream_V_data_0_data_out_assign_proc : process(in_stream_V_data_0_payload_A, in_stream_V_data_0_payload_B, in_stream_V_data_0_sel)
    begin
        if ((in_stream_V_data_0_sel = ap_const_logic_1)) then 
            in_stream_V_data_0_data_out <= in_stream_V_data_0_payload_B;
        else 
            in_stream_V_data_0_data_out <= in_stream_V_data_0_payload_A;
        end if; 
    end process;

    in_stream_V_data_0_load_A <= (in_stream_V_data_0_state_cmp_full and not(in_stream_V_data_0_sel_wr));
    in_stream_V_data_0_load_B <= (in_stream_V_data_0_state_cmp_full and in_stream_V_data_0_sel_wr);
    in_stream_V_data_0_sel <= in_stream_V_data_0_sel_rd;
    in_stream_V_data_0_state_cmp_full <= '0' when (in_stream_V_data_0_state = ap_const_lv2_1) else '1';
    in_stream_V_data_0_vld_in <= in_stream_TVALID;
    in_stream_V_data_0_vld_out <= in_stream_V_data_0_state(0);

    in_stream_V_last_V_0_ack_out_assign_proc : process(in_stream_V_data_0_vld_out, ap_CS_fsm_state5, icmp_ln30_fu_469_p2, ap_CS_fsm_state6, icmp_ln36_fu_501_p2)
    begin
        if (((not(((icmp_ln36_fu_501_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln36_fu_501_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((icmp_ln30_fu_469_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln30_fu_469_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            in_stream_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            in_stream_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    in_stream_V_last_V_0_vld_in <= in_stream_TVALID;
    out_stream_TDATA <= out_stream_V_data_1_data_out;

    out_stream_TDATA_blk_n_assign_proc : process(out_stream_V_data_1_state, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln49_reg_754, ap_enable_reg_pp1_iter2, icmp_ln49_reg_754_pp1_iter1_reg)
    begin
        if ((((icmp_ln49_reg_754_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((icmp_ln49_reg_754 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            out_stream_TDATA_blk_n <= out_stream_V_data_1_state(1);
        else 
            out_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_TLAST <= out_stream_V_last_V_1_data_out;
    out_stream_TVALID <= out_stream_V_last_V_1_state(0);
    out_stream_V_data_1_ack_in <= out_stream_V_data_1_state(1);
    out_stream_V_data_1_ack_out <= out_stream_TREADY;

    out_stream_V_data_1_data_out_assign_proc : process(out_stream_V_data_1_payload_A, out_stream_V_data_1_payload_B, out_stream_V_data_1_sel)
    begin
        if ((out_stream_V_data_1_sel = ap_const_logic_1)) then 
            out_stream_V_data_1_data_out <= out_stream_V_data_1_payload_B;
        else 
            out_stream_V_data_1_data_out <= out_stream_V_data_1_payload_A;
        end if; 
    end process;

    out_stream_V_data_1_load_A <= (out_stream_V_data_1_state_cmp_full and not(out_stream_V_data_1_sel_wr));
    out_stream_V_data_1_load_B <= (out_stream_V_data_1_state_cmp_full and out_stream_V_data_1_sel_wr);
    out_stream_V_data_1_sel <= out_stream_V_data_1_sel_rd;
    out_stream_V_data_1_state_cmp_full <= '0' when (out_stream_V_data_1_state = ap_const_lv2_1) else '1';

    out_stream_V_data_1_vld_in_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln49_reg_754, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln49_reg_754 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            out_stream_V_data_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_V_data_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_V_data_1_vld_out <= out_stream_V_data_1_state(0);
    out_stream_V_last_V_1_ack_in <= out_stream_V_last_V_1_state(1);
    out_stream_V_last_V_1_ack_out <= out_stream_TREADY;

    out_stream_V_last_V_1_data_out_assign_proc : process(out_stream_V_last_V_1_payload_A, out_stream_V_last_V_1_payload_B, out_stream_V_last_V_1_sel)
    begin
        if ((out_stream_V_last_V_1_sel = ap_const_logic_1)) then 
            out_stream_V_last_V_1_data_out <= out_stream_V_last_V_1_payload_B;
        else 
            out_stream_V_last_V_1_data_out <= out_stream_V_last_V_1_payload_A;
        end if; 
    end process;

    out_stream_V_last_V_1_load_A <= (out_stream_V_last_V_1_state_cmp_full and not(out_stream_V_last_V_1_sel_wr));
    out_stream_V_last_V_1_load_B <= (out_stream_V_last_V_1_state_cmp_full and out_stream_V_last_V_1_sel_wr);
    out_stream_V_last_V_1_sel <= out_stream_V_last_V_1_sel_rd;
    out_stream_V_last_V_1_state_cmp_full <= '0' when (out_stream_V_last_V_1_state = ap_const_lv2_1) else '1';

    out_stream_V_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln49_reg_754, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln49_reg_754 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            out_stream_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_V_last_V_1_vld_out <= out_stream_V_last_V_1_state(0);

    preamble_M_imag_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln45_fu_545_p1, zext_ln25_fu_421_p1, zext_ln33_fu_495_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            preamble_M_imag_address0 <= zext_ln45_fu_545_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            preamble_M_imag_address0 <= zext_ln33_fu_495_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            preamble_M_imag_address0 <= zext_ln25_fu_421_p1(6 - 1 downto 0);
        else 
            preamble_M_imag_address0 <= "XXXXXX";
        end if; 
    end process;


    preamble_M_imag_ce0_assign_proc : process(in_stream_V_data_0_vld_out, ap_CS_fsm_state5, icmp_ln30_fu_469_p2, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((icmp_ln30_fu_469_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            preamble_M_imag_ce0 <= ap_const_logic_1;
        else 
            preamble_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    preamble_M_imag_d0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state2, bitcast_ln9_1_fu_490_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            preamble_M_imag_d0 <= bitcast_ln9_1_fu_490_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            preamble_M_imag_d0 <= ap_const_lv32_0;
        else 
            preamble_M_imag_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    preamble_M_imag_we0_assign_proc : process(in_stream_V_data_0_vld_out, ap_CS_fsm_state5, icmp_ln30_fu_469_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((icmp_ln30_fu_469_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln30_fu_469_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            preamble_M_imag_we0 <= ap_const_logic_1;
        else 
            preamble_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    preamble_M_real_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln45_fu_545_p1, zext_ln25_fu_421_p1, zext_ln33_fu_495_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            preamble_M_real_address0 <= zext_ln45_fu_545_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            preamble_M_real_address0 <= zext_ln33_fu_495_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            preamble_M_real_address0 <= zext_ln25_fu_421_p1(6 - 1 downto 0);
        else 
            preamble_M_real_address0 <= "XXXXXX";
        end if; 
    end process;


    preamble_M_real_ce0_assign_proc : process(in_stream_V_data_0_vld_out, ap_CS_fsm_state5, icmp_ln30_fu_469_p2, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((icmp_ln30_fu_469_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            preamble_M_real_ce0 <= ap_const_logic_1;
        else 
            preamble_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    preamble_M_real_d0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state2, bitcast_ln9_fu_485_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            preamble_M_real_d0 <= bitcast_ln9_fu_485_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            preamble_M_real_d0 <= ap_const_lv32_0;
        else 
            preamble_M_real_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    preamble_M_real_we0_assign_proc : process(in_stream_V_data_0_vld_out, ap_CS_fsm_state5, icmp_ln30_fu_469_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((icmp_ln30_fu_469_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln30_fu_469_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            preamble_M_real_we0 <= ap_const_logic_1;
        else 
            preamble_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_data_2_fu_585_p3 <= (bitcast_ln162_1_fu_581_p1 & bitcast_ln162_fu_577_p1);
    tmp_last_V_fu_571_p2 <= "1" when (i6_0_reg_346 = ap_const_lv6_33) else "0";

    training_sym_M_imag_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln45_fu_545_p1, zext_ln25_1_fu_439_p1, zext_ln39_fu_527_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            training_sym_M_imag_address0 <= zext_ln45_fu_545_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            training_sym_M_imag_address0 <= zext_ln39_fu_527_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            training_sym_M_imag_address0 <= zext_ln25_1_fu_439_p1(6 - 1 downto 0);
        else 
            training_sym_M_imag_address0 <= "XXXXXX";
        end if; 
    end process;


    training_sym_M_imag_ce0_assign_proc : process(in_stream_V_data_0_vld_out, ap_CS_fsm_state6, icmp_ln36_fu_501_p2, ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((icmp_ln36_fu_501_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            training_sym_M_imag_ce0 <= ap_const_logic_1;
        else 
            training_sym_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    training_sym_M_imag_d0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state3, bitcast_ln9_3_fu_522_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            training_sym_M_imag_d0 <= bitcast_ln9_3_fu_522_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            training_sym_M_imag_d0 <= ap_const_lv32_0;
        else 
            training_sym_M_imag_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    training_sym_M_imag_we0_assign_proc : process(in_stream_V_data_0_vld_out, ap_CS_fsm_state6, icmp_ln36_fu_501_p2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (not(((icmp_ln36_fu_501_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln36_fu_501_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            training_sym_M_imag_we0 <= ap_const_logic_1;
        else 
            training_sym_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    training_sym_M_real_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln45_fu_545_p1, zext_ln25_1_fu_439_p1, zext_ln39_fu_527_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            training_sym_M_real_address0 <= zext_ln45_fu_545_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            training_sym_M_real_address0 <= zext_ln39_fu_527_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            training_sym_M_real_address0 <= zext_ln25_1_fu_439_p1(6 - 1 downto 0);
        else 
            training_sym_M_real_address0 <= "XXXXXX";
        end if; 
    end process;


    training_sym_M_real_ce0_assign_proc : process(in_stream_V_data_0_vld_out, ap_CS_fsm_state6, icmp_ln36_fu_501_p2, ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((icmp_ln36_fu_501_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            training_sym_M_real_ce0 <= ap_const_logic_1;
        else 
            training_sym_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    training_sym_M_real_d0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state3, bitcast_ln9_2_fu_517_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            training_sym_M_real_d0 <= bitcast_ln9_2_fu_517_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            training_sym_M_real_d0 <= ap_const_lv32_0;
        else 
            training_sym_M_real_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    training_sym_M_real_we0_assign_proc : process(in_stream_V_data_0_vld_out, ap_CS_fsm_state6, icmp_ln36_fu_501_p2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (not(((icmp_ln36_fu_501_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln36_fu_501_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            training_sym_M_real_we0 <= ap_const_logic_1;
        else 
            training_sym_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln9_1_fu_513_p1 <= in_stream_V_data_0_data_out(32 - 1 downto 0);
    trunc_ln9_fu_481_p1 <= in_stream_V_data_0_data_out(32 - 1 downto 0);
    zext_ln25_1_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln25_1_reg_291),64));
    zext_ln25_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln25_reg_280),64));
    zext_ln27_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln27_reg_302),64));
    zext_ln33_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_313),64));
    zext_ln39_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_0_reg_324),64));
    zext_ln45_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i5_0_reg_335),64));
    zext_ln53_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i6_0_reg_346),64));
end behav;
