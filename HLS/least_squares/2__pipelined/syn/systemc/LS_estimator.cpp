// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "LS_estimator.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic LS_estimator::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic LS_estimator::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<10> LS_estimator::ap_ST_fsm_state1 = "1";
const sc_lv<10> LS_estimator::ap_ST_fsm_state2 = "10";
const sc_lv<10> LS_estimator::ap_ST_fsm_state3 = "100";
const sc_lv<10> LS_estimator::ap_ST_fsm_state4 = "1000";
const sc_lv<10> LS_estimator::ap_ST_fsm_state5 = "10000";
const sc_lv<10> LS_estimator::ap_ST_fsm_state6 = "100000";
const sc_lv<10> LS_estimator::ap_ST_fsm_pp0_stage0 = "1000000";
const sc_lv<10> LS_estimator::ap_ST_fsm_state35 = "10000000";
const sc_lv<10> LS_estimator::ap_ST_fsm_pp1_stage0 = "100000000";
const sc_lv<10> LS_estimator::ap_ST_fsm_state39 = "1000000000";
const bool LS_estimator::ap_const_boolean_1 = true;
const sc_lv<1> LS_estimator::ap_const_lv1_0 = "0";
const sc_lv<1> LS_estimator::ap_const_lv1_1 = "1";
const sc_lv<2> LS_estimator::ap_const_lv2_0 = "00";
const sc_lv<2> LS_estimator::ap_const_lv2_2 = "10";
const sc_lv<2> LS_estimator::ap_const_lv2_3 = "11";
const sc_lv<2> LS_estimator::ap_const_lv2_1 = "1";
const sc_lv<32> LS_estimator::ap_const_lv32_4 = "100";
const sc_lv<32> LS_estimator::ap_const_lv32_5 = "101";
const sc_lv<32> LS_estimator::ap_const_lv32_8 = "1000";
const bool LS_estimator::ap_const_boolean_0 = false;
const sc_lv<32> LS_estimator::ap_const_lv32_1 = "1";
const sc_lv<32> LS_estimator::ap_const_lv32_2 = "10";
const sc_lv<32> LS_estimator::ap_const_lv32_3 = "11";
const sc_lv<32> LS_estimator::ap_const_lv32_6 = "110";
const sc_lv<32> LS_estimator::ap_const_lv32_7 = "111";
const sc_lv<6> LS_estimator::ap_const_lv6_0 = "000000";
const sc_lv<32> LS_estimator::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> LS_estimator::ap_const_lv32_20 = "100000";
const sc_lv<32> LS_estimator::ap_const_lv32_3F = "111111";
const sc_lv<6> LS_estimator::ap_const_lv6_1 = "1";
const sc_lv<6> LS_estimator::ap_const_lv6_33 = "110011";
const sc_lv<6> LS_estimator::ap_const_lv6_34 = "110100";
const sc_lv<32> LS_estimator::ap_const_lv32_9 = "1001";

LS_estimator::LS_estimator(sc_module_name name) : sc_module(name), mVcdFile(0) {
    preamble_M_real_U = new LS_estimator_preabkb("preamble_M_real_U");
    preamble_M_real_U->clk(ap_clk);
    preamble_M_real_U->reset(ap_rst_n_inv);
    preamble_M_real_U->address0(preamble_M_real_address0);
    preamble_M_real_U->ce0(preamble_M_real_ce0);
    preamble_M_real_U->we0(preamble_M_real_we0);
    preamble_M_real_U->d0(preamble_M_real_d0);
    preamble_M_real_U->q0(preamble_M_real_q0);
    preamble_M_imag_U = new LS_estimator_preabkb("preamble_M_imag_U");
    preamble_M_imag_U->clk(ap_clk);
    preamble_M_imag_U->reset(ap_rst_n_inv);
    preamble_M_imag_U->address0(preamble_M_imag_address0);
    preamble_M_imag_U->ce0(preamble_M_imag_ce0);
    preamble_M_imag_U->we0(preamble_M_imag_we0);
    preamble_M_imag_U->d0(preamble_M_imag_d0);
    preamble_M_imag_U->q0(preamble_M_imag_q0);
    training_sym_M_real_U = new LS_estimator_preabkb("training_sym_M_real_U");
    training_sym_M_real_U->clk(ap_clk);
    training_sym_M_real_U->reset(ap_rst_n_inv);
    training_sym_M_real_U->address0(training_sym_M_real_address0);
    training_sym_M_real_U->ce0(training_sym_M_real_ce0);
    training_sym_M_real_U->we0(training_sym_M_real_we0);
    training_sym_M_real_U->d0(training_sym_M_real_d0);
    training_sym_M_real_U->q0(training_sym_M_real_q0);
    training_sym_M_imag_U = new LS_estimator_preabkb("training_sym_M_imag_U");
    training_sym_M_imag_U->clk(ap_clk);
    training_sym_M_imag_U->reset(ap_rst_n_inv);
    training_sym_M_imag_U->address0(training_sym_M_imag_address0);
    training_sym_M_imag_U->ce0(training_sym_M_imag_ce0);
    training_sym_M_imag_U->we0(training_sym_M_imag_we0);
    training_sym_M_imag_U->d0(training_sym_M_imag_d0);
    training_sym_M_imag_U->q0(training_sym_M_imag_q0);
    LS_out_M_real_U = new LS_estimator_preabkb("LS_out_M_real_U");
    LS_out_M_real_U->clk(ap_clk);
    LS_out_M_real_U->reset(ap_rst_n_inv);
    LS_out_M_real_U->address0(LS_out_M_real_address0);
    LS_out_M_real_U->ce0(LS_out_M_real_ce0);
    LS_out_M_real_U->we0(LS_out_M_real_we0);
    LS_out_M_real_U->d0(LS_out_M_real_d0);
    LS_out_M_real_U->q0(LS_out_M_real_q0);
    LS_out_M_imag_U = new LS_estimator_preabkb("LS_out_M_imag_U");
    LS_out_M_imag_U->clk(ap_clk);
    LS_out_M_imag_U->reset(ap_rst_n_inv);
    LS_out_M_imag_U->address0(LS_out_M_imag_address0);
    LS_out_M_imag_U->ce0(LS_out_M_imag_ce0);
    LS_out_M_imag_U->we0(LS_out_M_imag_we0);
    LS_out_M_imag_U->d0(LS_out_M_imag_d0);
    LS_out_M_imag_U->q0(LS_out_M_imag_q0);
    LS_estimator_faddhbi_U1 = new LS_estimator_faddhbi<1,5,32,32,32>("LS_estimator_faddhbi_U1");
    LS_estimator_faddhbi_U1->clk(ap_clk);
    LS_estimator_faddhbi_U1->reset(ap_rst_n_inv);
    LS_estimator_faddhbi_U1->din0(tmp_i_i_reg_698);
    LS_estimator_faddhbi_U1->din1(tmp_1_i_i_reg_703);
    LS_estimator_faddhbi_U1->ce(ap_var_for_const0);
    LS_estimator_faddhbi_U1->dout(grp_fu_357_p2);
    LS_estimator_faddhbi_U2 = new LS_estimator_faddhbi<1,5,32,32,32>("LS_estimator_faddhbi_U2");
    LS_estimator_faddhbi_U2->clk(ap_clk);
    LS_estimator_faddhbi_U2->reset(ap_rst_n_inv);
    LS_estimator_faddhbi_U2->din0(tmp_3_i_i_reg_708);
    LS_estimator_faddhbi_U2->din1(tmp_4_i_i_reg_713);
    LS_estimator_faddhbi_U2->ce(ap_var_for_const0);
    LS_estimator_faddhbi_U2->dout(grp_fu_361_p2);
    LS_estimator_fsubibs_U3 = new LS_estimator_fsubibs<1,5,32,32,32>("LS_estimator_fsubibs_U3");
    LS_estimator_fsubibs_U3->clk(ap_clk);
    LS_estimator_fsubibs_U3->reset(ap_rst_n_inv);
    LS_estimator_fsubibs_U3->din0(tmp_6_i_i_reg_718);
    LS_estimator_fsubibs_U3->din1(tmp_7_i_i_reg_723);
    LS_estimator_fsubibs_U3->ce(ap_var_for_const0);
    LS_estimator_fsubibs_U3->dout(grp_fu_365_p2);
    LS_estimator_fmuljbC_U4 = new LS_estimator_fmuljbC<1,4,32,32,32>("LS_estimator_fmuljbC_U4");
    LS_estimator_fmuljbC_U4->clk(ap_clk);
    LS_estimator_fmuljbC_U4->reset(ap_rst_n_inv);
    LS_estimator_fmuljbC_U4->din0(p_r_M_real_reg_670);
    LS_estimator_fmuljbC_U4->din1(p_t_real_reg_682);
    LS_estimator_fmuljbC_U4->ce(ap_var_for_const0);
    LS_estimator_fmuljbC_U4->dout(grp_fu_369_p2);
    LS_estimator_fmuljbC_U5 = new LS_estimator_fmuljbC<1,4,32,32,32>("LS_estimator_fmuljbC_U5");
    LS_estimator_fmuljbC_U5->clk(ap_clk);
    LS_estimator_fmuljbC_U5->reset(ap_rst_n_inv);
    LS_estimator_fmuljbC_U5->din0(p_r_M_imag_reg_676);
    LS_estimator_fmuljbC_U5->din1(p_t_imag_reg_690);
    LS_estimator_fmuljbC_U5->ce(ap_var_for_const0);
    LS_estimator_fmuljbC_U5->dout(grp_fu_373_p2);
    LS_estimator_fmuljbC_U6 = new LS_estimator_fmuljbC<1,4,32,32,32>("LS_estimator_fmuljbC_U6");
    LS_estimator_fmuljbC_U6->clk(ap_clk);
    LS_estimator_fmuljbC_U6->reset(ap_rst_n_inv);
    LS_estimator_fmuljbC_U6->din0(p_t_real_reg_682);
    LS_estimator_fmuljbC_U6->din1(p_t_real_reg_682);
    LS_estimator_fmuljbC_U6->ce(ap_var_for_const0);
    LS_estimator_fmuljbC_U6->dout(grp_fu_377_p2);
    LS_estimator_fmuljbC_U7 = new LS_estimator_fmuljbC<1,4,32,32,32>("LS_estimator_fmuljbC_U7");
    LS_estimator_fmuljbC_U7->clk(ap_clk);
    LS_estimator_fmuljbC_U7->reset(ap_rst_n_inv);
    LS_estimator_fmuljbC_U7->din0(p_t_imag_reg_690);
    LS_estimator_fmuljbC_U7->din1(p_t_imag_reg_690);
    LS_estimator_fmuljbC_U7->ce(ap_var_for_const0);
    LS_estimator_fmuljbC_U7->dout(grp_fu_381_p2);
    LS_estimator_fmuljbC_U8 = new LS_estimator_fmuljbC<1,4,32,32,32>("LS_estimator_fmuljbC_U8");
    LS_estimator_fmuljbC_U8->clk(ap_clk);
    LS_estimator_fmuljbC_U8->reset(ap_rst_n_inv);
    LS_estimator_fmuljbC_U8->din0(p_r_M_imag_reg_676);
    LS_estimator_fmuljbC_U8->din1(p_t_real_reg_682);
    LS_estimator_fmuljbC_U8->ce(ap_var_for_const0);
    LS_estimator_fmuljbC_U8->dout(grp_fu_385_p2);
    LS_estimator_fmuljbC_U9 = new LS_estimator_fmuljbC<1,4,32,32,32>("LS_estimator_fmuljbC_U9");
    LS_estimator_fmuljbC_U9->clk(ap_clk);
    LS_estimator_fmuljbC_U9->reset(ap_rst_n_inv);
    LS_estimator_fmuljbC_U9->din0(p_r_M_real_reg_670);
    LS_estimator_fmuljbC_U9->din1(p_t_imag_reg_690);
    LS_estimator_fmuljbC_U9->ce(ap_var_for_const0);
    LS_estimator_fmuljbC_U9->dout(grp_fu_389_p2);
    LS_estimator_fdivkbM_U10 = new LS_estimator_fdivkbM<1,16,32,32,32>("LS_estimator_fdivkbM_U10");
    LS_estimator_fdivkbM_U10->clk(ap_clk);
    LS_estimator_fdivkbM_U10->reset(ap_rst_n_inv);
    LS_estimator_fdivkbM_U10->din0(tmp_2_i_i_reg_728);
    LS_estimator_fdivkbM_U10->din1(tmp_5_i_i_reg_733);
    LS_estimator_fdivkbM_U10->ce(ap_var_for_const0);
    LS_estimator_fdivkbM_U10->dout(grp_fu_393_p2);
    LS_estimator_fdivkbM_U11 = new LS_estimator_fdivkbM<1,16,32,32,32>("LS_estimator_fdivkbM_U11");
    LS_estimator_fdivkbM_U11->clk(ap_clk);
    LS_estimator_fdivkbM_U11->reset(ap_rst_n_inv);
    LS_estimator_fdivkbM_U11->din0(tmp_8_i_i_reg_739);
    LS_estimator_fdivkbM_U11->din1(tmp_5_i_i_reg_733);
    LS_estimator_fdivkbM_U11->ce(ap_var_for_const0);
    LS_estimator_fdivkbM_U11->dout(grp_fu_397_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_LS_out_M_imag_address0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln45_reg_644_pp0_iter26_reg );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter27 );
    sensitive << ( zext_ln27_fu_457_p1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln53_fu_565_p1 );

    SC_METHOD(thread_LS_out_M_imag_ce0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter27 );

    SC_METHOD(thread_LS_out_M_imag_d0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( complex_M_imag_writ_reg_749 );
    sensitive << ( ap_enable_reg_pp0_iter27 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_LS_out_M_imag_we0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( icmp_ln43_reg_635_pp0_iter26_reg );
    sensitive << ( ap_enable_reg_pp0_iter27 );

    SC_METHOD(thread_LS_out_M_real_address0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln45_reg_644_pp0_iter26_reg );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter27 );
    sensitive << ( zext_ln27_fu_457_p1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln53_fu_565_p1 );

    SC_METHOD(thread_LS_out_M_real_ce0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter27 );

    SC_METHOD(thread_LS_out_M_real_d0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( complex_M_real_writ_reg_744 );
    sensitive << ( ap_enable_reg_pp0_iter27 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_LS_out_M_real_we0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( icmp_ln43_reg_635_pp0_iter26_reg );
    sensitive << ( ap_enable_reg_pp0_iter27 );

    SC_METHOD(thread_add_ln25_1_fu_433_p2);
    sensitive << ( phi_ln25_1_reg_291 );

    SC_METHOD(thread_add_ln25_fu_415_p2);
    sensitive << ( phi_ln25_reg_280 );

    SC_METHOD(thread_add_ln27_fu_451_p2);
    sensitive << ( phi_ln27_reg_302 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state35);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state39);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_pp1_stage0);

    SC_METHOD(thread_ap_block_pp1_stage0_01001);

    SC_METHOD(thread_ap_block_pp1_stage0_11001);
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_block_state37_io );
    sensitive << ( ap_block_state38_io );

    SC_METHOD(thread_ap_block_pp1_stage0_subdone);
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_block_state37_io );
    sensitive << ( ap_block_state38_io );

    SC_METHOD(thread_ap_block_state10_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state11_pp0_stage0_iter4);

    SC_METHOD(thread_ap_block_state12_pp0_stage0_iter5);

    SC_METHOD(thread_ap_block_state13_pp0_stage0_iter6);

    SC_METHOD(thread_ap_block_state14_pp0_stage0_iter7);

    SC_METHOD(thread_ap_block_state15_pp0_stage0_iter8);

    SC_METHOD(thread_ap_block_state16_pp0_stage0_iter9);

    SC_METHOD(thread_ap_block_state17_pp0_stage0_iter10);

    SC_METHOD(thread_ap_block_state18_pp0_stage0_iter11);

    SC_METHOD(thread_ap_block_state19_pp0_stage0_iter12);

    SC_METHOD(thread_ap_block_state20_pp0_stage0_iter13);

    SC_METHOD(thread_ap_block_state21_pp0_stage0_iter14);

    SC_METHOD(thread_ap_block_state22_pp0_stage0_iter15);

    SC_METHOD(thread_ap_block_state23_pp0_stage0_iter16);

    SC_METHOD(thread_ap_block_state24_pp0_stage0_iter17);

    SC_METHOD(thread_ap_block_state25_pp0_stage0_iter18);

    SC_METHOD(thread_ap_block_state26_pp0_stage0_iter19);

    SC_METHOD(thread_ap_block_state27_pp0_stage0_iter20);

    SC_METHOD(thread_ap_block_state28_pp0_stage0_iter21);

    SC_METHOD(thread_ap_block_state29_pp0_stage0_iter22);

    SC_METHOD(thread_ap_block_state30_pp0_stage0_iter23);

    SC_METHOD(thread_ap_block_state31_pp0_stage0_iter24);

    SC_METHOD(thread_ap_block_state32_pp0_stage0_iter25);

    SC_METHOD(thread_ap_block_state33_pp0_stage0_iter26);

    SC_METHOD(thread_ap_block_state34_pp0_stage0_iter27);

    SC_METHOD(thread_ap_block_state36_pp1_stage0_iter0);

    SC_METHOD(thread_ap_block_state37_io);
    sensitive << ( out_stream_V_data_1_ack_in );
    sensitive << ( icmp_ln49_reg_754 );

    SC_METHOD(thread_ap_block_state37_pp1_stage0_iter1);

    SC_METHOD(thread_ap_block_state38_io);
    sensitive << ( out_stream_V_data_1_ack_in );
    sensitive << ( icmp_ln49_reg_754_pp1_iter1_reg );

    SC_METHOD(thread_ap_block_state38_pp1_stage0_iter2);

    SC_METHOD(thread_ap_block_state39);
    sensitive << ( out_stream_TREADY );
    sensitive << ( out_stream_V_data_1_state );
    sensitive << ( out_stream_V_last_V_1_state );

    SC_METHOD(thread_ap_block_state5);
    sensitive << ( in_stream_V_data_0_vld_out );
    sensitive << ( icmp_ln30_fu_469_p2 );

    SC_METHOD(thread_ap_block_state6);
    sensitive << ( in_stream_V_data_0_vld_out );
    sensitive << ( icmp_ln36_fu_501_p2 );

    SC_METHOD(thread_ap_block_state7_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state8_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state9_pp0_stage0_iter2);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state7);
    sensitive << ( icmp_ln43_fu_533_p2 );

    SC_METHOD(thread_ap_condition_pp1_exit_iter0_state36);
    sensitive << ( icmp_ln49_fu_553_p2 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_pp1);
    sensitive << ( ap_idle_pp1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( ap_enable_reg_pp0_iter8 );
    sensitive << ( ap_enable_reg_pp0_iter9 );
    sensitive << ( ap_enable_reg_pp0_iter10 );
    sensitive << ( ap_enable_reg_pp0_iter11 );
    sensitive << ( ap_enable_reg_pp0_iter12 );
    sensitive << ( ap_enable_reg_pp0_iter13 );
    sensitive << ( ap_enable_reg_pp0_iter14 );
    sensitive << ( ap_enable_reg_pp0_iter15 );
    sensitive << ( ap_enable_reg_pp0_iter16 );
    sensitive << ( ap_enable_reg_pp0_iter17 );
    sensitive << ( ap_enable_reg_pp0_iter18 );
    sensitive << ( ap_enable_reg_pp0_iter19 );
    sensitive << ( ap_enable_reg_pp0_iter20 );
    sensitive << ( ap_enable_reg_pp0_iter21 );
    sensitive << ( ap_enable_reg_pp0_iter22 );
    sensitive << ( ap_enable_reg_pp0_iter23 );
    sensitive << ( ap_enable_reg_pp0_iter24 );
    sensitive << ( ap_enable_reg_pp0_iter25 );
    sensitive << ( ap_enable_reg_pp0_iter26 );
    sensitive << ( ap_enable_reg_pp0_iter27 );

    SC_METHOD(thread_ap_idle_pp1);
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_enable_reg_pp1_iter0 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_bitcast_ln162_1_fu_581_p1);
    sensitive << ( LS_out_M_imag_q0 );

    SC_METHOD(thread_bitcast_ln162_fu_577_p1);
    sensitive << ( LS_out_M_real_q0 );

    SC_METHOD(thread_bitcast_ln9_1_fu_490_p1);
    sensitive << ( grp_fu_405_p4 );

    SC_METHOD(thread_bitcast_ln9_2_fu_517_p1);
    sensitive << ( trunc_ln9_1_fu_513_p1 );

    SC_METHOD(thread_bitcast_ln9_3_fu_522_p1);
    sensitive << ( grp_fu_405_p4 );

    SC_METHOD(thread_bitcast_ln9_fu_485_p1);
    sensitive << ( trunc_ln9_fu_481_p1 );

    SC_METHOD(thread_grp_fu_405_p4);
    sensitive << ( in_stream_V_data_0_data_out );

    SC_METHOD(thread_i_1_fu_507_p2);
    sensitive << ( i3_0_reg_324 );

    SC_METHOD(thread_i_2_fu_539_p2);
    sensitive << ( i5_0_reg_335 );

    SC_METHOD(thread_i_3_fu_559_p2);
    sensitive << ( i6_0_reg_346 );

    SC_METHOD(thread_i_fu_475_p2);
    sensitive << ( i_0_reg_313 );

    SC_METHOD(thread_icmp_ln25_1_fu_445_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( phi_ln25_1_reg_291 );

    SC_METHOD(thread_icmp_ln25_fu_427_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( phi_ln25_reg_280 );

    SC_METHOD(thread_icmp_ln27_fu_463_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( phi_ln27_reg_302 );

    SC_METHOD(thread_icmp_ln30_fu_469_p2);
    sensitive << ( in_stream_V_data_0_vld_out );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln30_fu_469_p2 );
    sensitive << ( i_0_reg_313 );

    SC_METHOD(thread_icmp_ln36_fu_501_p2);
    sensitive << ( in_stream_V_data_0_vld_out );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln36_fu_501_p2 );
    sensitive << ( i3_0_reg_324 );

    SC_METHOD(thread_icmp_ln43_fu_533_p2);
    sensitive << ( i5_0_reg_335 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_icmp_ln49_fu_553_p2);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( i6_0_reg_346 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );

    SC_METHOD(thread_in_stream_TDATA_blk_n);
    sensitive << ( in_stream_V_data_0_state );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln30_fu_469_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln36_fu_501_p2 );

    SC_METHOD(thread_in_stream_TREADY);
    sensitive << ( in_stream_V_last_V_0_state );

    SC_METHOD(thread_in_stream_V_data_0_ack_in);
    sensitive << ( in_stream_V_data_0_state );

    SC_METHOD(thread_in_stream_V_data_0_ack_out);
    sensitive << ( in_stream_V_data_0_vld_out );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln30_fu_469_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln36_fu_501_p2 );

    SC_METHOD(thread_in_stream_V_data_0_data_out);
    sensitive << ( in_stream_V_data_0_payload_A );
    sensitive << ( in_stream_V_data_0_payload_B );
    sensitive << ( in_stream_V_data_0_sel );

    SC_METHOD(thread_in_stream_V_data_0_load_A);
    sensitive << ( in_stream_V_data_0_sel_wr );
    sensitive << ( in_stream_V_data_0_state_cmp_full );

    SC_METHOD(thread_in_stream_V_data_0_load_B);
    sensitive << ( in_stream_V_data_0_sel_wr );
    sensitive << ( in_stream_V_data_0_state_cmp_full );

    SC_METHOD(thread_in_stream_V_data_0_sel);
    sensitive << ( in_stream_V_data_0_sel_rd );

    SC_METHOD(thread_in_stream_V_data_0_state_cmp_full);
    sensitive << ( in_stream_V_data_0_state );

    SC_METHOD(thread_in_stream_V_data_0_vld_in);
    sensitive << ( in_stream_TVALID );

    SC_METHOD(thread_in_stream_V_data_0_vld_out);
    sensitive << ( in_stream_V_data_0_state );

    SC_METHOD(thread_in_stream_V_last_V_0_ack_out);
    sensitive << ( in_stream_V_data_0_vld_out );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln30_fu_469_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln36_fu_501_p2 );

    SC_METHOD(thread_in_stream_V_last_V_0_vld_in);
    sensitive << ( in_stream_TVALID );

    SC_METHOD(thread_out_stream_TDATA);
    sensitive << ( out_stream_V_data_1_data_out );

    SC_METHOD(thread_out_stream_TDATA_blk_n);
    sensitive << ( out_stream_V_data_1_state );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( icmp_ln49_reg_754 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( icmp_ln49_reg_754_pp1_iter1_reg );

    SC_METHOD(thread_out_stream_TLAST);
    sensitive << ( out_stream_V_last_V_1_data_out );

    SC_METHOD(thread_out_stream_TVALID);
    sensitive << ( out_stream_V_last_V_1_state );

    SC_METHOD(thread_out_stream_V_data_1_ack_in);
    sensitive << ( out_stream_V_data_1_state );

    SC_METHOD(thread_out_stream_V_data_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_V_data_1_data_out);
    sensitive << ( out_stream_V_data_1_payload_A );
    sensitive << ( out_stream_V_data_1_payload_B );
    sensitive << ( out_stream_V_data_1_sel );

    SC_METHOD(thread_out_stream_V_data_1_load_A);
    sensitive << ( out_stream_V_data_1_sel_wr );
    sensitive << ( out_stream_V_data_1_state_cmp_full );

    SC_METHOD(thread_out_stream_V_data_1_load_B);
    sensitive << ( out_stream_V_data_1_sel_wr );
    sensitive << ( out_stream_V_data_1_state_cmp_full );

    SC_METHOD(thread_out_stream_V_data_1_sel);
    sensitive << ( out_stream_V_data_1_sel_rd );

    SC_METHOD(thread_out_stream_V_data_1_state_cmp_full);
    sensitive << ( out_stream_V_data_1_state );

    SC_METHOD(thread_out_stream_V_data_1_vld_in);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( icmp_ln49_reg_754 );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_out_stream_V_data_1_vld_out);
    sensitive << ( out_stream_V_data_1_state );

    SC_METHOD(thread_out_stream_V_last_V_1_ack_in);
    sensitive << ( out_stream_V_last_V_1_state );

    SC_METHOD(thread_out_stream_V_last_V_1_ack_out);
    sensitive << ( out_stream_TREADY );

    SC_METHOD(thread_out_stream_V_last_V_1_data_out);
    sensitive << ( out_stream_V_last_V_1_payload_A );
    sensitive << ( out_stream_V_last_V_1_payload_B );
    sensitive << ( out_stream_V_last_V_1_sel );

    SC_METHOD(thread_out_stream_V_last_V_1_load_A);
    sensitive << ( out_stream_V_last_V_1_sel_wr );
    sensitive << ( out_stream_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_V_last_V_1_load_B);
    sensitive << ( out_stream_V_last_V_1_sel_wr );
    sensitive << ( out_stream_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_V_last_V_1_sel);
    sensitive << ( out_stream_V_last_V_1_sel_rd );

    SC_METHOD(thread_out_stream_V_last_V_1_state_cmp_full);
    sensitive << ( out_stream_V_last_V_1_state );

    SC_METHOD(thread_out_stream_V_last_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( icmp_ln49_reg_754 );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_out_stream_V_last_V_1_vld_out);
    sensitive << ( out_stream_V_last_V_1_state );

    SC_METHOD(thread_preamble_M_imag_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( zext_ln45_fu_545_p1 );
    sensitive << ( zext_ln25_fu_421_p1 );
    sensitive << ( zext_ln33_fu_495_p1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_preamble_M_imag_ce0);
    sensitive << ( in_stream_V_data_0_vld_out );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln30_fu_469_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_preamble_M_imag_d0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( bitcast_ln9_1_fu_490_p1 );

    SC_METHOD(thread_preamble_M_imag_we0);
    sensitive << ( in_stream_V_data_0_vld_out );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln30_fu_469_p2 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_preamble_M_real_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( zext_ln45_fu_545_p1 );
    sensitive << ( zext_ln25_fu_421_p1 );
    sensitive << ( zext_ln33_fu_495_p1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_preamble_M_real_ce0);
    sensitive << ( in_stream_V_data_0_vld_out );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln30_fu_469_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_preamble_M_real_d0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( bitcast_ln9_fu_485_p1 );

    SC_METHOD(thread_preamble_M_real_we0);
    sensitive << ( in_stream_V_data_0_vld_out );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln30_fu_469_p2 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_tmp_data_2_fu_585_p3);
    sensitive << ( bitcast_ln162_1_fu_581_p1 );
    sensitive << ( bitcast_ln162_fu_577_p1 );

    SC_METHOD(thread_tmp_last_V_fu_571_p2);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( i6_0_reg_346 );
    sensitive << ( icmp_ln49_fu_553_p2 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );

    SC_METHOD(thread_training_sym_M_imag_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( zext_ln45_fu_545_p1 );
    sensitive << ( zext_ln25_1_fu_439_p1 );
    sensitive << ( zext_ln39_fu_527_p1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_training_sym_M_imag_ce0);
    sensitive << ( in_stream_V_data_0_vld_out );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln36_fu_501_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_training_sym_M_imag_d0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( bitcast_ln9_3_fu_522_p1 );

    SC_METHOD(thread_training_sym_M_imag_we0);
    sensitive << ( in_stream_V_data_0_vld_out );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln36_fu_501_p2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_training_sym_M_real_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( zext_ln45_fu_545_p1 );
    sensitive << ( zext_ln25_1_fu_439_p1 );
    sensitive << ( zext_ln39_fu_527_p1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_training_sym_M_real_ce0);
    sensitive << ( in_stream_V_data_0_vld_out );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln36_fu_501_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_training_sym_M_real_d0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( bitcast_ln9_2_fu_517_p1 );

    SC_METHOD(thread_training_sym_M_real_we0);
    sensitive << ( in_stream_V_data_0_vld_out );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln36_fu_501_p2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_trunc_ln9_1_fu_513_p1);
    sensitive << ( in_stream_V_data_0_data_out );

    SC_METHOD(thread_trunc_ln9_fu_481_p1);
    sensitive << ( in_stream_V_data_0_data_out );

    SC_METHOD(thread_zext_ln25_1_fu_439_p1);
    sensitive << ( phi_ln25_1_reg_291 );

    SC_METHOD(thread_zext_ln25_fu_421_p1);
    sensitive << ( phi_ln25_reg_280 );

    SC_METHOD(thread_zext_ln27_fu_457_p1);
    sensitive << ( phi_ln27_reg_302 );

    SC_METHOD(thread_zext_ln33_fu_495_p1);
    sensitive << ( i_0_reg_313 );

    SC_METHOD(thread_zext_ln39_fu_527_p1);
    sensitive << ( i3_0_reg_324 );

    SC_METHOD(thread_zext_ln45_fu_545_p1);
    sensitive << ( i5_0_reg_335 );

    SC_METHOD(thread_zext_ln53_fu_565_p1);
    sensitive << ( i6_0_reg_346 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( in_stream_V_data_0_vld_out );
    sensitive << ( out_stream_TREADY );
    sensitive << ( out_stream_V_data_1_state );
    sensitive << ( out_stream_V_last_V_1_state );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln30_fu_469_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln36_fu_501_p2 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln43_fu_533_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln49_fu_553_p2 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_enable_reg_pp0_iter26 );
    sensitive << ( ap_enable_reg_pp0_iter27 );
    sensitive << ( ap_block_pp1_stage0_subdone );
    sensitive << ( icmp_ln25_fu_427_p2 );
    sensitive << ( icmp_ln25_1_fu_445_p2 );
    sensitive << ( icmp_ln27_fu_463_p2 );
    sensitive << ( ap_CS_fsm_state39 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    in_stream_V_data_0_sel_rd = SC_LOGIC_0;
    in_stream_V_data_0_sel_wr = SC_LOGIC_0;
    in_stream_V_data_0_state = "00";
    in_stream_V_last_V_0_state = "00";
    out_stream_V_data_1_sel_rd = SC_LOGIC_0;
    out_stream_V_data_1_sel_wr = SC_LOGIC_0;
    out_stream_V_data_1_state = "00";
    out_stream_V_last_V_1_sel_rd = SC_LOGIC_0;
    out_stream_V_last_V_1_sel_wr = SC_LOGIC_0;
    out_stream_V_last_V_1_state = "00";
    ap_CS_fsm = "0000000001";
    ap_enable_reg_pp1_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter5 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter6 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter7 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter8 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter9 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter10 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter11 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter12 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter13 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter14 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter15 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter16 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter17 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter18 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter19 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter20 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter21 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter22 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter23 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter24 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter25 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter26 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter27 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "LS_estimator_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, in_stream_TDATA, "(port)in_stream_TDATA");
    sc_trace(mVcdFile, in_stream_TVALID, "(port)in_stream_TVALID");
    sc_trace(mVcdFile, in_stream_TREADY, "(port)in_stream_TREADY");
    sc_trace(mVcdFile, in_stream_TLAST, "(port)in_stream_TLAST");
    sc_trace(mVcdFile, out_stream_TDATA, "(port)out_stream_TDATA");
    sc_trace(mVcdFile, out_stream_TVALID, "(port)out_stream_TVALID");
    sc_trace(mVcdFile, out_stream_TREADY, "(port)out_stream_TREADY");
    sc_trace(mVcdFile, out_stream_TLAST, "(port)out_stream_TLAST");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, in_stream_V_data_0_data_out, "in_stream_V_data_0_data_out");
    sc_trace(mVcdFile, in_stream_V_data_0_vld_in, "in_stream_V_data_0_vld_in");
    sc_trace(mVcdFile, in_stream_V_data_0_vld_out, "in_stream_V_data_0_vld_out");
    sc_trace(mVcdFile, in_stream_V_data_0_ack_in, "in_stream_V_data_0_ack_in");
    sc_trace(mVcdFile, in_stream_V_data_0_ack_out, "in_stream_V_data_0_ack_out");
    sc_trace(mVcdFile, in_stream_V_data_0_payload_A, "in_stream_V_data_0_payload_A");
    sc_trace(mVcdFile, in_stream_V_data_0_payload_B, "in_stream_V_data_0_payload_B");
    sc_trace(mVcdFile, in_stream_V_data_0_sel_rd, "in_stream_V_data_0_sel_rd");
    sc_trace(mVcdFile, in_stream_V_data_0_sel_wr, "in_stream_V_data_0_sel_wr");
    sc_trace(mVcdFile, in_stream_V_data_0_sel, "in_stream_V_data_0_sel");
    sc_trace(mVcdFile, in_stream_V_data_0_load_A, "in_stream_V_data_0_load_A");
    sc_trace(mVcdFile, in_stream_V_data_0_load_B, "in_stream_V_data_0_load_B");
    sc_trace(mVcdFile, in_stream_V_data_0_state, "in_stream_V_data_0_state");
    sc_trace(mVcdFile, in_stream_V_data_0_state_cmp_full, "in_stream_V_data_0_state_cmp_full");
    sc_trace(mVcdFile, in_stream_V_last_V_0_vld_in, "in_stream_V_last_V_0_vld_in");
    sc_trace(mVcdFile, in_stream_V_last_V_0_ack_out, "in_stream_V_last_V_0_ack_out");
    sc_trace(mVcdFile, in_stream_V_last_V_0_state, "in_stream_V_last_V_0_state");
    sc_trace(mVcdFile, out_stream_V_data_1_data_out, "out_stream_V_data_1_data_out");
    sc_trace(mVcdFile, out_stream_V_data_1_vld_in, "out_stream_V_data_1_vld_in");
    sc_trace(mVcdFile, out_stream_V_data_1_vld_out, "out_stream_V_data_1_vld_out");
    sc_trace(mVcdFile, out_stream_V_data_1_ack_in, "out_stream_V_data_1_ack_in");
    sc_trace(mVcdFile, out_stream_V_data_1_ack_out, "out_stream_V_data_1_ack_out");
    sc_trace(mVcdFile, out_stream_V_data_1_payload_A, "out_stream_V_data_1_payload_A");
    sc_trace(mVcdFile, out_stream_V_data_1_payload_B, "out_stream_V_data_1_payload_B");
    sc_trace(mVcdFile, out_stream_V_data_1_sel_rd, "out_stream_V_data_1_sel_rd");
    sc_trace(mVcdFile, out_stream_V_data_1_sel_wr, "out_stream_V_data_1_sel_wr");
    sc_trace(mVcdFile, out_stream_V_data_1_sel, "out_stream_V_data_1_sel");
    sc_trace(mVcdFile, out_stream_V_data_1_load_A, "out_stream_V_data_1_load_A");
    sc_trace(mVcdFile, out_stream_V_data_1_load_B, "out_stream_V_data_1_load_B");
    sc_trace(mVcdFile, out_stream_V_data_1_state, "out_stream_V_data_1_state");
    sc_trace(mVcdFile, out_stream_V_data_1_state_cmp_full, "out_stream_V_data_1_state_cmp_full");
    sc_trace(mVcdFile, out_stream_V_last_V_1_data_out, "out_stream_V_last_V_1_data_out");
    sc_trace(mVcdFile, out_stream_V_last_V_1_vld_in, "out_stream_V_last_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_V_last_V_1_vld_out, "out_stream_V_last_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_V_last_V_1_ack_in, "out_stream_V_last_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_V_last_V_1_ack_out, "out_stream_V_last_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_V_last_V_1_payload_A, "out_stream_V_last_V_1_payload_A");
    sc_trace(mVcdFile, out_stream_V_last_V_1_payload_B, "out_stream_V_last_V_1_payload_B");
    sc_trace(mVcdFile, out_stream_V_last_V_1_sel_rd, "out_stream_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_V_last_V_1_sel_wr, "out_stream_V_last_V_1_sel_wr");
    sc_trace(mVcdFile, out_stream_V_last_V_1_sel, "out_stream_V_last_V_1_sel");
    sc_trace(mVcdFile, out_stream_V_last_V_1_load_A, "out_stream_V_last_V_1_load_A");
    sc_trace(mVcdFile, out_stream_V_last_V_1_load_B, "out_stream_V_last_V_1_load_B");
    sc_trace(mVcdFile, out_stream_V_last_V_1_state, "out_stream_V_last_V_1_state");
    sc_trace(mVcdFile, out_stream_V_last_V_1_state_cmp_full, "out_stream_V_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, in_stream_TDATA_blk_n, "in_stream_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, icmp_ln30_fu_469_p2, "icmp_ln30_fu_469_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, icmp_ln36_fu_501_p2, "icmp_ln36_fu_501_p2");
    sc_trace(mVcdFile, out_stream_TDATA_blk_n, "out_stream_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage0, "ap_CS_fsm_pp1_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter1, "ap_enable_reg_pp1_iter1");
    sc_trace(mVcdFile, ap_block_pp1_stage0, "ap_block_pp1_stage0");
    sc_trace(mVcdFile, icmp_ln49_reg_754, "icmp_ln49_reg_754");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter2, "ap_enable_reg_pp1_iter2");
    sc_trace(mVcdFile, icmp_ln49_reg_754_pp1_iter1_reg, "icmp_ln49_reg_754_pp1_iter1_reg");
    sc_trace(mVcdFile, i5_0_reg_335, "i5_0_reg_335");
    sc_trace(mVcdFile, i6_0_reg_346, "i6_0_reg_346");
    sc_trace(mVcdFile, add_ln25_fu_415_p2, "add_ln25_fu_415_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, add_ln25_1_fu_433_p2, "add_ln25_1_fu_433_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, add_ln27_fu_451_p2, "add_ln27_fu_451_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, i_fu_475_p2, "i_fu_475_p2");
    sc_trace(mVcdFile, ap_block_state5, "ap_block_state5");
    sc_trace(mVcdFile, ap_block_state6, "ap_block_state6");
    sc_trace(mVcdFile, i_1_fu_507_p2, "i_1_fu_507_p2");
    sc_trace(mVcdFile, icmp_ln43_fu_533_p2, "icmp_ln43_fu_533_p2");
    sc_trace(mVcdFile, icmp_ln43_reg_635, "icmp_ln43_reg_635");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage0_iter0, "ap_block_state7_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage0_iter1, "ap_block_state8_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage0_iter2, "ap_block_state9_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage0_iter3, "ap_block_state10_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state11_pp0_stage0_iter4, "ap_block_state11_pp0_stage0_iter4");
    sc_trace(mVcdFile, ap_block_state12_pp0_stage0_iter5, "ap_block_state12_pp0_stage0_iter5");
    sc_trace(mVcdFile, ap_block_state13_pp0_stage0_iter6, "ap_block_state13_pp0_stage0_iter6");
    sc_trace(mVcdFile, ap_block_state14_pp0_stage0_iter7, "ap_block_state14_pp0_stage0_iter7");
    sc_trace(mVcdFile, ap_block_state15_pp0_stage0_iter8, "ap_block_state15_pp0_stage0_iter8");
    sc_trace(mVcdFile, ap_block_state16_pp0_stage0_iter9, "ap_block_state16_pp0_stage0_iter9");
    sc_trace(mVcdFile, ap_block_state17_pp0_stage0_iter10, "ap_block_state17_pp0_stage0_iter10");
    sc_trace(mVcdFile, ap_block_state18_pp0_stage0_iter11, "ap_block_state18_pp0_stage0_iter11");
    sc_trace(mVcdFile, ap_block_state19_pp0_stage0_iter12, "ap_block_state19_pp0_stage0_iter12");
    sc_trace(mVcdFile, ap_block_state20_pp0_stage0_iter13, "ap_block_state20_pp0_stage0_iter13");
    sc_trace(mVcdFile, ap_block_state21_pp0_stage0_iter14, "ap_block_state21_pp0_stage0_iter14");
    sc_trace(mVcdFile, ap_block_state22_pp0_stage0_iter15, "ap_block_state22_pp0_stage0_iter15");
    sc_trace(mVcdFile, ap_block_state23_pp0_stage0_iter16, "ap_block_state23_pp0_stage0_iter16");
    sc_trace(mVcdFile, ap_block_state24_pp0_stage0_iter17, "ap_block_state24_pp0_stage0_iter17");
    sc_trace(mVcdFile, ap_block_state25_pp0_stage0_iter18, "ap_block_state25_pp0_stage0_iter18");
    sc_trace(mVcdFile, ap_block_state26_pp0_stage0_iter19, "ap_block_state26_pp0_stage0_iter19");
    sc_trace(mVcdFile, ap_block_state27_pp0_stage0_iter20, "ap_block_state27_pp0_stage0_iter20");
    sc_trace(mVcdFile, ap_block_state28_pp0_stage0_iter21, "ap_block_state28_pp0_stage0_iter21");
    sc_trace(mVcdFile, ap_block_state29_pp0_stage0_iter22, "ap_block_state29_pp0_stage0_iter22");
    sc_trace(mVcdFile, ap_block_state30_pp0_stage0_iter23, "ap_block_state30_pp0_stage0_iter23");
    sc_trace(mVcdFile, ap_block_state31_pp0_stage0_iter24, "ap_block_state31_pp0_stage0_iter24");
    sc_trace(mVcdFile, ap_block_state32_pp0_stage0_iter25, "ap_block_state32_pp0_stage0_iter25");
    sc_trace(mVcdFile, ap_block_state33_pp0_stage0_iter26, "ap_block_state33_pp0_stage0_iter26");
    sc_trace(mVcdFile, ap_block_state34_pp0_stage0_iter27, "ap_block_state34_pp0_stage0_iter27");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, icmp_ln43_reg_635_pp0_iter1_reg, "icmp_ln43_reg_635_pp0_iter1_reg");
    sc_trace(mVcdFile, icmp_ln43_reg_635_pp0_iter2_reg, "icmp_ln43_reg_635_pp0_iter2_reg");
    sc_trace(mVcdFile, icmp_ln43_reg_635_pp0_iter3_reg, "icmp_ln43_reg_635_pp0_iter3_reg");
    sc_trace(mVcdFile, icmp_ln43_reg_635_pp0_iter4_reg, "icmp_ln43_reg_635_pp0_iter4_reg");
    sc_trace(mVcdFile, icmp_ln43_reg_635_pp0_iter5_reg, "icmp_ln43_reg_635_pp0_iter5_reg");
    sc_trace(mVcdFile, icmp_ln43_reg_635_pp0_iter6_reg, "icmp_ln43_reg_635_pp0_iter6_reg");
    sc_trace(mVcdFile, icmp_ln43_reg_635_pp0_iter7_reg, "icmp_ln43_reg_635_pp0_iter7_reg");
    sc_trace(mVcdFile, icmp_ln43_reg_635_pp0_iter8_reg, "icmp_ln43_reg_635_pp0_iter8_reg");
    sc_trace(mVcdFile, icmp_ln43_reg_635_pp0_iter9_reg, "icmp_ln43_reg_635_pp0_iter9_reg");
    sc_trace(mVcdFile, icmp_ln43_reg_635_pp0_iter10_reg, "icmp_ln43_reg_635_pp0_iter10_reg");
    sc_trace(mVcdFile, icmp_ln43_reg_635_pp0_iter11_reg, "icmp_ln43_reg_635_pp0_iter11_reg");
    sc_trace(mVcdFile, icmp_ln43_reg_635_pp0_iter12_reg, "icmp_ln43_reg_635_pp0_iter12_reg");
    sc_trace(mVcdFile, icmp_ln43_reg_635_pp0_iter13_reg, "icmp_ln43_reg_635_pp0_iter13_reg");
    sc_trace(mVcdFile, icmp_ln43_reg_635_pp0_iter14_reg, "icmp_ln43_reg_635_pp0_iter14_reg");
    sc_trace(mVcdFile, icmp_ln43_reg_635_pp0_iter15_reg, "icmp_ln43_reg_635_pp0_iter15_reg");
    sc_trace(mVcdFile, icmp_ln43_reg_635_pp0_iter16_reg, "icmp_ln43_reg_635_pp0_iter16_reg");
    sc_trace(mVcdFile, icmp_ln43_reg_635_pp0_iter17_reg, "icmp_ln43_reg_635_pp0_iter17_reg");
    sc_trace(mVcdFile, icmp_ln43_reg_635_pp0_iter18_reg, "icmp_ln43_reg_635_pp0_iter18_reg");
    sc_trace(mVcdFile, icmp_ln43_reg_635_pp0_iter19_reg, "icmp_ln43_reg_635_pp0_iter19_reg");
    sc_trace(mVcdFile, icmp_ln43_reg_635_pp0_iter20_reg, "icmp_ln43_reg_635_pp0_iter20_reg");
    sc_trace(mVcdFile, icmp_ln43_reg_635_pp0_iter21_reg, "icmp_ln43_reg_635_pp0_iter21_reg");
    sc_trace(mVcdFile, icmp_ln43_reg_635_pp0_iter22_reg, "icmp_ln43_reg_635_pp0_iter22_reg");
    sc_trace(mVcdFile, icmp_ln43_reg_635_pp0_iter23_reg, "icmp_ln43_reg_635_pp0_iter23_reg");
    sc_trace(mVcdFile, icmp_ln43_reg_635_pp0_iter24_reg, "icmp_ln43_reg_635_pp0_iter24_reg");
    sc_trace(mVcdFile, icmp_ln43_reg_635_pp0_iter25_reg, "icmp_ln43_reg_635_pp0_iter25_reg");
    sc_trace(mVcdFile, icmp_ln43_reg_635_pp0_iter26_reg, "icmp_ln43_reg_635_pp0_iter26_reg");
    sc_trace(mVcdFile, i_2_fu_539_p2, "i_2_fu_539_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, zext_ln45_fu_545_p1, "zext_ln45_fu_545_p1");
    sc_trace(mVcdFile, zext_ln45_reg_644, "zext_ln45_reg_644");
    sc_trace(mVcdFile, zext_ln45_reg_644_pp0_iter1_reg, "zext_ln45_reg_644_pp0_iter1_reg");
    sc_trace(mVcdFile, zext_ln45_reg_644_pp0_iter2_reg, "zext_ln45_reg_644_pp0_iter2_reg");
    sc_trace(mVcdFile, zext_ln45_reg_644_pp0_iter3_reg, "zext_ln45_reg_644_pp0_iter3_reg");
    sc_trace(mVcdFile, zext_ln45_reg_644_pp0_iter4_reg, "zext_ln45_reg_644_pp0_iter4_reg");
    sc_trace(mVcdFile, zext_ln45_reg_644_pp0_iter5_reg, "zext_ln45_reg_644_pp0_iter5_reg");
    sc_trace(mVcdFile, zext_ln45_reg_644_pp0_iter6_reg, "zext_ln45_reg_644_pp0_iter6_reg");
    sc_trace(mVcdFile, zext_ln45_reg_644_pp0_iter7_reg, "zext_ln45_reg_644_pp0_iter7_reg");
    sc_trace(mVcdFile, zext_ln45_reg_644_pp0_iter8_reg, "zext_ln45_reg_644_pp0_iter8_reg");
    sc_trace(mVcdFile, zext_ln45_reg_644_pp0_iter9_reg, "zext_ln45_reg_644_pp0_iter9_reg");
    sc_trace(mVcdFile, zext_ln45_reg_644_pp0_iter10_reg, "zext_ln45_reg_644_pp0_iter10_reg");
    sc_trace(mVcdFile, zext_ln45_reg_644_pp0_iter11_reg, "zext_ln45_reg_644_pp0_iter11_reg");
    sc_trace(mVcdFile, zext_ln45_reg_644_pp0_iter12_reg, "zext_ln45_reg_644_pp0_iter12_reg");
    sc_trace(mVcdFile, zext_ln45_reg_644_pp0_iter13_reg, "zext_ln45_reg_644_pp0_iter13_reg");
    sc_trace(mVcdFile, zext_ln45_reg_644_pp0_iter14_reg, "zext_ln45_reg_644_pp0_iter14_reg");
    sc_trace(mVcdFile, zext_ln45_reg_644_pp0_iter15_reg, "zext_ln45_reg_644_pp0_iter15_reg");
    sc_trace(mVcdFile, zext_ln45_reg_644_pp0_iter16_reg, "zext_ln45_reg_644_pp0_iter16_reg");
    sc_trace(mVcdFile, zext_ln45_reg_644_pp0_iter17_reg, "zext_ln45_reg_644_pp0_iter17_reg");
    sc_trace(mVcdFile, zext_ln45_reg_644_pp0_iter18_reg, "zext_ln45_reg_644_pp0_iter18_reg");
    sc_trace(mVcdFile, zext_ln45_reg_644_pp0_iter19_reg, "zext_ln45_reg_644_pp0_iter19_reg");
    sc_trace(mVcdFile, zext_ln45_reg_644_pp0_iter20_reg, "zext_ln45_reg_644_pp0_iter20_reg");
    sc_trace(mVcdFile, zext_ln45_reg_644_pp0_iter21_reg, "zext_ln45_reg_644_pp0_iter21_reg");
    sc_trace(mVcdFile, zext_ln45_reg_644_pp0_iter22_reg, "zext_ln45_reg_644_pp0_iter22_reg");
    sc_trace(mVcdFile, zext_ln45_reg_644_pp0_iter23_reg, "zext_ln45_reg_644_pp0_iter23_reg");
    sc_trace(mVcdFile, zext_ln45_reg_644_pp0_iter24_reg, "zext_ln45_reg_644_pp0_iter24_reg");
    sc_trace(mVcdFile, zext_ln45_reg_644_pp0_iter25_reg, "zext_ln45_reg_644_pp0_iter25_reg");
    sc_trace(mVcdFile, zext_ln45_reg_644_pp0_iter26_reg, "zext_ln45_reg_644_pp0_iter26_reg");
    sc_trace(mVcdFile, preamble_M_real_q0, "preamble_M_real_q0");
    sc_trace(mVcdFile, p_r_M_real_reg_670, "p_r_M_real_reg_670");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, preamble_M_imag_q0, "preamble_M_imag_q0");
    sc_trace(mVcdFile, p_r_M_imag_reg_676, "p_r_M_imag_reg_676");
    sc_trace(mVcdFile, training_sym_M_real_q0, "training_sym_M_real_q0");
    sc_trace(mVcdFile, p_t_real_reg_682, "p_t_real_reg_682");
    sc_trace(mVcdFile, training_sym_M_imag_q0, "training_sym_M_imag_q0");
    sc_trace(mVcdFile, p_t_imag_reg_690, "p_t_imag_reg_690");
    sc_trace(mVcdFile, grp_fu_369_p2, "grp_fu_369_p2");
    sc_trace(mVcdFile, tmp_i_i_reg_698, "tmp_i_i_reg_698");
    sc_trace(mVcdFile, grp_fu_373_p2, "grp_fu_373_p2");
    sc_trace(mVcdFile, tmp_1_i_i_reg_703, "tmp_1_i_i_reg_703");
    sc_trace(mVcdFile, grp_fu_377_p2, "grp_fu_377_p2");
    sc_trace(mVcdFile, tmp_3_i_i_reg_708, "tmp_3_i_i_reg_708");
    sc_trace(mVcdFile, grp_fu_381_p2, "grp_fu_381_p2");
    sc_trace(mVcdFile, tmp_4_i_i_reg_713, "tmp_4_i_i_reg_713");
    sc_trace(mVcdFile, grp_fu_385_p2, "grp_fu_385_p2");
    sc_trace(mVcdFile, tmp_6_i_i_reg_718, "tmp_6_i_i_reg_718");
    sc_trace(mVcdFile, grp_fu_389_p2, "grp_fu_389_p2");
    sc_trace(mVcdFile, tmp_7_i_i_reg_723, "tmp_7_i_i_reg_723");
    sc_trace(mVcdFile, grp_fu_357_p2, "grp_fu_357_p2");
    sc_trace(mVcdFile, tmp_2_i_i_reg_728, "tmp_2_i_i_reg_728");
    sc_trace(mVcdFile, grp_fu_361_p2, "grp_fu_361_p2");
    sc_trace(mVcdFile, tmp_5_i_i_reg_733, "tmp_5_i_i_reg_733");
    sc_trace(mVcdFile, grp_fu_365_p2, "grp_fu_365_p2");
    sc_trace(mVcdFile, tmp_8_i_i_reg_739, "tmp_8_i_i_reg_739");
    sc_trace(mVcdFile, grp_fu_393_p2, "grp_fu_393_p2");
    sc_trace(mVcdFile, complex_M_real_writ_reg_744, "complex_M_real_writ_reg_744");
    sc_trace(mVcdFile, grp_fu_397_p2, "grp_fu_397_p2");
    sc_trace(mVcdFile, complex_M_imag_writ_reg_749, "complex_M_imag_writ_reg_749");
    sc_trace(mVcdFile, icmp_ln49_fu_553_p2, "icmp_ln49_fu_553_p2");
    sc_trace(mVcdFile, ap_block_state36_pp1_stage0_iter0, "ap_block_state36_pp1_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state37_pp1_stage0_iter1, "ap_block_state37_pp1_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state37_io, "ap_block_state37_io");
    sc_trace(mVcdFile, ap_block_state38_pp1_stage0_iter2, "ap_block_state38_pp1_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state38_io, "ap_block_state38_io");
    sc_trace(mVcdFile, ap_block_pp1_stage0_11001, "ap_block_pp1_stage0_11001");
    sc_trace(mVcdFile, i_3_fu_559_p2, "i_3_fu_559_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter0, "ap_enable_reg_pp1_iter0");
    sc_trace(mVcdFile, tmp_last_V_fu_571_p2, "tmp_last_V_fu_571_p2");
    sc_trace(mVcdFile, tmp_last_V_reg_773, "tmp_last_V_reg_773");
    sc_trace(mVcdFile, tmp_data_2_fu_585_p3, "tmp_data_2_fu_585_p3");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state7, "ap_condition_pp0_exit_iter0_state7");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter5, "ap_enable_reg_pp0_iter5");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter6, "ap_enable_reg_pp0_iter6");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter7, "ap_enable_reg_pp0_iter7");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter8, "ap_enable_reg_pp0_iter8");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter9, "ap_enable_reg_pp0_iter9");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter10, "ap_enable_reg_pp0_iter10");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter11, "ap_enable_reg_pp0_iter11");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter12, "ap_enable_reg_pp0_iter12");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter13, "ap_enable_reg_pp0_iter13");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter14, "ap_enable_reg_pp0_iter14");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter15, "ap_enable_reg_pp0_iter15");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter16, "ap_enable_reg_pp0_iter16");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter17, "ap_enable_reg_pp0_iter17");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter18, "ap_enable_reg_pp0_iter18");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter19, "ap_enable_reg_pp0_iter19");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter20, "ap_enable_reg_pp0_iter20");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter21, "ap_enable_reg_pp0_iter21");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter22, "ap_enable_reg_pp0_iter22");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter23, "ap_enable_reg_pp0_iter23");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter24, "ap_enable_reg_pp0_iter24");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter25, "ap_enable_reg_pp0_iter25");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter26, "ap_enable_reg_pp0_iter26");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter27, "ap_enable_reg_pp0_iter27");
    sc_trace(mVcdFile, ap_CS_fsm_state35, "ap_CS_fsm_state35");
    sc_trace(mVcdFile, ap_block_pp1_stage0_subdone, "ap_block_pp1_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp1_exit_iter0_state36, "ap_condition_pp1_exit_iter0_state36");
    sc_trace(mVcdFile, preamble_M_real_address0, "preamble_M_real_address0");
    sc_trace(mVcdFile, preamble_M_real_ce0, "preamble_M_real_ce0");
    sc_trace(mVcdFile, preamble_M_real_we0, "preamble_M_real_we0");
    sc_trace(mVcdFile, preamble_M_real_d0, "preamble_M_real_d0");
    sc_trace(mVcdFile, preamble_M_imag_address0, "preamble_M_imag_address0");
    sc_trace(mVcdFile, preamble_M_imag_ce0, "preamble_M_imag_ce0");
    sc_trace(mVcdFile, preamble_M_imag_we0, "preamble_M_imag_we0");
    sc_trace(mVcdFile, preamble_M_imag_d0, "preamble_M_imag_d0");
    sc_trace(mVcdFile, training_sym_M_real_address0, "training_sym_M_real_address0");
    sc_trace(mVcdFile, training_sym_M_real_ce0, "training_sym_M_real_ce0");
    sc_trace(mVcdFile, training_sym_M_real_we0, "training_sym_M_real_we0");
    sc_trace(mVcdFile, training_sym_M_real_d0, "training_sym_M_real_d0");
    sc_trace(mVcdFile, training_sym_M_imag_address0, "training_sym_M_imag_address0");
    sc_trace(mVcdFile, training_sym_M_imag_ce0, "training_sym_M_imag_ce0");
    sc_trace(mVcdFile, training_sym_M_imag_we0, "training_sym_M_imag_we0");
    sc_trace(mVcdFile, training_sym_M_imag_d0, "training_sym_M_imag_d0");
    sc_trace(mVcdFile, LS_out_M_real_address0, "LS_out_M_real_address0");
    sc_trace(mVcdFile, LS_out_M_real_ce0, "LS_out_M_real_ce0");
    sc_trace(mVcdFile, LS_out_M_real_we0, "LS_out_M_real_we0");
    sc_trace(mVcdFile, LS_out_M_real_d0, "LS_out_M_real_d0");
    sc_trace(mVcdFile, LS_out_M_real_q0, "LS_out_M_real_q0");
    sc_trace(mVcdFile, LS_out_M_imag_address0, "LS_out_M_imag_address0");
    sc_trace(mVcdFile, LS_out_M_imag_ce0, "LS_out_M_imag_ce0");
    sc_trace(mVcdFile, LS_out_M_imag_we0, "LS_out_M_imag_we0");
    sc_trace(mVcdFile, LS_out_M_imag_d0, "LS_out_M_imag_d0");
    sc_trace(mVcdFile, LS_out_M_imag_q0, "LS_out_M_imag_q0");
    sc_trace(mVcdFile, phi_ln25_reg_280, "phi_ln25_reg_280");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, icmp_ln25_fu_427_p2, "icmp_ln25_fu_427_p2");
    sc_trace(mVcdFile, phi_ln25_1_reg_291, "phi_ln25_1_reg_291");
    sc_trace(mVcdFile, icmp_ln25_1_fu_445_p2, "icmp_ln25_1_fu_445_p2");
    sc_trace(mVcdFile, phi_ln27_reg_302, "phi_ln27_reg_302");
    sc_trace(mVcdFile, icmp_ln27_fu_463_p2, "icmp_ln27_fu_463_p2");
    sc_trace(mVcdFile, i_0_reg_313, "i_0_reg_313");
    sc_trace(mVcdFile, i3_0_reg_324, "i3_0_reg_324");
    sc_trace(mVcdFile, zext_ln25_fu_421_p1, "zext_ln25_fu_421_p1");
    sc_trace(mVcdFile, zext_ln25_1_fu_439_p1, "zext_ln25_1_fu_439_p1");
    sc_trace(mVcdFile, zext_ln27_fu_457_p1, "zext_ln27_fu_457_p1");
    sc_trace(mVcdFile, zext_ln33_fu_495_p1, "zext_ln33_fu_495_p1");
    sc_trace(mVcdFile, zext_ln39_fu_527_p1, "zext_ln39_fu_527_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, zext_ln53_fu_565_p1, "zext_ln53_fu_565_p1");
    sc_trace(mVcdFile, ap_block_pp1_stage0_01001, "ap_block_pp1_stage0_01001");
    sc_trace(mVcdFile, bitcast_ln9_fu_485_p1, "bitcast_ln9_fu_485_p1");
    sc_trace(mVcdFile, bitcast_ln9_1_fu_490_p1, "bitcast_ln9_1_fu_490_p1");
    sc_trace(mVcdFile, bitcast_ln9_2_fu_517_p1, "bitcast_ln9_2_fu_517_p1");
    sc_trace(mVcdFile, bitcast_ln9_3_fu_522_p1, "bitcast_ln9_3_fu_522_p1");
    sc_trace(mVcdFile, trunc_ln9_fu_481_p1, "trunc_ln9_fu_481_p1");
    sc_trace(mVcdFile, grp_fu_405_p4, "grp_fu_405_p4");
    sc_trace(mVcdFile, trunc_ln9_1_fu_513_p1, "trunc_ln9_1_fu_513_p1");
    sc_trace(mVcdFile, bitcast_ln162_1_fu_581_p1, "bitcast_ln162_1_fu_581_p1");
    sc_trace(mVcdFile, bitcast_ln162_fu_577_p1, "bitcast_ln162_fu_577_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state39, "ap_CS_fsm_state39");
    sc_trace(mVcdFile, ap_block_state39, "ap_block_state39");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_idle_pp1, "ap_idle_pp1");
    sc_trace(mVcdFile, ap_enable_pp1, "ap_enable_pp1");
#endif

    }
    mHdltvinHandle.open("LS_estimator.hdltvin.dat");
    mHdltvoutHandle.open("LS_estimator.hdltvout.dat");
}

LS_estimator::~LS_estimator() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete preamble_M_real_U;
    delete preamble_M_imag_U;
    delete training_sym_M_real_U;
    delete training_sym_M_imag_U;
    delete LS_out_M_real_U;
    delete LS_out_M_imag_U;
    delete LS_estimator_faddhbi_U1;
    delete LS_estimator_faddhbi_U2;
    delete LS_estimator_fsubibs_U3;
    delete LS_estimator_fmuljbC_U4;
    delete LS_estimator_fmuljbC_U5;
    delete LS_estimator_fmuljbC_U6;
    delete LS_estimator_fmuljbC_U7;
    delete LS_estimator_fmuljbC_U8;
    delete LS_estimator_fmuljbC_U9;
    delete LS_estimator_fdivkbM_U10;
    delete LS_estimator_fdivkbM_U11;
}

void LS_estimator::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void LS_estimator::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state7.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln36_fu_501_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_0_vld_out.read())) && 
                    esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln36_fu_501_p2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state7.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state7.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter10 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter10 = ap_enable_reg_pp0_iter9.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter11 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter11 = ap_enable_reg_pp0_iter10.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter12 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter12 = ap_enable_reg_pp0_iter11.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter13 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter13 = ap_enable_reg_pp0_iter12.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter14 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter14 = ap_enable_reg_pp0_iter13.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter15 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter15 = ap_enable_reg_pp0_iter14.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter16 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter16 = ap_enable_reg_pp0_iter15.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter17 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter17 = ap_enable_reg_pp0_iter16.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter18 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter18 = ap_enable_reg_pp0_iter17.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter19 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter19 = ap_enable_reg_pp0_iter18.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter20 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter20 = ap_enable_reg_pp0_iter19.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter21 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter21 = ap_enable_reg_pp0_iter20.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter22 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter22 = ap_enable_reg_pp0_iter21.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter23 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter23 = ap_enable_reg_pp0_iter22.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter24 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter24 = ap_enable_reg_pp0_iter23.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter25 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter25 = ap_enable_reg_pp0_iter24.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter26 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter26 = ap_enable_reg_pp0_iter25.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter27 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter27 = ap_enable_reg_pp0_iter26.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln36_fu_501_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_0_vld_out.read())) && 
                    esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln36_fu_501_p2.read()))) {
            ap_enable_reg_pp0_iter27 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter5 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter5 = ap_enable_reg_pp0_iter4.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter6 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter6 = ap_enable_reg_pp0_iter5.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter7 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter7 = ap_enable_reg_pp0_iter6.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter8 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter8 = ap_enable_reg_pp0_iter7.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter9 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter9 = ap_enable_reg_pp0_iter8.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state36.read()))) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state36.read())) {
                ap_enable_reg_pp1_iter1 = (ap_condition_pp1_exit_iter0_state36.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp1_iter1 = ap_enable_reg_pp1_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp1_iter2 = ap_enable_reg_pp1_iter1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
            ap_enable_reg_pp1_iter2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln30_fu_469_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_0_vld_out.read())) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln30_fu_469_p2.read()))) {
        i3_0_reg_324 = ap_const_lv6_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln36_fu_501_p2.read()) && 
                !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln36_fu_501_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_0_vld_out.read())))) {
        i3_0_reg_324 = i_1_fu_507_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln36_fu_501_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_0_vld_out.read())) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln36_fu_501_p2.read()))) {
        i5_0_reg_335 = ap_const_lv6_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln43_fu_533_p2.read()))) {
        i5_0_reg_335 = i_2_fu_539_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        i6_0_reg_346 = ap_const_lv6_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln49_fu_553_p2.read()))) {
        i6_0_reg_346 = i_3_fu_559_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln27_fu_463_p2.read()))) {
        i_0_reg_313 = ap_const_lv6_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln30_fu_469_p2.read()) && 
                !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln30_fu_469_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_0_vld_out.read())))) {
        i_0_reg_313 = i_fu_475_p2.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_stream_V_data_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_data_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_data_0_vld_out.read()))) {
            in_stream_V_data_0_sel_rd =  (sc_logic) (~in_stream_V_data_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_stream_V_data_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_data_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_data_0_ack_in.read()))) {
            in_stream_V_data_0_sel_wr =  (sc_logic) (~in_stream_V_data_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_stream_V_data_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_data_0_ack_out.read()) && 
              esl_seteq<1,2,2>(in_stream_V_data_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_0_vld_in.read()) && 
              esl_seteq<1,2,2>(in_stream_V_data_0_state.read(), ap_const_lv2_2)))) {
            in_stream_V_data_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_data_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_stream_V_data_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_stream_V_data_0_state.read(), ap_const_lv2_1)))) {
            in_stream_V_data_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_data_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(in_stream_V_data_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_data_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_stream_V_data_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(in_stream_V_data_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_data_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_data_0_ack_out.read()))))) {
            in_stream_V_data_0_state = ap_const_lv2_3;
        } else {
            in_stream_V_data_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_stream_V_last_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_last_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_last_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, in_stream_V_last_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_last_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, in_stream_V_last_V_0_state.read())))) {
            in_stream_V_last_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_last_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, in_stream_V_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_stream_V_last_V_0_state.read())))) {
            in_stream_V_last_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_last_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, in_stream_V_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_stream_V_last_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, in_stream_V_last_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_last_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_last_V_0_ack_out.read()))))) {
            in_stream_V_last_V_0_state = ap_const_lv2_3;
        } else {
            in_stream_V_last_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_V_data_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_1_vld_out.read()))) {
            out_stream_V_data_1_sel_rd =  (sc_logic) (~out_stream_V_data_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_V_data_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_1_ack_in.read()))) {
            out_stream_V_data_1_sel_wr =  (sc_logic) (~out_stream_V_data_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_V_data_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_data_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_V_data_1_state.read())))) {
            out_stream_V_data_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_data_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_data_1_state.read())))) {
            out_stream_V_data_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_V_data_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_data_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_data_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_1_ack_out.read()))))) {
            out_stream_V_data_1_state = ap_const_lv2_3;
        } else {
            out_stream_V_data_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_vld_out.read()))) {
            out_stream_V_last_V_1_sel_rd =  (sc_logic) (~out_stream_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_V_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_ack_in.read()))) {
            out_stream_V_last_V_1_sel_wr =  (sc_logic) (~out_stream_V_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_stream_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_V_last_V_1_state.read())))) {
            out_stream_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_last_V_1_state.read())))) {
            out_stream_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_ack_out.read()))))) {
            out_stream_V_last_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln25_fu_427_p2.read()))) {
        phi_ln25_1_reg_291 = ap_const_lv6_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_1_fu_445_p2.read()))) {
        phi_ln25_1_reg_291 = add_ln25_1_fu_433_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_fu_427_p2.read()))) {
        phi_ln25_reg_280 = add_ln25_fu_415_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        phi_ln25_reg_280 = ap_const_lv6_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln25_1_fu_445_p2.read()))) {
        phi_ln27_reg_302 = ap_const_lv6_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln27_fu_463_p2.read()))) {
        phi_ln27_reg_302 = add_ln27_fu_451_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln43_reg_635_pp0_iter25_reg.read()))) {
        complex_M_imag_writ_reg_749 = grp_fu_397_p2.read();
        complex_M_real_writ_reg_744 = grp_fu_393_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln43_reg_635 = icmp_ln43_fu_533_p2.read();
        icmp_ln43_reg_635_pp0_iter1_reg = icmp_ln43_reg_635.read();
        zext_ln45_reg_644_pp0_iter1_reg = zext_ln45_reg_644.read();
    }
    if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
        icmp_ln43_reg_635_pp0_iter10_reg = icmp_ln43_reg_635_pp0_iter9_reg.read();
        icmp_ln43_reg_635_pp0_iter11_reg = icmp_ln43_reg_635_pp0_iter10_reg.read();
        icmp_ln43_reg_635_pp0_iter12_reg = icmp_ln43_reg_635_pp0_iter11_reg.read();
        icmp_ln43_reg_635_pp0_iter13_reg = icmp_ln43_reg_635_pp0_iter12_reg.read();
        icmp_ln43_reg_635_pp0_iter14_reg = icmp_ln43_reg_635_pp0_iter13_reg.read();
        icmp_ln43_reg_635_pp0_iter15_reg = icmp_ln43_reg_635_pp0_iter14_reg.read();
        icmp_ln43_reg_635_pp0_iter16_reg = icmp_ln43_reg_635_pp0_iter15_reg.read();
        icmp_ln43_reg_635_pp0_iter17_reg = icmp_ln43_reg_635_pp0_iter16_reg.read();
        icmp_ln43_reg_635_pp0_iter18_reg = icmp_ln43_reg_635_pp0_iter17_reg.read();
        icmp_ln43_reg_635_pp0_iter19_reg = icmp_ln43_reg_635_pp0_iter18_reg.read();
        icmp_ln43_reg_635_pp0_iter20_reg = icmp_ln43_reg_635_pp0_iter19_reg.read();
        icmp_ln43_reg_635_pp0_iter21_reg = icmp_ln43_reg_635_pp0_iter20_reg.read();
        icmp_ln43_reg_635_pp0_iter22_reg = icmp_ln43_reg_635_pp0_iter21_reg.read();
        icmp_ln43_reg_635_pp0_iter23_reg = icmp_ln43_reg_635_pp0_iter22_reg.read();
        icmp_ln43_reg_635_pp0_iter24_reg = icmp_ln43_reg_635_pp0_iter23_reg.read();
        icmp_ln43_reg_635_pp0_iter25_reg = icmp_ln43_reg_635_pp0_iter24_reg.read();
        icmp_ln43_reg_635_pp0_iter26_reg = icmp_ln43_reg_635_pp0_iter25_reg.read();
        icmp_ln43_reg_635_pp0_iter2_reg = icmp_ln43_reg_635_pp0_iter1_reg.read();
        icmp_ln43_reg_635_pp0_iter3_reg = icmp_ln43_reg_635_pp0_iter2_reg.read();
        icmp_ln43_reg_635_pp0_iter4_reg = icmp_ln43_reg_635_pp0_iter3_reg.read();
        icmp_ln43_reg_635_pp0_iter5_reg = icmp_ln43_reg_635_pp0_iter4_reg.read();
        icmp_ln43_reg_635_pp0_iter6_reg = icmp_ln43_reg_635_pp0_iter5_reg.read();
        icmp_ln43_reg_635_pp0_iter7_reg = icmp_ln43_reg_635_pp0_iter6_reg.read();
        icmp_ln43_reg_635_pp0_iter8_reg = icmp_ln43_reg_635_pp0_iter7_reg.read();
        icmp_ln43_reg_635_pp0_iter9_reg = icmp_ln43_reg_635_pp0_iter8_reg.read();
        zext_ln45_reg_644_pp0_iter10_reg = zext_ln45_reg_644_pp0_iter9_reg.read();
        zext_ln45_reg_644_pp0_iter11_reg = zext_ln45_reg_644_pp0_iter10_reg.read();
        zext_ln45_reg_644_pp0_iter12_reg = zext_ln45_reg_644_pp0_iter11_reg.read();
        zext_ln45_reg_644_pp0_iter13_reg = zext_ln45_reg_644_pp0_iter12_reg.read();
        zext_ln45_reg_644_pp0_iter14_reg = zext_ln45_reg_644_pp0_iter13_reg.read();
        zext_ln45_reg_644_pp0_iter15_reg = zext_ln45_reg_644_pp0_iter14_reg.read();
        zext_ln45_reg_644_pp0_iter16_reg = zext_ln45_reg_644_pp0_iter15_reg.read();
        zext_ln45_reg_644_pp0_iter17_reg = zext_ln45_reg_644_pp0_iter16_reg.read();
        zext_ln45_reg_644_pp0_iter18_reg = zext_ln45_reg_644_pp0_iter17_reg.read();
        zext_ln45_reg_644_pp0_iter19_reg = zext_ln45_reg_644_pp0_iter18_reg.read();
        zext_ln45_reg_644_pp0_iter20_reg = zext_ln45_reg_644_pp0_iter19_reg.read();
        zext_ln45_reg_644_pp0_iter21_reg = zext_ln45_reg_644_pp0_iter20_reg.read();
        zext_ln45_reg_644_pp0_iter22_reg = zext_ln45_reg_644_pp0_iter21_reg.read();
        zext_ln45_reg_644_pp0_iter23_reg = zext_ln45_reg_644_pp0_iter22_reg.read();
        zext_ln45_reg_644_pp0_iter24_reg = zext_ln45_reg_644_pp0_iter23_reg.read();
        zext_ln45_reg_644_pp0_iter25_reg = zext_ln45_reg_644_pp0_iter24_reg.read();
        zext_ln45_reg_644_pp0_iter26_reg = zext_ln45_reg_644_pp0_iter25_reg.read();
        zext_ln45_reg_644_pp0_iter2_reg = zext_ln45_reg_644_pp0_iter1_reg.read();
        zext_ln45_reg_644_pp0_iter3_reg = zext_ln45_reg_644_pp0_iter2_reg.read();
        zext_ln45_reg_644_pp0_iter4_reg = zext_ln45_reg_644_pp0_iter3_reg.read();
        zext_ln45_reg_644_pp0_iter5_reg = zext_ln45_reg_644_pp0_iter4_reg.read();
        zext_ln45_reg_644_pp0_iter6_reg = zext_ln45_reg_644_pp0_iter5_reg.read();
        zext_ln45_reg_644_pp0_iter7_reg = zext_ln45_reg_644_pp0_iter6_reg.read();
        zext_ln45_reg_644_pp0_iter8_reg = zext_ln45_reg_644_pp0_iter7_reg.read();
        zext_ln45_reg_644_pp0_iter9_reg = zext_ln45_reg_644_pp0_iter8_reg.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln49_reg_754 = icmp_ln49_fu_553_p2.read();
        icmp_ln49_reg_754_pp1_iter1_reg = icmp_ln49_reg_754.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_data_0_load_A.read())) {
        in_stream_V_data_0_payload_A = in_stream_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_data_0_load_B.read())) {
        in_stream_V_data_0_payload_B = in_stream_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_1_load_A.read())) {
        out_stream_V_data_1_payload_A = tmp_data_2_fu_585_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_1_load_B.read())) {
        out_stream_V_data_1_payload_B = tmp_data_2_fu_585_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_load_A.read())) {
        out_stream_V_last_V_1_payload_A = tmp_last_V_reg_773.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_load_B.read())) {
        out_stream_V_last_V_1_payload_B = tmp_last_V_reg_773.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln43_reg_635.read()))) {
        p_r_M_imag_reg_676 = preamble_M_imag_q0.read();
        p_r_M_real_reg_670 = preamble_M_real_q0.read();
        p_t_imag_reg_690 = training_sym_M_imag_q0.read();
        p_t_real_reg_682 = training_sym_M_real_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln43_reg_635_pp0_iter4_reg.read()))) {
        tmp_1_i_i_reg_703 = grp_fu_373_p2.read();
        tmp_3_i_i_reg_708 = grp_fu_377_p2.read();
        tmp_4_i_i_reg_713 = grp_fu_381_p2.read();
        tmp_6_i_i_reg_718 = grp_fu_385_p2.read();
        tmp_7_i_i_reg_723 = grp_fu_389_p2.read();
        tmp_i_i_reg_698 = grp_fu_369_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln43_reg_635_pp0_iter9_reg.read()))) {
        tmp_2_i_i_reg_728 = grp_fu_357_p2.read();
        tmp_5_i_i_reg_733 = grp_fu_361_p2.read();
        tmp_8_i_i_reg_739 = grp_fu_365_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln49_fu_553_p2.read()))) {
        tmp_last_V_reg_773 = tmp_last_V_fu_571_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln43_fu_533_p2.read()))) {
        zext_ln45_reg_644 = zext_ln45_fu_545_p1.read();
    }
}

void LS_estimator::thread_LS_out_M_imag_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()))) {
        LS_out_M_imag_address0 =  (sc_lv<6>) (zext_ln53_fu_565_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter27.read()))) {
        LS_out_M_imag_address0 =  (sc_lv<6>) (zext_ln45_reg_644_pp0_iter26_reg.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        LS_out_M_imag_address0 =  (sc_lv<6>) (zext_ln27_fu_457_p1.read());
    } else {
        LS_out_M_imag_address0 = "XXXXXX";
    }
}

void LS_estimator::thread_LS_out_M_imag_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter27.read())))) {
        LS_out_M_imag_ce0 = ap_const_logic_1;
    } else {
        LS_out_M_imag_ce0 = ap_const_logic_0;
    }
}

void LS_estimator::thread_LS_out_M_imag_d0() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter27.read()))) {
        LS_out_M_imag_d0 = complex_M_imag_writ_reg_749.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        LS_out_M_imag_d0 = ap_const_lv32_0;
    } else {
        LS_out_M_imag_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void LS_estimator::thread_LS_out_M_imag_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter27.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln43_reg_635_pp0_iter26_reg.read())))) {
        LS_out_M_imag_we0 = ap_const_logic_1;
    } else {
        LS_out_M_imag_we0 = ap_const_logic_0;
    }
}

void LS_estimator::thread_LS_out_M_real_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()))) {
        LS_out_M_real_address0 =  (sc_lv<6>) (zext_ln53_fu_565_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter27.read()))) {
        LS_out_M_real_address0 =  (sc_lv<6>) (zext_ln45_reg_644_pp0_iter26_reg.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        LS_out_M_real_address0 =  (sc_lv<6>) (zext_ln27_fu_457_p1.read());
    } else {
        LS_out_M_real_address0 = "XXXXXX";
    }
}

void LS_estimator::thread_LS_out_M_real_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter27.read())))) {
        LS_out_M_real_ce0 = ap_const_logic_1;
    } else {
        LS_out_M_real_ce0 = ap_const_logic_0;
    }
}

void LS_estimator::thread_LS_out_M_real_d0() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter27.read()))) {
        LS_out_M_real_d0 = complex_M_real_writ_reg_744.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        LS_out_M_real_d0 = ap_const_lv32_0;
    } else {
        LS_out_M_real_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void LS_estimator::thread_LS_out_M_real_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter27.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln43_reg_635_pp0_iter26_reg.read())))) {
        LS_out_M_real_we0 = ap_const_logic_1;
    } else {
        LS_out_M_real_we0 = ap_const_logic_0;
    }
}

void LS_estimator::thread_add_ln25_1_fu_433_p2() {
    add_ln25_1_fu_433_p2 = (!phi_ln25_1_reg_291.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(phi_ln25_1_reg_291.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void LS_estimator::thread_add_ln25_fu_415_p2() {
    add_ln25_fu_415_p2 = (!phi_ln25_reg_280.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(phi_ln25_reg_280.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void LS_estimator::thread_add_ln27_fu_451_p2() {
    add_ln27_fu_451_p2 = (!phi_ln27_reg_302.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(phi_ln27_reg_302.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void LS_estimator::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[6];
}

void LS_estimator::thread_ap_CS_fsm_pp1_stage0() {
    ap_CS_fsm_pp1_stage0 = ap_CS_fsm.read()[8];
}

void LS_estimator::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void LS_estimator::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void LS_estimator::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void LS_estimator::thread_ap_CS_fsm_state35() {
    ap_CS_fsm_state35 = ap_CS_fsm.read()[7];
}

void LS_estimator::thread_ap_CS_fsm_state39() {
    ap_CS_fsm_state39 = ap_CS_fsm.read()[9];
}

void LS_estimator::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void LS_estimator::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void LS_estimator::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void LS_estimator::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void LS_estimator::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void LS_estimator::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void LS_estimator::thread_ap_block_pp1_stage0() {
    ap_block_pp1_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void LS_estimator::thread_ap_block_pp1_stage0_01001() {
    ap_block_pp1_stage0_01001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void LS_estimator::thread_ap_block_pp1_stage0_11001() {
    ap_block_pp1_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state37_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state38_io.read())));
}

void LS_estimator::thread_ap_block_pp1_stage0_subdone() {
    ap_block_pp1_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state37_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state38_io.read())));
}

void LS_estimator::thread_ap_block_state10_pp0_stage0_iter3() {
    ap_block_state10_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void LS_estimator::thread_ap_block_state11_pp0_stage0_iter4() {
    ap_block_state11_pp0_stage0_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void LS_estimator::thread_ap_block_state12_pp0_stage0_iter5() {
    ap_block_state12_pp0_stage0_iter5 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void LS_estimator::thread_ap_block_state13_pp0_stage0_iter6() {
    ap_block_state13_pp0_stage0_iter6 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void LS_estimator::thread_ap_block_state14_pp0_stage0_iter7() {
    ap_block_state14_pp0_stage0_iter7 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void LS_estimator::thread_ap_block_state15_pp0_stage0_iter8() {
    ap_block_state15_pp0_stage0_iter8 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void LS_estimator::thread_ap_block_state16_pp0_stage0_iter9() {
    ap_block_state16_pp0_stage0_iter9 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void LS_estimator::thread_ap_block_state17_pp0_stage0_iter10() {
    ap_block_state17_pp0_stage0_iter10 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void LS_estimator::thread_ap_block_state18_pp0_stage0_iter11() {
    ap_block_state18_pp0_stage0_iter11 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void LS_estimator::thread_ap_block_state19_pp0_stage0_iter12() {
    ap_block_state19_pp0_stage0_iter12 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void LS_estimator::thread_ap_block_state20_pp0_stage0_iter13() {
    ap_block_state20_pp0_stage0_iter13 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void LS_estimator::thread_ap_block_state21_pp0_stage0_iter14() {
    ap_block_state21_pp0_stage0_iter14 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void LS_estimator::thread_ap_block_state22_pp0_stage0_iter15() {
    ap_block_state22_pp0_stage0_iter15 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void LS_estimator::thread_ap_block_state23_pp0_stage0_iter16() {
    ap_block_state23_pp0_stage0_iter16 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void LS_estimator::thread_ap_block_state24_pp0_stage0_iter17() {
    ap_block_state24_pp0_stage0_iter17 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void LS_estimator::thread_ap_block_state25_pp0_stage0_iter18() {
    ap_block_state25_pp0_stage0_iter18 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void LS_estimator::thread_ap_block_state26_pp0_stage0_iter19() {
    ap_block_state26_pp0_stage0_iter19 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void LS_estimator::thread_ap_block_state27_pp0_stage0_iter20() {
    ap_block_state27_pp0_stage0_iter20 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void LS_estimator::thread_ap_block_state28_pp0_stage0_iter21() {
    ap_block_state28_pp0_stage0_iter21 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void LS_estimator::thread_ap_block_state29_pp0_stage0_iter22() {
    ap_block_state29_pp0_stage0_iter22 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void LS_estimator::thread_ap_block_state30_pp0_stage0_iter23() {
    ap_block_state30_pp0_stage0_iter23 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void LS_estimator::thread_ap_block_state31_pp0_stage0_iter24() {
    ap_block_state31_pp0_stage0_iter24 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void LS_estimator::thread_ap_block_state32_pp0_stage0_iter25() {
    ap_block_state32_pp0_stage0_iter25 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void LS_estimator::thread_ap_block_state33_pp0_stage0_iter26() {
    ap_block_state33_pp0_stage0_iter26 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void LS_estimator::thread_ap_block_state34_pp0_stage0_iter27() {
    ap_block_state34_pp0_stage0_iter27 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void LS_estimator::thread_ap_block_state36_pp1_stage0_iter0() {
    ap_block_state36_pp1_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void LS_estimator::thread_ap_block_state37_io() {
    ap_block_state37_io = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln49_reg_754.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_1_ack_in.read()));
}

void LS_estimator::thread_ap_block_state37_pp1_stage0_iter1() {
    ap_block_state37_pp1_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void LS_estimator::thread_ap_block_state38_io() {
    ap_block_state38_io = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln49_reg_754_pp1_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_1_ack_in.read()));
}

void LS_estimator::thread_ap_block_state38_pp1_stage0_iter2() {
    ap_block_state38_pp1_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void LS_estimator::thread_ap_block_state39() {
    ap_block_state39 = (esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_data_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_last_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_data_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_last_V_1_state.read())));
}

void LS_estimator::thread_ap_block_state5() {
    ap_block_state5 = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln30_fu_469_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_0_vld_out.read()));
}

void LS_estimator::thread_ap_block_state6() {
    ap_block_state6 = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln36_fu_501_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_0_vld_out.read()));
}

void LS_estimator::thread_ap_block_state7_pp0_stage0_iter0() {
    ap_block_state7_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void LS_estimator::thread_ap_block_state8_pp0_stage0_iter1() {
    ap_block_state8_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void LS_estimator::thread_ap_block_state9_pp0_stage0_iter2() {
    ap_block_state9_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void LS_estimator::thread_ap_condition_pp0_exit_iter0_state7() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln43_fu_533_p2.read())) {
        ap_condition_pp0_exit_iter0_state7 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state7 = ap_const_logic_0;
    }
}

void LS_estimator::thread_ap_condition_pp1_exit_iter0_state36() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln49_fu_553_p2.read())) {
        ap_condition_pp1_exit_iter0_state36 = ap_const_logic_1;
    } else {
        ap_condition_pp1_exit_iter0_state36 = ap_const_logic_0;
    }
}

void LS_estimator::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void LS_estimator::thread_ap_enable_pp1() {
    ap_enable_pp1 = (ap_idle_pp1.read() ^ ap_const_logic_1);
}

void LS_estimator::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter6.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter7.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter8.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter9.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter10.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter11.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter12.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter13.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter14.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter15.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter16.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter17.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter18.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter19.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter20.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter21.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter22.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter23.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter24.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter25.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter26.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter27.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void LS_estimator::thread_ap_idle_pp1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter2.read()))) {
        ap_idle_pp1 = ap_const_logic_1;
    } else {
        ap_idle_pp1 = ap_const_logic_0;
    }
}

void LS_estimator::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void LS_estimator::thread_bitcast_ln162_1_fu_581_p1() {
    bitcast_ln162_1_fu_581_p1 = LS_out_M_imag_q0.read();
}

void LS_estimator::thread_bitcast_ln162_fu_577_p1() {
    bitcast_ln162_fu_577_p1 = LS_out_M_real_q0.read();
}

void LS_estimator::thread_bitcast_ln9_1_fu_490_p1() {
    bitcast_ln9_1_fu_490_p1 = grp_fu_405_p4.read();
}

void LS_estimator::thread_bitcast_ln9_2_fu_517_p1() {
    bitcast_ln9_2_fu_517_p1 = trunc_ln9_1_fu_513_p1.read();
}

void LS_estimator::thread_bitcast_ln9_3_fu_522_p1() {
    bitcast_ln9_3_fu_522_p1 = grp_fu_405_p4.read();
}

void LS_estimator::thread_bitcast_ln9_fu_485_p1() {
    bitcast_ln9_fu_485_p1 = trunc_ln9_fu_481_p1.read();
}

void LS_estimator::thread_grp_fu_405_p4() {
    grp_fu_405_p4 = in_stream_V_data_0_data_out.read().range(63, 32);
}

void LS_estimator::thread_i_1_fu_507_p2() {
    i_1_fu_507_p2 = (!i3_0_reg_324.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i3_0_reg_324.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void LS_estimator::thread_i_2_fu_539_p2() {
    i_2_fu_539_p2 = (!i5_0_reg_335.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i5_0_reg_335.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void LS_estimator::thread_i_3_fu_559_p2() {
    i_3_fu_559_p2 = (!i6_0_reg_346.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i6_0_reg_346.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void LS_estimator::thread_i_fu_475_p2() {
    i_fu_475_p2 = (!i_0_reg_313.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_0_reg_313.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void LS_estimator::thread_icmp_ln25_1_fu_445_p2() {
    icmp_ln25_1_fu_445_p2 = (!phi_ln25_1_reg_291.read().is_01() || !ap_const_lv6_33.is_01())? sc_lv<1>(): sc_lv<1>(phi_ln25_1_reg_291.read() == ap_const_lv6_33);
}

void LS_estimator::thread_icmp_ln25_fu_427_p2() {
    icmp_ln25_fu_427_p2 = (!phi_ln25_reg_280.read().is_01() || !ap_const_lv6_33.is_01())? sc_lv<1>(): sc_lv<1>(phi_ln25_reg_280.read() == ap_const_lv6_33);
}

void LS_estimator::thread_icmp_ln27_fu_463_p2() {
    icmp_ln27_fu_463_p2 = (!phi_ln27_reg_302.read().is_01() || !ap_const_lv6_33.is_01())? sc_lv<1>(): sc_lv<1>(phi_ln27_reg_302.read() == ap_const_lv6_33);
}

void LS_estimator::thread_icmp_ln30_fu_469_p2() {
    icmp_ln30_fu_469_p2 = (!i_0_reg_313.read().is_01() || !ap_const_lv6_34.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_313.read() == ap_const_lv6_34);
}

void LS_estimator::thread_icmp_ln36_fu_501_p2() {
    icmp_ln36_fu_501_p2 = (!i3_0_reg_324.read().is_01() || !ap_const_lv6_34.is_01())? sc_lv<1>(): sc_lv<1>(i3_0_reg_324.read() == ap_const_lv6_34);
}

void LS_estimator::thread_icmp_ln43_fu_533_p2() {
    icmp_ln43_fu_533_p2 = (!i5_0_reg_335.read().is_01() || !ap_const_lv6_34.is_01())? sc_lv<1>(): sc_lv<1>(i5_0_reg_335.read() == ap_const_lv6_34);
}

void LS_estimator::thread_icmp_ln49_fu_553_p2() {
    icmp_ln49_fu_553_p2 = (!i6_0_reg_346.read().is_01() || !ap_const_lv6_34.is_01())? sc_lv<1>(): sc_lv<1>(i6_0_reg_346.read() == ap_const_lv6_34);
}

void LS_estimator::thread_in_stream_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln30_fu_469_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln36_fu_501_p2.read())))) {
        in_stream_TDATA_blk_n = in_stream_V_data_0_state.read()[0];
    } else {
        in_stream_TDATA_blk_n = ap_const_logic_1;
    }
}

void LS_estimator::thread_in_stream_TREADY() {
    in_stream_TREADY = in_stream_V_last_V_0_state.read()[1];
}

void LS_estimator::thread_in_stream_V_data_0_ack_in() {
    in_stream_V_data_0_ack_in = in_stream_V_data_0_state.read()[1];
}

void LS_estimator::thread_in_stream_V_data_0_ack_out() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln30_fu_469_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln30_fu_469_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_0_vld_out.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln36_fu_501_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln36_fu_501_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_0_vld_out.read()))))) {
        in_stream_V_data_0_ack_out = ap_const_logic_1;
    } else {
        in_stream_V_data_0_ack_out = ap_const_logic_0;
    }
}

void LS_estimator::thread_in_stream_V_data_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_stream_V_data_0_sel.read())) {
        in_stream_V_data_0_data_out = in_stream_V_data_0_payload_B.read();
    } else {
        in_stream_V_data_0_data_out = in_stream_V_data_0_payload_A.read();
    }
}

void LS_estimator::thread_in_stream_V_data_0_load_A() {
    in_stream_V_data_0_load_A = (in_stream_V_data_0_state_cmp_full.read() & ~in_stream_V_data_0_sel_wr.read());
}

void LS_estimator::thread_in_stream_V_data_0_load_B() {
    in_stream_V_data_0_load_B = (in_stream_V_data_0_sel_wr.read() & in_stream_V_data_0_state_cmp_full.read());
}

void LS_estimator::thread_in_stream_V_data_0_sel() {
    in_stream_V_data_0_sel = in_stream_V_data_0_sel_rd.read();
}

void LS_estimator::thread_in_stream_V_data_0_state_cmp_full() {
    in_stream_V_data_0_state_cmp_full =  (sc_logic) ((!in_stream_V_data_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_stream_V_data_0_state.read() != ap_const_lv2_1))[0];
}

void LS_estimator::thread_in_stream_V_data_0_vld_in() {
    in_stream_V_data_0_vld_in = in_stream_TVALID.read();
}

void LS_estimator::thread_in_stream_V_data_0_vld_out() {
    in_stream_V_data_0_vld_out = in_stream_V_data_0_state.read()[0];
}

void LS_estimator::thread_in_stream_V_last_V_0_ack_out() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln30_fu_469_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln30_fu_469_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_0_vld_out.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln36_fu_501_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln36_fu_501_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_0_vld_out.read()))))) {
        in_stream_V_last_V_0_ack_out = ap_const_logic_1;
    } else {
        in_stream_V_last_V_0_ack_out = ap_const_logic_0;
    }
}

void LS_estimator::thread_in_stream_V_last_V_0_vld_in() {
    in_stream_V_last_V_0_vld_in = in_stream_TVALID.read();
}

void LS_estimator::thread_out_stream_TDATA() {
    out_stream_TDATA = out_stream_V_data_1_data_out.read();
}

void LS_estimator::thread_out_stream_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln49_reg_754.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln49_reg_754_pp1_iter1_reg.read())))) {
        out_stream_TDATA_blk_n = out_stream_V_data_1_state.read()[1];
    } else {
        out_stream_TDATA_blk_n = ap_const_logic_1;
    }
}

void LS_estimator::thread_out_stream_TLAST() {
    out_stream_TLAST = out_stream_V_last_V_1_data_out.read();
}

void LS_estimator::thread_out_stream_TVALID() {
    out_stream_TVALID = out_stream_V_last_V_1_state.read()[0];
}

void LS_estimator::thread_out_stream_V_data_1_ack_in() {
    out_stream_V_data_1_ack_in = out_stream_V_data_1_state.read()[1];
}

void LS_estimator::thread_out_stream_V_data_1_ack_out() {
    out_stream_V_data_1_ack_out = out_stream_TREADY.read();
}

void LS_estimator::thread_out_stream_V_data_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_1_sel.read())) {
        out_stream_V_data_1_data_out = out_stream_V_data_1_payload_B.read();
    } else {
        out_stream_V_data_1_data_out = out_stream_V_data_1_payload_A.read();
    }
}

void LS_estimator::thread_out_stream_V_data_1_load_A() {
    out_stream_V_data_1_load_A = (out_stream_V_data_1_state_cmp_full.read() & ~out_stream_V_data_1_sel_wr.read());
}

void LS_estimator::thread_out_stream_V_data_1_load_B() {
    out_stream_V_data_1_load_B = (out_stream_V_data_1_sel_wr.read() & out_stream_V_data_1_state_cmp_full.read());
}

void LS_estimator::thread_out_stream_V_data_1_sel() {
    out_stream_V_data_1_sel = out_stream_V_data_1_sel_rd.read();
}

void LS_estimator::thread_out_stream_V_data_1_state_cmp_full() {
    out_stream_V_data_1_state_cmp_full =  (sc_logic) ((!out_stream_V_data_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_stream_V_data_1_state.read() != ap_const_lv2_1))[0];
}

void LS_estimator::thread_out_stream_V_data_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln49_reg_754.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        out_stream_V_data_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_V_data_1_vld_in = ap_const_logic_0;
    }
}

void LS_estimator::thread_out_stream_V_data_1_vld_out() {
    out_stream_V_data_1_vld_out = out_stream_V_data_1_state.read()[0];
}

void LS_estimator::thread_out_stream_V_last_V_1_ack_in() {
    out_stream_V_last_V_1_ack_in = out_stream_V_last_V_1_state.read()[1];
}

void LS_estimator::thread_out_stream_V_last_V_1_ack_out() {
    out_stream_V_last_V_1_ack_out = out_stream_TREADY.read();
}

void LS_estimator::thread_out_stream_V_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_sel.read())) {
        out_stream_V_last_V_1_data_out = out_stream_V_last_V_1_payload_B.read();
    } else {
        out_stream_V_last_V_1_data_out = out_stream_V_last_V_1_payload_A.read();
    }
}

void LS_estimator::thread_out_stream_V_last_V_1_load_A() {
    out_stream_V_last_V_1_load_A = (out_stream_V_last_V_1_state_cmp_full.read() & ~out_stream_V_last_V_1_sel_wr.read());
}

void LS_estimator::thread_out_stream_V_last_V_1_load_B() {
    out_stream_V_last_V_1_load_B = (out_stream_V_last_V_1_sel_wr.read() & out_stream_V_last_V_1_state_cmp_full.read());
}

void LS_estimator::thread_out_stream_V_last_V_1_sel() {
    out_stream_V_last_V_1_sel = out_stream_V_last_V_1_sel_rd.read();
}

void LS_estimator::thread_out_stream_V_last_V_1_state_cmp_full() {
    out_stream_V_last_V_1_state_cmp_full =  (sc_logic) ((!out_stream_V_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_stream_V_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void LS_estimator::thread_out_stream_V_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln49_reg_754.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        out_stream_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void LS_estimator::thread_out_stream_V_last_V_1_vld_out() {
    out_stream_V_last_V_1_vld_out = out_stream_V_last_V_1_state.read()[0];
}

void LS_estimator::thread_preamble_M_imag_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        preamble_M_imag_address0 =  (sc_lv<6>) (zext_ln45_fu_545_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        preamble_M_imag_address0 =  (sc_lv<6>) (zext_ln33_fu_495_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        preamble_M_imag_address0 =  (sc_lv<6>) (zext_ln25_fu_421_p1.read());
    } else {
        preamble_M_imag_address0 = "XXXXXX";
    }
}

void LS_estimator::thread_preamble_M_imag_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln30_fu_469_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_0_vld_out.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())))) {
        preamble_M_imag_ce0 = ap_const_logic_1;
    } else {
        preamble_M_imag_ce0 = ap_const_logic_0;
    }
}

void LS_estimator::thread_preamble_M_imag_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        preamble_M_imag_d0 = bitcast_ln9_1_fu_490_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        preamble_M_imag_d0 = ap_const_lv32_0;
    } else {
        preamble_M_imag_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void LS_estimator::thread_preamble_M_imag_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln30_fu_469_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln30_fu_469_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_0_vld_out.read()))))) {
        preamble_M_imag_we0 = ap_const_logic_1;
    } else {
        preamble_M_imag_we0 = ap_const_logic_0;
    }
}

void LS_estimator::thread_preamble_M_real_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        preamble_M_real_address0 =  (sc_lv<6>) (zext_ln45_fu_545_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        preamble_M_real_address0 =  (sc_lv<6>) (zext_ln33_fu_495_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        preamble_M_real_address0 =  (sc_lv<6>) (zext_ln25_fu_421_p1.read());
    } else {
        preamble_M_real_address0 = "XXXXXX";
    }
}

void LS_estimator::thread_preamble_M_real_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln30_fu_469_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_0_vld_out.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())))) {
        preamble_M_real_ce0 = ap_const_logic_1;
    } else {
        preamble_M_real_ce0 = ap_const_logic_0;
    }
}

void LS_estimator::thread_preamble_M_real_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        preamble_M_real_d0 = bitcast_ln9_fu_485_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        preamble_M_real_d0 = ap_const_lv32_0;
    } else {
        preamble_M_real_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void LS_estimator::thread_preamble_M_real_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln30_fu_469_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln30_fu_469_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_0_vld_out.read()))))) {
        preamble_M_real_we0 = ap_const_logic_1;
    } else {
        preamble_M_real_we0 = ap_const_logic_0;
    }
}

void LS_estimator::thread_tmp_data_2_fu_585_p3() {
    tmp_data_2_fu_585_p3 = esl_concat<32,32>(bitcast_ln162_1_fu_581_p1.read(), bitcast_ln162_fu_577_p1.read());
}

void LS_estimator::thread_tmp_last_V_fu_571_p2() {
    tmp_last_V_fu_571_p2 = (!i6_0_reg_346.read().is_01() || !ap_const_lv6_33.is_01())? sc_lv<1>(): sc_lv<1>(i6_0_reg_346.read() == ap_const_lv6_33);
}

void LS_estimator::thread_training_sym_M_imag_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        training_sym_M_imag_address0 =  (sc_lv<6>) (zext_ln45_fu_545_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        training_sym_M_imag_address0 =  (sc_lv<6>) (zext_ln39_fu_527_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        training_sym_M_imag_address0 =  (sc_lv<6>) (zext_ln25_1_fu_439_p1.read());
    } else {
        training_sym_M_imag_address0 = "XXXXXX";
    }
}

void LS_estimator::thread_training_sym_M_imag_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln36_fu_501_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_0_vld_out.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())))) {
        training_sym_M_imag_ce0 = ap_const_logic_1;
    } else {
        training_sym_M_imag_ce0 = ap_const_logic_0;
    }
}

void LS_estimator::thread_training_sym_M_imag_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        training_sym_M_imag_d0 = bitcast_ln9_3_fu_522_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        training_sym_M_imag_d0 = ap_const_lv32_0;
    } else {
        training_sym_M_imag_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void LS_estimator::thread_training_sym_M_imag_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln36_fu_501_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln36_fu_501_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_0_vld_out.read()))))) {
        training_sym_M_imag_we0 = ap_const_logic_1;
    } else {
        training_sym_M_imag_we0 = ap_const_logic_0;
    }
}

void LS_estimator::thread_training_sym_M_real_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        training_sym_M_real_address0 =  (sc_lv<6>) (zext_ln45_fu_545_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        training_sym_M_real_address0 =  (sc_lv<6>) (zext_ln39_fu_527_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        training_sym_M_real_address0 =  (sc_lv<6>) (zext_ln25_1_fu_439_p1.read());
    } else {
        training_sym_M_real_address0 = "XXXXXX";
    }
}

void LS_estimator::thread_training_sym_M_real_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln36_fu_501_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_0_vld_out.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())))) {
        training_sym_M_real_ce0 = ap_const_logic_1;
    } else {
        training_sym_M_real_ce0 = ap_const_logic_0;
    }
}

void LS_estimator::thread_training_sym_M_real_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        training_sym_M_real_d0 = bitcast_ln9_2_fu_517_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        training_sym_M_real_d0 = ap_const_lv32_0;
    } else {
        training_sym_M_real_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void LS_estimator::thread_training_sym_M_real_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln36_fu_501_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln36_fu_501_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_0_vld_out.read()))))) {
        training_sym_M_real_we0 = ap_const_logic_1;
    } else {
        training_sym_M_real_we0 = ap_const_logic_0;
    }
}

void LS_estimator::thread_trunc_ln9_1_fu_513_p1() {
    trunc_ln9_1_fu_513_p1 = in_stream_V_data_0_data_out.read().range(32-1, 0);
}

void LS_estimator::thread_trunc_ln9_fu_481_p1() {
    trunc_ln9_fu_481_p1 = in_stream_V_data_0_data_out.read().range(32-1, 0);
}

void LS_estimator::thread_zext_ln25_1_fu_439_p1() {
    zext_ln25_1_fu_439_p1 = esl_zext<64,6>(phi_ln25_1_reg_291.read());
}

void LS_estimator::thread_zext_ln25_fu_421_p1() {
    zext_ln25_fu_421_p1 = esl_zext<64,6>(phi_ln25_reg_280.read());
}

void LS_estimator::thread_zext_ln27_fu_457_p1() {
    zext_ln27_fu_457_p1 = esl_zext<64,6>(phi_ln27_reg_302.read());
}

void LS_estimator::thread_zext_ln33_fu_495_p1() {
    zext_ln33_fu_495_p1 = esl_zext<64,6>(i_0_reg_313.read());
}

void LS_estimator::thread_zext_ln39_fu_527_p1() {
    zext_ln39_fu_527_p1 = esl_zext<64,6>(i3_0_reg_324.read());
}

void LS_estimator::thread_zext_ln45_fu_545_p1() {
    zext_ln45_fu_545_p1 = esl_zext<64,6>(i5_0_reg_335.read());
}

void LS_estimator::thread_zext_ln53_fu_565_p1() {
    zext_ln53_fu_565_p1 = esl_zext<64,6>(i6_0_reg_346.read());
}

void LS_estimator::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln25_fu_427_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln25_1_fu_445_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln27_fu_463_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln30_fu_469_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_0_vld_out.read())) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln30_fu_469_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln30_fu_469_p2.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln30_fu_469_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_0_vld_out.read())))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln36_fu_501_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_0_vld_out.read())) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln36_fu_501_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln36_fu_501_p2.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln36_fu_501_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_V_data_0_vld_out.read())))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            if ((!(esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter27.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter26.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln43_fu_533_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter27.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter26.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln43_fu_533_p2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state35;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            break;
        case 256 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln49_fu_553_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln49_fu_553_p2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state39;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            }
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) && !(esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_data_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_last_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_data_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_last_V_1_state.read()))))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state39;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<10>) ("XXXXXXXXXX");
            break;
    }
}

void LS_estimator::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream_TDATA\" :  \"" << in_stream_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream_TVALID\" :  \"" << in_stream_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"in_stream_TREADY\" :  \"" << in_stream_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_stream_TLAST\" :  \"" << in_stream_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_TDATA\" :  \"" << out_stream_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_TVALID\" :  \"" << out_stream_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_stream_TREADY\" :  \"" << out_stream_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_stream_TLAST\" :  \"" << out_stream_TLAST.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

