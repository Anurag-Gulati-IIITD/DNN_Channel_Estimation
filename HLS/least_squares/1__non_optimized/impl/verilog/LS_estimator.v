// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="LS_estimator,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=1876,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=24,HLS_SYN_FF=3845,HLS_SYN_LUT=5872,HLS_VERSION=2019_1}" *)

module LS_estimator (
        ap_clk,
        ap_rst_n,
        in_stream_TDATA,
        in_stream_TVALID,
        in_stream_TREADY,
        in_stream_TLAST,
        out_stream_TDATA,
        out_stream_TVALID,
        out_stream_TREADY,
        out_stream_TLAST
);

parameter    ap_ST_fsm_state1 = 37'd1;
parameter    ap_ST_fsm_state2 = 37'd2;
parameter    ap_ST_fsm_state3 = 37'd4;
parameter    ap_ST_fsm_state4 = 37'd8;
parameter    ap_ST_fsm_state5 = 37'd16;
parameter    ap_ST_fsm_state6 = 37'd32;
parameter    ap_ST_fsm_state7 = 37'd64;
parameter    ap_ST_fsm_state8 = 37'd128;
parameter    ap_ST_fsm_state9 = 37'd256;
parameter    ap_ST_fsm_state10 = 37'd512;
parameter    ap_ST_fsm_state11 = 37'd1024;
parameter    ap_ST_fsm_state12 = 37'd2048;
parameter    ap_ST_fsm_state13 = 37'd4096;
parameter    ap_ST_fsm_state14 = 37'd8192;
parameter    ap_ST_fsm_state15 = 37'd16384;
parameter    ap_ST_fsm_state16 = 37'd32768;
parameter    ap_ST_fsm_state17 = 37'd65536;
parameter    ap_ST_fsm_state18 = 37'd131072;
parameter    ap_ST_fsm_state19 = 37'd262144;
parameter    ap_ST_fsm_state20 = 37'd524288;
parameter    ap_ST_fsm_state21 = 37'd1048576;
parameter    ap_ST_fsm_state22 = 37'd2097152;
parameter    ap_ST_fsm_state23 = 37'd4194304;
parameter    ap_ST_fsm_state24 = 37'd8388608;
parameter    ap_ST_fsm_state25 = 37'd16777216;
parameter    ap_ST_fsm_state26 = 37'd33554432;
parameter    ap_ST_fsm_state27 = 37'd67108864;
parameter    ap_ST_fsm_state28 = 37'd134217728;
parameter    ap_ST_fsm_state29 = 37'd268435456;
parameter    ap_ST_fsm_state30 = 37'd536870912;
parameter    ap_ST_fsm_state31 = 37'd1073741824;
parameter    ap_ST_fsm_state32 = 37'd2147483648;
parameter    ap_ST_fsm_state33 = 37'd4294967296;
parameter    ap_ST_fsm_state34 = 37'd8589934592;
parameter    ap_ST_fsm_state35 = 37'd17179869184;
parameter    ap_ST_fsm_state36 = 37'd34359738368;
parameter    ap_ST_fsm_state37 = 37'd68719476736;

input   ap_clk;
input   ap_rst_n;
input  [63:0] in_stream_TDATA;
input   in_stream_TVALID;
output   in_stream_TREADY;
input  [0:0] in_stream_TLAST;
output  [63:0] out_stream_TDATA;
output   out_stream_TVALID;
input   out_stream_TREADY;
output  [0:0] out_stream_TLAST;

 reg    ap_rst_n_inv;
reg   [63:0] in_stream_V_data_0_data_out;
wire    in_stream_V_data_0_vld_in;
wire    in_stream_V_data_0_vld_out;
wire    in_stream_V_data_0_ack_in;
reg    in_stream_V_data_0_ack_out;
reg   [63:0] in_stream_V_data_0_payload_A;
reg   [63:0] in_stream_V_data_0_payload_B;
reg    in_stream_V_data_0_sel_rd;
reg    in_stream_V_data_0_sel_wr;
wire    in_stream_V_data_0_sel;
wire    in_stream_V_data_0_load_A;
wire    in_stream_V_data_0_load_B;
reg   [1:0] in_stream_V_data_0_state;
wire    in_stream_V_data_0_state_cmp_full;
wire    in_stream_V_last_V_0_vld_in;
reg    in_stream_V_last_V_0_ack_out;
reg   [1:0] in_stream_V_last_V_0_state;
reg   [63:0] out_stream_V_data_1_data_out;
reg    out_stream_V_data_1_vld_in;
wire    out_stream_V_data_1_vld_out;
wire    out_stream_V_data_1_ack_in;
wire    out_stream_V_data_1_ack_out;
reg   [63:0] out_stream_V_data_1_payload_A;
reg   [63:0] out_stream_V_data_1_payload_B;
reg    out_stream_V_data_1_sel_rd;
reg    out_stream_V_data_1_sel_wr;
wire    out_stream_V_data_1_sel;
wire    out_stream_V_data_1_load_A;
wire    out_stream_V_data_1_load_B;
reg   [1:0] out_stream_V_data_1_state;
wire    out_stream_V_data_1_state_cmp_full;
reg   [0:0] out_stream_V_last_V_1_data_out;
reg    out_stream_V_last_V_1_vld_in;
wire    out_stream_V_last_V_1_vld_out;
wire    out_stream_V_last_V_1_ack_in;
wire    out_stream_V_last_V_1_ack_out;
reg   [0:0] out_stream_V_last_V_1_payload_A;
reg   [0:0] out_stream_V_last_V_1_payload_B;
reg    out_stream_V_last_V_1_sel_rd;
reg    out_stream_V_last_V_1_sel_wr;
wire    out_stream_V_last_V_1_sel;
wire    out_stream_V_last_V_1_load_A;
wire    out_stream_V_last_V_1_load_B;
reg   [1:0] out_stream_V_last_V_1_state;
wire    out_stream_V_last_V_1_state_cmp_full;
reg    in_stream_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [36:0] ap_CS_fsm;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln15_fu_461_p2;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln21_fu_493_p2;
reg    out_stream_TDATA_blk_n;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire   [5:0] add_ln10_fu_407_p2;
wire    ap_CS_fsm_state2;
wire   [5:0] add_ln10_1_fu_425_p2;
wire    ap_CS_fsm_state3;
wire   [5:0] add_ln12_fu_443_p2;
wire    ap_CS_fsm_state4;
wire   [5:0] i_fu_467_p2;
reg    ap_block_state5;
wire   [5:0] i_1_fu_499_p2;
reg    ap_block_state6;
wire   [5:0] i_2_fu_531_p2;
reg   [5:0] i_2_reg_629;
wire    ap_CS_fsm_state7;
wire   [63:0] zext_ln29_fu_537_p1;
reg   [63:0] zext_ln29_reg_634;
wire   [0:0] icmp_ln28_fu_525_p2;
wire   [31:0] preamble_M_real_q0;
reg   [31:0] p_r_M_real_reg_660;
wire    ap_CS_fsm_state8;
wire   [31:0] preamble_M_imag_q0;
reg   [31:0] p_r_M_imag_reg_666;
wire   [31:0] training_sym_M_real_q0;
reg   [31:0] p_t_real_reg_672;
wire   [31:0] training_sym_M_imag_q0;
reg   [31:0] p_t_imag_reg_680;
wire   [31:0] grp_fu_361_p2;
reg   [31:0] tmp_i_i_reg_688;
wire    ap_CS_fsm_state12;
wire   [31:0] grp_fu_365_p2;
reg   [31:0] tmp_1_i_i_reg_693;
wire   [31:0] grp_fu_369_p2;
reg   [31:0] tmp_3_i_i_reg_698;
wire   [31:0] grp_fu_373_p2;
reg   [31:0] tmp_4_i_i_reg_703;
wire   [31:0] grp_fu_377_p2;
reg   [31:0] tmp_6_i_i_reg_708;
wire   [31:0] grp_fu_381_p2;
reg   [31:0] tmp_7_i_i_reg_713;
wire   [31:0] grp_fu_349_p2;
reg   [31:0] tmp_2_i_i_reg_718;
wire    ap_CS_fsm_state17;
wire   [31:0] grp_fu_353_p2;
reg   [31:0] tmp_5_i_i_reg_723;
wire   [31:0] grp_fu_357_p2;
reg   [31:0] tmp_8_i_i_reg_729;
wire   [31:0] grp_fu_385_p2;
reg   [31:0] complex_M_real_writ_reg_734;
wire    ap_CS_fsm_state33;
wire   [31:0] grp_fu_389_p2;
reg   [31:0] complex_M_imag_writ_reg_739;
wire   [5:0] i_3_fu_551_p2;
reg   [5:0] i_3_reg_747;
wire    ap_CS_fsm_state35;
reg    ap_block_state35;
wire   [0:0] icmp_ln33_fu_545_p2;
wire   [0:0] tmp_last_V_fu_563_p2;
reg   [0:0] tmp_last_V_reg_762;
wire   [63:0] tmp_data_2_fu_577_p3;
reg   [5:0] preamble_M_real_address0;
reg    preamble_M_real_ce0;
reg    preamble_M_real_we0;
reg   [31:0] preamble_M_real_d0;
reg   [5:0] preamble_M_imag_address0;
reg    preamble_M_imag_ce0;
reg    preamble_M_imag_we0;
reg   [31:0] preamble_M_imag_d0;
reg   [5:0] training_sym_M_real_address0;
reg    training_sym_M_real_ce0;
reg    training_sym_M_real_we0;
reg   [31:0] training_sym_M_real_d0;
reg   [5:0] training_sym_M_imag_address0;
reg    training_sym_M_imag_ce0;
reg    training_sym_M_imag_we0;
reg   [31:0] training_sym_M_imag_d0;
reg   [5:0] LS_out_M_real_address0;
reg    LS_out_M_real_ce0;
reg    LS_out_M_real_we0;
reg   [31:0] LS_out_M_real_d0;
wire   [31:0] LS_out_M_real_q0;
reg   [5:0] LS_out_M_imag_address0;
reg    LS_out_M_imag_ce0;
reg    LS_out_M_imag_we0;
reg   [31:0] LS_out_M_imag_d0;
wire   [31:0] LS_out_M_imag_q0;
reg   [5:0] phi_ln10_reg_272;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln10_fu_419_p2;
reg   [5:0] phi_ln10_1_reg_283;
wire   [0:0] icmp_ln10_1_fu_437_p2;
reg   [5:0] phi_ln12_reg_294;
wire   [0:0] icmp_ln12_fu_455_p2;
reg   [5:0] i_0_reg_305;
reg   [5:0] i3_0_reg_316;
reg   [5:0] i5_0_reg_327;
wire    ap_CS_fsm_state34;
reg   [5:0] i6_0_reg_338;
wire   [63:0] zext_ln10_fu_413_p1;
wire   [63:0] zext_ln10_1_fu_431_p1;
wire   [63:0] zext_ln12_fu_449_p1;
wire   [63:0] zext_ln18_fu_487_p1;
wire   [63:0] zext_ln24_fu_519_p1;
wire   [63:0] zext_ln36_fu_557_p1;
wire   [31:0] bitcast_ln9_fu_477_p1;
wire   [31:0] bitcast_ln9_1_fu_482_p1;
wire   [31:0] bitcast_ln9_2_fu_509_p1;
wire   [31:0] bitcast_ln9_3_fu_514_p1;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state18;
wire   [31:0] trunc_ln9_fu_473_p1;
wire   [31:0] grp_fu_397_p4;
wire   [31:0] trunc_ln9_1_fu_505_p1;
wire   [31:0] bitcast_ln162_1_fu_573_p1;
wire   [31:0] bitcast_ln162_fu_569_p1;
reg   [36:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 in_stream_V_data_0_sel_rd = 1'b0;
#0 in_stream_V_data_0_sel_wr = 1'b0;
#0 in_stream_V_data_0_state = 2'd0;
#0 in_stream_V_last_V_0_state = 2'd0;
#0 out_stream_V_data_1_sel_rd = 1'b0;
#0 out_stream_V_data_1_sel_wr = 1'b0;
#0 out_stream_V_data_1_state = 2'd0;
#0 out_stream_V_last_V_1_sel_rd = 1'b0;
#0 out_stream_V_last_V_1_sel_wr = 1'b0;
#0 out_stream_V_last_V_1_state = 2'd0;
#0 ap_CS_fsm = 37'd1;
end

LS_estimator_preabkb #(
    .DataWidth( 32 ),
    .AddressRange( 52 ),
    .AddressWidth( 6 ))
preamble_M_real_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(preamble_M_real_address0),
    .ce0(preamble_M_real_ce0),
    .we0(preamble_M_real_we0),
    .d0(preamble_M_real_d0),
    .q0(preamble_M_real_q0)
);

LS_estimator_preabkb #(
    .DataWidth( 32 ),
    .AddressRange( 52 ),
    .AddressWidth( 6 ))
preamble_M_imag_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(preamble_M_imag_address0),
    .ce0(preamble_M_imag_ce0),
    .we0(preamble_M_imag_we0),
    .d0(preamble_M_imag_d0),
    .q0(preamble_M_imag_q0)
);

LS_estimator_preabkb #(
    .DataWidth( 32 ),
    .AddressRange( 52 ),
    .AddressWidth( 6 ))
training_sym_M_real_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(training_sym_M_real_address0),
    .ce0(training_sym_M_real_ce0),
    .we0(training_sym_M_real_we0),
    .d0(training_sym_M_real_d0),
    .q0(training_sym_M_real_q0)
);

LS_estimator_preabkb #(
    .DataWidth( 32 ),
    .AddressRange( 52 ),
    .AddressWidth( 6 ))
training_sym_M_imag_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(training_sym_M_imag_address0),
    .ce0(training_sym_M_imag_ce0),
    .we0(training_sym_M_imag_we0),
    .d0(training_sym_M_imag_d0),
    .q0(training_sym_M_imag_q0)
);

LS_estimator_preabkb #(
    .DataWidth( 32 ),
    .AddressRange( 52 ),
    .AddressWidth( 6 ))
LS_out_M_real_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LS_out_M_real_address0),
    .ce0(LS_out_M_real_ce0),
    .we0(LS_out_M_real_we0),
    .d0(LS_out_M_real_d0),
    .q0(LS_out_M_real_q0)
);

LS_estimator_preabkb #(
    .DataWidth( 32 ),
    .AddressRange( 52 ),
    .AddressWidth( 6 ))
LS_out_M_imag_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LS_out_M_imag_address0),
    .ce0(LS_out_M_imag_ce0),
    .we0(LS_out_M_imag_we0),
    .d0(LS_out_M_imag_d0),
    .q0(LS_out_M_imag_q0)
);

LS_estimator_faddhbi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LS_estimator_faddhbi_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_i_i_reg_688),
    .din1(tmp_1_i_i_reg_693),
    .ce(1'b1),
    .dout(grp_fu_349_p2)
);

LS_estimator_faddhbi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LS_estimator_faddhbi_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_i_i_reg_698),
    .din1(tmp_4_i_i_reg_703),
    .ce(1'b1),
    .dout(grp_fu_353_p2)
);

LS_estimator_fsubibs #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LS_estimator_fsubibs_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_6_i_i_reg_708),
    .din1(tmp_7_i_i_reg_713),
    .ce(1'b1),
    .dout(grp_fu_357_p2)
);

LS_estimator_fmuljbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LS_estimator_fmuljbC_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(p_r_M_real_reg_660),
    .din1(p_t_real_reg_672),
    .ce(1'b1),
    .dout(grp_fu_361_p2)
);

LS_estimator_fmuljbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LS_estimator_fmuljbC_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(p_r_M_imag_reg_666),
    .din1(p_t_imag_reg_680),
    .ce(1'b1),
    .dout(grp_fu_365_p2)
);

LS_estimator_fmuljbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LS_estimator_fmuljbC_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(p_t_real_reg_672),
    .din1(p_t_real_reg_672),
    .ce(1'b1),
    .dout(grp_fu_369_p2)
);

LS_estimator_fmuljbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LS_estimator_fmuljbC_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(p_t_imag_reg_680),
    .din1(p_t_imag_reg_680),
    .ce(1'b1),
    .dout(grp_fu_373_p2)
);

LS_estimator_fmuljbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LS_estimator_fmuljbC_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(p_r_M_imag_reg_666),
    .din1(p_t_real_reg_672),
    .ce(1'b1),
    .dout(grp_fu_377_p2)
);

LS_estimator_fmuljbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LS_estimator_fmuljbC_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(p_r_M_real_reg_660),
    .din1(p_t_imag_reg_680),
    .ce(1'b1),
    .dout(grp_fu_381_p2)
);

LS_estimator_fdivkbM #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LS_estimator_fdivkbM_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_2_i_i_reg_718),
    .din1(tmp_5_i_i_reg_723),
    .ce(1'b1),
    .dout(grp_fu_385_p2)
);

LS_estimator_fdivkbM #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LS_estimator_fdivkbM_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_8_i_i_reg_729),
    .din1(tmp_5_i_i_reg_723),
    .ce(1'b1),
    .dout(grp_fu_389_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_data_0_sel_rd <= 1'b0;
    end else begin
        if (((in_stream_V_data_0_ack_out == 1'b1) & (in_stream_V_data_0_vld_out == 1'b1))) begin
            in_stream_V_data_0_sel_rd <= ~in_stream_V_data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_data_0_sel_wr <= 1'b0;
    end else begin
        if (((in_stream_V_data_0_ack_in == 1'b1) & (in_stream_V_data_0_vld_in == 1'b1))) begin
            in_stream_V_data_0_sel_wr <= ~in_stream_V_data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_data_0_state <= 2'd0;
    end else begin
        if ((((in_stream_V_data_0_state == 2'd2) & (in_stream_V_data_0_vld_in == 1'b0)) | ((in_stream_V_data_0_state == 2'd3) & (in_stream_V_data_0_vld_in == 1'b0) & (in_stream_V_data_0_ack_out == 1'b1)))) begin
            in_stream_V_data_0_state <= 2'd2;
        end else if ((((in_stream_V_data_0_state == 2'd1) & (in_stream_V_data_0_ack_out == 1'b0)) | ((in_stream_V_data_0_state == 2'd3) & (in_stream_V_data_0_ack_out == 1'b0) & (in_stream_V_data_0_vld_in == 1'b1)))) begin
            in_stream_V_data_0_state <= 2'd1;
        end else if (((~((in_stream_V_data_0_vld_in == 1'b0) & (in_stream_V_data_0_ack_out == 1'b1)) & ~((in_stream_V_data_0_ack_out == 1'b0) & (in_stream_V_data_0_vld_in == 1'b1)) & (in_stream_V_data_0_state == 2'd3)) | ((in_stream_V_data_0_state == 2'd1) & (in_stream_V_data_0_ack_out == 1'b1)) | ((in_stream_V_data_0_state == 2'd2) & (in_stream_V_data_0_vld_in == 1'b1)))) begin
            in_stream_V_data_0_state <= 2'd3;
        end else begin
            in_stream_V_data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((in_stream_V_last_V_0_state == 2'd2) & (in_stream_V_last_V_0_vld_in == 1'b0)) | ((in_stream_V_last_V_0_state == 2'd3) & (in_stream_V_last_V_0_vld_in == 1'b0) & (in_stream_V_last_V_0_ack_out == 1'b1)))) begin
            in_stream_V_last_V_0_state <= 2'd2;
        end else if ((((in_stream_V_last_V_0_state == 2'd1) & (in_stream_V_last_V_0_ack_out == 1'b0)) | ((in_stream_V_last_V_0_state == 2'd3) & (in_stream_V_last_V_0_ack_out == 1'b0) & (in_stream_V_last_V_0_vld_in == 1'b1)))) begin
            in_stream_V_last_V_0_state <= 2'd1;
        end else if (((~((in_stream_V_last_V_0_vld_in == 1'b0) & (in_stream_V_last_V_0_ack_out == 1'b1)) & ~((in_stream_V_last_V_0_ack_out == 1'b0) & (in_stream_V_last_V_0_vld_in == 1'b1)) & (in_stream_V_last_V_0_state == 2'd3)) | ((in_stream_V_last_V_0_state == 2'd1) & (in_stream_V_last_V_0_ack_out == 1'b1)) | ((in_stream_V_last_V_0_state == 2'd2) & (in_stream_V_last_V_0_vld_in == 1'b1)))) begin
            in_stream_V_last_V_0_state <= 2'd3;
        end else begin
            in_stream_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_data_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_V_data_1_ack_out == 1'b1) & (out_stream_V_data_1_vld_out == 1'b1))) begin
            out_stream_V_data_1_sel_rd <= ~out_stream_V_data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_data_1_sel_wr <= 1'b0;
    end else begin
        if (((out_stream_V_data_1_ack_in == 1'b1) & (out_stream_V_data_1_vld_in == 1'b1))) begin
            out_stream_V_data_1_sel_wr <= ~out_stream_V_data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_data_1_state <= 2'd0;
    end else begin
        if ((((out_stream_V_data_1_state == 2'd2) & (out_stream_V_data_1_vld_in == 1'b0)) | ((out_stream_V_data_1_state == 2'd3) & (out_stream_V_data_1_vld_in == 1'b0) & (out_stream_V_data_1_ack_out == 1'b1)))) begin
            out_stream_V_data_1_state <= 2'd2;
        end else if ((((out_stream_V_data_1_state == 2'd1) & (out_stream_TREADY == 1'b0)) | ((out_stream_V_data_1_state == 2'd3) & (out_stream_TREADY == 1'b0) & (out_stream_V_data_1_vld_in == 1'b1)))) begin
            out_stream_V_data_1_state <= 2'd1;
        end else if (((~((out_stream_V_data_1_vld_in == 1'b0) & (out_stream_V_data_1_ack_out == 1'b1)) & ~((out_stream_TREADY == 1'b0) & (out_stream_V_data_1_vld_in == 1'b1)) & (out_stream_V_data_1_state == 2'd3)) | ((out_stream_V_data_1_state == 2'd1) & (out_stream_V_data_1_ack_out == 1'b1)) | ((out_stream_V_data_1_state == 2'd2) & (out_stream_V_data_1_vld_in == 1'b1)))) begin
            out_stream_V_data_1_state <= 2'd3;
        end else begin
            out_stream_V_data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_V_last_V_1_ack_out == 1'b1) & (out_stream_V_last_V_1_vld_out == 1'b1))) begin
            out_stream_V_last_V_1_sel_rd <= ~out_stream_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_stream_V_last_V_1_ack_in == 1'b1) & (out_stream_V_last_V_1_vld_in == 1'b1))) begin
            out_stream_V_last_V_1_sel_wr <= ~out_stream_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_V_last_V_1_state == 2'd2) & (out_stream_V_last_V_1_vld_in == 1'b0)) | ((out_stream_V_last_V_1_state == 2'd3) & (out_stream_V_last_V_1_vld_in == 1'b0) & (out_stream_V_last_V_1_ack_out == 1'b1)))) begin
            out_stream_V_last_V_1_state <= 2'd2;
        end else if ((((out_stream_V_last_V_1_state == 2'd1) & (out_stream_TREADY == 1'b0)) | ((out_stream_V_last_V_1_state == 2'd3) & (out_stream_TREADY == 1'b0) & (out_stream_V_last_V_1_vld_in == 1'b1)))) begin
            out_stream_V_last_V_1_state <= 2'd1;
        end else if (((~((out_stream_V_last_V_1_vld_in == 1'b0) & (out_stream_V_last_V_1_ack_out == 1'b1)) & ~((out_stream_TREADY == 1'b0) & (out_stream_V_last_V_1_vld_in == 1'b1)) & (out_stream_V_last_V_1_state == 2'd3)) | ((out_stream_V_last_V_1_state == 2'd1) & (out_stream_V_last_V_1_ack_out == 1'b1)) | ((out_stream_V_last_V_1_state == 2'd2) & (out_stream_V_last_V_1_vld_in == 1'b1)))) begin
            out_stream_V_last_V_1_state <= 2'd3;
        end else begin
            out_stream_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln15_fu_461_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (icmp_ln15_fu_461_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i3_0_reg_316 <= 6'd0;
    end else if ((~((icmp_ln21_fu_493_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (icmp_ln21_fu_493_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        i3_0_reg_316 <= i_1_fu_499_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln21_fu_493_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (icmp_ln21_fu_493_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        i5_0_reg_327 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        i5_0_reg_327 <= i_2_reg_629;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_fu_525_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        i6_0_reg_338 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state37) & (out_stream_V_data_1_ack_in == 1'b1))) begin
        i6_0_reg_338 <= i_3_reg_747;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_455_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_0_reg_305 <= 6'd0;
    end else if ((~((icmp_ln15_fu_461_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (icmp_ln15_fu_461_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i_0_reg_305 <= i_fu_467_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_419_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_ln10_1_reg_283 <= 6'd0;
    end else if (((icmp_ln10_1_fu_437_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_ln10_1_reg_283 <= add_ln10_1_fu_425_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_419_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_ln10_reg_272 <= add_ln10_fu_407_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        phi_ln10_reg_272 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_1_fu_437_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_ln12_reg_294 <= 6'd0;
    end else if (((icmp_ln12_fu_455_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_ln12_reg_294 <= add_ln12_fu_443_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        complex_M_imag_writ_reg_739 <= grp_fu_389_p2;
        complex_M_real_writ_reg_734 <= grp_fu_385_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_2_reg_629 <= i_2_fu_531_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_stream_V_last_V_1_state == 2'd1) | (out_stream_V_data_1_state == 2'd1) | ((out_stream_V_last_V_1_state == 2'd3) & (out_stream_TREADY == 1'b0)) | ((out_stream_V_data_1_state == 2'd3) & (out_stream_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state35))) begin
        i_3_reg_747 <= i_3_fu_551_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_V_data_0_load_A == 1'b1)) begin
        in_stream_V_data_0_payload_A <= in_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_V_data_0_load_B == 1'b1)) begin
        in_stream_V_data_0_payload_B <= in_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_V_data_1_load_A == 1'b1)) begin
        out_stream_V_data_1_payload_A <= tmp_data_2_fu_577_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_V_data_1_load_B == 1'b1)) begin
        out_stream_V_data_1_payload_B <= tmp_data_2_fu_577_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_V_last_V_1_load_A == 1'b1)) begin
        out_stream_V_last_V_1_payload_A <= tmp_last_V_reg_762;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_V_last_V_1_load_B == 1'b1)) begin
        out_stream_V_last_V_1_payload_B <= tmp_last_V_reg_762;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_r_M_imag_reg_666 <= preamble_M_imag_q0;
        p_r_M_real_reg_660 <= preamble_M_real_q0;
        p_t_imag_reg_680 <= training_sym_M_imag_q0;
        p_t_real_reg_672 <= training_sym_M_real_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_1_i_i_reg_693 <= grp_fu_365_p2;
        tmp_3_i_i_reg_698 <= grp_fu_369_p2;
        tmp_4_i_i_reg_703 <= grp_fu_373_p2;
        tmp_6_i_i_reg_708 <= grp_fu_377_p2;
        tmp_7_i_i_reg_713 <= grp_fu_381_p2;
        tmp_i_i_reg_688 <= grp_fu_361_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        tmp_2_i_i_reg_718 <= grp_fu_349_p2;
        tmp_5_i_i_reg_723 <= grp_fu_353_p2;
        tmp_8_i_i_reg_729 <= grp_fu_357_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_stream_V_last_V_1_state == 2'd1) | (out_stream_V_data_1_state == 2'd1) | ((out_stream_V_last_V_1_state == 2'd3) & (out_stream_TREADY == 1'b0)) | ((out_stream_V_data_1_state == 2'd3) & (out_stream_TREADY == 1'b0))) & (icmp_ln33_fu_545_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state35))) begin
        tmp_last_V_reg_762 <= tmp_last_V_fu_563_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_fu_525_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        zext_ln29_reg_634[5 : 0] <= zext_ln29_fu_537_p1[5 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        LS_out_M_imag_address0 = zext_ln36_fu_557_p1;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        LS_out_M_imag_address0 = zext_ln29_reg_634;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        LS_out_M_imag_address0 = zext_ln12_fu_449_p1;
    end else begin
        LS_out_M_imag_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state4) | (~((out_stream_V_last_V_1_state == 2'd1) | (out_stream_V_data_1_state == 2'd1) | ((out_stream_V_last_V_1_state == 2'd3) & (out_stream_TREADY == 1'b0)) | ((out_stream_V_data_1_state == 2'd3) & (out_stream_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state35)))) begin
        LS_out_M_imag_ce0 = 1'b1;
    end else begin
        LS_out_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        LS_out_M_imag_d0 = complex_M_imag_writ_reg_739;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        LS_out_M_imag_d0 = 32'd0;
    end else begin
        LS_out_M_imag_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state4))) begin
        LS_out_M_imag_we0 = 1'b1;
    end else begin
        LS_out_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        LS_out_M_real_address0 = zext_ln36_fu_557_p1;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        LS_out_M_real_address0 = zext_ln29_reg_634;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        LS_out_M_real_address0 = zext_ln12_fu_449_p1;
    end else begin
        LS_out_M_real_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state4) | (~((out_stream_V_last_V_1_state == 2'd1) | (out_stream_V_data_1_state == 2'd1) | ((out_stream_V_last_V_1_state == 2'd3) & (out_stream_TREADY == 1'b0)) | ((out_stream_V_data_1_state == 2'd3) & (out_stream_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state35)))) begin
        LS_out_M_real_ce0 = 1'b1;
    end else begin
        LS_out_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        LS_out_M_real_d0 = complex_M_real_writ_reg_734;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        LS_out_M_real_d0 = 32'd0;
    end else begin
        LS_out_M_real_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state4))) begin
        LS_out_M_real_we0 = 1'b1;
    end else begin
        LS_out_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln21_fu_493_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln15_fu_461_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        in_stream_TDATA_blk_n = in_stream_V_data_0_state[1'd0];
    end else begin
        in_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((icmp_ln21_fu_493_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (icmp_ln21_fu_493_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | (~((icmp_ln15_fu_461_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (icmp_ln15_fu_461_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        in_stream_V_data_0_ack_out = 1'b1;
    end else begin
        in_stream_V_data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_stream_V_data_0_sel == 1'b1)) begin
        in_stream_V_data_0_data_out = in_stream_V_data_0_payload_B;
    end else begin
        in_stream_V_data_0_data_out = in_stream_V_data_0_payload_A;
    end
end

always @ (*) begin
    if (((~((icmp_ln21_fu_493_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (icmp_ln21_fu_493_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | (~((icmp_ln15_fu_461_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (icmp_ln15_fu_461_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        in_stream_V_last_V_0_ack_out = 1'b1;
    end else begin
        in_stream_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36))) begin
        out_stream_TDATA_blk_n = out_stream_V_data_1_state[1'd1];
    end else begin
        out_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((out_stream_V_data_1_sel == 1'b1)) begin
        out_stream_V_data_1_data_out = out_stream_V_data_1_payload_B;
    end else begin
        out_stream_V_data_1_data_out = out_stream_V_data_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) & (out_stream_V_data_1_ack_in == 1'b1))) begin
        out_stream_V_data_1_vld_in = 1'b1;
    end else begin
        out_stream_V_data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((out_stream_V_last_V_1_sel == 1'b1)) begin
        out_stream_V_last_V_1_data_out = out_stream_V_last_V_1_payload_B;
    end else begin
        out_stream_V_last_V_1_data_out = out_stream_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) & (out_stream_V_data_1_ack_in == 1'b1))) begin
        out_stream_V_last_V_1_vld_in = 1'b1;
    end else begin
        out_stream_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        preamble_M_imag_address0 = zext_ln29_fu_537_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        preamble_M_imag_address0 = zext_ln18_fu_487_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        preamble_M_imag_address0 = zext_ln10_fu_413_p1;
    end else begin
        preamble_M_imag_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state2) | (~((icmp_ln15_fu_461_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state5)))) begin
        preamble_M_imag_ce0 = 1'b1;
    end else begin
        preamble_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        preamble_M_imag_d0 = bitcast_ln9_1_fu_482_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        preamble_M_imag_d0 = 32'd0;
    end else begin
        preamble_M_imag_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~((icmp_ln15_fu_461_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (icmp_ln15_fu_461_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        preamble_M_imag_we0 = 1'b1;
    end else begin
        preamble_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        preamble_M_real_address0 = zext_ln29_fu_537_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        preamble_M_real_address0 = zext_ln18_fu_487_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        preamble_M_real_address0 = zext_ln10_fu_413_p1;
    end else begin
        preamble_M_real_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state2) | (~((icmp_ln15_fu_461_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state5)))) begin
        preamble_M_real_ce0 = 1'b1;
    end else begin
        preamble_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        preamble_M_real_d0 = bitcast_ln9_fu_477_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        preamble_M_real_d0 = 32'd0;
    end else begin
        preamble_M_real_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~((icmp_ln15_fu_461_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (icmp_ln15_fu_461_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        preamble_M_real_we0 = 1'b1;
    end else begin
        preamble_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        training_sym_M_imag_address0 = zext_ln29_fu_537_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        training_sym_M_imag_address0 = zext_ln24_fu_519_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        training_sym_M_imag_address0 = zext_ln10_1_fu_431_p1;
    end else begin
        training_sym_M_imag_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | (~((icmp_ln21_fu_493_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state6)))) begin
        training_sym_M_imag_ce0 = 1'b1;
    end else begin
        training_sym_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        training_sym_M_imag_d0 = bitcast_ln9_3_fu_514_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        training_sym_M_imag_d0 = 32'd0;
    end else begin
        training_sym_M_imag_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (~((icmp_ln21_fu_493_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (icmp_ln21_fu_493_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        training_sym_M_imag_we0 = 1'b1;
    end else begin
        training_sym_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        training_sym_M_real_address0 = zext_ln29_fu_537_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        training_sym_M_real_address0 = zext_ln24_fu_519_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        training_sym_M_real_address0 = zext_ln10_1_fu_431_p1;
    end else begin
        training_sym_M_real_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | (~((icmp_ln21_fu_493_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state6)))) begin
        training_sym_M_real_ce0 = 1'b1;
    end else begin
        training_sym_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        training_sym_M_real_d0 = bitcast_ln9_2_fu_509_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        training_sym_M_real_d0 = 32'd0;
    end else begin
        training_sym_M_real_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (~((icmp_ln21_fu_493_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (icmp_ln21_fu_493_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        training_sym_M_real_we0 = 1'b1;
    end else begin
        training_sym_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_419_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln10_1_fu_437_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln12_fu_455_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((icmp_ln15_fu_461_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (icmp_ln15_fu_461_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if ((~((icmp_ln15_fu_461_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (icmp_ln15_fu_461_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((icmp_ln21_fu_493_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (icmp_ln21_fu_493_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if ((~((icmp_ln21_fu_493_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (icmp_ln21_fu_493_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln28_fu_525_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state35 : begin
            if ((~((out_stream_V_last_V_1_state == 2'd1) | (out_stream_V_data_1_state == 2'd1) | ((out_stream_V_last_V_1_state == 2'd3) & (out_stream_TREADY == 1'b0)) | ((out_stream_V_data_1_state == 2'd3) & (out_stream_TREADY == 1'b0))) & (icmp_ln33_fu_545_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((out_stream_V_last_V_1_state == 2'd1) | (out_stream_V_data_1_state == 2'd1) | ((out_stream_V_last_V_1_state == 2'd3) & (out_stream_TREADY == 1'b0)) | ((out_stream_V_data_1_state == 2'd3) & (out_stream_TREADY == 1'b0))) & (icmp_ln33_fu_545_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((1'b1 == ap_CS_fsm_state36) & (out_stream_V_data_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((1'b1 == ap_CS_fsm_state37) & (out_stream_V_data_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_1_fu_425_p2 = (phi_ln10_1_reg_283 + 6'd1);

assign add_ln10_fu_407_p2 = (phi_ln10_reg_272 + 6'd1);

assign add_ln12_fu_443_p2 = (phi_ln12_reg_294 + 6'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state35 = ((out_stream_V_last_V_1_state == 2'd1) | (out_stream_V_data_1_state == 2'd1) | ((out_stream_V_last_V_1_state == 2'd3) & (out_stream_TREADY == 1'b0)) | ((out_stream_V_data_1_state == 2'd3) & (out_stream_TREADY == 1'b0)));
end

always @ (*) begin
    ap_block_state5 = ((icmp_ln15_fu_461_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state6 = ((icmp_ln21_fu_493_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln162_1_fu_573_p1 = LS_out_M_imag_q0;

assign bitcast_ln162_fu_569_p1 = LS_out_M_real_q0;

assign bitcast_ln9_1_fu_482_p1 = grp_fu_397_p4;

assign bitcast_ln9_2_fu_509_p1 = trunc_ln9_1_fu_505_p1;

assign bitcast_ln9_3_fu_514_p1 = grp_fu_397_p4;

assign bitcast_ln9_fu_477_p1 = trunc_ln9_fu_473_p1;

assign grp_fu_397_p4 = {{in_stream_V_data_0_data_out[63:32]}};

assign i_1_fu_499_p2 = (i3_0_reg_316 + 6'd1);

assign i_2_fu_531_p2 = (i5_0_reg_327 + 6'd1);

assign i_3_fu_551_p2 = (i6_0_reg_338 + 6'd1);

assign i_fu_467_p2 = (i_0_reg_305 + 6'd1);

assign icmp_ln10_1_fu_437_p2 = ((phi_ln10_1_reg_283 == 6'd51) ? 1'b1 : 1'b0);

assign icmp_ln10_fu_419_p2 = ((phi_ln10_reg_272 == 6'd51) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_455_p2 = ((phi_ln12_reg_294 == 6'd51) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_461_p2 = ((i_0_reg_305 == 6'd52) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_493_p2 = ((i3_0_reg_316 == 6'd52) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_525_p2 = ((i5_0_reg_327 == 6'd52) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_545_p2 = ((i6_0_reg_338 == 6'd52) ? 1'b1 : 1'b0);

assign in_stream_TREADY = in_stream_V_last_V_0_state[1'd1];

assign in_stream_V_data_0_ack_in = in_stream_V_data_0_state[1'd1];

assign in_stream_V_data_0_load_A = (in_stream_V_data_0_state_cmp_full & ~in_stream_V_data_0_sel_wr);

assign in_stream_V_data_0_load_B = (in_stream_V_data_0_state_cmp_full & in_stream_V_data_0_sel_wr);

assign in_stream_V_data_0_sel = in_stream_V_data_0_sel_rd;

assign in_stream_V_data_0_state_cmp_full = ((in_stream_V_data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_stream_V_data_0_vld_in = in_stream_TVALID;

assign in_stream_V_data_0_vld_out = in_stream_V_data_0_state[1'd0];

assign in_stream_V_last_V_0_vld_in = in_stream_TVALID;

assign out_stream_TDATA = out_stream_V_data_1_data_out;

assign out_stream_TLAST = out_stream_V_last_V_1_data_out;

assign out_stream_TVALID = out_stream_V_last_V_1_state[1'd0];

assign out_stream_V_data_1_ack_in = out_stream_V_data_1_state[1'd1];

assign out_stream_V_data_1_ack_out = out_stream_TREADY;

assign out_stream_V_data_1_load_A = (out_stream_V_data_1_state_cmp_full & ~out_stream_V_data_1_sel_wr);

assign out_stream_V_data_1_load_B = (out_stream_V_data_1_state_cmp_full & out_stream_V_data_1_sel_wr);

assign out_stream_V_data_1_sel = out_stream_V_data_1_sel_rd;

assign out_stream_V_data_1_state_cmp_full = ((out_stream_V_data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_stream_V_data_1_vld_out = out_stream_V_data_1_state[1'd0];

assign out_stream_V_last_V_1_ack_in = out_stream_V_last_V_1_state[1'd1];

assign out_stream_V_last_V_1_ack_out = out_stream_TREADY;

assign out_stream_V_last_V_1_load_A = (out_stream_V_last_V_1_state_cmp_full & ~out_stream_V_last_V_1_sel_wr);

assign out_stream_V_last_V_1_load_B = (out_stream_V_last_V_1_state_cmp_full & out_stream_V_last_V_1_sel_wr);

assign out_stream_V_last_V_1_sel = out_stream_V_last_V_1_sel_rd;

assign out_stream_V_last_V_1_state_cmp_full = ((out_stream_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_stream_V_last_V_1_vld_out = out_stream_V_last_V_1_state[1'd0];

assign tmp_data_2_fu_577_p3 = {{bitcast_ln162_1_fu_573_p1}, {bitcast_ln162_fu_569_p1}};

assign tmp_last_V_fu_563_p2 = ((i6_0_reg_338 == 6'd51) ? 1'b1 : 1'b0);

assign trunc_ln9_1_fu_505_p1 = in_stream_V_data_0_data_out[31:0];

assign trunc_ln9_fu_473_p1 = in_stream_V_data_0_data_out[31:0];

assign zext_ln10_1_fu_431_p1 = phi_ln10_1_reg_283;

assign zext_ln10_fu_413_p1 = phi_ln10_reg_272;

assign zext_ln12_fu_449_p1 = phi_ln12_reg_294;

assign zext_ln18_fu_487_p1 = i_0_reg_305;

assign zext_ln24_fu_519_p1 = i3_0_reg_316;

assign zext_ln29_fu_537_p1 = i5_0_reg_327;

assign zext_ln36_fu_557_p1 = i6_0_reg_338;

always @ (posedge ap_clk) begin
    zext_ln29_reg_634[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //LS_estimator
