-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LS_estimator is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_stream_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    in_stream_TVALID : IN STD_LOGIC;
    in_stream_TREADY : OUT STD_LOGIC;
    in_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_stream_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_stream_TVALID : OUT STD_LOGIC;
    out_stream_TREADY : IN STD_LOGIC;
    out_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of LS_estimator is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "LS_estimator,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=1876,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=24,HLS_SYN_FF=3845,HLS_SYN_LUT=5872,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (36 downto 0) := "0000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (36 downto 0) := "0000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (36 downto 0) := "0000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (36 downto 0) := "0000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (36 downto 0) := "0000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (36 downto 0) := "0000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (36 downto 0) := "0001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (36 downto 0) := "0010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (36 downto 0) := "0100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (36 downto 0) := "1000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_33 : STD_LOGIC_VECTOR (5 downto 0) := "110011";
    constant ap_const_lv6_34 : STD_LOGIC_VECTOR (5 downto 0) := "110100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal in_stream_V_data_0_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal in_stream_V_data_0_vld_in : STD_LOGIC;
    signal in_stream_V_data_0_vld_out : STD_LOGIC;
    signal in_stream_V_data_0_ack_in : STD_LOGIC;
    signal in_stream_V_data_0_ack_out : STD_LOGIC;
    signal in_stream_V_data_0_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal in_stream_V_data_0_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal in_stream_V_data_0_sel_rd : STD_LOGIC := '0';
    signal in_stream_V_data_0_sel_wr : STD_LOGIC := '0';
    signal in_stream_V_data_0_sel : STD_LOGIC;
    signal in_stream_V_data_0_load_A : STD_LOGIC;
    signal in_stream_V_data_0_load_B : STD_LOGIC;
    signal in_stream_V_data_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_stream_V_data_0_state_cmp_full : STD_LOGIC;
    signal in_stream_V_last_V_0_vld_in : STD_LOGIC;
    signal in_stream_V_last_V_0_ack_out : STD_LOGIC;
    signal in_stream_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_V_data_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal out_stream_V_data_1_vld_in : STD_LOGIC;
    signal out_stream_V_data_1_vld_out : STD_LOGIC;
    signal out_stream_V_data_1_ack_in : STD_LOGIC;
    signal out_stream_V_data_1_ack_out : STD_LOGIC;
    signal out_stream_V_data_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal out_stream_V_data_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal out_stream_V_data_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_V_data_1_sel_wr : STD_LOGIC := '0';
    signal out_stream_V_data_1_sel : STD_LOGIC;
    signal out_stream_V_data_1_load_A : STD_LOGIC;
    signal out_stream_V_data_1_load_B : STD_LOGIC;
    signal out_stream_V_data_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_V_data_1_state_cmp_full : STD_LOGIC;
    signal out_stream_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_V_last_V_1_vld_in : STD_LOGIC;
    signal out_stream_V_last_V_1_vld_out : STD_LOGIC;
    signal out_stream_V_last_V_1_ack_in : STD_LOGIC;
    signal out_stream_V_last_V_1_ack_out : STD_LOGIC;
    signal out_stream_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal out_stream_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal out_stream_V_last_V_1_sel : STD_LOGIC;
    signal out_stream_V_last_V_1_load_A : STD_LOGIC;
    signal out_stream_V_last_V_1_load_B : STD_LOGIC;
    signal out_stream_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_stream_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal in_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln15_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln21_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal add_ln10_fu_407_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln10_1_fu_425_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln12_fu_443_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_fu_467_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state5 : BOOLEAN;
    signal i_1_fu_499_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state6 : BOOLEAN;
    signal i_2_fu_531_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_2_reg_629 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln29_fu_537_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_reg_634 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln28_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal preamble_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_real_reg_660 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal preamble_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_imag_reg_666 : STD_LOGIC_VECTOR (31 downto 0);
    signal training_sym_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_t_real_reg_672 : STD_LOGIC_VECTOR (31 downto 0);
    signal training_sym_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_t_imag_reg_680 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_361_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_reg_688 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_365_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_i_reg_693 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_369_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_i_i_reg_698 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_373_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i_i_reg_703 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_377_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_i_i_reg_708 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_381_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_i_i_reg_713 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_349_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_i_i_reg_718 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_353_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_i_i_reg_723 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_357_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_i_i_reg_729 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_385_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal complex_M_real_writ_reg_734 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal grp_fu_389_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal complex_M_imag_writ_reg_739 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_fu_551_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_3_reg_747 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_block_state35 : BOOLEAN;
    signal icmp_ln33_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_762 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_2_fu_577_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal preamble_M_real_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal preamble_M_real_ce0 : STD_LOGIC;
    signal preamble_M_real_we0 : STD_LOGIC;
    signal preamble_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal preamble_M_imag_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal preamble_M_imag_ce0 : STD_LOGIC;
    signal preamble_M_imag_we0 : STD_LOGIC;
    signal preamble_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal training_sym_M_real_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal training_sym_M_real_ce0 : STD_LOGIC;
    signal training_sym_M_real_we0 : STD_LOGIC;
    signal training_sym_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal training_sym_M_imag_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal training_sym_M_imag_ce0 : STD_LOGIC;
    signal training_sym_M_imag_we0 : STD_LOGIC;
    signal training_sym_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal LS_out_M_real_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal LS_out_M_real_ce0 : STD_LOGIC;
    signal LS_out_M_real_we0 : STD_LOGIC;
    signal LS_out_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal LS_out_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal LS_out_M_imag_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal LS_out_M_imag_ce0 : STD_LOGIC;
    signal LS_out_M_imag_we0 : STD_LOGIC;
    signal LS_out_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal LS_out_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln10_reg_272 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln10_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln10_1_reg_283 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln10_1_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln12_reg_294 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln12_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_305 : STD_LOGIC_VECTOR (5 downto 0);
    signal i3_0_reg_316 : STD_LOGIC_VECTOR (5 downto 0);
    signal i5_0_reg_327 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal i6_0_reg_338 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln10_fu_413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln10_1_fu_431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_fu_487_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_fu_519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_fu_557_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln9_fu_477_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln9_1_fu_482_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln9_2_fu_509_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln9_3_fu_514_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal trunc_ln9_fu_473_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_397_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln9_1_fu_505_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln162_1_fu_573_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln162_fu_569_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (36 downto 0);

    component LS_estimator_faddhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LS_estimator_fsubibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LS_estimator_fmuljbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LS_estimator_fdivkbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LS_estimator_preabkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    preamble_M_real_U : component LS_estimator_preabkb
    generic map (
        DataWidth => 32,
        AddressRange => 52,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => preamble_M_real_address0,
        ce0 => preamble_M_real_ce0,
        we0 => preamble_M_real_we0,
        d0 => preamble_M_real_d0,
        q0 => preamble_M_real_q0);

    preamble_M_imag_U : component LS_estimator_preabkb
    generic map (
        DataWidth => 32,
        AddressRange => 52,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => preamble_M_imag_address0,
        ce0 => preamble_M_imag_ce0,
        we0 => preamble_M_imag_we0,
        d0 => preamble_M_imag_d0,
        q0 => preamble_M_imag_q0);

    training_sym_M_real_U : component LS_estimator_preabkb
    generic map (
        DataWidth => 32,
        AddressRange => 52,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => training_sym_M_real_address0,
        ce0 => training_sym_M_real_ce0,
        we0 => training_sym_M_real_we0,
        d0 => training_sym_M_real_d0,
        q0 => training_sym_M_real_q0);

    training_sym_M_imag_U : component LS_estimator_preabkb
    generic map (
        DataWidth => 32,
        AddressRange => 52,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => training_sym_M_imag_address0,
        ce0 => training_sym_M_imag_ce0,
        we0 => training_sym_M_imag_we0,
        d0 => training_sym_M_imag_d0,
        q0 => training_sym_M_imag_q0);

    LS_out_M_real_U : component LS_estimator_preabkb
    generic map (
        DataWidth => 32,
        AddressRange => 52,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => LS_out_M_real_address0,
        ce0 => LS_out_M_real_ce0,
        we0 => LS_out_M_real_we0,
        d0 => LS_out_M_real_d0,
        q0 => LS_out_M_real_q0);

    LS_out_M_imag_U : component LS_estimator_preabkb
    generic map (
        DataWidth => 32,
        AddressRange => 52,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => LS_out_M_imag_address0,
        ce0 => LS_out_M_imag_ce0,
        we0 => LS_out_M_imag_we0,
        d0 => LS_out_M_imag_d0,
        q0 => LS_out_M_imag_q0);

    LS_estimator_faddhbi_U1 : component LS_estimator_faddhbi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_i_i_reg_688,
        din1 => tmp_1_i_i_reg_693,
        ce => ap_const_logic_1,
        dout => grp_fu_349_p2);

    LS_estimator_faddhbi_U2 : component LS_estimator_faddhbi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_3_i_i_reg_698,
        din1 => tmp_4_i_i_reg_703,
        ce => ap_const_logic_1,
        dout => grp_fu_353_p2);

    LS_estimator_fsubibs_U3 : component LS_estimator_fsubibs
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_6_i_i_reg_708,
        din1 => tmp_7_i_i_reg_713,
        ce => ap_const_logic_1,
        dout => grp_fu_357_p2);

    LS_estimator_fmuljbC_U4 : component LS_estimator_fmuljbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => p_r_M_real_reg_660,
        din1 => p_t_real_reg_672,
        ce => ap_const_logic_1,
        dout => grp_fu_361_p2);

    LS_estimator_fmuljbC_U5 : component LS_estimator_fmuljbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => p_r_M_imag_reg_666,
        din1 => p_t_imag_reg_680,
        ce => ap_const_logic_1,
        dout => grp_fu_365_p2);

    LS_estimator_fmuljbC_U6 : component LS_estimator_fmuljbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => p_t_real_reg_672,
        din1 => p_t_real_reg_672,
        ce => ap_const_logic_1,
        dout => grp_fu_369_p2);

    LS_estimator_fmuljbC_U7 : component LS_estimator_fmuljbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => p_t_imag_reg_680,
        din1 => p_t_imag_reg_680,
        ce => ap_const_logic_1,
        dout => grp_fu_373_p2);

    LS_estimator_fmuljbC_U8 : component LS_estimator_fmuljbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => p_r_M_imag_reg_666,
        din1 => p_t_real_reg_672,
        ce => ap_const_logic_1,
        dout => grp_fu_377_p2);

    LS_estimator_fmuljbC_U9 : component LS_estimator_fmuljbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => p_r_M_real_reg_660,
        din1 => p_t_imag_reg_680,
        ce => ap_const_logic_1,
        dout => grp_fu_381_p2);

    LS_estimator_fdivkbM_U10 : component LS_estimator_fdivkbM
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_2_i_i_reg_718,
        din1 => tmp_5_i_i_reg_723,
        ce => ap_const_logic_1,
        dout => grp_fu_385_p2);

    LS_estimator_fdivkbM_U11 : component LS_estimator_fdivkbM
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_8_i_i_reg_729,
        din1 => tmp_5_i_i_reg_723,
        ce => ap_const_logic_1,
        dout => grp_fu_389_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    in_stream_V_data_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream_V_data_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_stream_V_data_0_ack_out = ap_const_logic_1) and (in_stream_V_data_0_vld_out = ap_const_logic_1))) then 
                                        in_stream_V_data_0_sel_rd <= not(in_stream_V_data_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_stream_V_data_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream_V_data_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_stream_V_data_0_ack_in = ap_const_logic_1) and (in_stream_V_data_0_vld_in = ap_const_logic_1))) then 
                                        in_stream_V_data_0_sel_wr <= not(in_stream_V_data_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_stream_V_data_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream_V_data_0_state <= ap_const_lv2_0;
            else
                if ((((in_stream_V_data_0_state = ap_const_lv2_2) and (in_stream_V_data_0_vld_in = ap_const_logic_0)) or ((in_stream_V_data_0_state = ap_const_lv2_3) and (in_stream_V_data_0_vld_in = ap_const_logic_0) and (in_stream_V_data_0_ack_out = ap_const_logic_1)))) then 
                    in_stream_V_data_0_state <= ap_const_lv2_2;
                elsif ((((in_stream_V_data_0_state = ap_const_lv2_1) and (in_stream_V_data_0_ack_out = ap_const_logic_0)) or ((in_stream_V_data_0_state = ap_const_lv2_3) and (in_stream_V_data_0_ack_out = ap_const_logic_0) and (in_stream_V_data_0_vld_in = ap_const_logic_1)))) then 
                    in_stream_V_data_0_state <= ap_const_lv2_1;
                elsif (((not(((in_stream_V_data_0_vld_in = ap_const_logic_0) and (in_stream_V_data_0_ack_out = ap_const_logic_1))) and not(((in_stream_V_data_0_ack_out = ap_const_logic_0) and (in_stream_V_data_0_vld_in = ap_const_logic_1))) and (in_stream_V_data_0_state = ap_const_lv2_3)) or ((in_stream_V_data_0_state = ap_const_lv2_1) and (in_stream_V_data_0_ack_out = ap_const_logic_1)) or ((in_stream_V_data_0_state = ap_const_lv2_2) and (in_stream_V_data_0_vld_in = ap_const_logic_1)))) then 
                    in_stream_V_data_0_state <= ap_const_lv2_3;
                else 
                    in_stream_V_data_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_stream_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_stream_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_stream_V_last_V_0_state = ap_const_lv2_2) and (in_stream_V_last_V_0_vld_in = ap_const_logic_0)) or ((in_stream_V_last_V_0_state = ap_const_lv2_3) and (in_stream_V_last_V_0_vld_in = ap_const_logic_0) and (in_stream_V_last_V_0_ack_out = ap_const_logic_1)))) then 
                    in_stream_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((in_stream_V_last_V_0_state = ap_const_lv2_1) and (in_stream_V_last_V_0_ack_out = ap_const_logic_0)) or ((in_stream_V_last_V_0_state = ap_const_lv2_3) and (in_stream_V_last_V_0_ack_out = ap_const_logic_0) and (in_stream_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    in_stream_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_stream_V_last_V_0_vld_in = ap_const_logic_0) and (in_stream_V_last_V_0_ack_out = ap_const_logic_1))) and not(((in_stream_V_last_V_0_ack_out = ap_const_logic_0) and (in_stream_V_last_V_0_vld_in = ap_const_logic_1))) and (in_stream_V_last_V_0_state = ap_const_lv2_3)) or ((in_stream_V_last_V_0_state = ap_const_lv2_1) and (in_stream_V_last_V_0_ack_out = ap_const_logic_1)) or ((in_stream_V_last_V_0_state = ap_const_lv2_2) and (in_stream_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    in_stream_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    in_stream_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_data_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_data_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_V_data_1_ack_out = ap_const_logic_1) and (out_stream_V_data_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_V_data_1_sel_rd <= not(out_stream_V_data_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_data_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_data_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_stream_V_data_1_ack_in = ap_const_logic_1) and (out_stream_V_data_1_vld_in = ap_const_logic_1))) then 
                                        out_stream_V_data_1_sel_wr <= not(out_stream_V_data_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_data_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_data_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_V_data_1_state = ap_const_lv2_2) and (out_stream_V_data_1_vld_in = ap_const_logic_0)) or ((out_stream_V_data_1_state = ap_const_lv2_3) and (out_stream_V_data_1_vld_in = ap_const_logic_0) and (out_stream_V_data_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_V_data_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_V_data_1_state = ap_const_lv2_1) and (out_stream_TREADY = ap_const_logic_0)) or ((out_stream_V_data_1_state = ap_const_lv2_3) and (out_stream_TREADY = ap_const_logic_0) and (out_stream_V_data_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_data_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_V_data_1_vld_in = ap_const_logic_0) and (out_stream_V_data_1_ack_out = ap_const_logic_1))) and not(((out_stream_TREADY = ap_const_logic_0) and (out_stream_V_data_1_vld_in = ap_const_logic_1))) and (out_stream_V_data_1_state = ap_const_lv2_3)) or ((out_stream_V_data_1_state = ap_const_lv2_1) and (out_stream_V_data_1_ack_out = ap_const_logic_1)) or ((out_stream_V_data_1_state = ap_const_lv2_2) and (out_stream_V_data_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_data_1_state <= ap_const_lv2_3;
                else 
                    out_stream_V_data_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_stream_V_last_V_1_ack_out = ap_const_logic_1) and (out_stream_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        out_stream_V_last_V_1_sel_rd <= not(out_stream_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_stream_V_last_V_1_ack_in = ap_const_logic_1) and (out_stream_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        out_stream_V_last_V_1_sel_wr <= not(out_stream_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_stream_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_stream_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_stream_V_last_V_1_state = ap_const_lv2_2) and (out_stream_V_last_V_1_vld_in = ap_const_logic_0)) or ((out_stream_V_last_V_1_state = ap_const_lv2_3) and (out_stream_V_last_V_1_vld_in = ap_const_logic_0) and (out_stream_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    out_stream_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((out_stream_V_last_V_1_state = ap_const_lv2_1) and (out_stream_TREADY = ap_const_logic_0)) or ((out_stream_V_last_V_1_state = ap_const_lv2_3) and (out_stream_TREADY = ap_const_logic_0) and (out_stream_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_stream_V_last_V_1_vld_in = ap_const_logic_0) and (out_stream_V_last_V_1_ack_out = ap_const_logic_1))) and not(((out_stream_TREADY = ap_const_logic_0) and (out_stream_V_last_V_1_vld_in = ap_const_logic_1))) and (out_stream_V_last_V_1_state = ap_const_lv2_3)) or ((out_stream_V_last_V_1_state = ap_const_lv2_1) and (out_stream_V_last_V_1_ack_out = ap_const_logic_1)) or ((out_stream_V_last_V_1_state = ap_const_lv2_2) and (out_stream_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    out_stream_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    out_stream_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i3_0_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln15_fu_461_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln15_fu_461_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i3_0_reg_316 <= ap_const_lv6_0;
            elsif ((not(((icmp_ln21_fu_493_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln21_fu_493_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i3_0_reg_316 <= i_1_fu_499_p2;
            end if; 
        end if;
    end process;

    i5_0_reg_327_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln21_fu_493_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln21_fu_493_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i5_0_reg_327 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                i5_0_reg_327 <= i_2_reg_629;
            end if; 
        end if;
    end process;

    i6_0_reg_338_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln28_fu_525_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i6_0_reg_338 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state37) and (out_stream_V_data_1_ack_in = ap_const_logic_1))) then 
                i6_0_reg_338 <= i_3_reg_747;
            end if; 
        end if;
    end process;

    i_0_reg_305_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_455_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_0_reg_305 <= ap_const_lv6_0;
            elsif ((not(((icmp_ln15_fu_461_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln15_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_0_reg_305 <= i_fu_467_p2;
            end if; 
        end if;
    end process;

    phi_ln10_1_reg_283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_419_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln10_1_reg_283 <= ap_const_lv6_0;
            elsif (((icmp_ln10_1_fu_437_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_ln10_1_reg_283 <= add_ln10_1_fu_425_p2;
            end if; 
        end if;
    end process;

    phi_ln10_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_419_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln10_reg_272 <= add_ln10_fu_407_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                phi_ln10_reg_272 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    phi_ln12_reg_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_1_fu_437_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_ln12_reg_294 <= ap_const_lv6_0;
            elsif (((icmp_ln12_fu_455_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_ln12_reg_294 <= add_ln12_fu_443_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                complex_M_imag_writ_reg_739 <= grp_fu_389_p2;
                complex_M_real_writ_reg_734 <= grp_fu_385_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_2_reg_629 <= i_2_fu_531_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out_stream_V_last_V_1_state = ap_const_lv2_1) or (out_stream_V_data_1_state = ap_const_lv2_1) or ((out_stream_V_last_V_1_state = ap_const_lv2_3) and (out_stream_TREADY = ap_const_logic_0)) or ((out_stream_V_data_1_state = ap_const_lv2_3) and (out_stream_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                i_3_reg_747 <= i_3_fu_551_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_stream_V_data_0_load_A = ap_const_logic_1)) then
                in_stream_V_data_0_payload_A <= in_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_stream_V_data_0_load_B = ap_const_logic_1)) then
                in_stream_V_data_0_payload_B <= in_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_V_data_1_load_A = ap_const_logic_1)) then
                out_stream_V_data_1_payload_A <= tmp_data_2_fu_577_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_V_data_1_load_B = ap_const_logic_1)) then
                out_stream_V_data_1_payload_B <= tmp_data_2_fu_577_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_V_last_V_1_load_A = ap_const_logic_1)) then
                out_stream_V_last_V_1_payload_A <= tmp_last_V_reg_762;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_stream_V_last_V_1_load_B = ap_const_logic_1)) then
                out_stream_V_last_V_1_payload_B <= tmp_last_V_reg_762;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                p_r_M_imag_reg_666 <= preamble_M_imag_q0;
                p_r_M_real_reg_660 <= preamble_M_real_q0;
                p_t_imag_reg_680 <= training_sym_M_imag_q0;
                p_t_real_reg_672 <= training_sym_M_real_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_1_i_i_reg_693 <= grp_fu_365_p2;
                tmp_3_i_i_reg_698 <= grp_fu_369_p2;
                tmp_4_i_i_reg_703 <= grp_fu_373_p2;
                tmp_6_i_i_reg_708 <= grp_fu_377_p2;
                tmp_7_i_i_reg_713 <= grp_fu_381_p2;
                tmp_i_i_reg_688 <= grp_fu_361_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                tmp_2_i_i_reg_718 <= grp_fu_349_p2;
                tmp_5_i_i_reg_723 <= grp_fu_353_p2;
                tmp_8_i_i_reg_729 <= grp_fu_357_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((out_stream_V_last_V_1_state = ap_const_lv2_1) or (out_stream_V_data_1_state = ap_const_lv2_1) or ((out_stream_V_last_V_1_state = ap_const_lv2_3) and (out_stream_TREADY = ap_const_logic_0)) or ((out_stream_V_data_1_state = ap_const_lv2_3) and (out_stream_TREADY = ap_const_logic_0)))) and (icmp_ln33_fu_545_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                tmp_last_V_reg_762 <= tmp_last_V_fu_563_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln28_fu_525_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    zext_ln29_reg_634(5 downto 0) <= zext_ln29_fu_537_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln29_reg_634(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (in_stream_V_data_0_vld_out, out_stream_TREADY, out_stream_V_data_1_ack_in, out_stream_V_data_1_state, out_stream_V_last_V_1_state, ap_CS_fsm, ap_CS_fsm_state5, icmp_ln15_fu_461_p2, ap_CS_fsm_state6, icmp_ln21_fu_493_p2, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state7, icmp_ln28_fu_525_p2, ap_CS_fsm_state35, icmp_ln33_fu_545_p2, icmp_ln10_fu_419_p2, icmp_ln10_1_fu_437_p2, icmp_ln12_fu_455_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln10_fu_419_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln10_1_fu_437_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln12_fu_455_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((icmp_ln15_fu_461_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln15_fu_461_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif ((not(((icmp_ln15_fu_461_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln15_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if ((not(((icmp_ln21_fu_493_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln21_fu_493_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif ((not(((icmp_ln21_fu_493_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln21_fu_493_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln28_fu_525_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state35 => 
                if ((not(((out_stream_V_last_V_1_state = ap_const_lv2_1) or (out_stream_V_data_1_state = ap_const_lv2_1) or ((out_stream_V_last_V_1_state = ap_const_lv2_3) and (out_stream_TREADY = ap_const_logic_0)) or ((out_stream_V_data_1_state = ap_const_lv2_3) and (out_stream_TREADY = ap_const_logic_0)))) and (icmp_ln33_fu_545_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((out_stream_V_last_V_1_state = ap_const_lv2_1) or (out_stream_V_data_1_state = ap_const_lv2_1) or ((out_stream_V_last_V_1_state = ap_const_lv2_3) and (out_stream_TREADY = ap_const_logic_0)) or ((out_stream_V_data_1_state = ap_const_lv2_3) and (out_stream_TREADY = ap_const_logic_0)))) and (icmp_ln33_fu_545_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state36) and (out_stream_V_data_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state37) and (out_stream_V_data_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    LS_out_M_imag_address0_assign_proc : process(ap_CS_fsm_state4, zext_ln29_reg_634, ap_CS_fsm_state35, ap_CS_fsm_state34, zext_ln12_fu_449_p1, zext_ln36_fu_557_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            LS_out_M_imag_address0 <= zext_ln36_fu_557_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            LS_out_M_imag_address0 <= zext_ln29_reg_634(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            LS_out_M_imag_address0 <= zext_ln12_fu_449_p1(6 - 1 downto 0);
        else 
            LS_out_M_imag_address0 <= "XXXXXX";
        end if; 
    end process;


    LS_out_M_imag_ce0_assign_proc : process(out_stream_TREADY, out_stream_V_data_1_state, out_stream_V_last_V_1_state, ap_CS_fsm_state4, ap_CS_fsm_state35, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state4) or (not(((out_stream_V_last_V_1_state = ap_const_lv2_1) or (out_stream_V_data_1_state = ap_const_lv2_1) or ((out_stream_V_last_V_1_state = ap_const_lv2_3) and (out_stream_TREADY = ap_const_logic_0)) or ((out_stream_V_data_1_state = ap_const_lv2_3) and (out_stream_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state35)))) then 
            LS_out_M_imag_ce0 <= ap_const_logic_1;
        else 
            LS_out_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    LS_out_M_imag_d0_assign_proc : process(ap_CS_fsm_state4, complex_M_imag_writ_reg_739, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            LS_out_M_imag_d0 <= complex_M_imag_writ_reg_739;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            LS_out_M_imag_d0 <= ap_const_lv32_0;
        else 
            LS_out_M_imag_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    LS_out_M_imag_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            LS_out_M_imag_we0 <= ap_const_logic_1;
        else 
            LS_out_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    LS_out_M_real_address0_assign_proc : process(ap_CS_fsm_state4, zext_ln29_reg_634, ap_CS_fsm_state35, ap_CS_fsm_state34, zext_ln12_fu_449_p1, zext_ln36_fu_557_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            LS_out_M_real_address0 <= zext_ln36_fu_557_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            LS_out_M_real_address0 <= zext_ln29_reg_634(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            LS_out_M_real_address0 <= zext_ln12_fu_449_p1(6 - 1 downto 0);
        else 
            LS_out_M_real_address0 <= "XXXXXX";
        end if; 
    end process;


    LS_out_M_real_ce0_assign_proc : process(out_stream_TREADY, out_stream_V_data_1_state, out_stream_V_last_V_1_state, ap_CS_fsm_state4, ap_CS_fsm_state35, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state4) or (not(((out_stream_V_last_V_1_state = ap_const_lv2_1) or (out_stream_V_data_1_state = ap_const_lv2_1) or ((out_stream_V_last_V_1_state = ap_const_lv2_3) and (out_stream_TREADY = ap_const_logic_0)) or ((out_stream_V_data_1_state = ap_const_lv2_3) and (out_stream_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state35)))) then 
            LS_out_M_real_ce0 <= ap_const_logic_1;
        else 
            LS_out_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    LS_out_M_real_d0_assign_proc : process(ap_CS_fsm_state4, complex_M_real_writ_reg_734, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            LS_out_M_real_d0 <= complex_M_real_writ_reg_734;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            LS_out_M_real_d0 <= ap_const_lv32_0;
        else 
            LS_out_M_real_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    LS_out_M_real_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            LS_out_M_real_we0 <= ap_const_logic_1;
        else 
            LS_out_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln10_1_fu_425_p2 <= std_logic_vector(unsigned(phi_ln10_1_reg_283) + unsigned(ap_const_lv6_1));
    add_ln10_fu_407_p2 <= std_logic_vector(unsigned(phi_ln10_reg_272) + unsigned(ap_const_lv6_1));
    add_ln12_fu_443_p2 <= std_logic_vector(unsigned(phi_ln12_reg_294) + unsigned(ap_const_lv6_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state35_assign_proc : process(out_stream_TREADY, out_stream_V_data_1_state, out_stream_V_last_V_1_state)
    begin
                ap_block_state35 <= ((out_stream_V_last_V_1_state = ap_const_lv2_1) or (out_stream_V_data_1_state = ap_const_lv2_1) or ((out_stream_V_last_V_1_state = ap_const_lv2_3) and (out_stream_TREADY = ap_const_logic_0)) or ((out_stream_V_data_1_state = ap_const_lv2_3) and (out_stream_TREADY = ap_const_logic_0)));
    end process;


    ap_block_state5_assign_proc : process(in_stream_V_data_0_vld_out, icmp_ln15_fu_461_p2)
    begin
                ap_block_state5 <= ((icmp_ln15_fu_461_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state6_assign_proc : process(in_stream_V_data_0_vld_out, icmp_ln21_fu_493_p2)
    begin
                ap_block_state6 <= ((icmp_ln21_fu_493_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln162_1_fu_573_p1 <= LS_out_M_imag_q0;
    bitcast_ln162_fu_569_p1 <= LS_out_M_real_q0;
    bitcast_ln9_1_fu_482_p1 <= grp_fu_397_p4;
    bitcast_ln9_2_fu_509_p1 <= trunc_ln9_1_fu_505_p1;
    bitcast_ln9_3_fu_514_p1 <= grp_fu_397_p4;
    bitcast_ln9_fu_477_p1 <= trunc_ln9_fu_473_p1;
    grp_fu_397_p4 <= in_stream_V_data_0_data_out(63 downto 32);
    i_1_fu_499_p2 <= std_logic_vector(unsigned(i3_0_reg_316) + unsigned(ap_const_lv6_1));
    i_2_fu_531_p2 <= std_logic_vector(unsigned(i5_0_reg_327) + unsigned(ap_const_lv6_1));
    i_3_fu_551_p2 <= std_logic_vector(unsigned(i6_0_reg_338) + unsigned(ap_const_lv6_1));
    i_fu_467_p2 <= std_logic_vector(unsigned(i_0_reg_305) + unsigned(ap_const_lv6_1));
    icmp_ln10_1_fu_437_p2 <= "1" when (phi_ln10_1_reg_283 = ap_const_lv6_33) else "0";
    icmp_ln10_fu_419_p2 <= "1" when (phi_ln10_reg_272 = ap_const_lv6_33) else "0";
    icmp_ln12_fu_455_p2 <= "1" when (phi_ln12_reg_294 = ap_const_lv6_33) else "0";
    icmp_ln15_fu_461_p2 <= "1" when (i_0_reg_305 = ap_const_lv6_34) else "0";
    icmp_ln21_fu_493_p2 <= "1" when (i3_0_reg_316 = ap_const_lv6_34) else "0";
    icmp_ln28_fu_525_p2 <= "1" when (i5_0_reg_327 = ap_const_lv6_34) else "0";
    icmp_ln33_fu_545_p2 <= "1" when (i6_0_reg_338 = ap_const_lv6_34) else "0";

    in_stream_TDATA_blk_n_assign_proc : process(in_stream_V_data_0_state, ap_CS_fsm_state5, icmp_ln15_fu_461_p2, ap_CS_fsm_state6, icmp_ln21_fu_493_p2)
    begin
        if ((((icmp_ln21_fu_493_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln15_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            in_stream_TDATA_blk_n <= in_stream_V_data_0_state(0);
        else 
            in_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_stream_TREADY <= in_stream_V_last_V_0_state(1);
    in_stream_V_data_0_ack_in <= in_stream_V_data_0_state(1);

    in_stream_V_data_0_ack_out_assign_proc : process(in_stream_V_data_0_vld_out, ap_CS_fsm_state5, icmp_ln15_fu_461_p2, ap_CS_fsm_state6, icmp_ln21_fu_493_p2)
    begin
        if (((not(((icmp_ln21_fu_493_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln21_fu_493_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((icmp_ln15_fu_461_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln15_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            in_stream_V_data_0_ack_out <= ap_const_logic_1;
        else 
            in_stream_V_data_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_stream_V_data_0_data_out_assign_proc : process(in_stream_V_data_0_payload_A, in_stream_V_data_0_payload_B, in_stream_V_data_0_sel)
    begin
        if ((in_stream_V_data_0_sel = ap_const_logic_1)) then 
            in_stream_V_data_0_data_out <= in_stream_V_data_0_payload_B;
        else 
            in_stream_V_data_0_data_out <= in_stream_V_data_0_payload_A;
        end if; 
    end process;

    in_stream_V_data_0_load_A <= (in_stream_V_data_0_state_cmp_full and not(in_stream_V_data_0_sel_wr));
    in_stream_V_data_0_load_B <= (in_stream_V_data_0_state_cmp_full and in_stream_V_data_0_sel_wr);
    in_stream_V_data_0_sel <= in_stream_V_data_0_sel_rd;
    in_stream_V_data_0_state_cmp_full <= '0' when (in_stream_V_data_0_state = ap_const_lv2_1) else '1';
    in_stream_V_data_0_vld_in <= in_stream_TVALID;
    in_stream_V_data_0_vld_out <= in_stream_V_data_0_state(0);

    in_stream_V_last_V_0_ack_out_assign_proc : process(in_stream_V_data_0_vld_out, ap_CS_fsm_state5, icmp_ln15_fu_461_p2, ap_CS_fsm_state6, icmp_ln21_fu_493_p2)
    begin
        if (((not(((icmp_ln21_fu_493_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln21_fu_493_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((icmp_ln15_fu_461_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln15_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            in_stream_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            in_stream_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    in_stream_V_last_V_0_vld_in <= in_stream_TVALID;
    out_stream_TDATA <= out_stream_V_data_1_data_out;

    out_stream_TDATA_blk_n_assign_proc : process(out_stream_V_data_1_state, ap_CS_fsm_state36, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            out_stream_TDATA_blk_n <= out_stream_V_data_1_state(1);
        else 
            out_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_TLAST <= out_stream_V_last_V_1_data_out;
    out_stream_TVALID <= out_stream_V_last_V_1_state(0);
    out_stream_V_data_1_ack_in <= out_stream_V_data_1_state(1);
    out_stream_V_data_1_ack_out <= out_stream_TREADY;

    out_stream_V_data_1_data_out_assign_proc : process(out_stream_V_data_1_payload_A, out_stream_V_data_1_payload_B, out_stream_V_data_1_sel)
    begin
        if ((out_stream_V_data_1_sel = ap_const_logic_1)) then 
            out_stream_V_data_1_data_out <= out_stream_V_data_1_payload_B;
        else 
            out_stream_V_data_1_data_out <= out_stream_V_data_1_payload_A;
        end if; 
    end process;

    out_stream_V_data_1_load_A <= (out_stream_V_data_1_state_cmp_full and not(out_stream_V_data_1_sel_wr));
    out_stream_V_data_1_load_B <= (out_stream_V_data_1_state_cmp_full and out_stream_V_data_1_sel_wr);
    out_stream_V_data_1_sel <= out_stream_V_data_1_sel_rd;
    out_stream_V_data_1_state_cmp_full <= '0' when (out_stream_V_data_1_state = ap_const_lv2_1) else '1';

    out_stream_V_data_1_vld_in_assign_proc : process(out_stream_V_data_1_ack_in, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) and (out_stream_V_data_1_ack_in = ap_const_logic_1))) then 
            out_stream_V_data_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_V_data_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_V_data_1_vld_out <= out_stream_V_data_1_state(0);
    out_stream_V_last_V_1_ack_in <= out_stream_V_last_V_1_state(1);
    out_stream_V_last_V_1_ack_out <= out_stream_TREADY;

    out_stream_V_last_V_1_data_out_assign_proc : process(out_stream_V_last_V_1_payload_A, out_stream_V_last_V_1_payload_B, out_stream_V_last_V_1_sel)
    begin
        if ((out_stream_V_last_V_1_sel = ap_const_logic_1)) then 
            out_stream_V_last_V_1_data_out <= out_stream_V_last_V_1_payload_B;
        else 
            out_stream_V_last_V_1_data_out <= out_stream_V_last_V_1_payload_A;
        end if; 
    end process;

    out_stream_V_last_V_1_load_A <= (out_stream_V_last_V_1_state_cmp_full and not(out_stream_V_last_V_1_sel_wr));
    out_stream_V_last_V_1_load_B <= (out_stream_V_last_V_1_state_cmp_full and out_stream_V_last_V_1_sel_wr);
    out_stream_V_last_V_1_sel <= out_stream_V_last_V_1_sel_rd;
    out_stream_V_last_V_1_state_cmp_full <= '0' when (out_stream_V_last_V_1_state = ap_const_lv2_1) else '1';

    out_stream_V_last_V_1_vld_in_assign_proc : process(out_stream_V_data_1_ack_in, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) and (out_stream_V_data_1_ack_in = ap_const_logic_1))) then 
            out_stream_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            out_stream_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_stream_V_last_V_1_vld_out <= out_stream_V_last_V_1_state(0);

    preamble_M_imag_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state7, zext_ln29_fu_537_p1, zext_ln10_fu_413_p1, zext_ln18_fu_487_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            preamble_M_imag_address0 <= zext_ln29_fu_537_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            preamble_M_imag_address0 <= zext_ln18_fu_487_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            preamble_M_imag_address0 <= zext_ln10_fu_413_p1(6 - 1 downto 0);
        else 
            preamble_M_imag_address0 <= "XXXXXX";
        end if; 
    end process;


    preamble_M_imag_ce0_assign_proc : process(in_stream_V_data_0_vld_out, ap_CS_fsm_state5, icmp_ln15_fu_461_p2, ap_CS_fsm_state2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state2) or (not(((icmp_ln15_fu_461_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            preamble_M_imag_ce0 <= ap_const_logic_1;
        else 
            preamble_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    preamble_M_imag_d0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state2, bitcast_ln9_1_fu_482_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            preamble_M_imag_d0 <= bitcast_ln9_1_fu_482_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            preamble_M_imag_d0 <= ap_const_lv32_0;
        else 
            preamble_M_imag_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    preamble_M_imag_we0_assign_proc : process(in_stream_V_data_0_vld_out, ap_CS_fsm_state5, icmp_ln15_fu_461_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((icmp_ln15_fu_461_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln15_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            preamble_M_imag_we0 <= ap_const_logic_1;
        else 
            preamble_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    preamble_M_real_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state7, zext_ln29_fu_537_p1, zext_ln10_fu_413_p1, zext_ln18_fu_487_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            preamble_M_real_address0 <= zext_ln29_fu_537_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            preamble_M_real_address0 <= zext_ln18_fu_487_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            preamble_M_real_address0 <= zext_ln10_fu_413_p1(6 - 1 downto 0);
        else 
            preamble_M_real_address0 <= "XXXXXX";
        end if; 
    end process;


    preamble_M_real_ce0_assign_proc : process(in_stream_V_data_0_vld_out, ap_CS_fsm_state5, icmp_ln15_fu_461_p2, ap_CS_fsm_state2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state2) or (not(((icmp_ln15_fu_461_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            preamble_M_real_ce0 <= ap_const_logic_1;
        else 
            preamble_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    preamble_M_real_d0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state2, bitcast_ln9_fu_477_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            preamble_M_real_d0 <= bitcast_ln9_fu_477_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            preamble_M_real_d0 <= ap_const_lv32_0;
        else 
            preamble_M_real_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    preamble_M_real_we0_assign_proc : process(in_stream_V_data_0_vld_out, ap_CS_fsm_state5, icmp_ln15_fu_461_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((icmp_ln15_fu_461_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln15_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            preamble_M_real_we0 <= ap_const_logic_1;
        else 
            preamble_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_data_2_fu_577_p3 <= (bitcast_ln162_1_fu_573_p1 & bitcast_ln162_fu_569_p1);
    tmp_last_V_fu_563_p2 <= "1" when (i6_0_reg_338 = ap_const_lv6_33) else "0";

    training_sym_M_imag_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state7, zext_ln29_fu_537_p1, zext_ln10_1_fu_431_p1, zext_ln24_fu_519_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            training_sym_M_imag_address0 <= zext_ln29_fu_537_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            training_sym_M_imag_address0 <= zext_ln24_fu_519_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            training_sym_M_imag_address0 <= zext_ln10_1_fu_431_p1(6 - 1 downto 0);
        else 
            training_sym_M_imag_address0 <= "XXXXXX";
        end if; 
    end process;


    training_sym_M_imag_ce0_assign_proc : process(in_stream_V_data_0_vld_out, ap_CS_fsm_state6, icmp_ln21_fu_493_p2, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or (not(((icmp_ln21_fu_493_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            training_sym_M_imag_ce0 <= ap_const_logic_1;
        else 
            training_sym_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    training_sym_M_imag_d0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state3, bitcast_ln9_3_fu_514_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            training_sym_M_imag_d0 <= bitcast_ln9_3_fu_514_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            training_sym_M_imag_d0 <= ap_const_lv32_0;
        else 
            training_sym_M_imag_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    training_sym_M_imag_we0_assign_proc : process(in_stream_V_data_0_vld_out, ap_CS_fsm_state6, icmp_ln21_fu_493_p2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (not(((icmp_ln21_fu_493_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln21_fu_493_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            training_sym_M_imag_we0 <= ap_const_logic_1;
        else 
            training_sym_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    training_sym_M_real_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state7, zext_ln29_fu_537_p1, zext_ln10_1_fu_431_p1, zext_ln24_fu_519_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            training_sym_M_real_address0 <= zext_ln29_fu_537_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            training_sym_M_real_address0 <= zext_ln24_fu_519_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            training_sym_M_real_address0 <= zext_ln10_1_fu_431_p1(6 - 1 downto 0);
        else 
            training_sym_M_real_address0 <= "XXXXXX";
        end if; 
    end process;


    training_sym_M_real_ce0_assign_proc : process(in_stream_V_data_0_vld_out, ap_CS_fsm_state6, icmp_ln21_fu_493_p2, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or (not(((icmp_ln21_fu_493_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            training_sym_M_real_ce0 <= ap_const_logic_1;
        else 
            training_sym_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    training_sym_M_real_d0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state3, bitcast_ln9_2_fu_509_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            training_sym_M_real_d0 <= bitcast_ln9_2_fu_509_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            training_sym_M_real_d0 <= ap_const_lv32_0;
        else 
            training_sym_M_real_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    training_sym_M_real_we0_assign_proc : process(in_stream_V_data_0_vld_out, ap_CS_fsm_state6, icmp_ln21_fu_493_p2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (not(((icmp_ln21_fu_493_p2 = ap_const_lv1_0) and (in_stream_V_data_0_vld_out = ap_const_logic_0))) and (icmp_ln21_fu_493_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            training_sym_M_real_we0 <= ap_const_logic_1;
        else 
            training_sym_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln9_1_fu_505_p1 <= in_stream_V_data_0_data_out(32 - 1 downto 0);
    trunc_ln9_fu_473_p1 <= in_stream_V_data_0_data_out(32 - 1 downto 0);
    zext_ln10_1_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln10_1_reg_283),64));
    zext_ln10_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln10_reg_272),64));
    zext_ln12_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln12_reg_294),64));
    zext_ln18_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_305),64));
    zext_ln24_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_0_reg_316),64));
    zext_ln29_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i5_0_reg_327),64));
    zext_ln36_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i6_0_reg_338),64));
end behav;
