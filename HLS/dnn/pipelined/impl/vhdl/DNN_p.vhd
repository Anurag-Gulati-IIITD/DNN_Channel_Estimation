-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DNN_p is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    LS_stream_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    LS_stream_TVALID : IN STD_LOGIC;
    LS_stream_TREADY : OUT STD_LOGIC;
    LS_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    DNN_out_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    DNN_out_TVALID : OUT STD_LOGIC;
    DNN_out_TREADY : IN STD_LOGIC;
    DNN_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of DNN_p is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "DNN_p,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=56102,HLS_SYN_TPT=none,HLS_SYN_MEM=45,HLS_SYN_DSP=5,HLS_SYN_FF=2604,HLS_SYN_LUT=3386,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_pp1_stage2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_pp1_stage3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_pp1_stage4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_pp2_stage2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_pp2_stage3 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_pp2_stage4 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv7_68 : STD_LOGIC_VECTOR (6 downto 0) := "1101000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_34 : STD_LOGIC_VECTOR (5 downto 0) := "110100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv13_34 : STD_LOGIC_VECTOR (12 downto 0) := "0000000110100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv13_68 : STD_LOGIC_VECTOR (12 downto 0) := "0000001101000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal LS_stream_V_data_0_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal LS_stream_V_data_0_vld_in : STD_LOGIC;
    signal LS_stream_V_data_0_vld_out : STD_LOGIC;
    signal LS_stream_V_data_0_ack_in : STD_LOGIC;
    signal LS_stream_V_data_0_ack_out : STD_LOGIC;
    signal LS_stream_V_data_0_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal LS_stream_V_data_0_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal LS_stream_V_data_0_sel_rd : STD_LOGIC := '0';
    signal LS_stream_V_data_0_sel_wr : STD_LOGIC := '0';
    signal LS_stream_V_data_0_sel : STD_LOGIC;
    signal LS_stream_V_data_0_load_A : STD_LOGIC;
    signal LS_stream_V_data_0_load_B : STD_LOGIC;
    signal LS_stream_V_data_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal LS_stream_V_data_0_state_cmp_full : STD_LOGIC;
    signal LS_stream_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal LS_stream_V_last_V_0_vld_in : STD_LOGIC;
    signal LS_stream_V_last_V_0_vld_out : STD_LOGIC;
    signal LS_stream_V_last_V_0_ack_in : STD_LOGIC;
    signal LS_stream_V_last_V_0_ack_out : STD_LOGIC;
    signal LS_stream_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal LS_stream_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal LS_stream_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal LS_stream_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal LS_stream_V_last_V_0_sel : STD_LOGIC;
    signal LS_stream_V_last_V_0_load_A : STD_LOGIC;
    signal LS_stream_V_last_V_0_load_B : STD_LOGIC;
    signal LS_stream_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal LS_stream_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal DNN_out_V_data_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal DNN_out_V_data_1_vld_in : STD_LOGIC;
    signal DNN_out_V_data_1_vld_out : STD_LOGIC;
    signal DNN_out_V_data_1_ack_in : STD_LOGIC;
    signal DNN_out_V_data_1_ack_out : STD_LOGIC;
    signal DNN_out_V_data_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal DNN_out_V_data_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal DNN_out_V_data_1_sel_rd : STD_LOGIC := '0';
    signal DNN_out_V_data_1_sel_wr : STD_LOGIC := '0';
    signal DNN_out_V_data_1_sel : STD_LOGIC;
    signal DNN_out_V_data_1_load_A : STD_LOGIC;
    signal DNN_out_V_data_1_load_B : STD_LOGIC;
    signal DNN_out_V_data_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal DNN_out_V_data_1_state_cmp_full : STD_LOGIC;
    signal DNN_out_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal DNN_out_V_last_V_1_vld_in : STD_LOGIC;
    signal DNN_out_V_last_V_1_vld_out : STD_LOGIC;
    signal DNN_out_V_last_V_1_ack_in : STD_LOGIC;
    signal DNN_out_V_last_V_1_ack_out : STD_LOGIC;
    signal DNN_out_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal DNN_out_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal DNN_out_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal DNN_out_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal DNN_out_V_last_V_1_sel : STD_LOGIC;
    signal DNN_out_V_last_V_1_load_A : STD_LOGIC;
    signal DNN_out_V_last_V_1_load_B : STD_LOGIC;
    signal DNN_out_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal DNN_out_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal mean_in_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mean_in_ce0 : STD_LOGIC;
    signal mean_in_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal std_in_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal std_in_ce0 : STD_LOGIC;
    signal std_in_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal L1_BIAS_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal L1_BIAS_ce0 : STD_LOGIC;
    signal L1_BIAS_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal L1_WEIGHTS_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal L1_WEIGHTS_ce0 : STD_LOGIC;
    signal L1_WEIGHTS_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal L2_BIAS_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal L2_BIAS_ce0 : STD_LOGIC;
    signal L2_BIAS_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal L2_WEIGHTS_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal L2_WEIGHTS_ce0 : STD_LOGIC;
    signal L2_WEIGHTS_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal std_o_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal std_o_ce0 : STD_LOGIC;
    signal std_o_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mean_o_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mean_o_ce0 : STD_LOGIC;
    signal mean_o_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i_reg_313 : STD_LOGIC_VECTOR (6 downto 0);
    signal x_assign_reg_336 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_i_reg_346 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul_reg_357 : STD_LOGIC_VECTOR (12 downto 0);
    signal before_relu_0_i17_reg_381 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_i18_reg_391 : STD_LOGIC_VECTOR (5 downto 0);
    signal phi_mul5_reg_402 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_0_i24_reg_414 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_443_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_462 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln148_reg_684 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_684_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_state31_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state36_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state41_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln159_reg_762 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln159_reg_762_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_block_state48_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state53_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state58_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln174_reg_835 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_835_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp3_iter10 : STD_LOGIC := '0';
    signal ap_block_state61_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state62_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state63_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_state64_pp3_stage0_iter3 : BOOLEAN;
    signal ap_block_state65_pp3_stage0_iter4 : BOOLEAN;
    signal ap_block_state66_pp3_stage0_iter5 : BOOLEAN;
    signal ap_block_state67_pp3_stage0_iter6 : BOOLEAN;
    signal ap_block_state68_pp3_stage0_iter7 : BOOLEAN;
    signal ap_block_state69_pp3_stage0_iter8 : BOOLEAN;
    signal ap_block_state70_pp3_stage0_iter9 : BOOLEAN;
    signal ap_block_state71_pp3_stage0_iter10 : BOOLEAN;
    signal ap_block_state72_pp3_stage0_iter11 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln185_reg_874 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_874_pp3_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_449_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_472 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter5 : STD_LOGIC := '0';
    signal icmp_ln185_reg_874_pp3_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal icmp_ln148_reg_684_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_684_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_684_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_684_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_684_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_684_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_684_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_684_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_684_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_684_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_684_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_684_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_684_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_684_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_684_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_684_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_684_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_684_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_684_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_684_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_reg_684_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_484_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal zext_ln150_fu_490_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln150_reg_693 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln150_reg_693_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln150_reg_693_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln150_reg_693_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln150_reg_693_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln150_reg_693_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln150_reg_693_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln150_reg_693_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln150_reg_693_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln150_reg_693_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln150_reg_693_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln150_reg_693_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln150_reg_693_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln150_reg_693_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln150_reg_693_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln150_reg_693_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln150_reg_693_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln150_reg_693_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln150_reg_693_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln150_reg_693_pp0_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln150_reg_693_pp0_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln150_reg_693_pp0_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln150_reg_693_pp0_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal LS_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal LS_data_load_reg_709 : STD_LOGIC_VECTOR (31 downto 0);
    signal mean_in_load_reg_714 : STD_LOGIC_VECTOR (31 downto 0);
    signal std_in_load_reg_724 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_453_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_reg_729 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_502_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_737 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal icmp_ln156_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_L2_addr_reg_747 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln158_1_fu_514_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln158_1_reg_752 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal icmp_ln159_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln159_reg_762_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_524_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_766 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal norm_LS_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal norm_LS_data_load_reg_782 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_block_state32_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state37_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_state42_pp1_stage1_iter2 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal L1_WEIGHTS_load_reg_787 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln161_1_fu_545_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln161_1_reg_792 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_pp1_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage4 : signal is "none";
    signal ap_block_state35_pp1_stage4_iter0 : BOOLEAN;
    signal ap_block_state40_pp1_stage4_iter1 : BOOLEAN;
    signal ap_block_pp1_stage4_11001 : BOOLEAN;
    signal icmp_ln159_1_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln159_1_reg_797 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln159_1_reg_797_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln14_fu_598_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln14_reg_801 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage2 : signal is "none";
    signal ap_block_state33_pp1_stage2_iter0 : BOOLEAN;
    signal ap_block_state38_pp1_stage2_iter1 : BOOLEAN;
    signal ap_block_state43_pp1_stage2_iter2 : BOOLEAN;
    signal ap_block_pp1_stage2_11001 : BOOLEAN;
    signal icmp_ln171_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal i_3_fu_612_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_3_reg_810 : STD_LOGIC_VECTOR (6 downto 0);
    signal y_L3_addr_2_reg_820 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln173_1_fu_624_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln173_1_reg_825 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal icmp_ln174_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_835_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_634_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_reg_839 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal y_L2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_L2_load_reg_855 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_block_state49_pp2_stage1_iter0 : BOOLEAN;
    signal ap_block_state54_pp2_stage1_iter1 : BOOLEAN;
    signal ap_block_state59_pp2_stage1_iter2 : BOOLEAN;
    signal ap_block_pp2_stage1_11001 : BOOLEAN;
    signal L2_WEIGHTS_load_reg_860 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln176_1_fu_655_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln176_1_reg_865 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_pp2_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage4 : signal is "none";
    signal ap_block_state52_pp2_stage4_iter0 : BOOLEAN;
    signal ap_block_state57_pp2_stage4_iter1 : BOOLEAN;
    signal ap_block_pp2_stage4_11001 : BOOLEAN;
    signal icmp_ln174_1_fu_661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_1_reg_870 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_1_reg_870_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal icmp_ln185_reg_874_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_874_pp3_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_874_pp3_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_874_pp3_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_874_pp3_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_874_pp3_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_874_pp3_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_874_pp3_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_672_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal zext_ln187_fu_678_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln187_reg_883 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln187_reg_883_pp3_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln187_reg_883_pp3_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln187_reg_883_pp3_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln187_reg_883_pp3_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln187_reg_883_pp3_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln187_reg_883_pp3_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln187_reg_883_pp3_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln187_reg_883_pp3_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln187_reg_883_pp3_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln187_reg_883_pp3_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal y_L3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_L3_load_reg_899 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal std_o_load_reg_904 : STD_LOGIC_VECTOR (31 downto 0);
    signal mean_o_load_reg_914 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_separate_complex_p_fu_434_ap_ready : STD_LOGIC;
    signal grp_separate_complex_p_fu_434_ap_done : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state31 : STD_LOGIC;
    signal ap_block_pp1_stage4_subdone : BOOLEAN;
    signal ap_block_state34_pp1_stage3_iter0 : BOOLEAN;
    signal ap_block_state39_pp1_stage3_iter1 : BOOLEAN;
    signal ap_block_state44_pp1_stage3_iter2 : BOOLEAN;
    signal ap_block_pp1_stage3_subdone : BOOLEAN;
    signal ap_CS_fsm_pp1_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage3 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state48 : STD_LOGIC;
    signal ap_block_pp2_stage4_subdone : BOOLEAN;
    signal ap_block_pp2_stage1_subdone : BOOLEAN;
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state61 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter11 : STD_LOGIC := '0';
    signal LS_data_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal LS_data_ce0 : STD_LOGIC;
    signal LS_data_we0 : STD_LOGIC;
    signal LS_data_ce1 : STD_LOGIC;
    signal LS_data_we1 : STD_LOGIC;
    signal norm_LS_data_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal norm_LS_data_ce0 : STD_LOGIC;
    signal norm_LS_data_we0 : STD_LOGIC;
    signal y_L2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_L2_ce0 : STD_LOGIC;
    signal y_L2_we0 : STD_LOGIC;
    signal y_L3_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal y_L3_ce0 : STD_LOGIC;
    signal y_L3_we0 : STD_LOGIC;
    signal denorm_DNN_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal denorm_DNN_ce0 : STD_LOGIC;
    signal denorm_DNN_we0 : STD_LOGIC;
    signal denorm_DNN_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal denorm_DNN_ce1 : STD_LOGIC;
    signal denorm_DNN_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reconstruct_complex_s_fu_425_ap_start : STD_LOGIC;
    signal grp_reconstruct_complex_s_fu_425_ap_done : STD_LOGIC;
    signal grp_reconstruct_complex_s_fu_425_ap_idle : STD_LOGIC;
    signal grp_reconstruct_complex_s_fu_425_ap_ready : STD_LOGIC;
    signal grp_reconstruct_complex_s_fu_425_y_L3_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_reconstruct_complex_s_fu_425_y_L3_ce0 : STD_LOGIC;
    signal grp_reconstruct_complex_s_fu_425_y_L3_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_reconstruct_complex_s_fu_425_y_L3_ce1 : STD_LOGIC;
    signal grp_reconstruct_complex_s_fu_425_DNN_out_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_reconstruct_complex_s_fu_425_DNN_out_TVALID : STD_LOGIC;
    signal grp_reconstruct_complex_s_fu_425_DNN_out_TREADY : STD_LOGIC;
    signal grp_reconstruct_complex_s_fu_425_DNN_out_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_separate_complex_p_fu_434_ap_start : STD_LOGIC;
    signal grp_separate_complex_p_fu_434_ap_idle : STD_LOGIC;
    signal grp_separate_complex_p_fu_434_LS_stream_TVALID : STD_LOGIC;
    signal grp_separate_complex_p_fu_434_LS_stream_TREADY : STD_LOGIC;
    signal grp_separate_complex_p_fu_434_sep_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_separate_complex_p_fu_434_sep_ce0 : STD_LOGIC;
    signal grp_separate_complex_p_fu_434_sep_we0 : STD_LOGIC;
    signal grp_separate_complex_p_fu_434_sep_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_separate_complex_p_fu_434_sep_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_separate_complex_p_fu_434_sep_ce1 : STD_LOGIC;
    signal grp_separate_complex_p_fu_434_sep_we1 : STD_LOGIC;
    signal grp_separate_complex_p_fu_434_sep_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i12_reg_324 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_phi_mux_x_assign_phi_fu_339_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal ap_phi_mux_j_0_i_phi_fu_350_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_phi_mul_phi_fu_361_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_0_i14_reg_369 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_phi_mux_before_relu_0_i17_phi_fu_384_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp2_stage1 : BOOLEAN;
    signal ap_phi_mux_j_0_i18_phi_fu_395_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_phi_mul5_phi_fu_406_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_reconstruct_complex_s_fu_425_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal grp_separate_complex_p_fu_434_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln158_fu_508_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_1_fu_540_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_fu_530_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln173_fu_618_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln176_1_fu_650_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln176_fu_640_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal ap_block_pp1_stage3_11001 : BOOLEAN;
    signal ap_block_pp1_stage3 : BOOLEAN;
    signal grp_fu_443_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_443_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_449_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_449_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage2 : BOOLEAN;
    signal ap_CS_fsm_pp2_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage2 : signal is "none";
    signal ap_block_pp2_stage2 : BOOLEAN;
    signal add_ln161_fu_535_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp1_stage4 : BOOLEAN;
    signal bitcast_ln14_fu_556_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_560_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln14_fu_570_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln14_1_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln14_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln14_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln176_fu_645_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp2_stage4 : BOOLEAN;
    signal grp_fu_443_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp1_stage1_00001 : BOOLEAN;
    signal ap_block_pp2_stage1_00001 : BOOLEAN;
    signal ap_block_pp3_stage0_00001 : BOOLEAN;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_block_state75 : BOOLEAN;
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_block_pp1_stage2_subdone : BOOLEAN;
    signal ap_block_state50_pp2_stage2_iter0 : BOOLEAN;
    signal ap_block_state55_pp2_stage2_iter1 : BOOLEAN;
    signal ap_block_pp2_stage2_subdone : BOOLEAN;
    signal ap_block_pp2_stage2_11001 : BOOLEAN;
    signal ap_block_state51_pp2_stage3_iter0 : BOOLEAN;
    signal ap_block_state56_pp2_stage3_iter1 : BOOLEAN;
    signal ap_block_pp2_stage3_subdone : BOOLEAN;
    signal ap_block_pp2_stage3_11001 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;

    component reconstruct_complex_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        y_L3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        y_L3_ce0 : OUT STD_LOGIC;
        y_L3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        y_L3_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        y_L3_ce1 : OUT STD_LOGIC;
        y_L3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        DNN_out_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        DNN_out_TVALID : OUT STD_LOGIC;
        DNN_out_TREADY : IN STD_LOGIC;
        DNN_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component separate_complex_p IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        LS_stream_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        LS_stream_TVALID : IN STD_LOGIC;
        LS_stream_TREADY : OUT STD_LOGIC;
        LS_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        sep_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        sep_ce0 : OUT STD_LOGIC;
        sep_we0 : OUT STD_LOGIC;
        sep_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        sep_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        sep_ce1 : OUT STD_LOGIC;
        sep_we1 : OUT STD_LOGIC;
        sep_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DNN_p_faddfsub_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DNN_p_fmul_32ns_3cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DNN_p_fdiv_32ns_3dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DNN_p_fcmp_32ns_3eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component DNN_p_mean_in IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DNN_p_std_in IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DNN_p_L1_BIAS IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DNN_p_L1_WEIGHTS IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DNN_p_L2_BIAS IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DNN_p_L2_WEIGHTS IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DNN_p_std_o IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DNN_p_mean_o IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DNN_p_LS_data IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DNN_p_norm_LS_data IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DNN_p_y_L2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DNN_p_denorm_DNN IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mean_in_U : component DNN_p_mean_in
    generic map (
        DataWidth => 32,
        AddressRange => 104,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => mean_in_address0,
        ce0 => mean_in_ce0,
        q0 => mean_in_q0);

    std_in_U : component DNN_p_std_in
    generic map (
        DataWidth => 32,
        AddressRange => 104,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => std_in_address0,
        ce0 => std_in_ce0,
        q0 => std_in_q0);

    L1_BIAS_U : component DNN_p_L1_BIAS
    generic map (
        DataWidth => 32,
        AddressRange => 52,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => L1_BIAS_address0,
        ce0 => L1_BIAS_ce0,
        q0 => L1_BIAS_q0);

    L1_WEIGHTS_U : component DNN_p_L1_WEIGHTS
    generic map (
        DataWidth => 32,
        AddressRange => 5408,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => L1_WEIGHTS_address0,
        ce0 => L1_WEIGHTS_ce0,
        q0 => L1_WEIGHTS_q0);

    L2_BIAS_U : component DNN_p_L2_BIAS
    generic map (
        DataWidth => 32,
        AddressRange => 104,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => L2_BIAS_address0,
        ce0 => L2_BIAS_ce0,
        q0 => L2_BIAS_q0);

    L2_WEIGHTS_U : component DNN_p_L2_WEIGHTS
    generic map (
        DataWidth => 32,
        AddressRange => 5408,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => L2_WEIGHTS_address0,
        ce0 => L2_WEIGHTS_ce0,
        q0 => L2_WEIGHTS_q0);

    std_o_U : component DNN_p_std_o
    generic map (
        DataWidth => 32,
        AddressRange => 104,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => std_o_address0,
        ce0 => std_o_ce0,
        q0 => std_o_q0);

    mean_o_U : component DNN_p_mean_o
    generic map (
        DataWidth => 32,
        AddressRange => 104,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => mean_o_address0,
        ce0 => mean_o_ce0,
        q0 => mean_o_q0);

    LS_data_U : component DNN_p_LS_data
    generic map (
        DataWidth => 32,
        AddressRange => 104,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => LS_data_address0,
        ce0 => LS_data_ce0,
        we0 => LS_data_we0,
        d0 => grp_separate_complex_p_fu_434_sep_d0,
        q0 => LS_data_q0,
        address1 => grp_separate_complex_p_fu_434_sep_address1,
        ce1 => LS_data_ce1,
        we1 => LS_data_we1,
        d1 => grp_separate_complex_p_fu_434_sep_d1);

    norm_LS_data_U : component DNN_p_norm_LS_data
    generic map (
        DataWidth => 32,
        AddressRange => 104,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => norm_LS_data_address0,
        ce0 => norm_LS_data_ce0,
        we0 => norm_LS_data_we0,
        d0 => tmp_1_i_reg_729,
        q0 => norm_LS_data_q0);

    y_L2_U : component DNN_p_y_L2
    generic map (
        DataWidth => 32,
        AddressRange => 52,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => y_L2_address0,
        ce0 => y_L2_ce0,
        we0 => y_L2_we0,
        d0 => select_ln14_reg_801,
        q0 => y_L2_q0);

    y_L3_U : component DNN_p_norm_LS_data
    generic map (
        DataWidth => 32,
        AddressRange => 104,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => y_L3_address0,
        ce0 => y_L3_ce0,
        we0 => y_L3_we0,
        d0 => reg_462,
        q0 => y_L3_q0);

    denorm_DNN_U : component DNN_p_denorm_DNN
    generic map (
        DataWidth => 32,
        AddressRange => 104,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => denorm_DNN_address0,
        ce0 => denorm_DNN_ce0,
        we0 => denorm_DNN_we0,
        d0 => reg_462,
        q0 => denorm_DNN_q0,
        address1 => grp_reconstruct_complex_s_fu_425_y_L3_address1,
        ce1 => denorm_DNN_ce1,
        q1 => denorm_DNN_q1);

    grp_reconstruct_complex_s_fu_425 : component reconstruct_complex_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_reconstruct_complex_s_fu_425_ap_start,
        ap_done => grp_reconstruct_complex_s_fu_425_ap_done,
        ap_idle => grp_reconstruct_complex_s_fu_425_ap_idle,
        ap_ready => grp_reconstruct_complex_s_fu_425_ap_ready,
        y_L3_address0 => grp_reconstruct_complex_s_fu_425_y_L3_address0,
        y_L3_ce0 => grp_reconstruct_complex_s_fu_425_y_L3_ce0,
        y_L3_q0 => denorm_DNN_q0,
        y_L3_address1 => grp_reconstruct_complex_s_fu_425_y_L3_address1,
        y_L3_ce1 => grp_reconstruct_complex_s_fu_425_y_L3_ce1,
        y_L3_q1 => denorm_DNN_q1,
        DNN_out_TDATA => grp_reconstruct_complex_s_fu_425_DNN_out_TDATA,
        DNN_out_TVALID => grp_reconstruct_complex_s_fu_425_DNN_out_TVALID,
        DNN_out_TREADY => grp_reconstruct_complex_s_fu_425_DNN_out_TREADY,
        DNN_out_TLAST => grp_reconstruct_complex_s_fu_425_DNN_out_TLAST);

    grp_separate_complex_p_fu_434 : component separate_complex_p
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_separate_complex_p_fu_434_ap_start,
        ap_done => grp_separate_complex_p_fu_434_ap_done,
        ap_idle => grp_separate_complex_p_fu_434_ap_idle,
        ap_ready => grp_separate_complex_p_fu_434_ap_ready,
        LS_stream_TDATA => LS_stream_V_data_0_data_out,
        LS_stream_TVALID => grp_separate_complex_p_fu_434_LS_stream_TVALID,
        LS_stream_TREADY => grp_separate_complex_p_fu_434_LS_stream_TREADY,
        LS_stream_TLAST => LS_stream_V_last_V_0_data_out,
        sep_address0 => grp_separate_complex_p_fu_434_sep_address0,
        sep_ce0 => grp_separate_complex_p_fu_434_sep_ce0,
        sep_we0 => grp_separate_complex_p_fu_434_sep_we0,
        sep_d0 => grp_separate_complex_p_fu_434_sep_d0,
        sep_address1 => grp_separate_complex_p_fu_434_sep_address1,
        sep_ce1 => grp_separate_complex_p_fu_434_sep_ce1,
        sep_we1 => grp_separate_complex_p_fu_434_sep_we1,
        sep_d1 => grp_separate_complex_p_fu_434_sep_d1);

    DNN_p_faddfsub_32bkb_U7 : component DNN_p_faddfsub_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_443_p0,
        din1 => grp_fu_443_p1,
        opcode => grp_fu_443_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_443_p2);

    DNN_p_fmul_32ns_3cud_U8 : component DNN_p_fmul_32ns_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_449_p0,
        din1 => grp_fu_449_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_449_p2);

    DNN_p_fdiv_32ns_3dEe_U9 : component DNN_p_fdiv_32ns_3dEe
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_462,
        din1 => std_in_load_reg_724,
        ce => ap_const_logic_1,
        dout => grp_fu_453_p2);

    DNN_p_fcmp_32ns_3eOg_U10 : component DNN_p_fcmp_32ns_3eOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_462,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_457_p2);





    DNN_out_V_data_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                DNN_out_V_data_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = DNN_out_V_data_1_ack_out) and (ap_const_logic_1 = DNN_out_V_data_1_vld_out))) then 
                                        DNN_out_V_data_1_sel_rd <= not(DNN_out_V_data_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    DNN_out_V_data_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                DNN_out_V_data_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = DNN_out_V_data_1_ack_in) and (ap_const_logic_1 = DNN_out_V_data_1_vld_in))) then 
                                        DNN_out_V_data_1_sel_wr <= not(DNN_out_V_data_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    DNN_out_V_data_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                DNN_out_V_data_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = DNN_out_V_data_1_state) and (ap_const_logic_0 = DNN_out_V_data_1_vld_in)) or ((ap_const_lv2_3 = DNN_out_V_data_1_state) and (ap_const_logic_0 = DNN_out_V_data_1_vld_in) and (ap_const_logic_1 = DNN_out_V_data_1_ack_out)))) then 
                    DNN_out_V_data_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = DNN_out_V_data_1_state) and (ap_const_logic_0 = DNN_out_TREADY)) or ((ap_const_lv2_3 = DNN_out_V_data_1_state) and (ap_const_logic_0 = DNN_out_TREADY) and (ap_const_logic_1 = DNN_out_V_data_1_vld_in)))) then 
                    DNN_out_V_data_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = DNN_out_V_data_1_vld_in) and (ap_const_logic_1 = DNN_out_V_data_1_ack_out))) and not(((ap_const_logic_0 = DNN_out_TREADY) and (ap_const_logic_1 = DNN_out_V_data_1_vld_in))) and (ap_const_lv2_3 = DNN_out_V_data_1_state)) or ((ap_const_lv2_1 = DNN_out_V_data_1_state) and (ap_const_logic_1 = DNN_out_V_data_1_ack_out)) or ((ap_const_lv2_2 = DNN_out_V_data_1_state) and (ap_const_logic_1 = DNN_out_V_data_1_vld_in)))) then 
                    DNN_out_V_data_1_state <= ap_const_lv2_3;
                else 
                    DNN_out_V_data_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    DNN_out_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                DNN_out_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = DNN_out_V_last_V_1_ack_out) and (ap_const_logic_1 = DNN_out_V_last_V_1_vld_out))) then 
                                        DNN_out_V_last_V_1_sel_rd <= not(DNN_out_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    DNN_out_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                DNN_out_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = DNN_out_V_last_V_1_ack_in) and (ap_const_logic_1 = DNN_out_V_last_V_1_vld_in))) then 
                                        DNN_out_V_last_V_1_sel_wr <= not(DNN_out_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    DNN_out_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                DNN_out_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = DNN_out_V_last_V_1_state) and (ap_const_logic_0 = DNN_out_V_last_V_1_vld_in)) or ((ap_const_lv2_3 = DNN_out_V_last_V_1_state) and (ap_const_logic_0 = DNN_out_V_last_V_1_vld_in) and (ap_const_logic_1 = DNN_out_V_last_V_1_ack_out)))) then 
                    DNN_out_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = DNN_out_V_last_V_1_state) and (ap_const_logic_0 = DNN_out_TREADY)) or ((ap_const_lv2_3 = DNN_out_V_last_V_1_state) and (ap_const_logic_0 = DNN_out_TREADY) and (ap_const_logic_1 = DNN_out_V_last_V_1_vld_in)))) then 
                    DNN_out_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = DNN_out_V_last_V_1_vld_in) and (ap_const_logic_1 = DNN_out_V_last_V_1_ack_out))) and not(((ap_const_logic_0 = DNN_out_TREADY) and (ap_const_logic_1 = DNN_out_V_last_V_1_vld_in))) and (ap_const_lv2_3 = DNN_out_V_last_V_1_state)) or ((ap_const_lv2_1 = DNN_out_V_last_V_1_state) and (ap_const_logic_1 = DNN_out_V_last_V_1_ack_out)) or ((ap_const_lv2_2 = DNN_out_V_last_V_1_state) and (ap_const_logic_1 = DNN_out_V_last_V_1_vld_in)))) then 
                    DNN_out_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    DNN_out_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    LS_stream_V_data_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                LS_stream_V_data_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = LS_stream_V_data_0_ack_out) and (ap_const_logic_1 = LS_stream_V_data_0_vld_out))) then 
                                        LS_stream_V_data_0_sel_rd <= not(LS_stream_V_data_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    LS_stream_V_data_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                LS_stream_V_data_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = LS_stream_V_data_0_ack_in) and (ap_const_logic_1 = LS_stream_V_data_0_vld_in))) then 
                                        LS_stream_V_data_0_sel_wr <= not(LS_stream_V_data_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    LS_stream_V_data_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                LS_stream_V_data_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = LS_stream_V_data_0_state) and (ap_const_logic_0 = LS_stream_V_data_0_vld_in)) or ((ap_const_lv2_3 = LS_stream_V_data_0_state) and (ap_const_logic_0 = LS_stream_V_data_0_vld_in) and (ap_const_logic_1 = LS_stream_V_data_0_ack_out)))) then 
                    LS_stream_V_data_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = LS_stream_V_data_0_state) and (ap_const_logic_0 = LS_stream_V_data_0_ack_out)) or ((ap_const_lv2_3 = LS_stream_V_data_0_state) and (ap_const_logic_0 = LS_stream_V_data_0_ack_out) and (ap_const_logic_1 = LS_stream_V_data_0_vld_in)))) then 
                    LS_stream_V_data_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = LS_stream_V_data_0_vld_in) and (ap_const_logic_1 = LS_stream_V_data_0_ack_out))) and not(((ap_const_logic_0 = LS_stream_V_data_0_ack_out) and (ap_const_logic_1 = LS_stream_V_data_0_vld_in))) and (ap_const_lv2_3 = LS_stream_V_data_0_state)) or ((ap_const_lv2_1 = LS_stream_V_data_0_state) and (ap_const_logic_1 = LS_stream_V_data_0_ack_out)) or ((ap_const_lv2_2 = LS_stream_V_data_0_state) and (ap_const_logic_1 = LS_stream_V_data_0_vld_in)))) then 
                    LS_stream_V_data_0_state <= ap_const_lv2_3;
                else 
                    LS_stream_V_data_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    LS_stream_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                LS_stream_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = LS_stream_V_last_V_0_ack_out) and (ap_const_logic_1 = LS_stream_V_last_V_0_vld_out))) then 
                                        LS_stream_V_last_V_0_sel_rd <= not(LS_stream_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    LS_stream_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                LS_stream_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = LS_stream_V_last_V_0_ack_in) and (ap_const_logic_1 = LS_stream_V_last_V_0_vld_in))) then 
                                        LS_stream_V_last_V_0_sel_wr <= not(LS_stream_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    LS_stream_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                LS_stream_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = LS_stream_V_last_V_0_state) and (ap_const_logic_0 = LS_stream_V_last_V_0_vld_in)) or ((ap_const_lv2_3 = LS_stream_V_last_V_0_state) and (ap_const_logic_0 = LS_stream_V_last_V_0_vld_in) and (ap_const_logic_1 = LS_stream_V_last_V_0_ack_out)))) then 
                    LS_stream_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = LS_stream_V_last_V_0_state) and (ap_const_logic_0 = LS_stream_V_last_V_0_ack_out)) or ((ap_const_lv2_3 = LS_stream_V_last_V_0_state) and (ap_const_logic_0 = LS_stream_V_last_V_0_ack_out) and (ap_const_logic_1 = LS_stream_V_last_V_0_vld_in)))) then 
                    LS_stream_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = LS_stream_V_last_V_0_vld_in) and (ap_const_logic_1 = LS_stream_V_last_V_0_ack_out))) and not(((ap_const_logic_0 = LS_stream_V_last_V_0_ack_out) and (ap_const_logic_1 = LS_stream_V_last_V_0_vld_in))) and (ap_const_lv2_3 = LS_stream_V_last_V_0_state)) or ((ap_const_lv2_1 = LS_stream_V_last_V_0_state) and (ap_const_logic_1 = LS_stream_V_last_V_0_ack_out)) or ((ap_const_lv2_2 = LS_stream_V_last_V_0_state) and (ap_const_logic_1 = LS_stream_V_last_V_0_vld_in)))) then 
                    LS_stream_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    LS_stream_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((grp_separate_complex_p_fu_434_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                elsif (((grp_separate_complex_p_fu_434_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state31) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp1_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3)) or ((ap_const_boolean_0 = ap_block_pp1_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4)))) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state48) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4))) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp2_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)))) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state61) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln171_fu_606_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state61)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state61);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter10 <= ap_enable_reg_pp3_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter11 <= ap_enable_reg_pp3_iter10;
                elsif (((icmp_ln171_fu_606_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                    ap_enable_reg_pp3_iter11 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter8 <= ap_enable_reg_pp3_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter9 <= ap_enable_reg_pp3_iter8;
                end if; 
            end if;
        end if;
    end process;


    grp_reconstruct_complex_s_fu_425_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_reconstruct_complex_s_fu_425_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
                    grp_reconstruct_complex_s_fu_425_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_reconstruct_complex_s_fu_425_ap_ready = ap_const_logic_1)) then 
                    grp_reconstruct_complex_s_fu_425_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_separate_complex_p_fu_434_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_separate_complex_p_fu_434_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_separate_complex_p_fu_434_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_separate_complex_p_fu_434_ap_ready = ap_const_logic_1)) then 
                    grp_separate_complex_p_fu_434_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    before_relu_0_i17_reg_381_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (icmp_ln174_reg_835_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
                before_relu_0_i17_reg_381 <= reg_462;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                before_relu_0_i17_reg_381 <= L2_BIAS_q0;
            end if; 
        end if;
    end process;

    i_0_i12_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                i_0_i12_reg_324 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                i_0_i12_reg_324 <= i_1_reg_737;
            end if; 
        end if;
    end process;

    i_0_i14_reg_369_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln156_fu_496_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                i_0_i14_reg_369 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
                i_0_i14_reg_369 <= i_3_reg_810;
            end if; 
        end if;
    end process;

    i_0_i24_reg_414_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln171_fu_606_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                i_0_i24_reg_414 <= ap_const_lv7_0;
            elsif (((icmp_ln185_fu_666_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                i_0_i24_reg_414 <= i_2_fu_672_p2;
            end if; 
        end if;
    end process;

    i_0_i_reg_313_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln148_fu_478_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_i_reg_313 <= i_fu_484_p2;
            elsif (((grp_separate_complex_p_fu_434_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_i_reg_313 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_0_i18_reg_391_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln174_reg_835 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                j_0_i18_reg_391 <= j_1_reg_839;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                j_0_i18_reg_391 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_0_i_reg_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln159_reg_762 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                j_0_i_reg_346 <= j_reg_766;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                j_0_i_reg_346 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    phi_mul5_reg_402_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln174_reg_835 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                phi_mul5_reg_402 <= add_ln176_1_reg_865;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                phi_mul5_reg_402 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_357_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln159_reg_762 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                phi_mul_reg_357 <= add_ln161_1_reg_792;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                phi_mul_reg_357 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    x_assign_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (icmp_ln159_reg_762_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
                x_assign_reg_336 <= reg_462;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                x_assign_reg_336 <= L1_BIAS_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = DNN_out_V_data_1_load_A)) then
                DNN_out_V_data_1_payload_A <= grp_reconstruct_complex_s_fu_425_DNN_out_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = DNN_out_V_data_1_load_B)) then
                DNN_out_V_data_1_payload_B <= grp_reconstruct_complex_s_fu_425_DNN_out_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = DNN_out_V_last_V_1_load_A)) then
                DNN_out_V_last_V_1_payload_A <= grp_reconstruct_complex_s_fu_425_DNN_out_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = DNN_out_V_last_V_1_load_B)) then
                DNN_out_V_last_V_1_payload_B <= grp_reconstruct_complex_s_fu_425_DNN_out_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (icmp_ln159_reg_762 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                L1_WEIGHTS_load_reg_787 <= L1_WEIGHTS_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (icmp_ln174_reg_835 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                L2_WEIGHTS_load_reg_860 <= L2_WEIGHTS_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln148_reg_684 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                LS_data_load_reg_709 <= LS_data_q0;
                mean_in_load_reg_714 <= mean_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = LS_stream_V_data_0_load_A)) then
                LS_stream_V_data_0_payload_A <= LS_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = LS_stream_V_data_0_load_B)) then
                LS_stream_V_data_0_payload_B <= LS_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = LS_stream_V_last_V_0_load_A)) then
                LS_stream_V_last_V_0_payload_A <= LS_stream_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = LS_stream_V_last_V_0_load_B)) then
                LS_stream_V_last_V_0_payload_B <= LS_stream_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage4_11001) and (icmp_ln159_reg_762 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                add_ln161_1_reg_792 <= add_ln161_1_fu_545_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage4_11001) and (icmp_ln174_reg_835 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage4) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                add_ln176_1_reg_865 <= add_ln176_1_fu_655_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                i_1_reg_737 <= i_1_fu_502_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                i_3_reg_810 <= i_3_fu_612_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln148_reg_684 <= icmp_ln148_fu_478_p2;
                icmp_ln148_reg_684_pp0_iter1_reg <= icmp_ln148_reg_684;
                    zext_ln150_reg_693_pp0_iter1_reg(6 downto 0) <= zext_ln150_reg_693(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln148_reg_684_pp0_iter10_reg <= icmp_ln148_reg_684_pp0_iter9_reg;
                icmp_ln148_reg_684_pp0_iter11_reg <= icmp_ln148_reg_684_pp0_iter10_reg;
                icmp_ln148_reg_684_pp0_iter12_reg <= icmp_ln148_reg_684_pp0_iter11_reg;
                icmp_ln148_reg_684_pp0_iter13_reg <= icmp_ln148_reg_684_pp0_iter12_reg;
                icmp_ln148_reg_684_pp0_iter14_reg <= icmp_ln148_reg_684_pp0_iter13_reg;
                icmp_ln148_reg_684_pp0_iter15_reg <= icmp_ln148_reg_684_pp0_iter14_reg;
                icmp_ln148_reg_684_pp0_iter16_reg <= icmp_ln148_reg_684_pp0_iter15_reg;
                icmp_ln148_reg_684_pp0_iter17_reg <= icmp_ln148_reg_684_pp0_iter16_reg;
                icmp_ln148_reg_684_pp0_iter18_reg <= icmp_ln148_reg_684_pp0_iter17_reg;
                icmp_ln148_reg_684_pp0_iter19_reg <= icmp_ln148_reg_684_pp0_iter18_reg;
                icmp_ln148_reg_684_pp0_iter20_reg <= icmp_ln148_reg_684_pp0_iter19_reg;
                icmp_ln148_reg_684_pp0_iter21_reg <= icmp_ln148_reg_684_pp0_iter20_reg;
                icmp_ln148_reg_684_pp0_iter22_reg <= icmp_ln148_reg_684_pp0_iter21_reg;
                icmp_ln148_reg_684_pp0_iter2_reg <= icmp_ln148_reg_684_pp0_iter1_reg;
                icmp_ln148_reg_684_pp0_iter3_reg <= icmp_ln148_reg_684_pp0_iter2_reg;
                icmp_ln148_reg_684_pp0_iter4_reg <= icmp_ln148_reg_684_pp0_iter3_reg;
                icmp_ln148_reg_684_pp0_iter5_reg <= icmp_ln148_reg_684_pp0_iter4_reg;
                icmp_ln148_reg_684_pp0_iter6_reg <= icmp_ln148_reg_684_pp0_iter5_reg;
                icmp_ln148_reg_684_pp0_iter7_reg <= icmp_ln148_reg_684_pp0_iter6_reg;
                icmp_ln148_reg_684_pp0_iter8_reg <= icmp_ln148_reg_684_pp0_iter7_reg;
                icmp_ln148_reg_684_pp0_iter9_reg <= icmp_ln148_reg_684_pp0_iter8_reg;
                    zext_ln150_reg_693_pp0_iter10_reg(6 downto 0) <= zext_ln150_reg_693_pp0_iter9_reg(6 downto 0);
                    zext_ln150_reg_693_pp0_iter11_reg(6 downto 0) <= zext_ln150_reg_693_pp0_iter10_reg(6 downto 0);
                    zext_ln150_reg_693_pp0_iter12_reg(6 downto 0) <= zext_ln150_reg_693_pp0_iter11_reg(6 downto 0);
                    zext_ln150_reg_693_pp0_iter13_reg(6 downto 0) <= zext_ln150_reg_693_pp0_iter12_reg(6 downto 0);
                    zext_ln150_reg_693_pp0_iter14_reg(6 downto 0) <= zext_ln150_reg_693_pp0_iter13_reg(6 downto 0);
                    zext_ln150_reg_693_pp0_iter15_reg(6 downto 0) <= zext_ln150_reg_693_pp0_iter14_reg(6 downto 0);
                    zext_ln150_reg_693_pp0_iter16_reg(6 downto 0) <= zext_ln150_reg_693_pp0_iter15_reg(6 downto 0);
                    zext_ln150_reg_693_pp0_iter17_reg(6 downto 0) <= zext_ln150_reg_693_pp0_iter16_reg(6 downto 0);
                    zext_ln150_reg_693_pp0_iter18_reg(6 downto 0) <= zext_ln150_reg_693_pp0_iter17_reg(6 downto 0);
                    zext_ln150_reg_693_pp0_iter19_reg(6 downto 0) <= zext_ln150_reg_693_pp0_iter18_reg(6 downto 0);
                    zext_ln150_reg_693_pp0_iter20_reg(6 downto 0) <= zext_ln150_reg_693_pp0_iter19_reg(6 downto 0);
                    zext_ln150_reg_693_pp0_iter21_reg(6 downto 0) <= zext_ln150_reg_693_pp0_iter20_reg(6 downto 0);
                    zext_ln150_reg_693_pp0_iter22_reg(6 downto 0) <= zext_ln150_reg_693_pp0_iter21_reg(6 downto 0);
                    zext_ln150_reg_693_pp0_iter2_reg(6 downto 0) <= zext_ln150_reg_693_pp0_iter1_reg(6 downto 0);
                    zext_ln150_reg_693_pp0_iter3_reg(6 downto 0) <= zext_ln150_reg_693_pp0_iter2_reg(6 downto 0);
                    zext_ln150_reg_693_pp0_iter4_reg(6 downto 0) <= zext_ln150_reg_693_pp0_iter3_reg(6 downto 0);
                    zext_ln150_reg_693_pp0_iter5_reg(6 downto 0) <= zext_ln150_reg_693_pp0_iter4_reg(6 downto 0);
                    zext_ln150_reg_693_pp0_iter6_reg(6 downto 0) <= zext_ln150_reg_693_pp0_iter5_reg(6 downto 0);
                    zext_ln150_reg_693_pp0_iter7_reg(6 downto 0) <= zext_ln150_reg_693_pp0_iter6_reg(6 downto 0);
                    zext_ln150_reg_693_pp0_iter8_reg(6 downto 0) <= zext_ln150_reg_693_pp0_iter7_reg(6 downto 0);
                    zext_ln150_reg_693_pp0_iter9_reg(6 downto 0) <= zext_ln150_reg_693_pp0_iter8_reg(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln159_reg_762 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln159_1_reg_797 <= icmp_ln159_1_fu_551_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln159_1_reg_797_pp1_iter2_reg <= icmp_ln159_1_reg_797;
                icmp_ln159_reg_762 <= icmp_ln159_fu_518_p2;
                icmp_ln159_reg_762_pp1_iter1_reg <= icmp_ln159_reg_762;
                icmp_ln159_reg_762_pp1_iter2_reg <= icmp_ln159_reg_762_pp1_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln174_reg_835 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln174_1_reg_870 <= icmp_ln174_1_fu_661_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln174_1_reg_870_pp2_iter2_reg <= icmp_ln174_1_reg_870;
                icmp_ln174_reg_835 <= icmp_ln174_fu_628_p2;
                icmp_ln174_reg_835_pp2_iter1_reg <= icmp_ln174_reg_835;
                icmp_ln174_reg_835_pp2_iter2_reg <= icmp_ln174_reg_835_pp2_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln185_reg_874 <= icmp_ln185_fu_666_p2;
                icmp_ln185_reg_874_pp3_iter1_reg <= icmp_ln185_reg_874;
                    zext_ln187_reg_883_pp3_iter1_reg(6 downto 0) <= zext_ln187_reg_883(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp3_stage0_11001)) then
                icmp_ln185_reg_874_pp3_iter10_reg <= icmp_ln185_reg_874_pp3_iter9_reg;
                icmp_ln185_reg_874_pp3_iter2_reg <= icmp_ln185_reg_874_pp3_iter1_reg;
                icmp_ln185_reg_874_pp3_iter3_reg <= icmp_ln185_reg_874_pp3_iter2_reg;
                icmp_ln185_reg_874_pp3_iter4_reg <= icmp_ln185_reg_874_pp3_iter3_reg;
                icmp_ln185_reg_874_pp3_iter5_reg <= icmp_ln185_reg_874_pp3_iter4_reg;
                icmp_ln185_reg_874_pp3_iter6_reg <= icmp_ln185_reg_874_pp3_iter5_reg;
                icmp_ln185_reg_874_pp3_iter7_reg <= icmp_ln185_reg_874_pp3_iter6_reg;
                icmp_ln185_reg_874_pp3_iter8_reg <= icmp_ln185_reg_874_pp3_iter7_reg;
                icmp_ln185_reg_874_pp3_iter9_reg <= icmp_ln185_reg_874_pp3_iter8_reg;
                    zext_ln187_reg_883_pp3_iter10_reg(6 downto 0) <= zext_ln187_reg_883_pp3_iter9_reg(6 downto 0);
                    zext_ln187_reg_883_pp3_iter2_reg(6 downto 0) <= zext_ln187_reg_883_pp3_iter1_reg(6 downto 0);
                    zext_ln187_reg_883_pp3_iter3_reg(6 downto 0) <= zext_ln187_reg_883_pp3_iter2_reg(6 downto 0);
                    zext_ln187_reg_883_pp3_iter4_reg(6 downto 0) <= zext_ln187_reg_883_pp3_iter3_reg(6 downto 0);
                    zext_ln187_reg_883_pp3_iter5_reg(6 downto 0) <= zext_ln187_reg_883_pp3_iter4_reg(6 downto 0);
                    zext_ln187_reg_883_pp3_iter6_reg(6 downto 0) <= zext_ln187_reg_883_pp3_iter5_reg(6 downto 0);
                    zext_ln187_reg_883_pp3_iter7_reg(6 downto 0) <= zext_ln187_reg_883_pp3_iter6_reg(6 downto 0);
                    zext_ln187_reg_883_pp3_iter8_reg(6 downto 0) <= zext_ln187_reg_883_pp3_iter7_reg(6 downto 0);
                    zext_ln187_reg_883_pp3_iter9_reg(6 downto 0) <= zext_ln187_reg_883_pp3_iter8_reg(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                j_1_reg_839 <= j_1_fu_634_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                j_reg_766 <= j_fu_524_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln185_reg_874_pp3_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                mean_o_load_reg_914 <= mean_o_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (icmp_ln159_reg_762 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                norm_LS_data_load_reg_782 <= norm_LS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln185_reg_874_pp3_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter10 = ap_const_logic_1)) or ((icmp_ln174_reg_835_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((icmp_ln159_reg_762_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((icmp_ln148_reg_684_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)))) then
                reg_462 <= grp_fu_443_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln185_reg_874_pp3_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter5 = ap_const_logic_1)) or ((icmp_ln174_reg_835 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((icmp_ln159_reg_762 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then
                reg_472 <= grp_fu_449_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (icmp_ln159_1_reg_797_pp1_iter2_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then
                select_ln14_reg_801 <= select_ln14_fu_598_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln148_reg_684_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                std_in_load_reg_724 <= std_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln185_reg_874 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                std_o_load_reg_904 <= std_o_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln148_reg_684_pp0_iter21_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_1_i_reg_729 <= grp_fu_453_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln156_fu_496_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                y_L2_addr_reg_747 <= zext_ln158_fu_508_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (icmp_ln174_reg_835 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                y_L2_load_reg_855 <= y_L2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln171_fu_606_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                y_L3_addr_2_reg_820 <= zext_ln173_fu_618_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln185_reg_874 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                y_L3_load_reg_899 <= y_L3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln148_fu_478_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln150_reg_693(6 downto 0) <= zext_ln150_fu_490_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                    zext_ln158_1_reg_752(5 downto 0) <= zext_ln158_1_fu_514_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                    zext_ln173_1_reg_825(6 downto 0) <= zext_ln173_1_fu_624_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln185_fu_666_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                    zext_ln187_reg_883(6 downto 0) <= zext_ln187_fu_678_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln150_reg_693(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln150_reg_693_pp0_iter1_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln150_reg_693_pp0_iter2_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln150_reg_693_pp0_iter3_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln150_reg_693_pp0_iter4_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln150_reg_693_pp0_iter5_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln150_reg_693_pp0_iter6_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln150_reg_693_pp0_iter7_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln150_reg_693_pp0_iter8_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln150_reg_693_pp0_iter9_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln150_reg_693_pp0_iter10_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln150_reg_693_pp0_iter11_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln150_reg_693_pp0_iter12_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln150_reg_693_pp0_iter13_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln150_reg_693_pp0_iter14_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln150_reg_693_pp0_iter15_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln150_reg_693_pp0_iter16_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln150_reg_693_pp0_iter17_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln150_reg_693_pp0_iter18_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln150_reg_693_pp0_iter19_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln150_reg_693_pp0_iter20_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln150_reg_693_pp0_iter21_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln150_reg_693_pp0_iter22_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln158_1_reg_752(12 downto 6) <= "0000000";
    zext_ln173_1_reg_825(12 downto 7) <= "000000";
    zext_ln187_reg_883(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln187_reg_883_pp3_iter1_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln187_reg_883_pp3_iter2_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln187_reg_883_pp3_iter3_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln187_reg_883_pp3_iter4_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln187_reg_883_pp3_iter5_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln187_reg_883_pp3_iter6_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln187_reg_883_pp3_iter7_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln187_reg_883_pp3_iter8_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln187_reg_883_pp3_iter9_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln187_reg_883_pp3_iter10_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (DNN_out_TREADY, DNN_out_V_data_1_state, DNN_out_V_last_V_1_state, ap_CS_fsm, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter2, ap_enable_reg_pp3_iter10, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, icmp_ln148_fu_478_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state29, icmp_ln156_fu_496_p2, icmp_ln159_fu_518_p2, ap_enable_reg_pp1_iter0, icmp_ln171_fu_606_p2, ap_CS_fsm_state46, icmp_ln174_fu_628_p2, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, icmp_ln185_fu_666_p2, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_CS_fsm_state3, grp_separate_complex_p_fu_434_ap_done, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_block_pp1_stage0_subdone, ap_block_pp1_stage4_subdone, ap_block_pp1_stage3_subdone, ap_CS_fsm_pp1_stage3, ap_block_pp2_stage0_subdone, ap_block_pp2_stage4_subdone, ap_block_pp2_stage1_subdone, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter11, grp_reconstruct_complex_s_fu_425_ap_done, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_block_pp1_stage1_subdone, ap_block_pp1_stage2_subdone, ap_block_pp2_stage2_subdone, ap_block_pp2_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_separate_complex_p_fu_434_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln148_fu_478_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln148_fu_478_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if (((icmp_ln156_fu_496_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln159_fu_518_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln159_fu_518_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_pp1_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                end if;
            when ap_ST_fsm_pp1_stage3 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage3_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp1_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage4;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage3_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                end if;
            when ap_ST_fsm_pp1_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage4;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state46 => 
                if (((icmp_ln171_fu_606_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln174_fu_628_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln174_fu_628_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp2_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage2;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_pp2_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage2;
                end if;
            when ap_ST_fsm_pp2_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage3;
                end if;
            when ap_ST_fsm_pp2_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage4;
                end if;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln185_fu_666_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter10 = ap_const_logic_0) and (ap_enable_reg_pp3_iter11 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter10 = ap_const_logic_0) and (ap_enable_reg_pp3_iter11 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln185_fu_666_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                if (((grp_reconstruct_complex_s_fu_425_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state74))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                else
                    ap_NS_fsm <= ap_ST_fsm_state74;
                end if;
            when ap_ST_fsm_state75 => 
                if ((not(((ap_const_lv2_1 = DNN_out_V_last_V_1_state) or (ap_const_lv2_1 = DNN_out_V_data_1_state) or ((ap_const_lv2_3 = DNN_out_V_last_V_1_state) and (ap_const_logic_0 = DNN_out_TREADY)) or ((ap_const_lv2_3 = DNN_out_V_data_1_state) and (ap_const_logic_0 = DNN_out_TREADY)))) and (ap_const_logic_1 = ap_CS_fsm_state75))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state75;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    DNN_out_TDATA <= DNN_out_V_data_1_data_out;
    DNN_out_TLAST <= DNN_out_V_last_V_1_data_out;
    DNN_out_TVALID <= DNN_out_V_last_V_1_state(0);
    DNN_out_V_data_1_ack_in <= DNN_out_V_data_1_state(1);
    DNN_out_V_data_1_ack_out <= DNN_out_TREADY;

    DNN_out_V_data_1_data_out_assign_proc : process(DNN_out_V_data_1_payload_A, DNN_out_V_data_1_payload_B, DNN_out_V_data_1_sel)
    begin
        if ((ap_const_logic_1 = DNN_out_V_data_1_sel)) then 
            DNN_out_V_data_1_data_out <= DNN_out_V_data_1_payload_B;
        else 
            DNN_out_V_data_1_data_out <= DNN_out_V_data_1_payload_A;
        end if; 
    end process;

    DNN_out_V_data_1_load_A <= (not(DNN_out_V_data_1_sel_wr) and DNN_out_V_data_1_state_cmp_full);
    DNN_out_V_data_1_load_B <= (DNN_out_V_data_1_state_cmp_full and DNN_out_V_data_1_sel_wr);
    DNN_out_V_data_1_sel <= DNN_out_V_data_1_sel_rd;
    DNN_out_V_data_1_state_cmp_full <= '0' when (DNN_out_V_data_1_state = ap_const_lv2_1) else '1';
    DNN_out_V_data_1_vld_in <= grp_reconstruct_complex_s_fu_425_DNN_out_TVALID;
    DNN_out_V_data_1_vld_out <= DNN_out_V_data_1_state(0);
    DNN_out_V_last_V_1_ack_in <= DNN_out_V_last_V_1_state(1);
    DNN_out_V_last_V_1_ack_out <= DNN_out_TREADY;

    DNN_out_V_last_V_1_data_out_assign_proc : process(DNN_out_V_last_V_1_payload_A, DNN_out_V_last_V_1_payload_B, DNN_out_V_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = DNN_out_V_last_V_1_sel)) then 
            DNN_out_V_last_V_1_data_out <= DNN_out_V_last_V_1_payload_B;
        else 
            DNN_out_V_last_V_1_data_out <= DNN_out_V_last_V_1_payload_A;
        end if; 
    end process;

    DNN_out_V_last_V_1_load_A <= (not(DNN_out_V_last_V_1_sel_wr) and DNN_out_V_last_V_1_state_cmp_full);
    DNN_out_V_last_V_1_load_B <= (DNN_out_V_last_V_1_state_cmp_full and DNN_out_V_last_V_1_sel_wr);
    DNN_out_V_last_V_1_sel <= DNN_out_V_last_V_1_sel_rd;
    DNN_out_V_last_V_1_state_cmp_full <= '0' when (DNN_out_V_last_V_1_state = ap_const_lv2_1) else '1';
    DNN_out_V_last_V_1_vld_in <= grp_reconstruct_complex_s_fu_425_DNN_out_TVALID;
    DNN_out_V_last_V_1_vld_out <= DNN_out_V_last_V_1_state(0);
    L1_BIAS_address0 <= zext_ln158_fu_508_p1(6 - 1 downto 0);

    L1_BIAS_ce0_assign_proc : process(ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            L1_BIAS_ce0 <= ap_const_logic_1;
        else 
            L1_BIAS_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    L1_WEIGHTS_address0 <= zext_ln161_1_fu_540_p1(13 - 1 downto 0);

    L1_WEIGHTS_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            L1_WEIGHTS_ce0 <= ap_const_logic_1;
        else 
            L1_WEIGHTS_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    L2_BIAS_address0 <= zext_ln173_fu_618_p1(7 - 1 downto 0);

    L2_BIAS_ce0_assign_proc : process(ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            L2_BIAS_ce0 <= ap_const_logic_1;
        else 
            L2_BIAS_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    L2_WEIGHTS_address0 <= zext_ln176_1_fu_650_p1(13 - 1 downto 0);

    L2_WEIGHTS_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            L2_WEIGHTS_ce0 <= ap_const_logic_1;
        else 
            L2_WEIGHTS_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    LS_data_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln150_fu_490_p1, ap_CS_fsm_state3, grp_separate_complex_p_fu_434_sep_address0, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            LS_data_address0 <= zext_ln150_fu_490_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            LS_data_address0 <= grp_separate_complex_p_fu_434_sep_address0;
        else 
            LS_data_address0 <= "XXXXXXX";
        end if; 
    end process;


    LS_data_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state3, grp_separate_complex_p_fu_434_sep_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            LS_data_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            LS_data_ce0 <= grp_separate_complex_p_fu_434_sep_ce0;
        else 
            LS_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    LS_data_ce1_assign_proc : process(ap_CS_fsm_state3, grp_separate_complex_p_fu_434_sep_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            LS_data_ce1 <= grp_separate_complex_p_fu_434_sep_ce1;
        else 
            LS_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    LS_data_we0_assign_proc : process(ap_CS_fsm_state3, grp_separate_complex_p_fu_434_sep_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            LS_data_we0 <= grp_separate_complex_p_fu_434_sep_we0;
        else 
            LS_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    LS_data_we1_assign_proc : process(ap_CS_fsm_state3, grp_separate_complex_p_fu_434_sep_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            LS_data_we1 <= grp_separate_complex_p_fu_434_sep_we1;
        else 
            LS_data_we1 <= ap_const_logic_0;
        end if; 
    end process;

    LS_stream_TREADY <= LS_stream_V_last_V_0_state(1);
    LS_stream_V_data_0_ack_in <= LS_stream_V_data_0_state(1);

    LS_stream_V_data_0_ack_out_assign_proc : process(ap_CS_fsm_state3, grp_separate_complex_p_fu_434_LS_stream_TREADY)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            LS_stream_V_data_0_ack_out <= grp_separate_complex_p_fu_434_LS_stream_TREADY;
        else 
            LS_stream_V_data_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    LS_stream_V_data_0_data_out_assign_proc : process(LS_stream_V_data_0_payload_A, LS_stream_V_data_0_payload_B, LS_stream_V_data_0_sel)
    begin
        if ((ap_const_logic_1 = LS_stream_V_data_0_sel)) then 
            LS_stream_V_data_0_data_out <= LS_stream_V_data_0_payload_B;
        else 
            LS_stream_V_data_0_data_out <= LS_stream_V_data_0_payload_A;
        end if; 
    end process;

    LS_stream_V_data_0_load_A <= (not(LS_stream_V_data_0_sel_wr) and LS_stream_V_data_0_state_cmp_full);
    LS_stream_V_data_0_load_B <= (LS_stream_V_data_0_state_cmp_full and LS_stream_V_data_0_sel_wr);
    LS_stream_V_data_0_sel <= LS_stream_V_data_0_sel_rd;
    LS_stream_V_data_0_state_cmp_full <= '0' when (LS_stream_V_data_0_state = ap_const_lv2_1) else '1';
    LS_stream_V_data_0_vld_in <= LS_stream_TVALID;
    LS_stream_V_data_0_vld_out <= LS_stream_V_data_0_state(0);
    LS_stream_V_last_V_0_ack_in <= LS_stream_V_last_V_0_state(1);

    LS_stream_V_last_V_0_ack_out_assign_proc : process(ap_CS_fsm_state3, grp_separate_complex_p_fu_434_LS_stream_TREADY)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            LS_stream_V_last_V_0_ack_out <= grp_separate_complex_p_fu_434_LS_stream_TREADY;
        else 
            LS_stream_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    LS_stream_V_last_V_0_data_out_assign_proc : process(LS_stream_V_last_V_0_payload_A, LS_stream_V_last_V_0_payload_B, LS_stream_V_last_V_0_sel)
    begin
        if ((ap_const_logic_1 = LS_stream_V_last_V_0_sel)) then 
            LS_stream_V_last_V_0_data_out <= LS_stream_V_last_V_0_payload_B;
        else 
            LS_stream_V_last_V_0_data_out <= LS_stream_V_last_V_0_payload_A;
        end if; 
    end process;

    LS_stream_V_last_V_0_load_A <= (not(LS_stream_V_last_V_0_sel_wr) and LS_stream_V_last_V_0_state_cmp_full);
    LS_stream_V_last_V_0_load_B <= (LS_stream_V_last_V_0_state_cmp_full and LS_stream_V_last_V_0_sel_wr);
    LS_stream_V_last_V_0_sel <= LS_stream_V_last_V_0_sel_rd;
    LS_stream_V_last_V_0_state_cmp_full <= '0' when (LS_stream_V_last_V_0_state = ap_const_lv2_1) else '1';
    LS_stream_V_last_V_0_vld_in <= LS_stream_TVALID;
    LS_stream_V_last_V_0_vld_out <= LS_stream_V_last_V_0_state(0);
    add_ln161_1_fu_545_p2 <= std_logic_vector(unsigned(phi_mul_reg_357) + unsigned(ap_const_lv13_34));
    add_ln161_fu_535_p2 <= std_logic_vector(unsigned(zext_ln158_1_reg_752) + unsigned(ap_phi_mux_phi_mul_phi_fu_361_p4));
    add_ln176_1_fu_655_p2 <= std_logic_vector(unsigned(phi_mul5_reg_402) + unsigned(ap_const_lv13_68));
    add_ln176_fu_645_p2 <= std_logic_vector(unsigned(zext_ln173_1_reg_825) + unsigned(ap_phi_mux_phi_mul5_phi_fu_406_p4));
    and_ln14_fu_592_p2 <= (or_ln14_fu_586_p2 and grp_fu_457_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage2 <= ap_CS_fsm(9);
    ap_CS_fsm_pp1_stage3 <= ap_CS_fsm(10);
    ap_CS_fsm_pp1_stage4 <= ap_CS_fsm(11);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(15);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(16);
    ap_CS_fsm_pp2_stage2 <= ap_CS_fsm(17);
    ap_CS_fsm_pp2_stage4 <= ap_CS_fsm(19);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(21);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state28 <= ap_CS_fsm(4);
    ap_CS_fsm_state29 <= ap_CS_fsm(5);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(6);
    ap_CS_fsm_state45 <= ap_CS_fsm(12);
    ap_CS_fsm_state46 <= ap_CS_fsm(13);
    ap_CS_fsm_state47 <= ap_CS_fsm(14);
    ap_CS_fsm_state60 <= ap_CS_fsm(20);
    ap_CS_fsm_state73 <= ap_CS_fsm(22);
    ap_CS_fsm_state74 <= ap_CS_fsm(23);
    ap_CS_fsm_state75 <= ap_CS_fsm(24);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp1_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp1_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp1_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp1_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp1_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp1_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp1_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp1_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp1_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp1_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp2_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp2_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp2_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp2_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp2_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp2_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp2_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp2_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp2_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp3_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp3_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp3_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp3_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp3_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp3_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp3_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp3_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp3_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state75_assign_proc : process(DNN_out_TREADY, DNN_out_V_data_1_state, DNN_out_V_last_V_1_state)
    begin
                ap_block_state75 <= ((ap_const_lv2_1 = DNN_out_V_last_V_1_state) or (ap_const_lv2_1 = DNN_out_V_data_1_state) or ((ap_const_lv2_3 = DNN_out_V_last_V_1_state) and (ap_const_logic_0 = DNN_out_TREADY)) or ((ap_const_lv2_3 = DNN_out_V_data_1_state) and (ap_const_logic_0 = DNN_out_TREADY)));
    end process;

        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln148_fu_478_p2)
    begin
        if ((icmp_ln148_fu_478_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state31_assign_proc : process(icmp_ln159_fu_518_p2)
    begin
        if ((icmp_ln159_fu_518_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state31 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state31 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state48_assign_proc : process(icmp_ln174_fu_628_p2)
    begin
        if ((icmp_ln174_fu_628_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state48 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state48 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state61_assign_proc : process(icmp_ln185_fu_666_p2)
    begin
        if ((icmp_ln185_fu_666_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state61 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state61 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter10, ap_enable_reg_pp3_iter5, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter3, ap_enable_reg_pp3_iter4, ap_enable_reg_pp3_iter6, ap_enable_reg_pp3_iter7, ap_enable_reg_pp3_iter8, ap_enable_reg_pp3_iter9, ap_enable_reg_pp3_iter11)
    begin
        if (((ap_enable_reg_pp3_iter11 = ap_const_logic_0) and (ap_enable_reg_pp3_iter9 = ap_const_logic_0) and (ap_enable_reg_pp3_iter8 = ap_const_logic_0) and (ap_enable_reg_pp3_iter7 = ap_const_logic_0) and (ap_enable_reg_pp3_iter6 = ap_const_logic_0) and (ap_enable_reg_pp3_iter4 = ap_const_logic_0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter5 = ap_const_logic_0) and (ap_enable_reg_pp3_iter10 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_before_relu_0_i17_phi_fu_384_p4_assign_proc : process(before_relu_0_i17_reg_381, reg_462, ap_enable_reg_pp2_iter2, icmp_ln174_reg_835_pp2_iter2_reg, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1)
    begin
        if (((icmp_ln174_reg_835_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1))) then 
            ap_phi_mux_before_relu_0_i17_phi_fu_384_p4 <= reg_462;
        else 
            ap_phi_mux_before_relu_0_i17_phi_fu_384_p4 <= before_relu_0_i17_reg_381;
        end if; 
    end process;


    ap_phi_mux_j_0_i18_phi_fu_395_p4_assign_proc : process(j_0_i18_reg_391, ap_CS_fsm_pp2_stage0, icmp_ln174_reg_835, ap_enable_reg_pp2_iter1, j_1_reg_839, ap_block_pp2_stage0)
    begin
        if (((icmp_ln174_reg_835 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_phi_mux_j_0_i18_phi_fu_395_p4 <= j_1_reg_839;
        else 
            ap_phi_mux_j_0_i18_phi_fu_395_p4 <= j_0_i18_reg_391;
        end if; 
    end process;


    ap_phi_mux_j_0_i_phi_fu_350_p4_assign_proc : process(j_0_i_reg_346, ap_CS_fsm_pp1_stage0, icmp_ln159_reg_762, ap_enable_reg_pp1_iter1, j_reg_766, ap_block_pp1_stage0)
    begin
        if (((icmp_ln159_reg_762 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_j_0_i_phi_fu_350_p4 <= j_reg_766;
        else 
            ap_phi_mux_j_0_i_phi_fu_350_p4 <= j_0_i_reg_346;
        end if; 
    end process;


    ap_phi_mux_phi_mul5_phi_fu_406_p4_assign_proc : process(phi_mul5_reg_402, ap_CS_fsm_pp2_stage0, icmp_ln174_reg_835, ap_enable_reg_pp2_iter1, add_ln176_1_reg_865, ap_block_pp2_stage0)
    begin
        if (((icmp_ln174_reg_835 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_phi_mux_phi_mul5_phi_fu_406_p4 <= add_ln176_1_reg_865;
        else 
            ap_phi_mux_phi_mul5_phi_fu_406_p4 <= phi_mul5_reg_402;
        end if; 
    end process;


    ap_phi_mux_phi_mul_phi_fu_361_p4_assign_proc : process(phi_mul_reg_357, ap_CS_fsm_pp1_stage0, icmp_ln159_reg_762, ap_enable_reg_pp1_iter1, add_ln161_1_reg_792, ap_block_pp1_stage0)
    begin
        if (((icmp_ln159_reg_762 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_phi_mul_phi_fu_361_p4 <= add_ln161_1_reg_792;
        else 
            ap_phi_mux_phi_mul_phi_fu_361_p4 <= phi_mul_reg_357;
        end if; 
    end process;


    ap_phi_mux_x_assign_phi_fu_339_p4_assign_proc : process(x_assign_reg_336, reg_462, ap_enable_reg_pp1_iter2, icmp_ln159_reg_762_pp1_iter2_reg, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1)
    begin
        if (((icmp_ln159_reg_762_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1))) then 
            ap_phi_mux_x_assign_phi_fu_339_p4 <= reg_462;
        else 
            ap_phi_mux_x_assign_phi_fu_339_p4 <= x_assign_reg_336;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln14_fu_556_p1 <= reg_462;

    denorm_DNN_address0_assign_proc : process(zext_ln187_reg_883_pp3_iter10_reg, ap_enable_reg_pp3_iter11, grp_reconstruct_complex_s_fu_425_y_L3_address0, ap_CS_fsm_state74, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            denorm_DNN_address0 <= zext_ln187_reg_883_pp3_iter10_reg(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            denorm_DNN_address0 <= grp_reconstruct_complex_s_fu_425_y_L3_address0;
        else 
            denorm_DNN_address0 <= "XXXXXXX";
        end if; 
    end process;


    denorm_DNN_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter11, grp_reconstruct_complex_s_fu_425_y_L3_ce0, ap_CS_fsm_state74)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter11 = ap_const_logic_1))) then 
            denorm_DNN_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            denorm_DNN_ce0 <= grp_reconstruct_complex_s_fu_425_y_L3_ce0;
        else 
            denorm_DNN_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    denorm_DNN_ce1_assign_proc : process(grp_reconstruct_complex_s_fu_425_y_L3_ce1, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            denorm_DNN_ce1 <= grp_reconstruct_complex_s_fu_425_y_L3_ce1;
        else 
            denorm_DNN_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    denorm_DNN_we0_assign_proc : process(ap_block_pp3_stage0_11001, icmp_ln185_reg_874_pp3_iter10_reg, ap_enable_reg_pp3_iter11)
    begin
        if (((icmp_ln185_reg_874_pp3_iter10_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter11 = ap_const_logic_1))) then 
            denorm_DNN_we0 <= ap_const_logic_1;
        else 
            denorm_DNN_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_443_opcode_assign_proc : process(icmp_ln159_reg_762_pp1_iter1_reg, icmp_ln174_reg_835_pp2_iter1_reg, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, icmp_ln148_reg_684_pp0_iter1_reg, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp2_stage1, icmp_ln185_reg_874_pp3_iter5_reg, ap_enable_reg_pp0_iter2, ap_enable_reg_pp3_iter6, ap_block_pp1_stage1_00001, ap_block_pp2_stage1_00001, ap_block_pp3_stage0_00001, ap_block_pp0_stage0_00001)
    begin
        if (((icmp_ln148_reg_684_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_00001))) then 
            grp_fu_443_opcode <= ap_const_lv2_1;
        elsif ((((icmp_ln174_reg_835_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1_00001)) or ((icmp_ln159_reg_762_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_00001)) or ((icmp_ln185_reg_874_pp3_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_00001)))) then 
            grp_fu_443_opcode <= ap_const_lv2_0;
        else 
            grp_fu_443_opcode <= "XX";
        end if; 
    end process;


    grp_fu_443_p0_assign_proc : process(reg_472, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, LS_data_load_reg_709, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp3_iter6, ap_phi_mux_x_assign_phi_fu_339_p4, ap_block_pp1_stage1, ap_phi_mux_before_relu_0_i17_phi_fu_384_p4, ap_block_pp2_stage1, ap_block_pp0_stage0, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            grp_fu_443_p0 <= reg_472;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1))) then 
            grp_fu_443_p0 <= ap_phi_mux_before_relu_0_i17_phi_fu_384_p4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1))) then 
            grp_fu_443_p0 <= ap_phi_mux_x_assign_phi_fu_339_p4;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_443_p0 <= LS_data_load_reg_709;
        else 
            grp_fu_443_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_443_p1_assign_proc : process(reg_472, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, mean_in_load_reg_714, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp2_stage1, mean_o_load_reg_914, ap_enable_reg_pp0_iter2, ap_enable_reg_pp3_iter6, ap_block_pp1_stage1, ap_block_pp2_stage1, ap_block_pp0_stage0, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            grp_fu_443_p1 <= mean_o_load_reg_914;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1)))) then 
            grp_fu_443_p1 <= reg_472;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_443_p1 <= mean_in_load_reg_714;
        else 
            grp_fu_443_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_449_p0_assign_proc : process(ap_enable_reg_pp1_iter0, norm_LS_data_load_reg_782, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp2_iter0, y_L2_load_reg_855, y_L3_load_reg_899, ap_enable_reg_pp3_iter2, ap_block_pp3_stage0, ap_block_pp1_stage2, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            grp_fu_449_p0 <= y_L3_load_reg_899;
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2))) then 
            grp_fu_449_p0 <= y_L2_load_reg_855;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage2))) then 
            grp_fu_449_p0 <= norm_LS_data_load_reg_782;
        else 
            grp_fu_449_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_449_p1_assign_proc : process(ap_enable_reg_pp1_iter0, L1_WEIGHTS_load_reg_787, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp2_iter0, L2_WEIGHTS_load_reg_860, std_o_load_reg_904, ap_enable_reg_pp3_iter2, ap_block_pp3_stage0, ap_block_pp1_stage2, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            grp_fu_449_p1 <= std_o_load_reg_904;
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2))) then 
            grp_fu_449_p1 <= L2_WEIGHTS_load_reg_860;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage2))) then 
            grp_fu_449_p1 <= L1_WEIGHTS_load_reg_787;
        else 
            grp_fu_449_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_reconstruct_complex_s_fu_425_DNN_out_TREADY <= ((ap_CS_fsm_state74 and DNN_out_V_last_V_1_ack_in) or (ap_CS_fsm_state74 and DNN_out_V_data_1_ack_in));
    grp_reconstruct_complex_s_fu_425_ap_start <= grp_reconstruct_complex_s_fu_425_ap_start_reg;
    grp_separate_complex_p_fu_434_LS_stream_TVALID <= LS_stream_V_last_V_0_state(0);
    grp_separate_complex_p_fu_434_ap_start <= grp_separate_complex_p_fu_434_ap_start_reg;
    i_1_fu_502_p2 <= std_logic_vector(unsigned(i_0_i12_reg_324) + unsigned(ap_const_lv6_1));
    i_2_fu_672_p2 <= std_logic_vector(unsigned(i_0_i24_reg_414) + unsigned(ap_const_lv7_1));
    i_3_fu_612_p2 <= std_logic_vector(unsigned(i_0_i14_reg_369) + unsigned(ap_const_lv7_1));
    i_fu_484_p2 <= std_logic_vector(unsigned(i_0_i_reg_313) + unsigned(ap_const_lv7_1));
    icmp_ln148_fu_478_p2 <= "1" when (i_0_i_reg_313 = ap_const_lv7_68) else "0";
    icmp_ln14_1_fu_580_p2 <= "1" when (trunc_ln14_fu_570_p1 = ap_const_lv23_0) else "0";
    icmp_ln14_fu_574_p2 <= "0" when (tmp_fu_560_p4 = ap_const_lv8_FF) else "1";
    icmp_ln156_fu_496_p2 <= "1" when (i_0_i12_reg_324 = ap_const_lv6_34) else "0";
    icmp_ln159_1_fu_551_p2 <= "1" when (j_reg_766 = ap_const_lv7_68) else "0";
    icmp_ln159_fu_518_p2 <= "1" when (ap_phi_mux_j_0_i_phi_fu_350_p4 = ap_const_lv7_68) else "0";
    icmp_ln171_fu_606_p2 <= "1" when (i_0_i14_reg_369 = ap_const_lv7_68) else "0";
    icmp_ln174_1_fu_661_p2 <= "1" when (j_1_reg_839 = ap_const_lv6_34) else "0";
    icmp_ln174_fu_628_p2 <= "1" when (ap_phi_mux_j_0_i18_phi_fu_395_p4 = ap_const_lv6_34) else "0";
    icmp_ln185_fu_666_p2 <= "1" when (i_0_i24_reg_414 = ap_const_lv7_68) else "0";
    j_1_fu_634_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_0_i18_phi_fu_395_p4) + unsigned(ap_const_lv6_1));
    j_fu_524_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_0_i_phi_fu_350_p4) + unsigned(ap_const_lv7_1));
    mean_in_address0 <= zext_ln150_fu_490_p1(7 - 1 downto 0);

    mean_in_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            mean_in_ce0 <= ap_const_logic_1;
        else 
            mean_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mean_o_address0 <= zext_ln187_reg_883_pp3_iter3_reg(7 - 1 downto 0);

    mean_o_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter4 = ap_const_logic_1))) then 
            mean_o_ce0 <= ap_const_logic_1;
        else 
            mean_o_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    norm_LS_data_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, zext_ln150_reg_693_pp0_iter22_reg, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter23, ap_block_pp1_stage0, ap_block_pp0_stage0, zext_ln161_fu_530_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            norm_LS_data_address0 <= zext_ln161_fu_530_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            norm_LS_data_address0 <= zext_ln150_reg_693_pp0_iter22_reg(7 - 1 downto 0);
        else 
            norm_LS_data_address0 <= "XXXXXXX";
        end if; 
    end process;


    norm_LS_data_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter23)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1)))) then 
            norm_LS_data_ce0 <= ap_const_logic_1;
        else 
            norm_LS_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    norm_LS_data_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln148_reg_684_pp0_iter22_reg, ap_enable_reg_pp0_iter23)
    begin
        if (((icmp_ln148_reg_684_pp0_iter22_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter23 = ap_const_logic_1))) then 
            norm_LS_data_we0 <= ap_const_logic_1;
        else 
            norm_LS_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln14_fu_586_p2 <= (icmp_ln14_fu_574_p2 or icmp_ln14_1_fu_580_p2);
    select_ln14_fu_598_p3 <= 
        ap_const_lv32_0 when (and_ln14_fu_592_p2(0) = '1') else 
        reg_462;
    std_in_address0 <= zext_ln150_reg_693_pp0_iter4_reg(7 - 1 downto 0);

    std_in_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            std_in_ce0 <= ap_const_logic_1;
        else 
            std_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    std_o_address0 <= zext_ln187_fu_678_p1(7 - 1 downto 0);

    std_o_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            std_o_ce0 <= ap_const_logic_1;
        else 
            std_o_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_560_p4 <= bitcast_ln14_fu_556_p1(30 downto 23);
    trunc_ln14_fu_570_p1 <= bitcast_ln14_fu_556_p1(23 - 1 downto 0);

    y_L2_address0_assign_proc : process(ap_enable_reg_pp1_iter2, ap_CS_fsm_pp2_stage0, y_L2_addr_reg_747, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp1_stage3, ap_block_pp2_stage0, zext_ln176_fu_640_p1, ap_block_pp1_stage3)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            y_L2_address0 <= zext_ln176_fu_640_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage3))) then 
            y_L2_address0 <= y_L2_addr_reg_747;
        else 
            y_L2_address0 <= "XXXXXX";
        end if; 
    end process;


    y_L2_ce0_assign_proc : process(ap_enable_reg_pp1_iter2, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage3_11001)))) then 
            y_L2_ce0 <= ap_const_logic_1;
        else 
            y_L2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_L2_we0_assign_proc : process(ap_enable_reg_pp1_iter2, icmp_ln159_1_reg_797_pp1_iter2_reg, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3_11001)
    begin
        if (((icmp_ln159_1_reg_797_pp1_iter2_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage3_11001))) then 
            y_L2_we0 <= ap_const_logic_1;
        else 
            y_L2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y_L3_address0_assign_proc : process(ap_enable_reg_pp2_iter2, y_L3_addr_2_reg_820, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, zext_ln187_fu_678_p1, ap_block_pp2_stage1, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            y_L3_address0 <= zext_ln187_fu_678_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1))) then 
            y_L3_address0 <= y_L3_addr_2_reg_820;
        else 
            y_L3_address0 <= "XXXXXXX";
        end if; 
    end process;


    y_L3_ce0_assign_proc : process(ap_enable_reg_pp2_iter2, ap_block_pp3_stage0_11001, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)))) then 
            y_L3_ce0 <= ap_const_logic_1;
        else 
            y_L3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_L3_we0_assign_proc : process(ap_enable_reg_pp2_iter2, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, icmp_ln174_1_reg_870_pp2_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (icmp_ln174_1_reg_870_pp2_iter2_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            y_L3_we0 <= ap_const_logic_1;
        else 
            y_L3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln150_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_313),64));
    zext_ln158_1_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i12_reg_324),13));
    zext_ln158_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i12_reg_324),64));
    zext_ln161_1_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln161_fu_535_p2),64));
    zext_ln161_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_0_i_phi_fu_350_p4),64));
    zext_ln173_1_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i14_reg_369),13));
    zext_ln173_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i14_reg_369),64));
    zext_ln176_1_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln176_fu_645_p2),64));
    zext_ln176_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_0_i18_phi_fu_395_p4),64));
    zext_ln187_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i24_reg_414),64));
end behav;
