// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="DNN_p,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=56102,HLS_SYN_TPT=none,HLS_SYN_MEM=45,HLS_SYN_DSP=5,HLS_SYN_FF=2604,HLS_SYN_LUT=3386,HLS_VERSION=2019_1}" *)

module DNN_p (
        ap_clk,
        ap_rst_n,
        LS_stream_TDATA,
        LS_stream_TVALID,
        LS_stream_TREADY,
        LS_stream_TLAST,
        DNN_out_TDATA,
        DNN_out_TVALID,
        DNN_out_TREADY,
        DNN_out_TLAST
);

parameter    ap_ST_fsm_state1 = 25'd1;
parameter    ap_ST_fsm_state2 = 25'd2;
parameter    ap_ST_fsm_state3 = 25'd4;
parameter    ap_ST_fsm_pp0_stage0 = 25'd8;
parameter    ap_ST_fsm_state28 = 25'd16;
parameter    ap_ST_fsm_state29 = 25'd32;
parameter    ap_ST_fsm_state30 = 25'd64;
parameter    ap_ST_fsm_pp1_stage0 = 25'd128;
parameter    ap_ST_fsm_pp1_stage1 = 25'd256;
parameter    ap_ST_fsm_pp1_stage2 = 25'd512;
parameter    ap_ST_fsm_pp1_stage3 = 25'd1024;
parameter    ap_ST_fsm_pp1_stage4 = 25'd2048;
parameter    ap_ST_fsm_state45 = 25'd4096;
parameter    ap_ST_fsm_state46 = 25'd8192;
parameter    ap_ST_fsm_state47 = 25'd16384;
parameter    ap_ST_fsm_pp2_stage0 = 25'd32768;
parameter    ap_ST_fsm_pp2_stage1 = 25'd65536;
parameter    ap_ST_fsm_pp2_stage2 = 25'd131072;
parameter    ap_ST_fsm_pp2_stage3 = 25'd262144;
parameter    ap_ST_fsm_pp2_stage4 = 25'd524288;
parameter    ap_ST_fsm_state60 = 25'd1048576;
parameter    ap_ST_fsm_pp3_stage0 = 25'd2097152;
parameter    ap_ST_fsm_state73 = 25'd4194304;
parameter    ap_ST_fsm_state74 = 25'd8388608;
parameter    ap_ST_fsm_state75 = 25'd16777216;

input   ap_clk;
input   ap_rst_n;
input  [63:0] LS_stream_TDATA;
input   LS_stream_TVALID;
output   LS_stream_TREADY;
input  [0:0] LS_stream_TLAST;
output  [63:0] DNN_out_TDATA;
output   DNN_out_TVALID;
input   DNN_out_TREADY;
output  [0:0] DNN_out_TLAST;

 reg    ap_rst_n_inv;
reg   [63:0] LS_stream_V_data_0_data_out;
wire    LS_stream_V_data_0_vld_in;
wire    LS_stream_V_data_0_vld_out;
wire    LS_stream_V_data_0_ack_in;
reg    LS_stream_V_data_0_ack_out;
reg   [63:0] LS_stream_V_data_0_payload_A;
reg   [63:0] LS_stream_V_data_0_payload_B;
reg    LS_stream_V_data_0_sel_rd;
reg    LS_stream_V_data_0_sel_wr;
wire    LS_stream_V_data_0_sel;
wire    LS_stream_V_data_0_load_A;
wire    LS_stream_V_data_0_load_B;
reg   [1:0] LS_stream_V_data_0_state;
wire    LS_stream_V_data_0_state_cmp_full;
reg   [0:0] LS_stream_V_last_V_0_data_out;
wire    LS_stream_V_last_V_0_vld_in;
wire    LS_stream_V_last_V_0_vld_out;
wire    LS_stream_V_last_V_0_ack_in;
reg    LS_stream_V_last_V_0_ack_out;
reg   [0:0] LS_stream_V_last_V_0_payload_A;
reg   [0:0] LS_stream_V_last_V_0_payload_B;
reg    LS_stream_V_last_V_0_sel_rd;
reg    LS_stream_V_last_V_0_sel_wr;
wire    LS_stream_V_last_V_0_sel;
wire    LS_stream_V_last_V_0_load_A;
wire    LS_stream_V_last_V_0_load_B;
reg   [1:0] LS_stream_V_last_V_0_state;
wire    LS_stream_V_last_V_0_state_cmp_full;
reg   [63:0] DNN_out_V_data_1_data_out;
wire    DNN_out_V_data_1_vld_in;
wire    DNN_out_V_data_1_vld_out;
wire    DNN_out_V_data_1_ack_in;
wire    DNN_out_V_data_1_ack_out;
reg   [63:0] DNN_out_V_data_1_payload_A;
reg   [63:0] DNN_out_V_data_1_payload_B;
reg    DNN_out_V_data_1_sel_rd;
reg    DNN_out_V_data_1_sel_wr;
wire    DNN_out_V_data_1_sel;
wire    DNN_out_V_data_1_load_A;
wire    DNN_out_V_data_1_load_B;
reg   [1:0] DNN_out_V_data_1_state;
wire    DNN_out_V_data_1_state_cmp_full;
reg   [0:0] DNN_out_V_last_V_1_data_out;
wire    DNN_out_V_last_V_1_vld_in;
wire    DNN_out_V_last_V_1_vld_out;
wire    DNN_out_V_last_V_1_ack_in;
wire    DNN_out_V_last_V_1_ack_out;
reg   [0:0] DNN_out_V_last_V_1_payload_A;
reg   [0:0] DNN_out_V_last_V_1_payload_B;
reg    DNN_out_V_last_V_1_sel_rd;
reg    DNN_out_V_last_V_1_sel_wr;
wire    DNN_out_V_last_V_1_sel;
wire    DNN_out_V_last_V_1_load_A;
wire    DNN_out_V_last_V_1_load_B;
reg   [1:0] DNN_out_V_last_V_1_state;
wire    DNN_out_V_last_V_1_state_cmp_full;
wire   [6:0] mean_in_address0;
reg    mean_in_ce0;
wire   [31:0] mean_in_q0;
wire   [6:0] std_in_address0;
reg    std_in_ce0;
wire   [31:0] std_in_q0;
wire   [5:0] L1_BIAS_address0;
reg    L1_BIAS_ce0;
wire   [31:0] L1_BIAS_q0;
wire   [12:0] L1_WEIGHTS_address0;
reg    L1_WEIGHTS_ce0;
wire   [31:0] L1_WEIGHTS_q0;
wire   [6:0] L2_BIAS_address0;
reg    L2_BIAS_ce0;
wire   [31:0] L2_BIAS_q0;
wire   [12:0] L2_WEIGHTS_address0;
reg    L2_WEIGHTS_ce0;
wire   [31:0] L2_WEIGHTS_q0;
wire   [6:0] std_o_address0;
reg    std_o_ce0;
wire   [31:0] std_o_q0;
wire   [6:0] mean_o_address0;
reg    mean_o_ce0;
wire   [31:0] mean_o_q0;
reg   [6:0] i_0_i_reg_313;
reg   [31:0] x_assign_reg_336;
reg   [6:0] j_0_i_reg_346;
reg   [12:0] phi_mul_reg_357;
reg   [31:0] before_relu_0_i17_reg_381;
reg   [5:0] j_0_i18_reg_391;
reg   [12:0] phi_mul5_reg_402;
reg   [6:0] i_0_i24_reg_414;
wire   [31:0] grp_fu_443_p2;
reg   [31:0] reg_462;
reg    ap_enable_reg_pp0_iter6;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_state8_pp0_stage0_iter4;
wire    ap_block_state9_pp0_stage0_iter5;
wire    ap_block_state10_pp0_stage0_iter6;
wire    ap_block_state11_pp0_stage0_iter7;
wire    ap_block_state12_pp0_stage0_iter8;
wire    ap_block_state13_pp0_stage0_iter9;
wire    ap_block_state14_pp0_stage0_iter10;
wire    ap_block_state15_pp0_stage0_iter11;
wire    ap_block_state16_pp0_stage0_iter12;
wire    ap_block_state17_pp0_stage0_iter13;
wire    ap_block_state18_pp0_stage0_iter14;
wire    ap_block_state19_pp0_stage0_iter15;
wire    ap_block_state20_pp0_stage0_iter16;
wire    ap_block_state21_pp0_stage0_iter17;
wire    ap_block_state22_pp0_stage0_iter18;
wire    ap_block_state23_pp0_stage0_iter19;
wire    ap_block_state24_pp0_stage0_iter20;
wire    ap_block_state25_pp0_stage0_iter21;
wire    ap_block_state26_pp0_stage0_iter22;
wire    ap_block_state27_pp0_stage0_iter23;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln148_reg_684;
reg   [0:0] icmp_ln148_reg_684_pp0_iter5_reg;
(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_state31_pp1_stage0_iter0;
wire    ap_block_state36_pp1_stage0_iter1;
wire    ap_block_state41_pp1_stage0_iter2;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln159_reg_762;
reg   [0:0] icmp_ln159_reg_762_pp1_iter1_reg;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter2;
wire    ap_block_state48_pp2_stage0_iter0;
wire    ap_block_state53_pp2_stage0_iter1;
wire    ap_block_state58_pp2_stage0_iter2;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln174_reg_835;
reg   [0:0] icmp_ln174_reg_835_pp2_iter1_reg;
reg    ap_enable_reg_pp3_iter10;
wire    ap_block_state61_pp3_stage0_iter0;
wire    ap_block_state62_pp3_stage0_iter1;
wire    ap_block_state63_pp3_stage0_iter2;
wire    ap_block_state64_pp3_stage0_iter3;
wire    ap_block_state65_pp3_stage0_iter4;
wire    ap_block_state66_pp3_stage0_iter5;
wire    ap_block_state67_pp3_stage0_iter6;
wire    ap_block_state68_pp3_stage0_iter7;
wire    ap_block_state69_pp3_stage0_iter8;
wire    ap_block_state70_pp3_stage0_iter9;
wire    ap_block_state71_pp3_stage0_iter10;
wire    ap_block_state72_pp3_stage0_iter11;
wire    ap_block_pp3_stage0_11001;
reg   [0:0] icmp_ln185_reg_874;
reg   [0:0] icmp_ln185_reg_874_pp3_iter9_reg;
wire   [31:0] grp_fu_449_p2;
reg   [31:0] reg_472;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp2_iter1;
reg    ap_enable_reg_pp3_iter5;
reg   [0:0] icmp_ln185_reg_874_pp3_iter4_reg;
wire   [0:0] icmp_ln148_fu_478_p2;
wire    ap_CS_fsm_pp0_stage0;
reg   [0:0] icmp_ln148_reg_684_pp0_iter1_reg;
reg   [0:0] icmp_ln148_reg_684_pp0_iter2_reg;
reg   [0:0] icmp_ln148_reg_684_pp0_iter3_reg;
reg   [0:0] icmp_ln148_reg_684_pp0_iter4_reg;
reg   [0:0] icmp_ln148_reg_684_pp0_iter6_reg;
reg   [0:0] icmp_ln148_reg_684_pp0_iter7_reg;
reg   [0:0] icmp_ln148_reg_684_pp0_iter8_reg;
reg   [0:0] icmp_ln148_reg_684_pp0_iter9_reg;
reg   [0:0] icmp_ln148_reg_684_pp0_iter10_reg;
reg   [0:0] icmp_ln148_reg_684_pp0_iter11_reg;
reg   [0:0] icmp_ln148_reg_684_pp0_iter12_reg;
reg   [0:0] icmp_ln148_reg_684_pp0_iter13_reg;
reg   [0:0] icmp_ln148_reg_684_pp0_iter14_reg;
reg   [0:0] icmp_ln148_reg_684_pp0_iter15_reg;
reg   [0:0] icmp_ln148_reg_684_pp0_iter16_reg;
reg   [0:0] icmp_ln148_reg_684_pp0_iter17_reg;
reg   [0:0] icmp_ln148_reg_684_pp0_iter18_reg;
reg   [0:0] icmp_ln148_reg_684_pp0_iter19_reg;
reg   [0:0] icmp_ln148_reg_684_pp0_iter20_reg;
reg   [0:0] icmp_ln148_reg_684_pp0_iter21_reg;
reg   [0:0] icmp_ln148_reg_684_pp0_iter22_reg;
wire   [6:0] i_fu_484_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] zext_ln150_fu_490_p1;
reg   [63:0] zext_ln150_reg_693;
reg   [63:0] zext_ln150_reg_693_pp0_iter1_reg;
reg   [63:0] zext_ln150_reg_693_pp0_iter2_reg;
reg   [63:0] zext_ln150_reg_693_pp0_iter3_reg;
reg   [63:0] zext_ln150_reg_693_pp0_iter4_reg;
reg   [63:0] zext_ln150_reg_693_pp0_iter5_reg;
reg   [63:0] zext_ln150_reg_693_pp0_iter6_reg;
reg   [63:0] zext_ln150_reg_693_pp0_iter7_reg;
reg   [63:0] zext_ln150_reg_693_pp0_iter8_reg;
reg   [63:0] zext_ln150_reg_693_pp0_iter9_reg;
reg   [63:0] zext_ln150_reg_693_pp0_iter10_reg;
reg   [63:0] zext_ln150_reg_693_pp0_iter11_reg;
reg   [63:0] zext_ln150_reg_693_pp0_iter12_reg;
reg   [63:0] zext_ln150_reg_693_pp0_iter13_reg;
reg   [63:0] zext_ln150_reg_693_pp0_iter14_reg;
reg   [63:0] zext_ln150_reg_693_pp0_iter15_reg;
reg   [63:0] zext_ln150_reg_693_pp0_iter16_reg;
reg   [63:0] zext_ln150_reg_693_pp0_iter17_reg;
reg   [63:0] zext_ln150_reg_693_pp0_iter18_reg;
reg   [63:0] zext_ln150_reg_693_pp0_iter19_reg;
reg   [63:0] zext_ln150_reg_693_pp0_iter20_reg;
reg   [63:0] zext_ln150_reg_693_pp0_iter21_reg;
reg   [63:0] zext_ln150_reg_693_pp0_iter22_reg;
wire   [31:0] LS_data_q0;
reg   [31:0] LS_data_load_reg_709;
reg   [31:0] mean_in_load_reg_714;
reg   [31:0] std_in_load_reg_724;
wire   [31:0] grp_fu_453_p2;
reg   [31:0] tmp_1_i_reg_729;
wire   [5:0] i_1_fu_502_p2;
reg   [5:0] i_1_reg_737;
wire    ap_CS_fsm_state29;
wire   [0:0] icmp_ln156_fu_496_p2;
reg   [5:0] y_L2_addr_reg_747;
wire   [12:0] zext_ln158_1_fu_514_p1;
reg   [12:0] zext_ln158_1_reg_752;
wire    ap_CS_fsm_state30;
wire   [0:0] icmp_ln159_fu_518_p2;
reg   [0:0] icmp_ln159_reg_762_pp1_iter2_reg;
wire   [6:0] j_fu_524_p2;
reg   [6:0] j_reg_766;
reg    ap_enable_reg_pp1_iter0;
wire   [31:0] norm_LS_data_q0;
reg   [31:0] norm_LS_data_load_reg_782;
wire    ap_CS_fsm_pp1_stage1;
wire    ap_block_state32_pp1_stage1_iter0;
wire    ap_block_state37_pp1_stage1_iter1;
wire    ap_block_state42_pp1_stage1_iter2;
wire    ap_block_pp1_stage1_11001;
reg   [31:0] L1_WEIGHTS_load_reg_787;
wire   [12:0] add_ln161_1_fu_545_p2;
reg   [12:0] add_ln161_1_reg_792;
wire    ap_CS_fsm_pp1_stage4;
wire    ap_block_state35_pp1_stage4_iter0;
wire    ap_block_state40_pp1_stage4_iter1;
wire    ap_block_pp1_stage4_11001;
wire   [0:0] icmp_ln159_1_fu_551_p2;
reg   [0:0] icmp_ln159_1_reg_797;
reg   [0:0] icmp_ln159_1_reg_797_pp1_iter2_reg;
wire   [31:0] select_ln14_fu_598_p3;
reg   [31:0] select_ln14_reg_801;
wire    ap_CS_fsm_pp1_stage2;
wire    ap_block_state33_pp1_stage2_iter0;
wire    ap_block_state38_pp1_stage2_iter1;
wire    ap_block_state43_pp1_stage2_iter2;
wire    ap_block_pp1_stage2_11001;
wire   [0:0] icmp_ln171_fu_606_p2;
wire    ap_CS_fsm_state46;
wire   [6:0] i_3_fu_612_p2;
reg   [6:0] i_3_reg_810;
reg   [6:0] y_L3_addr_2_reg_820;
wire   [12:0] zext_ln173_1_fu_624_p1;
reg   [12:0] zext_ln173_1_reg_825;
wire    ap_CS_fsm_state47;
wire   [0:0] icmp_ln174_fu_628_p2;
reg   [0:0] icmp_ln174_reg_835_pp2_iter2_reg;
wire   [5:0] j_1_fu_634_p2;
reg   [5:0] j_1_reg_839;
reg    ap_enable_reg_pp2_iter0;
wire   [31:0] y_L2_q0;
reg   [31:0] y_L2_load_reg_855;
wire    ap_CS_fsm_pp2_stage1;
wire    ap_block_state49_pp2_stage1_iter0;
wire    ap_block_state54_pp2_stage1_iter1;
wire    ap_block_state59_pp2_stage1_iter2;
wire    ap_block_pp2_stage1_11001;
reg   [31:0] L2_WEIGHTS_load_reg_860;
wire   [12:0] add_ln176_1_fu_655_p2;
reg   [12:0] add_ln176_1_reg_865;
wire    ap_CS_fsm_pp2_stage4;
wire    ap_block_state52_pp2_stage4_iter0;
wire    ap_block_state57_pp2_stage4_iter1;
wire    ap_block_pp2_stage4_11001;
wire   [0:0] icmp_ln174_1_fu_661_p2;
reg   [0:0] icmp_ln174_1_reg_870;
reg   [0:0] icmp_ln174_1_reg_870_pp2_iter2_reg;
wire   [0:0] icmp_ln185_fu_666_p2;
wire    ap_CS_fsm_pp3_stage0;
reg   [0:0] icmp_ln185_reg_874_pp3_iter1_reg;
reg   [0:0] icmp_ln185_reg_874_pp3_iter2_reg;
reg   [0:0] icmp_ln185_reg_874_pp3_iter3_reg;
reg   [0:0] icmp_ln185_reg_874_pp3_iter5_reg;
reg   [0:0] icmp_ln185_reg_874_pp3_iter6_reg;
reg   [0:0] icmp_ln185_reg_874_pp3_iter7_reg;
reg   [0:0] icmp_ln185_reg_874_pp3_iter8_reg;
reg   [0:0] icmp_ln185_reg_874_pp3_iter10_reg;
wire   [6:0] i_2_fu_672_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [63:0] zext_ln187_fu_678_p1;
reg   [63:0] zext_ln187_reg_883;
reg   [63:0] zext_ln187_reg_883_pp3_iter1_reg;
reg   [63:0] zext_ln187_reg_883_pp3_iter2_reg;
reg   [63:0] zext_ln187_reg_883_pp3_iter3_reg;
reg   [63:0] zext_ln187_reg_883_pp3_iter4_reg;
reg   [63:0] zext_ln187_reg_883_pp3_iter5_reg;
reg   [63:0] zext_ln187_reg_883_pp3_iter6_reg;
reg   [63:0] zext_ln187_reg_883_pp3_iter7_reg;
reg   [63:0] zext_ln187_reg_883_pp3_iter8_reg;
reg   [63:0] zext_ln187_reg_883_pp3_iter9_reg;
reg   [63:0] zext_ln187_reg_883_pp3_iter10_reg;
wire   [31:0] y_L3_q0;
reg   [31:0] y_L3_load_reg_899;
reg    ap_enable_reg_pp3_iter1;
reg   [31:0] std_o_load_reg_904;
reg   [31:0] mean_o_load_reg_914;
wire    ap_CS_fsm_state3;
wire    grp_separate_complex_p_fu_434_ap_ready;
wire    grp_separate_complex_p_fu_434_ap_done;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state31;
wire    ap_block_pp1_stage4_subdone;
wire    ap_block_state34_pp1_stage3_iter0;
wire    ap_block_state39_pp1_stage3_iter1;
wire    ap_block_state44_pp1_stage3_iter2;
wire    ap_block_pp1_stage3_subdone;
wire    ap_CS_fsm_pp1_stage3;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state48;
wire    ap_block_pp2_stage4_subdone;
wire    ap_block_pp2_stage1_subdone;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state61;
reg    ap_enable_reg_pp3_iter2;
reg    ap_enable_reg_pp3_iter3;
reg    ap_enable_reg_pp3_iter4;
reg    ap_enable_reg_pp3_iter6;
reg    ap_enable_reg_pp3_iter7;
reg    ap_enable_reg_pp3_iter8;
reg    ap_enable_reg_pp3_iter9;
reg    ap_enable_reg_pp3_iter11;
reg   [6:0] LS_data_address0;
reg    LS_data_ce0;
reg    LS_data_we0;
reg    LS_data_ce1;
reg    LS_data_we1;
reg   [6:0] norm_LS_data_address0;
reg    norm_LS_data_ce0;
reg    norm_LS_data_we0;
reg   [5:0] y_L2_address0;
reg    y_L2_ce0;
reg    y_L2_we0;
reg   [6:0] y_L3_address0;
reg    y_L3_ce0;
reg    y_L3_we0;
reg   [6:0] denorm_DNN_address0;
reg    denorm_DNN_ce0;
reg    denorm_DNN_we0;
wire   [31:0] denorm_DNN_q0;
reg    denorm_DNN_ce1;
wire   [31:0] denorm_DNN_q1;
wire    grp_reconstruct_complex_s_fu_425_ap_start;
wire    grp_reconstruct_complex_s_fu_425_ap_done;
wire    grp_reconstruct_complex_s_fu_425_ap_idle;
wire    grp_reconstruct_complex_s_fu_425_ap_ready;
wire   [6:0] grp_reconstruct_complex_s_fu_425_y_L3_address0;
wire    grp_reconstruct_complex_s_fu_425_y_L3_ce0;
wire   [6:0] grp_reconstruct_complex_s_fu_425_y_L3_address1;
wire    grp_reconstruct_complex_s_fu_425_y_L3_ce1;
wire   [63:0] grp_reconstruct_complex_s_fu_425_DNN_out_TDATA;
wire    grp_reconstruct_complex_s_fu_425_DNN_out_TVALID;
wire    grp_reconstruct_complex_s_fu_425_DNN_out_TREADY;
wire   [0:0] grp_reconstruct_complex_s_fu_425_DNN_out_TLAST;
wire    grp_separate_complex_p_fu_434_ap_start;
wire    grp_separate_complex_p_fu_434_ap_idle;
wire    grp_separate_complex_p_fu_434_LS_stream_TVALID;
wire    grp_separate_complex_p_fu_434_LS_stream_TREADY;
wire   [6:0] grp_separate_complex_p_fu_434_sep_address0;
wire    grp_separate_complex_p_fu_434_sep_ce0;
wire    grp_separate_complex_p_fu_434_sep_we0;
wire   [31:0] grp_separate_complex_p_fu_434_sep_d0;
wire   [6:0] grp_separate_complex_p_fu_434_sep_address1;
wire    grp_separate_complex_p_fu_434_sep_ce1;
wire    grp_separate_complex_p_fu_434_sep_we1;
wire   [31:0] grp_separate_complex_p_fu_434_sep_d1;
reg   [5:0] i_0_i12_reg_324;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state28;
reg   [31:0] ap_phi_mux_x_assign_phi_fu_339_p4;
wire    ap_block_pp1_stage1;
reg   [6:0] ap_phi_mux_j_0_i_phi_fu_350_p4;
wire    ap_block_pp1_stage0;
reg   [12:0] ap_phi_mux_phi_mul_phi_fu_361_p4;
reg   [6:0] i_0_i14_reg_369;
wire    ap_CS_fsm_state60;
reg   [31:0] ap_phi_mux_before_relu_0_i17_phi_fu_384_p4;
wire    ap_block_pp2_stage1;
reg   [5:0] ap_phi_mux_j_0_i18_phi_fu_395_p4;
wire    ap_block_pp2_stage0;
reg   [12:0] ap_phi_mux_phi_mul5_phi_fu_406_p4;
reg    grp_reconstruct_complex_s_fu_425_ap_start_reg;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state74;
reg    grp_separate_complex_p_fu_434_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln158_fu_508_p1;
wire   [63:0] zext_ln161_1_fu_540_p1;
wire   [63:0] zext_ln161_fu_530_p1;
wire   [63:0] zext_ln173_fu_618_p1;
wire   [63:0] zext_ln176_1_fu_650_p1;
wire   [63:0] zext_ln176_fu_640_p1;
wire    ap_block_pp3_stage0;
wire    ap_block_pp1_stage3_11001;
wire    ap_block_pp1_stage3;
reg   [31:0] grp_fu_443_p0;
reg   [31:0] grp_fu_443_p1;
reg   [31:0] grp_fu_449_p0;
reg   [31:0] grp_fu_449_p1;
wire    ap_block_pp1_stage2;
wire    ap_CS_fsm_pp2_stage2;
wire    ap_block_pp2_stage2;
wire   [12:0] add_ln161_fu_535_p2;
wire    ap_block_pp1_stage4;
wire   [31:0] bitcast_ln14_fu_556_p1;
wire   [7:0] tmp_fu_560_p4;
wire   [22:0] trunc_ln14_fu_570_p1;
wire   [0:0] icmp_ln14_1_fu_580_p2;
wire   [0:0] icmp_ln14_fu_574_p2;
wire   [0:0] or_ln14_fu_586_p2;
wire   [0:0] grp_fu_457_p2;
wire   [0:0] and_ln14_fu_592_p2;
wire   [12:0] add_ln176_fu_645_p2;
wire    ap_block_pp2_stage4;
reg   [1:0] grp_fu_443_opcode;
wire    ap_block_pp1_stage1_00001;
wire    ap_block_pp2_stage1_00001;
wire    ap_block_pp3_stage0_00001;
wire    ap_block_pp0_stage0_00001;
reg   [24:0] ap_NS_fsm;
wire    ap_CS_fsm_state75;
reg    ap_block_state75;
wire    ap_block_pp1_stage1_subdone;
wire    ap_block_pp1_stage2_subdone;
wire    ap_block_state50_pp2_stage2_iter0;
wire    ap_block_state55_pp2_stage2_iter1;
wire    ap_block_pp2_stage2_subdone;
wire    ap_block_pp2_stage2_11001;
wire    ap_block_state51_pp2_stage3_iter0;
wire    ap_block_state56_pp2_stage3_iter1;
wire    ap_block_pp2_stage3_subdone;
wire    ap_block_pp2_stage3_11001;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;

// power-on initialization
initial begin
#0 LS_stream_V_data_0_sel_rd = 1'b0;
#0 LS_stream_V_data_0_sel_wr = 1'b0;
#0 LS_stream_V_data_0_state = 2'd0;
#0 LS_stream_V_last_V_0_sel_rd = 1'b0;
#0 LS_stream_V_last_V_0_sel_wr = 1'b0;
#0 LS_stream_V_last_V_0_state = 2'd0;
#0 DNN_out_V_data_1_sel_rd = 1'b0;
#0 DNN_out_V_data_1_sel_wr = 1'b0;
#0 DNN_out_V_data_1_state = 2'd0;
#0 DNN_out_V_last_V_1_sel_rd = 1'b0;
#0 DNN_out_V_last_V_1_sel_wr = 1'b0;
#0 DNN_out_V_last_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_CS_fsm = 25'd1;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter10 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter3 = 1'b0;
#0 ap_enable_reg_pp3_iter4 = 1'b0;
#0 ap_enable_reg_pp3_iter6 = 1'b0;
#0 ap_enable_reg_pp3_iter7 = 1'b0;
#0 ap_enable_reg_pp3_iter8 = 1'b0;
#0 ap_enable_reg_pp3_iter9 = 1'b0;
#0 ap_enable_reg_pp3_iter11 = 1'b0;
#0 grp_reconstruct_complex_s_fu_425_ap_start_reg = 1'b0;
#0 grp_separate_complex_p_fu_434_ap_start_reg = 1'b0;
end

DNN_p_mean_in #(
    .DataWidth( 32 ),
    .AddressRange( 104 ),
    .AddressWidth( 7 ))
mean_in_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(mean_in_address0),
    .ce0(mean_in_ce0),
    .q0(mean_in_q0)
);

DNN_p_std_in #(
    .DataWidth( 32 ),
    .AddressRange( 104 ),
    .AddressWidth( 7 ))
std_in_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(std_in_address0),
    .ce0(std_in_ce0),
    .q0(std_in_q0)
);

DNN_p_L1_BIAS #(
    .DataWidth( 32 ),
    .AddressRange( 52 ),
    .AddressWidth( 6 ))
L1_BIAS_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(L1_BIAS_address0),
    .ce0(L1_BIAS_ce0),
    .q0(L1_BIAS_q0)
);

DNN_p_L1_WEIGHTS #(
    .DataWidth( 32 ),
    .AddressRange( 5408 ),
    .AddressWidth( 13 ))
L1_WEIGHTS_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(L1_WEIGHTS_address0),
    .ce0(L1_WEIGHTS_ce0),
    .q0(L1_WEIGHTS_q0)
);

DNN_p_L2_BIAS #(
    .DataWidth( 32 ),
    .AddressRange( 104 ),
    .AddressWidth( 7 ))
L2_BIAS_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(L2_BIAS_address0),
    .ce0(L2_BIAS_ce0),
    .q0(L2_BIAS_q0)
);

DNN_p_L2_WEIGHTS #(
    .DataWidth( 32 ),
    .AddressRange( 5408 ),
    .AddressWidth( 13 ))
L2_WEIGHTS_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(L2_WEIGHTS_address0),
    .ce0(L2_WEIGHTS_ce0),
    .q0(L2_WEIGHTS_q0)
);

DNN_p_std_o #(
    .DataWidth( 32 ),
    .AddressRange( 104 ),
    .AddressWidth( 7 ))
std_o_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(std_o_address0),
    .ce0(std_o_ce0),
    .q0(std_o_q0)
);

DNN_p_mean_o #(
    .DataWidth( 32 ),
    .AddressRange( 104 ),
    .AddressWidth( 7 ))
mean_o_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(mean_o_address0),
    .ce0(mean_o_ce0),
    .q0(mean_o_q0)
);

DNN_p_LS_data #(
    .DataWidth( 32 ),
    .AddressRange( 104 ),
    .AddressWidth( 7 ))
LS_data_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LS_data_address0),
    .ce0(LS_data_ce0),
    .we0(LS_data_we0),
    .d0(grp_separate_complex_p_fu_434_sep_d0),
    .q0(LS_data_q0),
    .address1(grp_separate_complex_p_fu_434_sep_address1),
    .ce1(LS_data_ce1),
    .we1(LS_data_we1),
    .d1(grp_separate_complex_p_fu_434_sep_d1)
);

DNN_p_norm_LS_data #(
    .DataWidth( 32 ),
    .AddressRange( 104 ),
    .AddressWidth( 7 ))
norm_LS_data_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(norm_LS_data_address0),
    .ce0(norm_LS_data_ce0),
    .we0(norm_LS_data_we0),
    .d0(tmp_1_i_reg_729),
    .q0(norm_LS_data_q0)
);

DNN_p_y_L2 #(
    .DataWidth( 32 ),
    .AddressRange( 52 ),
    .AddressWidth( 6 ))
y_L2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(y_L2_address0),
    .ce0(y_L2_ce0),
    .we0(y_L2_we0),
    .d0(select_ln14_reg_801),
    .q0(y_L2_q0)
);

DNN_p_norm_LS_data #(
    .DataWidth( 32 ),
    .AddressRange( 104 ),
    .AddressWidth( 7 ))
y_L3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(y_L3_address0),
    .ce0(y_L3_ce0),
    .we0(y_L3_we0),
    .d0(reg_462),
    .q0(y_L3_q0)
);

DNN_p_denorm_DNN #(
    .DataWidth( 32 ),
    .AddressRange( 104 ),
    .AddressWidth( 7 ))
denorm_DNN_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(denorm_DNN_address0),
    .ce0(denorm_DNN_ce0),
    .we0(denorm_DNN_we0),
    .d0(reg_462),
    .q0(denorm_DNN_q0),
    .address1(grp_reconstruct_complex_s_fu_425_y_L3_address1),
    .ce1(denorm_DNN_ce1),
    .q1(denorm_DNN_q1)
);

reconstruct_complex_s grp_reconstruct_complex_s_fu_425(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_reconstruct_complex_s_fu_425_ap_start),
    .ap_done(grp_reconstruct_complex_s_fu_425_ap_done),
    .ap_idle(grp_reconstruct_complex_s_fu_425_ap_idle),
    .ap_ready(grp_reconstruct_complex_s_fu_425_ap_ready),
    .y_L3_address0(grp_reconstruct_complex_s_fu_425_y_L3_address0),
    .y_L3_ce0(grp_reconstruct_complex_s_fu_425_y_L3_ce0),
    .y_L3_q0(denorm_DNN_q0),
    .y_L3_address1(grp_reconstruct_complex_s_fu_425_y_L3_address1),
    .y_L3_ce1(grp_reconstruct_complex_s_fu_425_y_L3_ce1),
    .y_L3_q1(denorm_DNN_q1),
    .DNN_out_TDATA(grp_reconstruct_complex_s_fu_425_DNN_out_TDATA),
    .DNN_out_TVALID(grp_reconstruct_complex_s_fu_425_DNN_out_TVALID),
    .DNN_out_TREADY(grp_reconstruct_complex_s_fu_425_DNN_out_TREADY),
    .DNN_out_TLAST(grp_reconstruct_complex_s_fu_425_DNN_out_TLAST)
);

separate_complex_p grp_separate_complex_p_fu_434(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_separate_complex_p_fu_434_ap_start),
    .ap_done(grp_separate_complex_p_fu_434_ap_done),
    .ap_idle(grp_separate_complex_p_fu_434_ap_idle),
    .ap_ready(grp_separate_complex_p_fu_434_ap_ready),
    .LS_stream_TDATA(LS_stream_V_data_0_data_out),
    .LS_stream_TVALID(grp_separate_complex_p_fu_434_LS_stream_TVALID),
    .LS_stream_TREADY(grp_separate_complex_p_fu_434_LS_stream_TREADY),
    .LS_stream_TLAST(LS_stream_V_last_V_0_data_out),
    .sep_address0(grp_separate_complex_p_fu_434_sep_address0),
    .sep_ce0(grp_separate_complex_p_fu_434_sep_ce0),
    .sep_we0(grp_separate_complex_p_fu_434_sep_we0),
    .sep_d0(grp_separate_complex_p_fu_434_sep_d0),
    .sep_address1(grp_separate_complex_p_fu_434_sep_address1),
    .sep_ce1(grp_separate_complex_p_fu_434_sep_ce1),
    .sep_we1(grp_separate_complex_p_fu_434_sep_we1),
    .sep_d1(grp_separate_complex_p_fu_434_sep_d1)
);

DNN_p_faddfsub_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
DNN_p_faddfsub_32bkb_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_443_p0),
    .din1(grp_fu_443_p1),
    .opcode(grp_fu_443_opcode),
    .ce(1'b1),
    .dout(grp_fu_443_p2)
);

DNN_p_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
DNN_p_fmul_32ns_3cud_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_449_p0),
    .din1(grp_fu_449_p1),
    .ce(1'b1),
    .dout(grp_fu_449_p2)
);

DNN_p_fdiv_32ns_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
DNN_p_fdiv_32ns_3dEe_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_462),
    .din1(std_in_load_reg_724),
    .ce(1'b1),
    .dout(grp_fu_453_p2)
);

DNN_p_fcmp_32ns_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
DNN_p_fcmp_32ns_3eOg_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_462),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_457_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DNN_out_V_data_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == DNN_out_V_data_1_ack_out) & (1'b1 == DNN_out_V_data_1_vld_out))) begin
            DNN_out_V_data_1_sel_rd <= ~DNN_out_V_data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DNN_out_V_data_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == DNN_out_V_data_1_ack_in) & (1'b1 == DNN_out_V_data_1_vld_in))) begin
            DNN_out_V_data_1_sel_wr <= ~DNN_out_V_data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DNN_out_V_data_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == DNN_out_V_data_1_state) & (1'b0 == DNN_out_V_data_1_vld_in)) | ((2'd3 == DNN_out_V_data_1_state) & (1'b0 == DNN_out_V_data_1_vld_in) & (1'b1 == DNN_out_V_data_1_ack_out)))) begin
            DNN_out_V_data_1_state <= 2'd2;
        end else if ((((2'd1 == DNN_out_V_data_1_state) & (1'b0 == DNN_out_TREADY)) | ((2'd3 == DNN_out_V_data_1_state) & (1'b0 == DNN_out_TREADY) & (1'b1 == DNN_out_V_data_1_vld_in)))) begin
            DNN_out_V_data_1_state <= 2'd1;
        end else if (((~((1'b0 == DNN_out_V_data_1_vld_in) & (1'b1 == DNN_out_V_data_1_ack_out)) & ~((1'b0 == DNN_out_TREADY) & (1'b1 == DNN_out_V_data_1_vld_in)) & (2'd3 == DNN_out_V_data_1_state)) | ((2'd1 == DNN_out_V_data_1_state) & (1'b1 == DNN_out_V_data_1_ack_out)) | ((2'd2 == DNN_out_V_data_1_state) & (1'b1 == DNN_out_V_data_1_vld_in)))) begin
            DNN_out_V_data_1_state <= 2'd3;
        end else begin
            DNN_out_V_data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DNN_out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == DNN_out_V_last_V_1_ack_out) & (1'b1 == DNN_out_V_last_V_1_vld_out))) begin
            DNN_out_V_last_V_1_sel_rd <= ~DNN_out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DNN_out_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == DNN_out_V_last_V_1_ack_in) & (1'b1 == DNN_out_V_last_V_1_vld_in))) begin
            DNN_out_V_last_V_1_sel_wr <= ~DNN_out_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DNN_out_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == DNN_out_V_last_V_1_state) & (1'b0 == DNN_out_V_last_V_1_vld_in)) | ((2'd3 == DNN_out_V_last_V_1_state) & (1'b0 == DNN_out_V_last_V_1_vld_in) & (1'b1 == DNN_out_V_last_V_1_ack_out)))) begin
            DNN_out_V_last_V_1_state <= 2'd2;
        end else if ((((2'd1 == DNN_out_V_last_V_1_state) & (1'b0 == DNN_out_TREADY)) | ((2'd3 == DNN_out_V_last_V_1_state) & (1'b0 == DNN_out_TREADY) & (1'b1 == DNN_out_V_last_V_1_vld_in)))) begin
            DNN_out_V_last_V_1_state <= 2'd1;
        end else if (((~((1'b0 == DNN_out_V_last_V_1_vld_in) & (1'b1 == DNN_out_V_last_V_1_ack_out)) & ~((1'b0 == DNN_out_TREADY) & (1'b1 == DNN_out_V_last_V_1_vld_in)) & (2'd3 == DNN_out_V_last_V_1_state)) | ((2'd1 == DNN_out_V_last_V_1_state) & (1'b1 == DNN_out_V_last_V_1_ack_out)) | ((2'd2 == DNN_out_V_last_V_1_state) & (1'b1 == DNN_out_V_last_V_1_vld_in)))) begin
            DNN_out_V_last_V_1_state <= 2'd3;
        end else begin
            DNN_out_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        LS_stream_V_data_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == LS_stream_V_data_0_ack_out) & (1'b1 == LS_stream_V_data_0_vld_out))) begin
            LS_stream_V_data_0_sel_rd <= ~LS_stream_V_data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        LS_stream_V_data_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == LS_stream_V_data_0_ack_in) & (1'b1 == LS_stream_V_data_0_vld_in))) begin
            LS_stream_V_data_0_sel_wr <= ~LS_stream_V_data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        LS_stream_V_data_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == LS_stream_V_data_0_state) & (1'b0 == LS_stream_V_data_0_vld_in)) | ((2'd3 == LS_stream_V_data_0_state) & (1'b0 == LS_stream_V_data_0_vld_in) & (1'b1 == LS_stream_V_data_0_ack_out)))) begin
            LS_stream_V_data_0_state <= 2'd2;
        end else if ((((2'd1 == LS_stream_V_data_0_state) & (1'b0 == LS_stream_V_data_0_ack_out)) | ((2'd3 == LS_stream_V_data_0_state) & (1'b0 == LS_stream_V_data_0_ack_out) & (1'b1 == LS_stream_V_data_0_vld_in)))) begin
            LS_stream_V_data_0_state <= 2'd1;
        end else if (((~((1'b0 == LS_stream_V_data_0_vld_in) & (1'b1 == LS_stream_V_data_0_ack_out)) & ~((1'b0 == LS_stream_V_data_0_ack_out) & (1'b1 == LS_stream_V_data_0_vld_in)) & (2'd3 == LS_stream_V_data_0_state)) | ((2'd1 == LS_stream_V_data_0_state) & (1'b1 == LS_stream_V_data_0_ack_out)) | ((2'd2 == LS_stream_V_data_0_state) & (1'b1 == LS_stream_V_data_0_vld_in)))) begin
            LS_stream_V_data_0_state <= 2'd3;
        end else begin
            LS_stream_V_data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        LS_stream_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == LS_stream_V_last_V_0_ack_out) & (1'b1 == LS_stream_V_last_V_0_vld_out))) begin
            LS_stream_V_last_V_0_sel_rd <= ~LS_stream_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        LS_stream_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == LS_stream_V_last_V_0_ack_in) & (1'b1 == LS_stream_V_last_V_0_vld_in))) begin
            LS_stream_V_last_V_0_sel_wr <= ~LS_stream_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        LS_stream_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == LS_stream_V_last_V_0_state) & (1'b0 == LS_stream_V_last_V_0_vld_in)) | ((2'd3 == LS_stream_V_last_V_0_state) & (1'b0 == LS_stream_V_last_V_0_vld_in) & (1'b1 == LS_stream_V_last_V_0_ack_out)))) begin
            LS_stream_V_last_V_0_state <= 2'd2;
        end else if ((((2'd1 == LS_stream_V_last_V_0_state) & (1'b0 == LS_stream_V_last_V_0_ack_out)) | ((2'd3 == LS_stream_V_last_V_0_state) & (1'b0 == LS_stream_V_last_V_0_ack_out) & (1'b1 == LS_stream_V_last_V_0_vld_in)))) begin
            LS_stream_V_last_V_0_state <= 2'd1;
        end else if (((~((1'b0 == LS_stream_V_last_V_0_vld_in) & (1'b1 == LS_stream_V_last_V_0_ack_out)) & ~((1'b0 == LS_stream_V_last_V_0_ack_out) & (1'b1 == LS_stream_V_last_V_0_vld_in)) & (2'd3 == LS_stream_V_last_V_0_state)) | ((2'd1 == LS_stream_V_last_V_0_state) & (1'b1 == LS_stream_V_last_V_0_ack_out)) | ((2'd2 == LS_stream_V_last_V_0_state) & (1'b1 == LS_stream_V_last_V_0_vld_in)))) begin
            LS_stream_V_last_V_0_state <= 2'd3;
        end else begin
            LS_stream_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((grp_separate_complex_p_fu_434_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end else if (((grp_separate_complex_p_fu_434_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter23 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state31) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state30)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage4_subdone) & (1'b1 == ap_CS_fsm_pp1_stage4))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage3_subdone) & (1'b1 == ap_CS_fsm_pp1_stage3)) | ((1'b0 == ap_block_pp1_stage4_subdone) & (1'b1 == ap_CS_fsm_pp1_stage4)))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state30)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state48) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state47)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage4_subdone) & (1'b1 == ap_CS_fsm_pp2_stage4))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp2_stage4_subdone) & (1'b1 == ap_CS_fsm_pp2_stage4)) | ((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1)))) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state47)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state61) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((icmp_ln171_fu_606_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state46))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state61)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state61);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter10 <= ap_enable_reg_pp3_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter11 <= ap_enable_reg_pp3_iter10;
        end else if (((icmp_ln171_fu_606_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state46))) begin
            ap_enable_reg_pp3_iter11 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter8 <= ap_enable_reg_pp3_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter9 <= ap_enable_reg_pp3_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_reconstruct_complex_s_fu_425_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state73)) begin
            grp_reconstruct_complex_s_fu_425_ap_start_reg <= 1'b1;
        end else if ((grp_reconstruct_complex_s_fu_425_ap_ready == 1'b1)) begin
            grp_reconstruct_complex_s_fu_425_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_separate_complex_p_fu_434_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_separate_complex_p_fu_434_ap_start_reg <= 1'b1;
        end else if ((grp_separate_complex_p_fu_434_ap_ready == 1'b1)) begin
            grp_separate_complex_p_fu_434_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage1_11001) & (icmp_ln174_reg_835_pp2_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        before_relu_0_i17_reg_381 <= reg_462;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        before_relu_0_i17_reg_381 <= L2_BIAS_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        i_0_i12_reg_324 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        i_0_i12_reg_324 <= i_1_reg_737;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln156_fu_496_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
        i_0_i14_reg_369 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        i_0_i14_reg_369 <= i_3_reg_810;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln171_fu_606_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state46))) begin
        i_0_i24_reg_414 <= 7'd0;
    end else if (((icmp_ln185_fu_666_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        i_0_i24_reg_414 <= i_2_fu_672_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln148_fu_478_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_i_reg_313 <= i_fu_484_p2;
    end else if (((grp_separate_complex_p_fu_434_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_i_reg_313 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln174_reg_835 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        j_0_i18_reg_391 <= j_1_reg_839;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        j_0_i18_reg_391 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln159_reg_762 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j_0_i_reg_346 <= j_reg_766;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        j_0_i_reg_346 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln174_reg_835 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        phi_mul5_reg_402 <= add_ln176_1_reg_865;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        phi_mul5_reg_402 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln159_reg_762 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        phi_mul_reg_357 <= add_ln161_1_reg_792;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        phi_mul_reg_357 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (icmp_ln159_reg_762_pp1_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        x_assign_reg_336 <= reg_462;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        x_assign_reg_336 <= L1_BIAS_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DNN_out_V_data_1_load_A)) begin
        DNN_out_V_data_1_payload_A <= grp_reconstruct_complex_s_fu_425_DNN_out_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DNN_out_V_data_1_load_B)) begin
        DNN_out_V_data_1_payload_B <= grp_reconstruct_complex_s_fu_425_DNN_out_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DNN_out_V_last_V_1_load_A)) begin
        DNN_out_V_last_V_1_payload_A <= grp_reconstruct_complex_s_fu_425_DNN_out_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DNN_out_V_last_V_1_load_B)) begin
        DNN_out_V_last_V_1_payload_B <= grp_reconstruct_complex_s_fu_425_DNN_out_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (icmp_ln159_reg_762 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        L1_WEIGHTS_load_reg_787 <= L1_WEIGHTS_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage1_11001) & (icmp_ln174_reg_835 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        L2_WEIGHTS_load_reg_860 <= L2_WEIGHTS_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln148_reg_684 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        LS_data_load_reg_709 <= LS_data_q0;
        mean_in_load_reg_714 <= mean_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == LS_stream_V_data_0_load_A)) begin
        LS_stream_V_data_0_payload_A <= LS_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == LS_stream_V_data_0_load_B)) begin
        LS_stream_V_data_0_payload_B <= LS_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == LS_stream_V_last_V_0_load_A)) begin
        LS_stream_V_last_V_0_payload_A <= LS_stream_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == LS_stream_V_last_V_0_load_B)) begin
        LS_stream_V_last_V_0_payload_B <= LS_stream_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage4_11001) & (icmp_ln159_reg_762 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        add_ln161_1_reg_792 <= add_ln161_1_fu_545_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage4_11001) & (icmp_ln174_reg_835 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage4) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        add_ln176_1_reg_865 <= add_ln176_1_fu_655_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        i_1_reg_737 <= i_1_fu_502_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        i_3_reg_810 <= i_3_fu_612_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln148_reg_684 <= icmp_ln148_fu_478_p2;
        icmp_ln148_reg_684_pp0_iter1_reg <= icmp_ln148_reg_684;
        zext_ln150_reg_693_pp0_iter1_reg[6 : 0] <= zext_ln150_reg_693[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln148_reg_684_pp0_iter10_reg <= icmp_ln148_reg_684_pp0_iter9_reg;
        icmp_ln148_reg_684_pp0_iter11_reg <= icmp_ln148_reg_684_pp0_iter10_reg;
        icmp_ln148_reg_684_pp0_iter12_reg <= icmp_ln148_reg_684_pp0_iter11_reg;
        icmp_ln148_reg_684_pp0_iter13_reg <= icmp_ln148_reg_684_pp0_iter12_reg;
        icmp_ln148_reg_684_pp0_iter14_reg <= icmp_ln148_reg_684_pp0_iter13_reg;
        icmp_ln148_reg_684_pp0_iter15_reg <= icmp_ln148_reg_684_pp0_iter14_reg;
        icmp_ln148_reg_684_pp0_iter16_reg <= icmp_ln148_reg_684_pp0_iter15_reg;
        icmp_ln148_reg_684_pp0_iter17_reg <= icmp_ln148_reg_684_pp0_iter16_reg;
        icmp_ln148_reg_684_pp0_iter18_reg <= icmp_ln148_reg_684_pp0_iter17_reg;
        icmp_ln148_reg_684_pp0_iter19_reg <= icmp_ln148_reg_684_pp0_iter18_reg;
        icmp_ln148_reg_684_pp0_iter20_reg <= icmp_ln148_reg_684_pp0_iter19_reg;
        icmp_ln148_reg_684_pp0_iter21_reg <= icmp_ln148_reg_684_pp0_iter20_reg;
        icmp_ln148_reg_684_pp0_iter22_reg <= icmp_ln148_reg_684_pp0_iter21_reg;
        icmp_ln148_reg_684_pp0_iter2_reg <= icmp_ln148_reg_684_pp0_iter1_reg;
        icmp_ln148_reg_684_pp0_iter3_reg <= icmp_ln148_reg_684_pp0_iter2_reg;
        icmp_ln148_reg_684_pp0_iter4_reg <= icmp_ln148_reg_684_pp0_iter3_reg;
        icmp_ln148_reg_684_pp0_iter5_reg <= icmp_ln148_reg_684_pp0_iter4_reg;
        icmp_ln148_reg_684_pp0_iter6_reg <= icmp_ln148_reg_684_pp0_iter5_reg;
        icmp_ln148_reg_684_pp0_iter7_reg <= icmp_ln148_reg_684_pp0_iter6_reg;
        icmp_ln148_reg_684_pp0_iter8_reg <= icmp_ln148_reg_684_pp0_iter7_reg;
        icmp_ln148_reg_684_pp0_iter9_reg <= icmp_ln148_reg_684_pp0_iter8_reg;
        zext_ln150_reg_693_pp0_iter10_reg[6 : 0] <= zext_ln150_reg_693_pp0_iter9_reg[6 : 0];
        zext_ln150_reg_693_pp0_iter11_reg[6 : 0] <= zext_ln150_reg_693_pp0_iter10_reg[6 : 0];
        zext_ln150_reg_693_pp0_iter12_reg[6 : 0] <= zext_ln150_reg_693_pp0_iter11_reg[6 : 0];
        zext_ln150_reg_693_pp0_iter13_reg[6 : 0] <= zext_ln150_reg_693_pp0_iter12_reg[6 : 0];
        zext_ln150_reg_693_pp0_iter14_reg[6 : 0] <= zext_ln150_reg_693_pp0_iter13_reg[6 : 0];
        zext_ln150_reg_693_pp0_iter15_reg[6 : 0] <= zext_ln150_reg_693_pp0_iter14_reg[6 : 0];
        zext_ln150_reg_693_pp0_iter16_reg[6 : 0] <= zext_ln150_reg_693_pp0_iter15_reg[6 : 0];
        zext_ln150_reg_693_pp0_iter17_reg[6 : 0] <= zext_ln150_reg_693_pp0_iter16_reg[6 : 0];
        zext_ln150_reg_693_pp0_iter18_reg[6 : 0] <= zext_ln150_reg_693_pp0_iter17_reg[6 : 0];
        zext_ln150_reg_693_pp0_iter19_reg[6 : 0] <= zext_ln150_reg_693_pp0_iter18_reg[6 : 0];
        zext_ln150_reg_693_pp0_iter20_reg[6 : 0] <= zext_ln150_reg_693_pp0_iter19_reg[6 : 0];
        zext_ln150_reg_693_pp0_iter21_reg[6 : 0] <= zext_ln150_reg_693_pp0_iter20_reg[6 : 0];
        zext_ln150_reg_693_pp0_iter22_reg[6 : 0] <= zext_ln150_reg_693_pp0_iter21_reg[6 : 0];
        zext_ln150_reg_693_pp0_iter2_reg[6 : 0] <= zext_ln150_reg_693_pp0_iter1_reg[6 : 0];
        zext_ln150_reg_693_pp0_iter3_reg[6 : 0] <= zext_ln150_reg_693_pp0_iter2_reg[6 : 0];
        zext_ln150_reg_693_pp0_iter4_reg[6 : 0] <= zext_ln150_reg_693_pp0_iter3_reg[6 : 0];
        zext_ln150_reg_693_pp0_iter5_reg[6 : 0] <= zext_ln150_reg_693_pp0_iter4_reg[6 : 0];
        zext_ln150_reg_693_pp0_iter6_reg[6 : 0] <= zext_ln150_reg_693_pp0_iter5_reg[6 : 0];
        zext_ln150_reg_693_pp0_iter7_reg[6 : 0] <= zext_ln150_reg_693_pp0_iter6_reg[6 : 0];
        zext_ln150_reg_693_pp0_iter8_reg[6 : 0] <= zext_ln150_reg_693_pp0_iter7_reg[6 : 0];
        zext_ln150_reg_693_pp0_iter9_reg[6 : 0] <= zext_ln150_reg_693_pp0_iter8_reg[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln159_reg_762 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln159_1_reg_797 <= icmp_ln159_1_fu_551_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln159_1_reg_797_pp1_iter2_reg <= icmp_ln159_1_reg_797;
        icmp_ln159_reg_762 <= icmp_ln159_fu_518_p2;
        icmp_ln159_reg_762_pp1_iter1_reg <= icmp_ln159_reg_762;
        icmp_ln159_reg_762_pp1_iter2_reg <= icmp_ln159_reg_762_pp1_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln174_reg_835 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln174_1_reg_870 <= icmp_ln174_1_fu_661_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln174_1_reg_870_pp2_iter2_reg <= icmp_ln174_1_reg_870;
        icmp_ln174_reg_835 <= icmp_ln174_fu_628_p2;
        icmp_ln174_reg_835_pp2_iter1_reg <= icmp_ln174_reg_835;
        icmp_ln174_reg_835_pp2_iter2_reg <= icmp_ln174_reg_835_pp2_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln185_reg_874 <= icmp_ln185_fu_666_p2;
        icmp_ln185_reg_874_pp3_iter1_reg <= icmp_ln185_reg_874;
        zext_ln187_reg_883_pp3_iter1_reg[6 : 0] <= zext_ln187_reg_883[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp3_stage0_11001)) begin
        icmp_ln185_reg_874_pp3_iter10_reg <= icmp_ln185_reg_874_pp3_iter9_reg;
        icmp_ln185_reg_874_pp3_iter2_reg <= icmp_ln185_reg_874_pp3_iter1_reg;
        icmp_ln185_reg_874_pp3_iter3_reg <= icmp_ln185_reg_874_pp3_iter2_reg;
        icmp_ln185_reg_874_pp3_iter4_reg <= icmp_ln185_reg_874_pp3_iter3_reg;
        icmp_ln185_reg_874_pp3_iter5_reg <= icmp_ln185_reg_874_pp3_iter4_reg;
        icmp_ln185_reg_874_pp3_iter6_reg <= icmp_ln185_reg_874_pp3_iter5_reg;
        icmp_ln185_reg_874_pp3_iter7_reg <= icmp_ln185_reg_874_pp3_iter6_reg;
        icmp_ln185_reg_874_pp3_iter8_reg <= icmp_ln185_reg_874_pp3_iter7_reg;
        icmp_ln185_reg_874_pp3_iter9_reg <= icmp_ln185_reg_874_pp3_iter8_reg;
        zext_ln187_reg_883_pp3_iter10_reg[6 : 0] <= zext_ln187_reg_883_pp3_iter9_reg[6 : 0];
        zext_ln187_reg_883_pp3_iter2_reg[6 : 0] <= zext_ln187_reg_883_pp3_iter1_reg[6 : 0];
        zext_ln187_reg_883_pp3_iter3_reg[6 : 0] <= zext_ln187_reg_883_pp3_iter2_reg[6 : 0];
        zext_ln187_reg_883_pp3_iter4_reg[6 : 0] <= zext_ln187_reg_883_pp3_iter3_reg[6 : 0];
        zext_ln187_reg_883_pp3_iter5_reg[6 : 0] <= zext_ln187_reg_883_pp3_iter4_reg[6 : 0];
        zext_ln187_reg_883_pp3_iter6_reg[6 : 0] <= zext_ln187_reg_883_pp3_iter5_reg[6 : 0];
        zext_ln187_reg_883_pp3_iter7_reg[6 : 0] <= zext_ln187_reg_883_pp3_iter6_reg[6 : 0];
        zext_ln187_reg_883_pp3_iter8_reg[6 : 0] <= zext_ln187_reg_883_pp3_iter7_reg[6 : 0];
        zext_ln187_reg_883_pp3_iter9_reg[6 : 0] <= zext_ln187_reg_883_pp3_iter8_reg[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        j_1_reg_839 <= j_1_fu_634_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j_reg_766 <= j_fu_524_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln185_reg_874_pp3_iter4_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        mean_o_load_reg_914 <= mean_o_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (icmp_ln159_reg_762 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        norm_LS_data_load_reg_782 <= norm_LS_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln185_reg_874_pp3_iter9_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter10 == 1'b1)) | ((icmp_ln174_reg_835_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((icmp_ln159_reg_762_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((icmp_ln148_reg_684_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1)))) begin
        reg_462 <= grp_fu_443_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln185_reg_874_pp3_iter4_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter5 == 1'b1)) | ((icmp_ln174_reg_835 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((icmp_ln159_reg_762 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        reg_472 <= grp_fu_449_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage2_11001) & (icmp_ln159_1_reg_797_pp1_iter2_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
        select_ln14_reg_801 <= select_ln14_fu_598_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln148_reg_684_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        std_in_load_reg_724 <= std_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln185_reg_874 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        std_o_load_reg_904 <= std_o_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln148_reg_684_pp0_iter21_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_1_i_reg_729 <= grp_fu_453_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln156_fu_496_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state29))) begin
        y_L2_addr_reg_747 <= zext_ln158_fu_508_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage1_11001) & (icmp_ln174_reg_835 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        y_L2_load_reg_855 <= y_L2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln171_fu_606_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state46))) begin
        y_L3_addr_2_reg_820 <= zext_ln173_fu_618_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln185_reg_874 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        y_L3_load_reg_899 <= y_L3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln148_fu_478_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln150_reg_693[6 : 0] <= zext_ln150_fu_490_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        zext_ln158_1_reg_752[5 : 0] <= zext_ln158_1_fu_514_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        zext_ln173_1_reg_825[6 : 0] <= zext_ln173_1_fu_624_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln185_fu_666_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        zext_ln187_reg_883[6 : 0] <= zext_ln187_fu_678_p1[6 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == DNN_out_V_data_1_sel)) begin
        DNN_out_V_data_1_data_out = DNN_out_V_data_1_payload_B;
    end else begin
        DNN_out_V_data_1_data_out = DNN_out_V_data_1_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == DNN_out_V_last_V_1_sel)) begin
        DNN_out_V_last_V_1_data_out = DNN_out_V_last_V_1_payload_B;
    end else begin
        DNN_out_V_last_V_1_data_out = DNN_out_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        L1_BIAS_ce0 = 1'b1;
    end else begin
        L1_BIAS_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        L1_WEIGHTS_ce0 = 1'b1;
    end else begin
        L1_WEIGHTS_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        L2_BIAS_ce0 = 1'b1;
    end else begin
        L2_BIAS_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        L2_WEIGHTS_ce0 = 1'b1;
    end else begin
        L2_WEIGHTS_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        LS_data_address0 = zext_ln150_fu_490_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        LS_data_address0 = grp_separate_complex_p_fu_434_sep_address0;
    end else begin
        LS_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        LS_data_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        LS_data_ce0 = grp_separate_complex_p_fu_434_sep_ce0;
    end else begin
        LS_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        LS_data_ce1 = grp_separate_complex_p_fu_434_sep_ce1;
    end else begin
        LS_data_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        LS_data_we0 = grp_separate_complex_p_fu_434_sep_we0;
    end else begin
        LS_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        LS_data_we1 = grp_separate_complex_p_fu_434_sep_we1;
    end else begin
        LS_data_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        LS_stream_V_data_0_ack_out = grp_separate_complex_p_fu_434_LS_stream_TREADY;
    end else begin
        LS_stream_V_data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == LS_stream_V_data_0_sel)) begin
        LS_stream_V_data_0_data_out = LS_stream_V_data_0_payload_B;
    end else begin
        LS_stream_V_data_0_data_out = LS_stream_V_data_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        LS_stream_V_last_V_0_ack_out = grp_separate_complex_p_fu_434_LS_stream_TREADY;
    end else begin
        LS_stream_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == LS_stream_V_last_V_0_sel)) begin
        LS_stream_V_last_V_0_data_out = LS_stream_V_last_V_0_payload_B;
    end else begin
        LS_stream_V_last_V_0_data_out = LS_stream_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((icmp_ln148_fu_478_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln159_fu_518_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state31 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state31 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln174_fu_628_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state48 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state48 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln185_fu_666_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state61 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state61 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter11 == 1'b0) & (ap_enable_reg_pp3_iter9 == 1'b0) & (ap_enable_reg_pp3_iter8 == 1'b0) & (ap_enable_reg_pp3_iter7 == 1'b0) & (ap_enable_reg_pp3_iter6 == 1'b0) & (ap_enable_reg_pp3_iter4 == 1'b0) & (ap_enable_reg_pp3_iter3 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter5 == 1'b0) & (ap_enable_reg_pp3_iter10 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln174_reg_835_pp2_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage1))) begin
        ap_phi_mux_before_relu_0_i17_phi_fu_384_p4 = reg_462;
    end else begin
        ap_phi_mux_before_relu_0_i17_phi_fu_384_p4 = before_relu_0_i17_reg_381;
    end
end

always @ (*) begin
    if (((icmp_ln174_reg_835 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        ap_phi_mux_j_0_i18_phi_fu_395_p4 = j_1_reg_839;
    end else begin
        ap_phi_mux_j_0_i18_phi_fu_395_p4 = j_0_i18_reg_391;
    end
end

always @ (*) begin
    if (((icmp_ln159_reg_762 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_j_0_i_phi_fu_350_p4 = j_reg_766;
    end else begin
        ap_phi_mux_j_0_i_phi_fu_350_p4 = j_0_i_reg_346;
    end
end

always @ (*) begin
    if (((icmp_ln174_reg_835 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        ap_phi_mux_phi_mul5_phi_fu_406_p4 = add_ln176_1_reg_865;
    end else begin
        ap_phi_mux_phi_mul5_phi_fu_406_p4 = phi_mul5_reg_402;
    end
end

always @ (*) begin
    if (((icmp_ln159_reg_762 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_phi_mul_phi_fu_361_p4 = add_ln161_1_reg_792;
    end else begin
        ap_phi_mux_phi_mul_phi_fu_361_p4 = phi_mul_reg_357;
    end
end

always @ (*) begin
    if (((icmp_ln159_reg_762_pp1_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage1))) begin
        ap_phi_mux_x_assign_phi_fu_339_p4 = reg_462;
    end else begin
        ap_phi_mux_x_assign_phi_fu_339_p4 = x_assign_reg_336;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter11 == 1'b1) & (1'b0 == ap_block_pp3_stage0))) begin
        denorm_DNN_address0 = zext_ln187_reg_883_pp3_iter10_reg;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        denorm_DNN_address0 = grp_reconstruct_complex_s_fu_425_y_L3_address0;
    end else begin
        denorm_DNN_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter11 == 1'b1))) begin
        denorm_DNN_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        denorm_DNN_ce0 = grp_reconstruct_complex_s_fu_425_y_L3_ce0;
    end else begin
        denorm_DNN_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        denorm_DNN_ce1 = grp_reconstruct_complex_s_fu_425_y_L3_ce1;
    end else begin
        denorm_DNN_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln185_reg_874_pp3_iter10_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter11 == 1'b1))) begin
        denorm_DNN_we0 = 1'b1;
    end else begin
        denorm_DNN_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln148_reg_684_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_00001))) begin
        grp_fu_443_opcode = 2'd1;
    end else if ((((icmp_ln174_reg_835_pp2_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage1_00001)) | ((icmp_ln159_reg_762_pp1_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage1_00001)) | ((icmp_ln185_reg_874_pp3_iter5_reg == 1'd0) & (ap_enable_reg_pp3_iter6 == 1'b1) & (1'b0 == ap_block_pp3_stage0_00001)))) begin
        grp_fu_443_opcode = 2'd0;
    end else begin
        grp_fu_443_opcode = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter6 == 1'b1) & (1'b0 == ap_block_pp3_stage0))) begin
        grp_fu_443_p0 = reg_472;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage1))) begin
        grp_fu_443_p0 = ap_phi_mux_before_relu_0_i17_phi_fu_384_p4;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage1))) begin
        grp_fu_443_p0 = ap_phi_mux_x_assign_phi_fu_339_p4;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_443_p0 = LS_data_load_reg_709;
    end else begin
        grp_fu_443_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter6 == 1'b1) & (1'b0 == ap_block_pp3_stage0))) begin
        grp_fu_443_p1 = mean_o_load_reg_914;
    end else if ((((1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage1)) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage1)))) begin
        grp_fu_443_p1 = reg_472;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_443_p1 = mean_in_load_reg_714;
    end else begin
        grp_fu_443_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0))) begin
        grp_fu_449_p0 = y_L3_load_reg_899;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2) & (1'b0 == ap_block_pp2_stage2))) begin
        grp_fu_449_p0 = y_L2_load_reg_855;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage2))) begin
        grp_fu_449_p0 = norm_LS_data_load_reg_782;
    end else begin
        grp_fu_449_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0))) begin
        grp_fu_449_p1 = std_o_load_reg_904;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2) & (1'b0 == ap_block_pp2_stage2))) begin
        grp_fu_449_p1 = L2_WEIGHTS_load_reg_860;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage2))) begin
        grp_fu_449_p1 = L1_WEIGHTS_load_reg_787;
    end else begin
        grp_fu_449_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mean_in_ce0 = 1'b1;
    end else begin
        mean_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter4 == 1'b1))) begin
        mean_o_ce0 = 1'b1;
    end else begin
        mean_o_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        norm_LS_data_address0 = zext_ln161_fu_530_p1;
    end else if (((ap_enable_reg_pp0_iter23 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        norm_LS_data_address0 = zext_ln150_reg_693_pp0_iter22_reg;
    end else begin
        norm_LS_data_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1)))) begin
        norm_LS_data_ce0 = 1'b1;
    end else begin
        norm_LS_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln148_reg_684_pp0_iter22_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter23 == 1'b1))) begin
        norm_LS_data_we0 = 1'b1;
    end else begin
        norm_LS_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        std_in_ce0 = 1'b1;
    end else begin
        std_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        std_o_ce0 = 1'b1;
    end else begin
        std_o_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        y_L2_address0 = zext_ln176_fu_640_p1;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage3))) begin
        y_L2_address0 = y_L2_addr_reg_747;
    end else begin
        y_L2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage3_11001)))) begin
        y_L2_ce0 = 1'b1;
    end else begin
        y_L2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln159_1_reg_797_pp1_iter2_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage3_11001))) begin
        y_L2_we0 = 1'b1;
    end else begin
        y_L2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        y_L3_address0 = zext_ln187_fu_678_p1;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage1))) begin
        y_L3_address0 = y_L3_addr_2_reg_820;
    end else begin
        y_L3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
        y_L3_ce0 = 1'b1;
    end else begin
        y_L3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage1_11001) & (icmp_ln174_1_reg_870_pp2_iter2_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        y_L3_we0 = 1'b1;
    end else begin
        y_L3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_separate_complex_p_fu_434_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln148_fu_478_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter22 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter23 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter22 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter23 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln148_fu_478_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if (((icmp_ln156_fu_496_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln159_fu_518_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln159_fu_518_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((1'b0 == ap_block_pp1_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_pp1_stage3 : begin
            if ((~((1'b0 == ap_block_pp1_stage3_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter2 == 1'b1)) & (1'b0 == ap_block_pp1_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end else if (((1'b0 == ap_block_pp1_stage3_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end
        end
        ap_ST_fsm_pp1_stage4 : begin
            if ((1'b0 == ap_block_pp1_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state46 : begin
            if (((icmp_ln171_fu_606_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln174_fu_628_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1)) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln174_fu_628_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((~((1'b0 == ap_block_pp2_stage1_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter2 == 1'b1)) & (1'b0 == ap_block_pp2_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end else if (((1'b0 == ap_block_pp2_stage1_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_pp2_stage2 : begin
            if ((1'b0 == ap_block_pp2_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end
        end
        ap_ST_fsm_pp2_stage3 : begin
            if ((1'b0 == ap_block_pp2_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage3;
            end
        end
        ap_ST_fsm_pp2_stage4 : begin
            if ((1'b0 == ap_block_pp2_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage4;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln185_fu_666_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter10 == 1'b0) & (ap_enable_reg_pp3_iter11 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter10 == 1'b0) & (ap_enable_reg_pp3_iter11 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln185_fu_666_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            if (((grp_reconstruct_complex_s_fu_425_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state74))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        ap_ST_fsm_state75 : begin
            if ((~((2'd1 == DNN_out_V_last_V_1_state) | (2'd1 == DNN_out_V_data_1_state) | ((2'd3 == DNN_out_V_last_V_1_state) & (1'b0 == DNN_out_TREADY)) | ((2'd3 == DNN_out_V_data_1_state) & (1'b0 == DNN_out_TREADY))) & (1'b1 == ap_CS_fsm_state75))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign DNN_out_TDATA = DNN_out_V_data_1_data_out;

assign DNN_out_TLAST = DNN_out_V_last_V_1_data_out;

assign DNN_out_TVALID = DNN_out_V_last_V_1_state[1'd0];

assign DNN_out_V_data_1_ack_in = DNN_out_V_data_1_state[1'd1];

assign DNN_out_V_data_1_ack_out = DNN_out_TREADY;

assign DNN_out_V_data_1_load_A = (~DNN_out_V_data_1_sel_wr & DNN_out_V_data_1_state_cmp_full);

assign DNN_out_V_data_1_load_B = (DNN_out_V_data_1_state_cmp_full & DNN_out_V_data_1_sel_wr);

assign DNN_out_V_data_1_sel = DNN_out_V_data_1_sel_rd;

assign DNN_out_V_data_1_state_cmp_full = ((DNN_out_V_data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign DNN_out_V_data_1_vld_in = grp_reconstruct_complex_s_fu_425_DNN_out_TVALID;

assign DNN_out_V_data_1_vld_out = DNN_out_V_data_1_state[1'd0];

assign DNN_out_V_last_V_1_ack_in = DNN_out_V_last_V_1_state[1'd1];

assign DNN_out_V_last_V_1_ack_out = DNN_out_TREADY;

assign DNN_out_V_last_V_1_load_A = (~DNN_out_V_last_V_1_sel_wr & DNN_out_V_last_V_1_state_cmp_full);

assign DNN_out_V_last_V_1_load_B = (DNN_out_V_last_V_1_state_cmp_full & DNN_out_V_last_V_1_sel_wr);

assign DNN_out_V_last_V_1_sel = DNN_out_V_last_V_1_sel_rd;

assign DNN_out_V_last_V_1_state_cmp_full = ((DNN_out_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign DNN_out_V_last_V_1_vld_in = grp_reconstruct_complex_s_fu_425_DNN_out_TVALID;

assign DNN_out_V_last_V_1_vld_out = DNN_out_V_last_V_1_state[1'd0];

assign L1_BIAS_address0 = zext_ln158_fu_508_p1;

assign L1_WEIGHTS_address0 = zext_ln161_1_fu_540_p1;

assign L2_BIAS_address0 = zext_ln173_fu_618_p1;

assign L2_WEIGHTS_address0 = zext_ln176_1_fu_650_p1;

assign LS_stream_TREADY = LS_stream_V_last_V_0_state[1'd1];

assign LS_stream_V_data_0_ack_in = LS_stream_V_data_0_state[1'd1];

assign LS_stream_V_data_0_load_A = (~LS_stream_V_data_0_sel_wr & LS_stream_V_data_0_state_cmp_full);

assign LS_stream_V_data_0_load_B = (LS_stream_V_data_0_state_cmp_full & LS_stream_V_data_0_sel_wr);

assign LS_stream_V_data_0_sel = LS_stream_V_data_0_sel_rd;

assign LS_stream_V_data_0_state_cmp_full = ((LS_stream_V_data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign LS_stream_V_data_0_vld_in = LS_stream_TVALID;

assign LS_stream_V_data_0_vld_out = LS_stream_V_data_0_state[1'd0];

assign LS_stream_V_last_V_0_ack_in = LS_stream_V_last_V_0_state[1'd1];

assign LS_stream_V_last_V_0_load_A = (~LS_stream_V_last_V_0_sel_wr & LS_stream_V_last_V_0_state_cmp_full);

assign LS_stream_V_last_V_0_load_B = (LS_stream_V_last_V_0_state_cmp_full & LS_stream_V_last_V_0_sel_wr);

assign LS_stream_V_last_V_0_sel = LS_stream_V_last_V_0_sel_rd;

assign LS_stream_V_last_V_0_state_cmp_full = ((LS_stream_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign LS_stream_V_last_V_0_vld_in = LS_stream_TVALID;

assign LS_stream_V_last_V_0_vld_out = LS_stream_V_last_V_0_state[1'd0];

assign add_ln161_1_fu_545_p2 = (phi_mul_reg_357 + 13'd52);

assign add_ln161_fu_535_p2 = (zext_ln158_1_reg_752 + ap_phi_mux_phi_mul_phi_fu_361_p4);

assign add_ln176_1_fu_655_p2 = (phi_mul5_reg_402 + 13'd104);

assign add_ln176_fu_645_p2 = (zext_ln173_1_reg_825 + ap_phi_mux_phi_mul5_phi_fu_406_p4);

assign and_ln14_fu_592_p2 = (or_ln14_fu_586_p2 & grp_fu_457_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp1_stage3 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp1_stage4 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp2_stage2 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp2_stage4 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd24];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp1_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp1_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp1_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp1_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp1_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp1_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp1_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp1_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp1_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp2_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp2_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp2_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp2_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp2_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp2_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp2_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp2_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp2_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp3_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp3_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp3_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp3_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp3_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp3_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp3_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp3_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp3_stage0_iter11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state75 = ((2'd1 == DNN_out_V_last_V_1_state) | (2'd1 == DNN_out_V_data_1_state) | ((2'd3 == DNN_out_V_last_V_1_state) & (1'b0 == DNN_out_TREADY)) | ((2'd3 == DNN_out_V_data_1_state) & (1'b0 == DNN_out_TREADY)));
end

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln14_fu_556_p1 = reg_462;

assign grp_reconstruct_complex_s_fu_425_DNN_out_TREADY = ((ap_CS_fsm_state74 & DNN_out_V_last_V_1_ack_in) | (ap_CS_fsm_state74 & DNN_out_V_data_1_ack_in));

assign grp_reconstruct_complex_s_fu_425_ap_start = grp_reconstruct_complex_s_fu_425_ap_start_reg;

assign grp_separate_complex_p_fu_434_LS_stream_TVALID = LS_stream_V_last_V_0_state[1'd0];

assign grp_separate_complex_p_fu_434_ap_start = grp_separate_complex_p_fu_434_ap_start_reg;

assign i_1_fu_502_p2 = (i_0_i12_reg_324 + 6'd1);

assign i_2_fu_672_p2 = (i_0_i24_reg_414 + 7'd1);

assign i_3_fu_612_p2 = (i_0_i14_reg_369 + 7'd1);

assign i_fu_484_p2 = (i_0_i_reg_313 + 7'd1);

assign icmp_ln148_fu_478_p2 = ((i_0_i_reg_313 == 7'd104) ? 1'b1 : 1'b0);

assign icmp_ln14_1_fu_580_p2 = ((trunc_ln14_fu_570_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_574_p2 = ((tmp_fu_560_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln156_fu_496_p2 = ((i_0_i12_reg_324 == 6'd52) ? 1'b1 : 1'b0);

assign icmp_ln159_1_fu_551_p2 = ((j_reg_766 == 7'd104) ? 1'b1 : 1'b0);

assign icmp_ln159_fu_518_p2 = ((ap_phi_mux_j_0_i_phi_fu_350_p4 == 7'd104) ? 1'b1 : 1'b0);

assign icmp_ln171_fu_606_p2 = ((i_0_i14_reg_369 == 7'd104) ? 1'b1 : 1'b0);

assign icmp_ln174_1_fu_661_p2 = ((j_1_reg_839 == 6'd52) ? 1'b1 : 1'b0);

assign icmp_ln174_fu_628_p2 = ((ap_phi_mux_j_0_i18_phi_fu_395_p4 == 6'd52) ? 1'b1 : 1'b0);

assign icmp_ln185_fu_666_p2 = ((i_0_i24_reg_414 == 7'd104) ? 1'b1 : 1'b0);

assign j_1_fu_634_p2 = (ap_phi_mux_j_0_i18_phi_fu_395_p4 + 6'd1);

assign j_fu_524_p2 = (ap_phi_mux_j_0_i_phi_fu_350_p4 + 7'd1);

assign mean_in_address0 = zext_ln150_fu_490_p1;

assign mean_o_address0 = zext_ln187_reg_883_pp3_iter3_reg;

assign or_ln14_fu_586_p2 = (icmp_ln14_fu_574_p2 | icmp_ln14_1_fu_580_p2);

assign select_ln14_fu_598_p3 = ((and_ln14_fu_592_p2[0:0] === 1'b1) ? 32'd0 : reg_462);

assign std_in_address0 = zext_ln150_reg_693_pp0_iter4_reg;

assign std_o_address0 = zext_ln187_fu_678_p1;

assign tmp_fu_560_p4 = {{bitcast_ln14_fu_556_p1[30:23]}};

assign trunc_ln14_fu_570_p1 = bitcast_ln14_fu_556_p1[22:0];

assign zext_ln150_fu_490_p1 = i_0_i_reg_313;

assign zext_ln158_1_fu_514_p1 = i_0_i12_reg_324;

assign zext_ln158_fu_508_p1 = i_0_i12_reg_324;

assign zext_ln161_1_fu_540_p1 = add_ln161_fu_535_p2;

assign zext_ln161_fu_530_p1 = ap_phi_mux_j_0_i_phi_fu_350_p4;

assign zext_ln173_1_fu_624_p1 = i_0_i14_reg_369;

assign zext_ln173_fu_618_p1 = i_0_i14_reg_369;

assign zext_ln176_1_fu_650_p1 = add_ln176_fu_645_p2;

assign zext_ln176_fu_640_p1 = ap_phi_mux_j_0_i18_phi_fu_395_p4;

assign zext_ln187_fu_678_p1 = i_0_i24_reg_414;

always @ (posedge ap_clk) begin
    zext_ln150_reg_693[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln150_reg_693_pp0_iter1_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln150_reg_693_pp0_iter2_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln150_reg_693_pp0_iter3_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln150_reg_693_pp0_iter4_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln150_reg_693_pp0_iter5_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln150_reg_693_pp0_iter6_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln150_reg_693_pp0_iter7_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln150_reg_693_pp0_iter8_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln150_reg_693_pp0_iter9_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln150_reg_693_pp0_iter10_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln150_reg_693_pp0_iter11_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln150_reg_693_pp0_iter12_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln150_reg_693_pp0_iter13_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln150_reg_693_pp0_iter14_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln150_reg_693_pp0_iter15_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln150_reg_693_pp0_iter16_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln150_reg_693_pp0_iter17_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln150_reg_693_pp0_iter18_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln150_reg_693_pp0_iter19_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln150_reg_693_pp0_iter20_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln150_reg_693_pp0_iter21_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln150_reg_693_pp0_iter22_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln158_1_reg_752[12:6] <= 7'b0000000;
    zext_ln173_1_reg_825[12:7] <= 6'b000000;
    zext_ln187_reg_883[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln187_reg_883_pp3_iter1_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln187_reg_883_pp3_iter2_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln187_reg_883_pp3_iter3_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln187_reg_883_pp3_iter4_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln187_reg_883_pp3_iter5_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln187_reg_883_pp3_iter6_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln187_reg_883_pp3_iter7_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln187_reg_883_pp3_iter8_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln187_reg_883_pp3_iter9_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln187_reg_883_pp3_iter10_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //DNN_p
