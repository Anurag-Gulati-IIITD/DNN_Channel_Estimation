// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __DNN_p_std_in_H__
#define __DNN_p_std_in_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct DNN_p_std_in_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 104;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(DNN_p_std_in_ram) {
        ram[0] = "0b00111111001101001011101110010000";
        ram[1] = "0b00111111001101101000011000101111";
        ram[2] = "0b00111111001101110100101010111010";
        ram[3] = "0b00111111001101011101111111001010";
        ram[4] = "0b00111111001101001110010110000010";
        ram[5] = "0b00111111001101100010000010001010";
        ram[6] = "0b00111111001101110010001011110010";
        ram[7] = "0b00111111001101100101101001000111";
        ram[8] = "0b00111111001101010101101001001011";
        ram[9] = "0b00111111001101100001000100110100";
        ram[10] = "0b00111111001101101110001010111001";
        ram[11] = "0b00111111001101100111100010001110";
        ram[12] = "0b00111111001101011010010010111110";
        ram[13] = "0b00111111001101011110101001111001";
        ram[14] = "0b00111111001101101011010001100011";
        ram[15] = "0b00111111001101100110111101010000";
        ram[16] = "0b00111111001101011001010000111010";
        ram[17] = "0b00111111001101100000100100100100";
        ram[18] = "0b00111111001101101110000101001000";
        ram[19] = "0b00111111001101100110000011000100";
        ram[20] = "0b00111111001101010100010100001111";
        ram[21] = "0b00111111001101011101001111001100";
        ram[22] = "0b00111111001101110000001101001011";
        ram[23] = "0b00111111001101101001000101000011";
        ram[24] = "0b00111111001101010001000110001100";
        ram[25] = "0b00111111001101010111001101000011";
        ram[26] = "0b00111111001101110010000010100111";
        ram[27] = "0b00111111001101010010011100111101";
        ram[28] = "0b00111111001101001111110111110100";
        ram[29] = "0b00111111001101101111010110011001";
        ram[30] = "0b00111111001101110111101010100010";
        ram[31] = "0b00111111001101011001110100010011";
        ram[32] = "0b00111111001101001000110011010110";
        ram[33] = "0b00111111001101100010110100110000";
        ram[34] = "0b00111111001101110111001111100010";
        ram[35] = "0b00111111001101100000011111010101";
        ram[36] = "0b00111111001101000110010001110111";
        ram[37] = "0b00111111001101010001101000000000";
        ram[38] = "0b00111111001101101100011001011000";
        ram[39] = "0b00111111001101101001111110101110";
        ram[40] = "0b00111111001101001101100101010001";
        ram[41] = "0b00111111001101000101000011110000";
        ram[42] = "0b00111111001101011110010011010110";
        ram[43] = "0b00111111001101110000011100011000";
        ram[44] = "0b00111111001101011110111011001100";
        ram[45] = "0b00111111001101000011010110101101";
        ram[46] = "0b00111111001101010001010000001010";
        ram[47] = "0b00111111001101110000111100010111";
        ram[48] = "0b00111111001101101101100001001101";
        ram[49] = "0b00111111001101001010101011111100";
        ram[50] = "0b00111111001101000100110000010110";
        ram[51] = "0b00111111001101100111000110001011";
        ram[52] = "0b00111111001101110011000011010111";
        ram[53] = "0b00111111001101010111111010011001";
        ram[54] = "0b00111111001101001011100010001101";
        ram[55] = "0b00111111001101100100011100000010";
        ram[56] = "0b00111111001101110011111111111011";
        ram[57] = "0b00111111001101100001001110110010";
        ram[58] = "0b00111111001101010011110100110010";
        ram[59] = "0b00111111001101100000001000010000";
        ram[60] = "0b00111111001101110000010010011011";
        ram[61] = "0b00111111001101100111000001101101";
        ram[62] = "0b00111111001101011010001101011101";
        ram[63] = "0b00111111001101100000100011000000";
        ram[64] = "0b00111111001101101101000101011011";
        ram[65] = "0b00111111001101101000001000011111";
        ram[66] = "0b00111111001101011011001100011000";
        ram[67] = "0b00111111001101100000100011110010";
        ram[68] = "0b00111111001101101101001010111011";
        ram[69] = "0b00111111001101100101100100001000";
        ram[70] = "0b00111111001101010111011101110101";
        ram[71] = "0b00111111001101011101111000000101";
        ram[72] = "0b00111111001101101111110111001010";
        ram[73] = "0b00111111001101100101111001111000";
        ram[74] = "0b00111111001101010010111011011000";
        ram[75] = "0b00111111001101011001101111100101";
        ram[76] = "0b00111111001101110001100011101100";
        ram[77] = "0b00111111001101101011111000111000";
        ram[78] = "0b00111111001101010011001100001001";
        ram[79] = "0b00111111001101110001111110101100";
        ram[80] = "0b00111111001101110100011101000001";
        ram[81] = "0b00111111001101010110110001000000";
        ram[82] = "0b00111111001101001100111010000001";
        ram[83] = "0b00111111001101101010100011001010";
        ram[84] = "0b00111111001101110111110010001001";
        ram[85] = "0b00111111001101011110010010110100";
        ram[86] = "0b00111111001101000101110111011001";
        ram[87] = "0b00111111001101011010100001011000";
        ram[88] = "0b00111111001101110001100010000111";
        ram[89] = "0b00111111001101100011111101101000";
        ram[90] = "0b00111111001101000111110000001111";
        ram[91] = "0b00111111001101001001110110111111";
        ram[92] = "0b00111111001101100100110010010100";
        ram[93] = "0b00111111001101101100011001101001";
        ram[94] = "0b00111111001101010110101110111010";
        ram[95] = "0b00111111001101000100010001001010";
        ram[96] = "0b00111111001101010111000001010000";
        ram[97] = "0b00111111001101110001001110011101";
        ram[98] = "0b00111111001101100111111010110111";
        ram[99] = "0b00111111001101000110010000000010";
        ram[100] = "0b00111111001101001011000000011000";
        ram[101] = "0b00111111001101101100111111111010";
        ram[102] = "0b00111111001101110010011011000000";
        ram[103] = "0b00111111001101010000011010111100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(DNN_p_std_in) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 104;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


DNN_p_std_in_ram* meminst;


SC_CTOR(DNN_p_std_in) {
meminst = new DNN_p_std_in_ram("DNN_p_std_in_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~DNN_p_std_in() {
    delete meminst;
}


};//endmodule
#endif
