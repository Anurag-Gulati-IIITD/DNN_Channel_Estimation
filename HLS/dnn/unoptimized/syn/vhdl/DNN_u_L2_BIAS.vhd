-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity DNN_u_L2_BIAS_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of DNN_u_L2_BIAS_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110001000001111011110111010", 
    1 => "00111101100100111101100111101100", 
    2 => "10111101000100010010100001111100", 
    3 => "10111110000000010101101000001000", 
    4 => "10111101101001111011101010101010", 
    5 => "10111010111111111111101111001110", 
    6 => "00111101101001110111111101101011", 
    7 => "00111101000001111001001011010001", 
    8 => "10111011100000011110110011010101", 
    9 => "10111100111010110010111100100011", 
    10 => "00111010100110010001011110010100", 
    11 => "00111101000101001000100110001111", 
    12 => "00111101000000000110011111001111", 
    13 => "10111100010010100001010010001100", 
    14 => "10111101100101110101001110100100", 
    15 => "10111101101100111011011011001100", 
    16 => "10111101001011010011111010010010", 
    17 => "00111101011100000111111000010111", 
    18 => "00111101101101110000110001010110", 
    19 => "00111101100000100100101110111010", 
    20 => "00111100101000001001010001100000", 
    21 => "10111100101110001000110010100100", 
    22 => "00111011100110111010010111100011", 
    23 => "00111100010010101011001111101110", 
    24 => "00111011111011000011000100010110", 
    25 => "10111101000010010110010101101111", 
    26 => "10111101010101001111000101011110", 
    27 => "00111101000110000111010100001100", 
    28 => "00111101101111010110110011111000", 
    29 => "00111101110110011010111100011001", 
    30 => "00111101001010010100001001001110", 
    31 => "10111101000101000011100111011110", 
    32 => "10111101100011100110010000101100", 
    33 => "10111101100000011001101110010001", 
    34 => "10111101010010100010001100111010", 
    35 => "00111011100001001101011101101011", 
    36 => "00111011101101011111010111110001", 
    37 => "00111011001110001011111011111001", 
    38 => "00111100111010100001010000000101", 
    39 => "00111100111001110111010011101111", 
    40 => "00111100101000001111010011011000", 
    41 => "00111100000100110100011010011001", 
    42 => "00111011100111011101011111101101", 
    43 => "00111100110101011111010101101010", 
    44 => "10111100100001010010010100000011", 
    45 => "10111100100100111010100100101010", 
    46 => "10111101100101111100010111101111", 
    47 => "10111101100000110011100010110100", 
    48 => "10111100001101011100001110011100", 
    49 => "00111101110011110011110111000000", 
    50 => "00111110000001110110010011110001", 
    51 => "00111101101101001110111101000110", 
    52 => "00111011110001001011110100110100", 
    53 => "10111101101011101011111111101100", 
    54 => "10111110000001000101011100111010", 
    55 => "10111101000011111111000000000010", 
    56 => "00111101100010100101100000101110", 
    57 => "00111101101100000100011110010001", 
    58 => "00111100111101110101110110011010", 
    59 => "10111100101001101001101111100001", 
    60 => "10111101000111110100001010111011", 
    61 => "10111100010101100011100010000110", 
    62 => "00111101001001001111001000101000", 
    63 => "10111010000101100111100001111101", 
    64 => "10111101000101010010001110110011", 
    65 => "10111101100111000110100001100110", 
    66 => "10111101000011001111111100100010", 
    67 => "00111101000100000011001000010010", 
    68 => "00111101110011111100100100110110", 
    69 => "00111101100001110001000001000101", 
    70 => "00111100100011101110011010111000", 
    71 => "10111100100111011100001011110100", 
    72 => "10111101001111101101100001001101", 
    73 => "00111011110101000001101101110110", 
    74 => "00111100011110111010010001010001", 
    75 => "10111011111110011100000111111000", 
    76 => "10111101010110110110001011000111", 
    77 => "10111101001111111010010111010011", 
    78 => "00111101100111110000010001010111", 
    79 => "00111101111011001010110011010010", 
    80 => "00111101100011001111000011111010", 
    81 => "10111101000111010100010100100000", 
    82 => "10111101101001011000110101011000", 
    83 => "10111101101011110101000100100110", 
    84 => "10111101010010001011010000111001", 
    85 => "00111100010100001001010110101111", 
    86 => "00111100111010101011110111100100", 
    87 => "00111100110010000001010011010111", 
    88 => "00111100100011100100001100100100", 
    89 => "00111011111011010101011010110000", 
    90 => "00111101010000000000111010101110", 
    91 => "00111011000000010100110101110010", 
    92 => "10111011001111110011101111101011", 
    93 => "00111011010101011011011010000000", 
    94 => "10111100001010000011101100011101", 
    95 => "10111100110000111110100101100100", 
    96 => "10111101001001111011111001010101", 
    97 => "10111101001101100000000001101101", 
    98 => "00111011010001100110000010100010", 
    99 => "00111101100100010001111010000110", 
    100 => "00111101111101111100001111010111", 
    101 => "00111101011111101000111011100111", 
    102 => "10111010100000011010000101010101", 
    103 => "10111110000000000110111111101111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity DNN_u_L2_BIAS is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of DNN_u_L2_BIAS is
    component DNN_u_L2_BIAS_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    DNN_u_L2_BIAS_rom_U :  component DNN_u_L2_BIAS_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


