// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="DNN_u,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=123458,HLS_SYN_TPT=none,HLS_SYN_MEM=45,HLS_SYN_DSP=5,HLS_SYN_FF=2199,HLS_SYN_LUT=3215,HLS_VERSION=2019_1}" *)

module DNN_u (
        ap_clk,
        ap_rst_n,
        LS_stream_TDATA,
        LS_stream_TVALID,
        LS_stream_TREADY,
        LS_stream_TLAST,
        DNN_out_TDATA,
        DNN_out_TVALID,
        DNN_out_TREADY,
        DNN_out_TLAST
);

parameter    ap_ST_fsm_state1 = 69'd1;
parameter    ap_ST_fsm_state2 = 69'd2;
parameter    ap_ST_fsm_state3 = 69'd4;
parameter    ap_ST_fsm_state4 = 69'd8;
parameter    ap_ST_fsm_state5 = 69'd16;
parameter    ap_ST_fsm_state6 = 69'd32;
parameter    ap_ST_fsm_state7 = 69'd64;
parameter    ap_ST_fsm_state8 = 69'd128;
parameter    ap_ST_fsm_state9 = 69'd256;
parameter    ap_ST_fsm_state10 = 69'd512;
parameter    ap_ST_fsm_state11 = 69'd1024;
parameter    ap_ST_fsm_state12 = 69'd2048;
parameter    ap_ST_fsm_state13 = 69'd4096;
parameter    ap_ST_fsm_state14 = 69'd8192;
parameter    ap_ST_fsm_state15 = 69'd16384;
parameter    ap_ST_fsm_state16 = 69'd32768;
parameter    ap_ST_fsm_state17 = 69'd65536;
parameter    ap_ST_fsm_state18 = 69'd131072;
parameter    ap_ST_fsm_state19 = 69'd262144;
parameter    ap_ST_fsm_state20 = 69'd524288;
parameter    ap_ST_fsm_state21 = 69'd1048576;
parameter    ap_ST_fsm_state22 = 69'd2097152;
parameter    ap_ST_fsm_state23 = 69'd4194304;
parameter    ap_ST_fsm_state24 = 69'd8388608;
parameter    ap_ST_fsm_state25 = 69'd16777216;
parameter    ap_ST_fsm_state26 = 69'd33554432;
parameter    ap_ST_fsm_state27 = 69'd67108864;
parameter    ap_ST_fsm_state28 = 69'd134217728;
parameter    ap_ST_fsm_state29 = 69'd268435456;
parameter    ap_ST_fsm_state30 = 69'd536870912;
parameter    ap_ST_fsm_state31 = 69'd1073741824;
parameter    ap_ST_fsm_state32 = 69'd2147483648;
parameter    ap_ST_fsm_state33 = 69'd4294967296;
parameter    ap_ST_fsm_state34 = 69'd8589934592;
parameter    ap_ST_fsm_state35 = 69'd17179869184;
parameter    ap_ST_fsm_state36 = 69'd34359738368;
parameter    ap_ST_fsm_state37 = 69'd68719476736;
parameter    ap_ST_fsm_state38 = 69'd137438953472;
parameter    ap_ST_fsm_state39 = 69'd274877906944;
parameter    ap_ST_fsm_state40 = 69'd549755813888;
parameter    ap_ST_fsm_state41 = 69'd1099511627776;
parameter    ap_ST_fsm_state42 = 69'd2199023255552;
parameter    ap_ST_fsm_state43 = 69'd4398046511104;
parameter    ap_ST_fsm_state44 = 69'd8796093022208;
parameter    ap_ST_fsm_state45 = 69'd17592186044416;
parameter    ap_ST_fsm_state46 = 69'd35184372088832;
parameter    ap_ST_fsm_state47 = 69'd70368744177664;
parameter    ap_ST_fsm_state48 = 69'd140737488355328;
parameter    ap_ST_fsm_state49 = 69'd281474976710656;
parameter    ap_ST_fsm_state50 = 69'd562949953421312;
parameter    ap_ST_fsm_state51 = 69'd1125899906842624;
parameter    ap_ST_fsm_state52 = 69'd2251799813685248;
parameter    ap_ST_fsm_state53 = 69'd4503599627370496;
parameter    ap_ST_fsm_state54 = 69'd9007199254740992;
parameter    ap_ST_fsm_state55 = 69'd18014398509481984;
parameter    ap_ST_fsm_state56 = 69'd36028797018963968;
parameter    ap_ST_fsm_state57 = 69'd72057594037927936;
parameter    ap_ST_fsm_state58 = 69'd144115188075855872;
parameter    ap_ST_fsm_state59 = 69'd288230376151711744;
parameter    ap_ST_fsm_state60 = 69'd576460752303423488;
parameter    ap_ST_fsm_state61 = 69'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 69'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 69'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 69'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 69'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 69'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 69'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 69'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 69'd295147905179352825856;

input   ap_clk;
input   ap_rst_n;
input  [63:0] LS_stream_TDATA;
input   LS_stream_TVALID;
output   LS_stream_TREADY;
input  [0:0] LS_stream_TLAST;
output  [63:0] DNN_out_TDATA;
output   DNN_out_TVALID;
input   DNN_out_TREADY;
output  [0:0] DNN_out_TLAST;

 reg    ap_rst_n_inv;
reg   [63:0] LS_stream_V_data_0_data_out;
wire    LS_stream_V_data_0_vld_in;
wire    LS_stream_V_data_0_vld_out;
wire    LS_stream_V_data_0_ack_in;
reg    LS_stream_V_data_0_ack_out;
reg   [63:0] LS_stream_V_data_0_payload_A;
reg   [63:0] LS_stream_V_data_0_payload_B;
reg    LS_stream_V_data_0_sel_rd;
reg    LS_stream_V_data_0_sel_wr;
wire    LS_stream_V_data_0_sel;
wire    LS_stream_V_data_0_load_A;
wire    LS_stream_V_data_0_load_B;
reg   [1:0] LS_stream_V_data_0_state;
wire    LS_stream_V_data_0_state_cmp_full;
reg   [0:0] LS_stream_V_last_V_0_data_out;
wire    LS_stream_V_last_V_0_vld_in;
wire    LS_stream_V_last_V_0_vld_out;
wire    LS_stream_V_last_V_0_ack_in;
reg    LS_stream_V_last_V_0_ack_out;
reg   [0:0] LS_stream_V_last_V_0_payload_A;
reg   [0:0] LS_stream_V_last_V_0_payload_B;
reg    LS_stream_V_last_V_0_sel_rd;
reg    LS_stream_V_last_V_0_sel_wr;
wire    LS_stream_V_last_V_0_sel;
wire    LS_stream_V_last_V_0_load_A;
wire    LS_stream_V_last_V_0_load_B;
reg   [1:0] LS_stream_V_last_V_0_state;
wire    LS_stream_V_last_V_0_state_cmp_full;
reg   [63:0] DNN_out_V_data_1_data_out;
wire    DNN_out_V_data_1_vld_in;
wire    DNN_out_V_data_1_vld_out;
wire    DNN_out_V_data_1_ack_in;
wire    DNN_out_V_data_1_ack_out;
reg   [63:0] DNN_out_V_data_1_payload_A;
reg   [63:0] DNN_out_V_data_1_payload_B;
reg    DNN_out_V_data_1_sel_rd;
reg    DNN_out_V_data_1_sel_wr;
wire    DNN_out_V_data_1_sel;
wire    DNN_out_V_data_1_load_A;
wire    DNN_out_V_data_1_load_B;
reg   [1:0] DNN_out_V_data_1_state;
wire    DNN_out_V_data_1_state_cmp_full;
reg   [0:0] DNN_out_V_last_V_1_data_out;
wire    DNN_out_V_last_V_1_vld_in;
wire    DNN_out_V_last_V_1_vld_out;
wire    DNN_out_V_last_V_1_ack_in;
wire    DNN_out_V_last_V_1_ack_out;
reg   [0:0] DNN_out_V_last_V_1_payload_A;
reg   [0:0] DNN_out_V_last_V_1_payload_B;
reg    DNN_out_V_last_V_1_sel_rd;
reg    DNN_out_V_last_V_1_sel_wr;
wire    DNN_out_V_last_V_1_sel;
wire    DNN_out_V_last_V_1_load_A;
wire    DNN_out_V_last_V_1_load_B;
reg   [1:0] DNN_out_V_last_V_1_state;
wire    DNN_out_V_last_V_1_state_cmp_full;
wire   [6:0] mean_in_address0;
reg    mean_in_ce0;
wire   [31:0] mean_in_q0;
wire   [6:0] std_in_address0;
reg    std_in_ce0;
wire   [31:0] std_in_q0;
wire   [5:0] L1_BIAS_address0;
reg    L1_BIAS_ce0;
wire   [31:0] L1_BIAS_q0;
wire   [12:0] L1_WEIGHTS_address0;
reg    L1_WEIGHTS_ce0;
wire   [31:0] L1_WEIGHTS_q0;
wire   [6:0] L2_BIAS_address0;
reg    L2_BIAS_ce0;
wire   [31:0] L2_BIAS_q0;
wire   [12:0] L2_WEIGHTS_address0;
reg    L2_WEIGHTS_ce0;
wire   [31:0] L2_WEIGHTS_q0;
wire   [6:0] std_o_address0;
reg    std_o_ce0;
wire   [31:0] std_o_q0;
wire   [6:0] mean_o_address0;
reg    mean_o_ce0;
wire   [31:0] mean_o_q0;
wire   [31:0] grp_fu_440_p2;
reg   [31:0] reg_460;
(* fsm_encoding = "none" *) reg   [68:0] ap_CS_fsm;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state66;
wire   [31:0] grp_fu_446_p2;
reg   [31:0] reg_468;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state61;
wire   [6:0] i_fu_480_p2;
reg   [6:0] i_reg_671;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln132_fu_486_p1;
reg   [63:0] zext_ln132_reg_676;
wire   [0:0] icmp_ln131_fu_474_p2;
wire   [31:0] LS_data_q0;
reg   [31:0] LS_data_load_reg_692;
wire    ap_CS_fsm_state5;
reg   [31:0] mean_in_load_reg_697;
wire    ap_CS_fsm_state9;
reg   [31:0] std_in_load_reg_707;
wire   [31:0] grp_fu_450_p2;
reg   [31:0] tmp_1_i_reg_712;
wire    ap_CS_fsm_state26;
wire   [5:0] i_1_fu_498_p2;
reg   [5:0] i_1_reg_720;
wire    ap_CS_fsm_state28;
wire   [63:0] zext_ln140_fu_504_p1;
reg   [63:0] zext_ln140_reg_725;
wire   [0:0] icmp_ln138_fu_492_p2;
wire   [12:0] zext_ln140_1_fu_509_p1;
reg   [12:0] zext_ln140_1_reg_735;
wire    ap_CS_fsm_state29;
wire   [6:0] j_fu_519_p2;
reg   [6:0] j_reg_748;
wire    ap_CS_fsm_state30;
wire   [12:0] add_ln142_1_fu_530_p2;
reg   [12:0] add_ln142_1_reg_753;
wire   [0:0] icmp_ln141_fu_513_p2;
wire   [31:0] norm_LS_data_q0;
reg   [31:0] norm_LS_data_load_reg_768;
wire    ap_CS_fsm_state31;
reg   [31:0] L1_WEIGHTS_load_reg_773;
wire   [0:0] grp_fu_454_p2;
reg   [0:0] tmp_1_reg_778;
wire    ap_CS_fsm_state41;
wire   [6:0] i_3_fu_602_p2;
reg   [6:0] i_3_reg_786;
wire    ap_CS_fsm_state43;
wire   [63:0] zext_ln153_fu_608_p1;
reg   [63:0] zext_ln153_reg_791;
wire   [0:0] icmp_ln151_fu_596_p2;
wire   [12:0] zext_ln153_1_fu_613_p1;
reg   [12:0] zext_ln153_1_reg_801;
wire    ap_CS_fsm_state44;
wire   [5:0] j_1_fu_623_p2;
reg   [5:0] j_1_reg_814;
wire    ap_CS_fsm_state45;
wire   [12:0] add_ln155_1_fu_634_p2;
reg   [12:0] add_ln155_1_reg_819;
wire   [0:0] icmp_ln154_fu_617_p2;
wire   [31:0] y_L2_q0;
reg   [31:0] y_L2_load_reg_834;
wire    ap_CS_fsm_state46;
reg   [31:0] L2_WEIGHTS_load_reg_839;
wire   [6:0] i_2_fu_656_p2;
reg   [6:0] i_2_reg_847;
wire    ap_CS_fsm_state56;
wire   [63:0] zext_ln165_fu_662_p1;
reg   [63:0] zext_ln165_reg_852;
wire   [0:0] icmp_ln164_fu_650_p2;
wire   [31:0] y_L3_q0;
reg   [31:0] y_L3_load_reg_868;
wire    ap_CS_fsm_state57;
reg   [31:0] std_o_load_reg_873;
wire    ap_CS_fsm_state60;
reg   [31:0] mean_o_load_reg_883;
reg   [6:0] LS_data_address0;
reg    LS_data_ce0;
reg    LS_data_we0;
reg    LS_data_ce1;
reg    LS_data_we1;
reg   [6:0] norm_LS_data_address0;
reg    norm_LS_data_ce0;
reg    norm_LS_data_we0;
reg   [5:0] y_L2_address0;
reg    y_L2_ce0;
reg    y_L2_we0;
wire   [31:0] y_L2_d0;
reg   [6:0] y_L3_address0;
reg    y_L3_ce0;
reg    y_L3_we0;
reg   [6:0] denorm_DNN_address0;
reg    denorm_DNN_ce0;
reg    denorm_DNN_we0;
wire   [31:0] denorm_DNN_q0;
reg    denorm_DNN_ce1;
wire   [31:0] denorm_DNN_q1;
wire    grp_reconstruct_complex_s_fu_422_ap_start;
wire    grp_reconstruct_complex_s_fu_422_ap_done;
wire    grp_reconstruct_complex_s_fu_422_ap_idle;
wire    grp_reconstruct_complex_s_fu_422_ap_ready;
wire   [6:0] grp_reconstruct_complex_s_fu_422_y_L3_address0;
wire    grp_reconstruct_complex_s_fu_422_y_L3_ce0;
wire   [6:0] grp_reconstruct_complex_s_fu_422_y_L3_address1;
wire    grp_reconstruct_complex_s_fu_422_y_L3_ce1;
wire   [63:0] grp_reconstruct_complex_s_fu_422_DNN_out_TDATA;
wire    grp_reconstruct_complex_s_fu_422_DNN_out_TVALID;
wire    grp_reconstruct_complex_s_fu_422_DNN_out_TREADY;
wire   [0:0] grp_reconstruct_complex_s_fu_422_DNN_out_TLAST;
wire    grp_separate_complex_u_fu_431_ap_start;
wire    grp_separate_complex_u_fu_431_ap_done;
wire    grp_separate_complex_u_fu_431_ap_idle;
wire    grp_separate_complex_u_fu_431_ap_ready;
wire    grp_separate_complex_u_fu_431_LS_stream_TVALID;
wire    grp_separate_complex_u_fu_431_LS_stream_TREADY;
wire   [6:0] grp_separate_complex_u_fu_431_sep_address0;
wire    grp_separate_complex_u_fu_431_sep_ce0;
wire    grp_separate_complex_u_fu_431_sep_we0;
wire   [31:0] grp_separate_complex_u_fu_431_sep_d0;
wire   [6:0] grp_separate_complex_u_fu_431_sep_address1;
wire    grp_separate_complex_u_fu_431_sep_ce1;
wire    grp_separate_complex_u_fu_431_sep_we1;
wire   [31:0] grp_separate_complex_u_fu_431_sep_d1;
reg   [6:0] i_0_i_reg_311;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state27;
reg   [5:0] i_0_i12_reg_322;
wire    ap_CS_fsm_state42;
reg   [31:0] x_assign_reg_334;
reg   [6:0] j_0_i_reg_344;
reg   [12:0] phi_mul_reg_355;
reg   [6:0] i_0_i14_reg_366;
reg   [31:0] before_relu_0_i17_reg_378;
reg   [5:0] j_0_i18_reg_389;
reg   [12:0] phi_mul1_reg_400;
reg   [6:0] i_0_i24_reg_411;
wire    ap_CS_fsm_state67;
reg    grp_reconstruct_complex_s_fu_422_ap_start_reg;
wire    ap_CS_fsm_state68;
reg    grp_separate_complex_u_fu_431_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln142_1_fu_541_p1;
wire   [63:0] zext_ln142_fu_525_p1;
wire   [63:0] zext_ln155_1_fu_645_p1;
wire   [63:0] zext_ln155_fu_629_p1;
reg   [31:0] grp_fu_440_p0;
reg   [31:0] grp_fu_440_p1;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state62;
reg   [31:0] grp_fu_446_p0;
reg   [31:0] grp_fu_446_p1;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state11;
wire   [12:0] add_ln142_fu_536_p2;
wire   [31:0] bitcast_ln110_fu_546_p1;
wire   [7:0] tmp_fu_550_p4;
wire   [22:0] trunc_ln110_fu_560_p1;
wire   [0:0] icmp_ln110_1_fu_570_p2;
wire   [0:0] icmp_ln110_fu_564_p2;
wire   [0:0] or_ln110_fu_576_p2;
wire   [0:0] and_ln110_fu_582_p2;
wire   [12:0] add_ln155_fu_640_p2;
reg   [1:0] grp_fu_440_opcode;
reg   [68:0] ap_NS_fsm;
wire    ap_CS_fsm_state69;
reg    ap_block_state69;

// power-on initialization
initial begin
#0 LS_stream_V_data_0_sel_rd = 1'b0;
#0 LS_stream_V_data_0_sel_wr = 1'b0;
#0 LS_stream_V_data_0_state = 2'd0;
#0 LS_stream_V_last_V_0_sel_rd = 1'b0;
#0 LS_stream_V_last_V_0_sel_wr = 1'b0;
#0 LS_stream_V_last_V_0_state = 2'd0;
#0 DNN_out_V_data_1_sel_rd = 1'b0;
#0 DNN_out_V_data_1_sel_wr = 1'b0;
#0 DNN_out_V_data_1_state = 2'd0;
#0 DNN_out_V_last_V_1_sel_rd = 1'b0;
#0 DNN_out_V_last_V_1_sel_wr = 1'b0;
#0 DNN_out_V_last_V_1_state = 2'd0;
#0 ap_CS_fsm = 69'd1;
#0 grp_reconstruct_complex_s_fu_422_ap_start_reg = 1'b0;
#0 grp_separate_complex_u_fu_431_ap_start_reg = 1'b0;
end

DNN_u_mean_in #(
    .DataWidth( 32 ),
    .AddressRange( 104 ),
    .AddressWidth( 7 ))
mean_in_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(mean_in_address0),
    .ce0(mean_in_ce0),
    .q0(mean_in_q0)
);

DNN_u_std_in #(
    .DataWidth( 32 ),
    .AddressRange( 104 ),
    .AddressWidth( 7 ))
std_in_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(std_in_address0),
    .ce0(std_in_ce0),
    .q0(std_in_q0)
);

DNN_u_L1_BIAS #(
    .DataWidth( 32 ),
    .AddressRange( 52 ),
    .AddressWidth( 6 ))
L1_BIAS_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(L1_BIAS_address0),
    .ce0(L1_BIAS_ce0),
    .q0(L1_BIAS_q0)
);

DNN_u_L1_WEIGHTS #(
    .DataWidth( 32 ),
    .AddressRange( 5408 ),
    .AddressWidth( 13 ))
L1_WEIGHTS_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(L1_WEIGHTS_address0),
    .ce0(L1_WEIGHTS_ce0),
    .q0(L1_WEIGHTS_q0)
);

DNN_u_L2_BIAS #(
    .DataWidth( 32 ),
    .AddressRange( 104 ),
    .AddressWidth( 7 ))
L2_BIAS_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(L2_BIAS_address0),
    .ce0(L2_BIAS_ce0),
    .q0(L2_BIAS_q0)
);

DNN_u_L2_WEIGHTS #(
    .DataWidth( 32 ),
    .AddressRange( 5408 ),
    .AddressWidth( 13 ))
L2_WEIGHTS_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(L2_WEIGHTS_address0),
    .ce0(L2_WEIGHTS_ce0),
    .q0(L2_WEIGHTS_q0)
);

DNN_u_std_o #(
    .DataWidth( 32 ),
    .AddressRange( 104 ),
    .AddressWidth( 7 ))
std_o_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(std_o_address0),
    .ce0(std_o_ce0),
    .q0(std_o_q0)
);

DNN_u_mean_o #(
    .DataWidth( 32 ),
    .AddressRange( 104 ),
    .AddressWidth( 7 ))
mean_o_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(mean_o_address0),
    .ce0(mean_o_ce0),
    .q0(mean_o_q0)
);

DNN_u_LS_data #(
    .DataWidth( 32 ),
    .AddressRange( 104 ),
    .AddressWidth( 7 ))
LS_data_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LS_data_address0),
    .ce0(LS_data_ce0),
    .we0(LS_data_we0),
    .d0(grp_separate_complex_u_fu_431_sep_d0),
    .q0(LS_data_q0),
    .address1(grp_separate_complex_u_fu_431_sep_address1),
    .ce1(LS_data_ce1),
    .we1(LS_data_we1),
    .d1(grp_separate_complex_u_fu_431_sep_d1)
);

DNN_u_norm_LS_data #(
    .DataWidth( 32 ),
    .AddressRange( 104 ),
    .AddressWidth( 7 ))
norm_LS_data_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(norm_LS_data_address0),
    .ce0(norm_LS_data_ce0),
    .we0(norm_LS_data_we0),
    .d0(tmp_1_i_reg_712),
    .q0(norm_LS_data_q0)
);

DNN_u_y_L2 #(
    .DataWidth( 32 ),
    .AddressRange( 52 ),
    .AddressWidth( 6 ))
y_L2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(y_L2_address0),
    .ce0(y_L2_ce0),
    .we0(y_L2_we0),
    .d0(y_L2_d0),
    .q0(y_L2_q0)
);

DNN_u_norm_LS_data #(
    .DataWidth( 32 ),
    .AddressRange( 104 ),
    .AddressWidth( 7 ))
y_L3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(y_L3_address0),
    .ce0(y_L3_ce0),
    .we0(y_L3_we0),
    .d0(before_relu_0_i17_reg_378),
    .q0(y_L3_q0)
);

DNN_u_denorm_DNN #(
    .DataWidth( 32 ),
    .AddressRange( 104 ),
    .AddressWidth( 7 ))
denorm_DNN_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(denorm_DNN_address0),
    .ce0(denorm_DNN_ce0),
    .we0(denorm_DNN_we0),
    .d0(reg_460),
    .q0(denorm_DNN_q0),
    .address1(grp_reconstruct_complex_s_fu_422_y_L3_address1),
    .ce1(denorm_DNN_ce1),
    .q1(denorm_DNN_q1)
);

reconstruct_complex_s grp_reconstruct_complex_s_fu_422(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_reconstruct_complex_s_fu_422_ap_start),
    .ap_done(grp_reconstruct_complex_s_fu_422_ap_done),
    .ap_idle(grp_reconstruct_complex_s_fu_422_ap_idle),
    .ap_ready(grp_reconstruct_complex_s_fu_422_ap_ready),
    .y_L3_address0(grp_reconstruct_complex_s_fu_422_y_L3_address0),
    .y_L3_ce0(grp_reconstruct_complex_s_fu_422_y_L3_ce0),
    .y_L3_q0(denorm_DNN_q0),
    .y_L3_address1(grp_reconstruct_complex_s_fu_422_y_L3_address1),
    .y_L3_ce1(grp_reconstruct_complex_s_fu_422_y_L3_ce1),
    .y_L3_q1(denorm_DNN_q1),
    .DNN_out_TDATA(grp_reconstruct_complex_s_fu_422_DNN_out_TDATA),
    .DNN_out_TVALID(grp_reconstruct_complex_s_fu_422_DNN_out_TVALID),
    .DNN_out_TREADY(grp_reconstruct_complex_s_fu_422_DNN_out_TREADY),
    .DNN_out_TLAST(grp_reconstruct_complex_s_fu_422_DNN_out_TLAST)
);

separate_complex_u grp_separate_complex_u_fu_431(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_separate_complex_u_fu_431_ap_start),
    .ap_done(grp_separate_complex_u_fu_431_ap_done),
    .ap_idle(grp_separate_complex_u_fu_431_ap_idle),
    .ap_ready(grp_separate_complex_u_fu_431_ap_ready),
    .LS_stream_TDATA(LS_stream_V_data_0_data_out),
    .LS_stream_TVALID(grp_separate_complex_u_fu_431_LS_stream_TVALID),
    .LS_stream_TREADY(grp_separate_complex_u_fu_431_LS_stream_TREADY),
    .LS_stream_TLAST(LS_stream_V_last_V_0_data_out),
    .sep_address0(grp_separate_complex_u_fu_431_sep_address0),
    .sep_ce0(grp_separate_complex_u_fu_431_sep_ce0),
    .sep_we0(grp_separate_complex_u_fu_431_sep_we0),
    .sep_d0(grp_separate_complex_u_fu_431_sep_d0),
    .sep_address1(grp_separate_complex_u_fu_431_sep_address1),
    .sep_ce1(grp_separate_complex_u_fu_431_sep_ce1),
    .sep_we1(grp_separate_complex_u_fu_431_sep_we1),
    .sep_d1(grp_separate_complex_u_fu_431_sep_d1)
);

DNN_u_faddfsub_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
DNN_u_faddfsub_32bkb_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_440_p0),
    .din1(grp_fu_440_p1),
    .opcode(grp_fu_440_opcode),
    .ce(1'b1),
    .dout(grp_fu_440_p2)
);

DNN_u_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
DNN_u_fmul_32ns_3cud_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_446_p0),
    .din1(grp_fu_446_p1),
    .ce(1'b1),
    .dout(grp_fu_446_p2)
);

DNN_u_fdiv_32ns_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
DNN_u_fdiv_32ns_3dEe_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_460),
    .din1(std_in_load_reg_707),
    .ce(1'b1),
    .dout(grp_fu_450_p2)
);

DNN_u_fcmp_32ns_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
DNN_u_fcmp_32ns_3eOg_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(x_assign_reg_334),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_454_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DNN_out_V_data_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == DNN_out_V_data_1_ack_out) & (1'b1 == DNN_out_V_data_1_vld_out))) begin
            DNN_out_V_data_1_sel_rd <= ~DNN_out_V_data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DNN_out_V_data_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == DNN_out_V_data_1_ack_in) & (1'b1 == DNN_out_V_data_1_vld_in))) begin
            DNN_out_V_data_1_sel_wr <= ~DNN_out_V_data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DNN_out_V_data_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == DNN_out_V_data_1_vld_in) & (2'd2 == DNN_out_V_data_1_state)) | ((1'b0 == DNN_out_V_data_1_vld_in) & (1'b1 == DNN_out_V_data_1_ack_out) & (2'd3 == DNN_out_V_data_1_state)))) begin
            DNN_out_V_data_1_state <= 2'd2;
        end else if ((((1'b0 == DNN_out_TREADY) & (2'd1 == DNN_out_V_data_1_state)) | ((1'b0 == DNN_out_TREADY) & (1'b1 == DNN_out_V_data_1_vld_in) & (2'd3 == DNN_out_V_data_1_state)))) begin
            DNN_out_V_data_1_state <= 2'd1;
        end else if (((~((1'b0 == DNN_out_V_data_1_vld_in) & (1'b1 == DNN_out_V_data_1_ack_out)) & ~((1'b0 == DNN_out_TREADY) & (1'b1 == DNN_out_V_data_1_vld_in)) & (2'd3 == DNN_out_V_data_1_state)) | ((1'b1 == DNN_out_V_data_1_ack_out) & (2'd1 == DNN_out_V_data_1_state)) | ((1'b1 == DNN_out_V_data_1_vld_in) & (2'd2 == DNN_out_V_data_1_state)))) begin
            DNN_out_V_data_1_state <= 2'd3;
        end else begin
            DNN_out_V_data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DNN_out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == DNN_out_V_last_V_1_ack_out) & (1'b1 == DNN_out_V_last_V_1_vld_out))) begin
            DNN_out_V_last_V_1_sel_rd <= ~DNN_out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DNN_out_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == DNN_out_V_last_V_1_ack_in) & (1'b1 == DNN_out_V_last_V_1_vld_in))) begin
            DNN_out_V_last_V_1_sel_wr <= ~DNN_out_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        DNN_out_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == DNN_out_V_last_V_1_vld_in) & (2'd2 == DNN_out_V_last_V_1_state)) | ((1'b0 == DNN_out_V_last_V_1_vld_in) & (1'b1 == DNN_out_V_last_V_1_ack_out) & (2'd3 == DNN_out_V_last_V_1_state)))) begin
            DNN_out_V_last_V_1_state <= 2'd2;
        end else if ((((1'b0 == DNN_out_TREADY) & (2'd1 == DNN_out_V_last_V_1_state)) | ((1'b0 == DNN_out_TREADY) & (1'b1 == DNN_out_V_last_V_1_vld_in) & (2'd3 == DNN_out_V_last_V_1_state)))) begin
            DNN_out_V_last_V_1_state <= 2'd1;
        end else if (((~((1'b0 == DNN_out_V_last_V_1_vld_in) & (1'b1 == DNN_out_V_last_V_1_ack_out)) & ~((1'b0 == DNN_out_TREADY) & (1'b1 == DNN_out_V_last_V_1_vld_in)) & (2'd3 == DNN_out_V_last_V_1_state)) | ((1'b1 == DNN_out_V_last_V_1_ack_out) & (2'd1 == DNN_out_V_last_V_1_state)) | ((1'b1 == DNN_out_V_last_V_1_vld_in) & (2'd2 == DNN_out_V_last_V_1_state)))) begin
            DNN_out_V_last_V_1_state <= 2'd3;
        end else begin
            DNN_out_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        LS_stream_V_data_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == LS_stream_V_data_0_ack_out) & (1'b1 == LS_stream_V_data_0_vld_out))) begin
            LS_stream_V_data_0_sel_rd <= ~LS_stream_V_data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        LS_stream_V_data_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == LS_stream_V_data_0_ack_in) & (1'b1 == LS_stream_V_data_0_vld_in))) begin
            LS_stream_V_data_0_sel_wr <= ~LS_stream_V_data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        LS_stream_V_data_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == LS_stream_V_data_0_state) & (1'b0 == LS_stream_V_data_0_vld_in)) | ((2'd3 == LS_stream_V_data_0_state) & (1'b0 == LS_stream_V_data_0_vld_in) & (1'b1 == LS_stream_V_data_0_ack_out)))) begin
            LS_stream_V_data_0_state <= 2'd2;
        end else if ((((2'd1 == LS_stream_V_data_0_state) & (1'b0 == LS_stream_V_data_0_ack_out)) | ((2'd3 == LS_stream_V_data_0_state) & (1'b0 == LS_stream_V_data_0_ack_out) & (1'b1 == LS_stream_V_data_0_vld_in)))) begin
            LS_stream_V_data_0_state <= 2'd1;
        end else if (((~((1'b0 == LS_stream_V_data_0_vld_in) & (1'b1 == LS_stream_V_data_0_ack_out)) & ~((1'b0 == LS_stream_V_data_0_ack_out) & (1'b1 == LS_stream_V_data_0_vld_in)) & (2'd3 == LS_stream_V_data_0_state)) | ((2'd1 == LS_stream_V_data_0_state) & (1'b1 == LS_stream_V_data_0_ack_out)) | ((2'd2 == LS_stream_V_data_0_state) & (1'b1 == LS_stream_V_data_0_vld_in)))) begin
            LS_stream_V_data_0_state <= 2'd3;
        end else begin
            LS_stream_V_data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        LS_stream_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == LS_stream_V_last_V_0_ack_out) & (1'b1 == LS_stream_V_last_V_0_vld_out))) begin
            LS_stream_V_last_V_0_sel_rd <= ~LS_stream_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        LS_stream_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == LS_stream_V_last_V_0_ack_in) & (1'b1 == LS_stream_V_last_V_0_vld_in))) begin
            LS_stream_V_last_V_0_sel_wr <= ~LS_stream_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        LS_stream_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == LS_stream_V_last_V_0_vld_in) & (2'd2 == LS_stream_V_last_V_0_state)) | ((1'b0 == LS_stream_V_last_V_0_vld_in) & (1'b1 == LS_stream_V_last_V_0_ack_out) & (2'd3 == LS_stream_V_last_V_0_state)))) begin
            LS_stream_V_last_V_0_state <= 2'd2;
        end else if ((((1'b0 == LS_stream_V_last_V_0_ack_out) & (2'd1 == LS_stream_V_last_V_0_state)) | ((1'b0 == LS_stream_V_last_V_0_ack_out) & (1'b1 == LS_stream_V_last_V_0_vld_in) & (2'd3 == LS_stream_V_last_V_0_state)))) begin
            LS_stream_V_last_V_0_state <= 2'd1;
        end else if (((~((1'b0 == LS_stream_V_last_V_0_vld_in) & (1'b1 == LS_stream_V_last_V_0_ack_out)) & ~((1'b0 == LS_stream_V_last_V_0_ack_out) & (1'b1 == LS_stream_V_last_V_0_vld_in)) & (2'd3 == LS_stream_V_last_V_0_state)) | ((1'b1 == LS_stream_V_last_V_0_ack_out) & (2'd1 == LS_stream_V_last_V_0_state)) | ((1'b1 == LS_stream_V_last_V_0_vld_in) & (2'd2 == LS_stream_V_last_V_0_state)))) begin
            LS_stream_V_last_V_0_state <= 2'd3;
        end else begin
            LS_stream_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_reconstruct_complex_s_fu_422_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state56) & (icmp_ln164_fu_650_p2 == 1'd1))) begin
            grp_reconstruct_complex_s_fu_422_ap_start_reg <= 1'b1;
        end else if ((grp_reconstruct_complex_s_fu_422_ap_ready == 1'b1)) begin
            grp_reconstruct_complex_s_fu_422_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_separate_complex_u_fu_431_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_separate_complex_u_fu_431_ap_start_reg <= 1'b1;
        end else if ((grp_separate_complex_u_fu_431_ap_ready == 1'b1)) begin
            grp_separate_complex_u_fu_431_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        before_relu_0_i17_reg_378 <= grp_fu_440_p2;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        before_relu_0_i17_reg_378 <= L2_BIAS_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln131_fu_474_p2 == 1'd1))) begin
        i_0_i12_reg_322 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        i_0_i12_reg_322 <= i_1_reg_720;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln138_fu_492_p2 == 1'd1))) begin
        i_0_i14_reg_366 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state45) & (icmp_ln154_fu_617_p2 == 1'd1))) begin
        i_0_i14_reg_366 <= i_3_reg_786;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) & (icmp_ln151_fu_596_p2 == 1'd1))) begin
        i_0_i24_reg_411 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state67)) begin
        i_0_i24_reg_411 <= i_2_reg_847;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        i_0_i_reg_311 <= i_reg_671;
    end else if (((grp_separate_complex_u_fu_431_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_i_reg_311 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        j_0_i18_reg_389 <= j_1_reg_814;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        j_0_i18_reg_389 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        j_0_i_reg_344 <= j_reg_748;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        j_0_i_reg_344 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        phi_mul1_reg_400 <= add_ln155_1_reg_819;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        phi_mul1_reg_400 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        phi_mul_reg_355 <= add_ln142_1_reg_753;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        phi_mul_reg_355 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        x_assign_reg_334 <= grp_fu_440_p2;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        x_assign_reg_334 <= L1_BIAS_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DNN_out_V_data_1_load_A)) begin
        DNN_out_V_data_1_payload_A <= grp_reconstruct_complex_s_fu_422_DNN_out_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DNN_out_V_data_1_load_B)) begin
        DNN_out_V_data_1_payload_B <= grp_reconstruct_complex_s_fu_422_DNN_out_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DNN_out_V_last_V_1_load_A)) begin
        DNN_out_V_last_V_1_payload_A <= grp_reconstruct_complex_s_fu_422_DNN_out_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == DNN_out_V_last_V_1_load_B)) begin
        DNN_out_V_last_V_1_payload_B <= grp_reconstruct_complex_s_fu_422_DNN_out_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        L1_WEIGHTS_load_reg_773 <= L1_WEIGHTS_q0;
        norm_LS_data_load_reg_768 <= norm_LS_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        L2_WEIGHTS_load_reg_839 <= L2_WEIGHTS_q0;
        y_L2_load_reg_834 <= y_L2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        LS_data_load_reg_692 <= LS_data_q0;
        mean_in_load_reg_697 <= mean_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == LS_stream_V_data_0_load_A)) begin
        LS_stream_V_data_0_payload_A <= LS_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == LS_stream_V_data_0_load_B)) begin
        LS_stream_V_data_0_payload_B <= LS_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == LS_stream_V_last_V_0_load_A)) begin
        LS_stream_V_last_V_0_payload_A <= LS_stream_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == LS_stream_V_last_V_0_load_B)) begin
        LS_stream_V_last_V_0_payload_B <= LS_stream_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln141_fu_513_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
        add_ln142_1_reg_753 <= add_ln142_1_fu_530_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln154_fu_617_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state45))) begin
        add_ln155_1_reg_819 <= add_ln155_1_fu_634_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        i_1_reg_720 <= i_1_fu_498_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        i_2_reg_847 <= i_2_fu_656_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        i_3_reg_786 <= i_3_fu_602_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_671 <= i_fu_480_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        j_1_reg_814 <= j_1_fu_623_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        j_reg_748 <= j_fu_519_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        mean_o_load_reg_883 <= mean_o_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_460 <= grp_fu_440_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state35))) begin
        reg_468 <= grp_fu_446_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        std_in_load_reg_707 <= std_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        std_o_load_reg_873 <= std_o_q0;
        y_L3_load_reg_868 <= y_L3_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        tmp_1_i_reg_712 <= grp_fu_450_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        tmp_1_reg_778 <= grp_fu_454_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln131_fu_474_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        zext_ln132_reg_676[6 : 0] <= zext_ln132_fu_486_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        zext_ln140_1_reg_735[5 : 0] <= zext_ln140_1_fu_509_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln138_fu_492_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state28))) begin
        zext_ln140_reg_725[5 : 0] <= zext_ln140_fu_504_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        zext_ln153_1_reg_801[6 : 0] <= zext_ln153_1_fu_613_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln151_fu_596_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state43))) begin
        zext_ln153_reg_791[6 : 0] <= zext_ln153_fu_608_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln164_fu_650_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state56))) begin
        zext_ln165_reg_852[6 : 0] <= zext_ln165_fu_662_p1[6 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == DNN_out_V_data_1_sel)) begin
        DNN_out_V_data_1_data_out = DNN_out_V_data_1_payload_B;
    end else begin
        DNN_out_V_data_1_data_out = DNN_out_V_data_1_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == DNN_out_V_last_V_1_sel)) begin
        DNN_out_V_last_V_1_data_out = DNN_out_V_last_V_1_payload_B;
    end else begin
        DNN_out_V_last_V_1_data_out = DNN_out_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        L1_BIAS_ce0 = 1'b1;
    end else begin
        L1_BIAS_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        L1_WEIGHTS_ce0 = 1'b1;
    end else begin
        L1_WEIGHTS_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        L2_BIAS_ce0 = 1'b1;
    end else begin
        L2_BIAS_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        L2_WEIGHTS_ce0 = 1'b1;
    end else begin
        L2_WEIGHTS_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        LS_data_address0 = zext_ln132_fu_486_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        LS_data_address0 = grp_separate_complex_u_fu_431_sep_address0;
    end else begin
        LS_data_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        LS_data_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        LS_data_ce0 = grp_separate_complex_u_fu_431_sep_ce0;
    end else begin
        LS_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        LS_data_ce1 = grp_separate_complex_u_fu_431_sep_ce1;
    end else begin
        LS_data_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        LS_data_we0 = grp_separate_complex_u_fu_431_sep_we0;
    end else begin
        LS_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        LS_data_we1 = grp_separate_complex_u_fu_431_sep_we1;
    end else begin
        LS_data_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        LS_stream_V_data_0_ack_out = grp_separate_complex_u_fu_431_LS_stream_TREADY;
    end else begin
        LS_stream_V_data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == LS_stream_V_data_0_sel)) begin
        LS_stream_V_data_0_data_out = LS_stream_V_data_0_payload_B;
    end else begin
        LS_stream_V_data_0_data_out = LS_stream_V_data_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        LS_stream_V_last_V_0_ack_out = grp_separate_complex_u_fu_431_LS_stream_TREADY;
    end else begin
        LS_stream_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == LS_stream_V_last_V_0_sel)) begin
        LS_stream_V_last_V_0_data_out = LS_stream_V_last_V_0_payload_B;
    end else begin
        LS_stream_V_last_V_0_data_out = LS_stream_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        denorm_DNN_address0 = zext_ln165_reg_852;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        denorm_DNN_address0 = grp_reconstruct_complex_s_fu_422_y_L3_address0;
    end else begin
        denorm_DNN_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        denorm_DNN_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        denorm_DNN_ce0 = grp_reconstruct_complex_s_fu_422_y_L3_ce0;
    end else begin
        denorm_DNN_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        denorm_DNN_ce1 = grp_reconstruct_complex_s_fu_422_y_L3_ce1;
    end else begin
        denorm_DNN_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        denorm_DNN_we0 = 1'b1;
    end else begin
        denorm_DNN_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_440_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state36))) begin
        grp_fu_440_opcode = 2'd0;
    end else begin
        grp_fu_440_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        grp_fu_440_p0 = reg_468;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        grp_fu_440_p0 = before_relu_0_i17_reg_378;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        grp_fu_440_p0 = x_assign_reg_334;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_440_p0 = LS_data_load_reg_692;
    end else begin
        grp_fu_440_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        grp_fu_440_p1 = mean_o_load_reg_883;
    end else if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state36))) begin
        grp_fu_440_p1 = reg_468;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_440_p1 = mean_in_load_reg_697;
    end else begin
        grp_fu_440_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_fu_446_p0 = y_L3_load_reg_868;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_446_p0 = y_L2_load_reg_834;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_fu_446_p0 = norm_LS_data_load_reg_768;
    end else begin
        grp_fu_446_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_fu_446_p1 = std_o_load_reg_873;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_446_p1 = L2_WEIGHTS_load_reg_839;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_fu_446_p1 = L1_WEIGHTS_load_reg_773;
    end else begin
        grp_fu_446_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mean_in_ce0 = 1'b1;
    end else begin
        mean_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        mean_o_ce0 = 1'b1;
    end else begin
        mean_o_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        norm_LS_data_address0 = zext_ln142_fu_525_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        norm_LS_data_address0 = zext_ln132_reg_676;
    end else begin
        norm_LS_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state30))) begin
        norm_LS_data_ce0 = 1'b1;
    end else begin
        norm_LS_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        norm_LS_data_we0 = 1'b1;
    end else begin
        norm_LS_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        std_in_ce0 = 1'b1;
    end else begin
        std_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        std_o_ce0 = 1'b1;
    end else begin
        std_o_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        y_L2_address0 = zext_ln155_fu_629_p1;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        y_L2_address0 = zext_ln140_reg_725;
    end else begin
        y_L2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state45))) begin
        y_L2_ce0 = 1'b1;
    end else begin
        y_L2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        y_L2_we0 = 1'b1;
    end else begin
        y_L2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        y_L3_address0 = zext_ln165_fu_662_p1;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        y_L3_address0 = zext_ln153_reg_791;
    end else begin
        y_L3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state45))) begin
        y_L3_ce0 = 1'b1;
    end else begin
        y_L3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) & (icmp_ln154_fu_617_p2 == 1'd1))) begin
        y_L3_we0 = 1'b1;
    end else begin
        y_L3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_separate_complex_u_fu_431_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln131_fu_474_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln138_fu_492_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & (icmp_ln141_fu_513_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state43 : begin
            if (((1'b1 == ap_CS_fsm_state43) & (icmp_ln151_fu_596_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            if (((1'b1 == ap_CS_fsm_state45) & (icmp_ln154_fu_617_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state56 : begin
            if (((1'b1 == ap_CS_fsm_state56) & (icmp_ln164_fu_650_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state68 : begin
            if (((grp_reconstruct_complex_s_fu_422_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state68))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end
        end
        ap_ST_fsm_state69 : begin
            if ((~((2'd1 == DNN_out_V_last_V_1_state) | (2'd1 == DNN_out_V_data_1_state) | ((1'b0 == DNN_out_TREADY) & (2'd3 == DNN_out_V_last_V_1_state)) | ((1'b0 == DNN_out_TREADY) & (2'd3 == DNN_out_V_data_1_state))) & (1'b1 == ap_CS_fsm_state69))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign DNN_out_TDATA = DNN_out_V_data_1_data_out;

assign DNN_out_TLAST = DNN_out_V_last_V_1_data_out;

assign DNN_out_TVALID = DNN_out_V_last_V_1_state[1'd0];

assign DNN_out_V_data_1_ack_in = DNN_out_V_data_1_state[1'd1];

assign DNN_out_V_data_1_ack_out = DNN_out_TREADY;

assign DNN_out_V_data_1_load_A = (~DNN_out_V_data_1_sel_wr & DNN_out_V_data_1_state_cmp_full);

assign DNN_out_V_data_1_load_B = (DNN_out_V_data_1_state_cmp_full & DNN_out_V_data_1_sel_wr);

assign DNN_out_V_data_1_sel = DNN_out_V_data_1_sel_rd;

assign DNN_out_V_data_1_state_cmp_full = ((DNN_out_V_data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign DNN_out_V_data_1_vld_in = grp_reconstruct_complex_s_fu_422_DNN_out_TVALID;

assign DNN_out_V_data_1_vld_out = DNN_out_V_data_1_state[1'd0];

assign DNN_out_V_last_V_1_ack_in = DNN_out_V_last_V_1_state[1'd1];

assign DNN_out_V_last_V_1_ack_out = DNN_out_TREADY;

assign DNN_out_V_last_V_1_load_A = (~DNN_out_V_last_V_1_sel_wr & DNN_out_V_last_V_1_state_cmp_full);

assign DNN_out_V_last_V_1_load_B = (DNN_out_V_last_V_1_state_cmp_full & DNN_out_V_last_V_1_sel_wr);

assign DNN_out_V_last_V_1_sel = DNN_out_V_last_V_1_sel_rd;

assign DNN_out_V_last_V_1_state_cmp_full = ((DNN_out_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign DNN_out_V_last_V_1_vld_in = grp_reconstruct_complex_s_fu_422_DNN_out_TVALID;

assign DNN_out_V_last_V_1_vld_out = DNN_out_V_last_V_1_state[1'd0];

assign L1_BIAS_address0 = zext_ln140_fu_504_p1;

assign L1_WEIGHTS_address0 = zext_ln142_1_fu_541_p1;

assign L2_BIAS_address0 = zext_ln153_fu_608_p1;

assign L2_WEIGHTS_address0 = zext_ln155_1_fu_645_p1;

assign LS_stream_TREADY = LS_stream_V_last_V_0_state[1'd1];

assign LS_stream_V_data_0_ack_in = LS_stream_V_data_0_state[1'd1];

assign LS_stream_V_data_0_load_A = (~LS_stream_V_data_0_sel_wr & LS_stream_V_data_0_state_cmp_full);

assign LS_stream_V_data_0_load_B = (LS_stream_V_data_0_state_cmp_full & LS_stream_V_data_0_sel_wr);

assign LS_stream_V_data_0_sel = LS_stream_V_data_0_sel_rd;

assign LS_stream_V_data_0_state_cmp_full = ((LS_stream_V_data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign LS_stream_V_data_0_vld_in = LS_stream_TVALID;

assign LS_stream_V_data_0_vld_out = LS_stream_V_data_0_state[1'd0];

assign LS_stream_V_last_V_0_ack_in = LS_stream_V_last_V_0_state[1'd1];

assign LS_stream_V_last_V_0_load_A = (~LS_stream_V_last_V_0_sel_wr & LS_stream_V_last_V_0_state_cmp_full);

assign LS_stream_V_last_V_0_load_B = (LS_stream_V_last_V_0_state_cmp_full & LS_stream_V_last_V_0_sel_wr);

assign LS_stream_V_last_V_0_sel = LS_stream_V_last_V_0_sel_rd;

assign LS_stream_V_last_V_0_state_cmp_full = ((LS_stream_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign LS_stream_V_last_V_0_vld_in = LS_stream_TVALID;

assign LS_stream_V_last_V_0_vld_out = LS_stream_V_last_V_0_state[1'd0];

assign add_ln142_1_fu_530_p2 = (phi_mul_reg_355 + 13'd52);

assign add_ln142_fu_536_p2 = (zext_ln140_1_reg_735 + phi_mul_reg_355);

assign add_ln155_1_fu_634_p2 = (phi_mul1_reg_400 + 13'd104);

assign add_ln155_fu_640_p2 = (zext_ln153_1_reg_801 + phi_mul1_reg_400);

assign and_ln110_fu_582_p2 = (tmp_1_reg_778 & or_ln110_fu_576_p2);

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state69 = ((2'd1 == DNN_out_V_last_V_1_state) | (2'd1 == DNN_out_V_data_1_state) | ((1'b0 == DNN_out_TREADY) & (2'd3 == DNN_out_V_last_V_1_state)) | ((1'b0 == DNN_out_TREADY) & (2'd3 == DNN_out_V_data_1_state)));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln110_fu_546_p1 = x_assign_reg_334;

assign grp_reconstruct_complex_s_fu_422_DNN_out_TREADY = ((ap_CS_fsm_state68 & DNN_out_V_last_V_1_ack_in) | (ap_CS_fsm_state68 & DNN_out_V_data_1_ack_in));

assign grp_reconstruct_complex_s_fu_422_ap_start = grp_reconstruct_complex_s_fu_422_ap_start_reg;

assign grp_separate_complex_u_fu_431_LS_stream_TVALID = LS_stream_V_last_V_0_state[1'd0];

assign grp_separate_complex_u_fu_431_ap_start = grp_separate_complex_u_fu_431_ap_start_reg;

assign i_1_fu_498_p2 = (i_0_i12_reg_322 + 6'd1);

assign i_2_fu_656_p2 = (i_0_i24_reg_411 + 7'd1);

assign i_3_fu_602_p2 = (i_0_i14_reg_366 + 7'd1);

assign i_fu_480_p2 = (i_0_i_reg_311 + 7'd1);

assign icmp_ln110_1_fu_570_p2 = ((trunc_ln110_fu_560_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln110_fu_564_p2 = ((tmp_fu_550_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln131_fu_474_p2 = ((i_0_i_reg_311 == 7'd104) ? 1'b1 : 1'b0);

assign icmp_ln138_fu_492_p2 = ((i_0_i12_reg_322 == 6'd52) ? 1'b1 : 1'b0);

assign icmp_ln141_fu_513_p2 = ((j_0_i_reg_344 == 7'd104) ? 1'b1 : 1'b0);

assign icmp_ln151_fu_596_p2 = ((i_0_i14_reg_366 == 7'd104) ? 1'b1 : 1'b0);

assign icmp_ln154_fu_617_p2 = ((j_0_i18_reg_389 == 6'd52) ? 1'b1 : 1'b0);

assign icmp_ln164_fu_650_p2 = ((i_0_i24_reg_411 == 7'd104) ? 1'b1 : 1'b0);

assign j_1_fu_623_p2 = (j_0_i18_reg_389 + 6'd1);

assign j_fu_519_p2 = (j_0_i_reg_344 + 7'd1);

assign mean_in_address0 = zext_ln132_fu_486_p1;

assign mean_o_address0 = zext_ln165_reg_852;

assign or_ln110_fu_576_p2 = (icmp_ln110_fu_564_p2 | icmp_ln110_1_fu_570_p2);

assign std_in_address0 = zext_ln132_reg_676;

assign std_o_address0 = zext_ln165_fu_662_p1;

assign tmp_fu_550_p4 = {{bitcast_ln110_fu_546_p1[30:23]}};

assign trunc_ln110_fu_560_p1 = bitcast_ln110_fu_546_p1[22:0];

assign y_L2_d0 = ((and_ln110_fu_582_p2[0:0] === 1'b1) ? 32'd0 : x_assign_reg_334);

assign zext_ln132_fu_486_p1 = i_0_i_reg_311;

assign zext_ln140_1_fu_509_p1 = i_0_i12_reg_322;

assign zext_ln140_fu_504_p1 = i_0_i12_reg_322;

assign zext_ln142_1_fu_541_p1 = add_ln142_fu_536_p2;

assign zext_ln142_fu_525_p1 = j_0_i_reg_344;

assign zext_ln153_1_fu_613_p1 = i_0_i14_reg_366;

assign zext_ln153_fu_608_p1 = i_0_i14_reg_366;

assign zext_ln155_1_fu_645_p1 = add_ln155_fu_640_p2;

assign zext_ln155_fu_629_p1 = j_0_i18_reg_389;

assign zext_ln165_fu_662_p1 = i_0_i24_reg_411;

always @ (posedge ap_clk) begin
    zext_ln132_reg_676[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln140_reg_725[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln140_1_reg_735[12:6] <= 7'b0000000;
    zext_ln153_reg_791[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln153_1_reg_801[12:7] <= 6'b000000;
    zext_ln165_reg_852[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //DNN_u
