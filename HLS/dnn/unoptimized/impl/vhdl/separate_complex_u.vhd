-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity separate_complex_u is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    LS_stream_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    LS_stream_TVALID : IN STD_LOGIC;
    LS_stream_TREADY : OUT STD_LOGIC;
    LS_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    sep_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sep_ce0 : OUT STD_LOGIC;
    sep_we0 : OUT STD_LOGIC;
    sep_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sep_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sep_ce1 : OUT STD_LOGIC;
    sep_we1 : OUT STD_LOGIC;
    sep_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of separate_complex_u is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_34 : STD_LOGIC_VECTOR (5 downto 0) := "110100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv7_34 : STD_LOGIC_VECTOR (6 downto 0) := "0110100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal LS_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln121_fu_90_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_96_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal i_0_reg_75 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln123_fu_130_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln124_fu_141_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln18_fu_106_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_M_imag_loa_fu_115_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln121_fu_86_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln124_fu_135_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_75_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln121_fu_90_p2 = ap_const_lv1_0) and (ap_const_logic_0 = LS_stream_TVALID))) and (icmp_ln121_fu_90_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_75 <= i_fu_96_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_75 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, LS_stream_TVALID, ap_CS_fsm_state2, icmp_ln121_fu_90_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln121_fu_90_p2 = ap_const_lv1_0) and (ap_const_logic_0 = LS_stream_TVALID))) and (icmp_ln121_fu_90_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((icmp_ln121_fu_90_p2 = ap_const_lv1_0) and (ap_const_logic_0 = LS_stream_TVALID))) and (icmp_ln121_fu_90_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    LS_stream_TDATA_blk_n_assign_proc : process(LS_stream_TVALID, ap_CS_fsm_state2, icmp_ln121_fu_90_p2)
    begin
        if (((icmp_ln121_fu_90_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            LS_stream_TDATA_blk_n <= LS_stream_TVALID;
        else 
            LS_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    LS_stream_TREADY_assign_proc : process(LS_stream_TVALID, ap_CS_fsm_state2, icmp_ln121_fu_90_p2)
    begin
        if ((not(((icmp_ln121_fu_90_p2 = ap_const_lv1_0) and (ap_const_logic_0 = LS_stream_TVALID))) and (icmp_ln121_fu_90_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            LS_stream_TREADY <= ap_const_logic_1;
        else 
            LS_stream_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    add_ln124_fu_135_p2 <= std_logic_vector(unsigned(ap_const_lv7_34) + unsigned(zext_ln121_fu_86_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state2_assign_proc : process(LS_stream_TVALID, icmp_ln121_fu_90_p2)
    begin
                ap_block_state2 <= ((icmp_ln121_fu_90_p2 = ap_const_lv1_0) and (ap_const_logic_0 = LS_stream_TVALID));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, LS_stream_TVALID, ap_CS_fsm_state2, icmp_ln121_fu_90_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((icmp_ln121_fu_90_p2 = ap_const_lv1_0) and (ap_const_logic_0 = LS_stream_TVALID))) and (icmp_ln121_fu_90_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(LS_stream_TVALID, ap_CS_fsm_state2, icmp_ln121_fu_90_p2)
    begin
        if ((not(((icmp_ln121_fu_90_p2 = ap_const_lv1_0) and (ap_const_logic_0 = LS_stream_TVALID))) and (icmp_ln121_fu_90_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_96_p2 <= std_logic_vector(unsigned(i_0_reg_75) + unsigned(ap_const_lv6_1));
    icmp_ln121_fu_90_p2 <= "1" when (i_0_reg_75 = ap_const_lv6_34) else "0";
    sep_address0 <= zext_ln123_fu_130_p1(7 - 1 downto 0);
    sep_address1 <= zext_ln124_fu_141_p1(7 - 1 downto 0);

    sep_ce0_assign_proc : process(LS_stream_TVALID, ap_CS_fsm_state2, icmp_ln121_fu_90_p2)
    begin
        if ((not(((icmp_ln121_fu_90_p2 = ap_const_lv1_0) and (ap_const_logic_0 = LS_stream_TVALID))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sep_ce0 <= ap_const_logic_1;
        else 
            sep_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sep_ce1_assign_proc : process(LS_stream_TVALID, ap_CS_fsm_state2, icmp_ln121_fu_90_p2)
    begin
        if ((not(((icmp_ln121_fu_90_p2 = ap_const_lv1_0) and (ap_const_logic_0 = LS_stream_TVALID))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sep_ce1 <= ap_const_logic_1;
        else 
            sep_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    sep_d0 <= trunc_ln18_fu_106_p1;
    sep_d1 <= tmp_data_M_imag_loa_fu_115_p4;

    sep_we0_assign_proc : process(LS_stream_TVALID, ap_CS_fsm_state2, icmp_ln121_fu_90_p2)
    begin
        if ((not(((icmp_ln121_fu_90_p2 = ap_const_lv1_0) and (ap_const_logic_0 = LS_stream_TVALID))) and (icmp_ln121_fu_90_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sep_we0 <= ap_const_logic_1;
        else 
            sep_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sep_we1_assign_proc : process(LS_stream_TVALID, ap_CS_fsm_state2, icmp_ln121_fu_90_p2)
    begin
        if ((not(((icmp_ln121_fu_90_p2 = ap_const_lv1_0) and (ap_const_logic_0 = LS_stream_TVALID))) and (icmp_ln121_fu_90_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sep_we1 <= ap_const_logic_1;
        else 
            sep_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_data_M_imag_loa_fu_115_p4 <= LS_stream_TDATA(63 downto 32);
    trunc_ln18_fu_106_p1 <= LS_stream_TDATA(32 - 1 downto 0);
    zext_ln121_fu_86_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_75),7));
    zext_ln123_fu_130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_75),64));
    zext_ln124_fu_141_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln124_fu_135_p2),64));
end behav;
