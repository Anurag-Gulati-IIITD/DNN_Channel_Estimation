-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DNN_u is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    LS_stream_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    LS_stream_TVALID : IN STD_LOGIC;
    LS_stream_TREADY : OUT STD_LOGIC;
    LS_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    DNN_out_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    DNN_out_TVALID : OUT STD_LOGIC;
    DNN_out_TREADY : IN STD_LOGIC;
    DNN_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of DNN_u is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "DNN_u,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=123458,HLS_SYN_TPT=none,HLS_SYN_MEM=45,HLS_SYN_DSP=5,HLS_SYN_FF=2199,HLS_SYN_LUT=3215,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (68 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (68 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (68 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (68 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (68 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (68 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (68 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (68 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (68 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (68 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (68 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (68 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv7_68 : STD_LOGIC_VECTOR (6 downto 0) := "1101000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_34 : STD_LOGIC_VECTOR (5 downto 0) := "110100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv13_34 : STD_LOGIC_VECTOR (12 downto 0) := "0000000110100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv13_68 : STD_LOGIC_VECTOR (12 downto 0) := "0000001101000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal LS_stream_V_data_0_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal LS_stream_V_data_0_vld_in : STD_LOGIC;
    signal LS_stream_V_data_0_vld_out : STD_LOGIC;
    signal LS_stream_V_data_0_ack_in : STD_LOGIC;
    signal LS_stream_V_data_0_ack_out : STD_LOGIC;
    signal LS_stream_V_data_0_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal LS_stream_V_data_0_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal LS_stream_V_data_0_sel_rd : STD_LOGIC := '0';
    signal LS_stream_V_data_0_sel_wr : STD_LOGIC := '0';
    signal LS_stream_V_data_0_sel : STD_LOGIC;
    signal LS_stream_V_data_0_load_A : STD_LOGIC;
    signal LS_stream_V_data_0_load_B : STD_LOGIC;
    signal LS_stream_V_data_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal LS_stream_V_data_0_state_cmp_full : STD_LOGIC;
    signal LS_stream_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal LS_stream_V_last_V_0_vld_in : STD_LOGIC;
    signal LS_stream_V_last_V_0_vld_out : STD_LOGIC;
    signal LS_stream_V_last_V_0_ack_in : STD_LOGIC;
    signal LS_stream_V_last_V_0_ack_out : STD_LOGIC;
    signal LS_stream_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal LS_stream_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal LS_stream_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal LS_stream_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal LS_stream_V_last_V_0_sel : STD_LOGIC;
    signal LS_stream_V_last_V_0_load_A : STD_LOGIC;
    signal LS_stream_V_last_V_0_load_B : STD_LOGIC;
    signal LS_stream_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal LS_stream_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal DNN_out_V_data_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal DNN_out_V_data_1_vld_in : STD_LOGIC;
    signal DNN_out_V_data_1_vld_out : STD_LOGIC;
    signal DNN_out_V_data_1_ack_in : STD_LOGIC;
    signal DNN_out_V_data_1_ack_out : STD_LOGIC;
    signal DNN_out_V_data_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal DNN_out_V_data_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal DNN_out_V_data_1_sel_rd : STD_LOGIC := '0';
    signal DNN_out_V_data_1_sel_wr : STD_LOGIC := '0';
    signal DNN_out_V_data_1_sel : STD_LOGIC;
    signal DNN_out_V_data_1_load_A : STD_LOGIC;
    signal DNN_out_V_data_1_load_B : STD_LOGIC;
    signal DNN_out_V_data_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal DNN_out_V_data_1_state_cmp_full : STD_LOGIC;
    signal DNN_out_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal DNN_out_V_last_V_1_vld_in : STD_LOGIC;
    signal DNN_out_V_last_V_1_vld_out : STD_LOGIC;
    signal DNN_out_V_last_V_1_ack_in : STD_LOGIC;
    signal DNN_out_V_last_V_1_ack_out : STD_LOGIC;
    signal DNN_out_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal DNN_out_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal DNN_out_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal DNN_out_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal DNN_out_V_last_V_1_sel : STD_LOGIC;
    signal DNN_out_V_last_V_1_load_A : STD_LOGIC;
    signal DNN_out_V_last_V_1_load_B : STD_LOGIC;
    signal DNN_out_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal DNN_out_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal mean_in_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mean_in_ce0 : STD_LOGIC;
    signal mean_in_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal std_in_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal std_in_ce0 : STD_LOGIC;
    signal std_in_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal L1_BIAS_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal L1_BIAS_ce0 : STD_LOGIC;
    signal L1_BIAS_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal L1_WEIGHTS_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal L1_WEIGHTS_ce0 : STD_LOGIC;
    signal L1_WEIGHTS_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal L2_BIAS_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal L2_BIAS_ce0 : STD_LOGIC;
    signal L2_BIAS_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal L2_WEIGHTS_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal L2_WEIGHTS_ce0 : STD_LOGIC;
    signal L2_WEIGHTS_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal std_o_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal std_o_ce0 : STD_LOGIC;
    signal std_o_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mean_o_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mean_o_ce0 : STD_LOGIC;
    signal mean_o_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_440_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_460 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal grp_fu_446_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_468 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal i_fu_480_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_671 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln132_fu_486_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln132_reg_676 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln131_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal LS_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal LS_data_load_reg_692 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal mean_in_load_reg_697 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal std_in_load_reg_707 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_450_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_reg_712 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal i_1_fu_498_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_720 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal zext_ln140_fu_504_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln140_reg_725 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln138_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln140_1_fu_509_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln140_1_reg_735 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal j_fu_519_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_748 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal add_ln142_1_fu_530_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln142_1_reg_753 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln141_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal norm_LS_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal norm_LS_data_load_reg_768 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal L1_WEIGHTS_load_reg_773 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_778 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal i_3_fu_602_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_3_reg_786 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal zext_ln153_fu_608_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln153_reg_791 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln151_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln153_1_fu_613_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln153_1_reg_801 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal j_1_fu_623_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_reg_814 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal add_ln155_1_fu_634_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln155_1_reg_819 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln154_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_L2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_L2_load_reg_834 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal L2_WEIGHTS_load_reg_839 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_fu_656_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_2_reg_847 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal zext_ln165_fu_662_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln165_reg_852 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln164_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_L3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_L3_load_reg_868 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal std_o_load_reg_873 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal mean_o_load_reg_883 : STD_LOGIC_VECTOR (31 downto 0);
    signal LS_data_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal LS_data_ce0 : STD_LOGIC;
    signal LS_data_we0 : STD_LOGIC;
    signal LS_data_ce1 : STD_LOGIC;
    signal LS_data_we1 : STD_LOGIC;
    signal norm_LS_data_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal norm_LS_data_ce0 : STD_LOGIC;
    signal norm_LS_data_we0 : STD_LOGIC;
    signal y_L2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_L2_ce0 : STD_LOGIC;
    signal y_L2_we0 : STD_LOGIC;
    signal y_L2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_L3_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal y_L3_ce0 : STD_LOGIC;
    signal y_L3_we0 : STD_LOGIC;
    signal denorm_DNN_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal denorm_DNN_ce0 : STD_LOGIC;
    signal denorm_DNN_we0 : STD_LOGIC;
    signal denorm_DNN_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal denorm_DNN_ce1 : STD_LOGIC;
    signal denorm_DNN_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reconstruct_complex_s_fu_422_ap_start : STD_LOGIC;
    signal grp_reconstruct_complex_s_fu_422_ap_done : STD_LOGIC;
    signal grp_reconstruct_complex_s_fu_422_ap_idle : STD_LOGIC;
    signal grp_reconstruct_complex_s_fu_422_ap_ready : STD_LOGIC;
    signal grp_reconstruct_complex_s_fu_422_y_L3_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_reconstruct_complex_s_fu_422_y_L3_ce0 : STD_LOGIC;
    signal grp_reconstruct_complex_s_fu_422_y_L3_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_reconstruct_complex_s_fu_422_y_L3_ce1 : STD_LOGIC;
    signal grp_reconstruct_complex_s_fu_422_DNN_out_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_reconstruct_complex_s_fu_422_DNN_out_TVALID : STD_LOGIC;
    signal grp_reconstruct_complex_s_fu_422_DNN_out_TREADY : STD_LOGIC;
    signal grp_reconstruct_complex_s_fu_422_DNN_out_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_separate_complex_u_fu_431_ap_start : STD_LOGIC;
    signal grp_separate_complex_u_fu_431_ap_done : STD_LOGIC;
    signal grp_separate_complex_u_fu_431_ap_idle : STD_LOGIC;
    signal grp_separate_complex_u_fu_431_ap_ready : STD_LOGIC;
    signal grp_separate_complex_u_fu_431_LS_stream_TVALID : STD_LOGIC;
    signal grp_separate_complex_u_fu_431_LS_stream_TREADY : STD_LOGIC;
    signal grp_separate_complex_u_fu_431_sep_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_separate_complex_u_fu_431_sep_ce0 : STD_LOGIC;
    signal grp_separate_complex_u_fu_431_sep_we0 : STD_LOGIC;
    signal grp_separate_complex_u_fu_431_sep_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_separate_complex_u_fu_431_sep_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_separate_complex_u_fu_431_sep_ce1 : STD_LOGIC;
    signal grp_separate_complex_u_fu_431_sep_we1 : STD_LOGIC;
    signal grp_separate_complex_u_fu_431_sep_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i_reg_311 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal i_0_i12_reg_322 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal x_assign_reg_334 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_i_reg_344 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul_reg_355 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_0_i14_reg_366 : STD_LOGIC_VECTOR (6 downto 0);
    signal before_relu_0_i17_reg_378 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_i18_reg_389 : STD_LOGIC_VECTOR (5 downto 0);
    signal phi_mul1_reg_400 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_0_i24_reg_411 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal grp_reconstruct_complex_s_fu_422_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal grp_separate_complex_u_fu_431_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln142_1_fu_541_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln142_fu_525_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln155_1_fu_645_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln155_fu_629_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_440_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_440_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal grp_fu_446_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_446_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal add_ln142_fu_536_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal bitcast_ln110_fu_546_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_550_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln110_fu_560_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln110_1_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln110_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln110_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln110_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln155_fu_640_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_440_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (68 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_block_state69 : BOOLEAN;

    component reconstruct_complex_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        y_L3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        y_L3_ce0 : OUT STD_LOGIC;
        y_L3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        y_L3_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        y_L3_ce1 : OUT STD_LOGIC;
        y_L3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        DNN_out_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        DNN_out_TVALID : OUT STD_LOGIC;
        DNN_out_TREADY : IN STD_LOGIC;
        DNN_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component separate_complex_u IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        LS_stream_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        LS_stream_TVALID : IN STD_LOGIC;
        LS_stream_TREADY : OUT STD_LOGIC;
        LS_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        sep_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        sep_ce0 : OUT STD_LOGIC;
        sep_we0 : OUT STD_LOGIC;
        sep_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        sep_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        sep_ce1 : OUT STD_LOGIC;
        sep_we1 : OUT STD_LOGIC;
        sep_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DNN_u_faddfsub_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DNN_u_fmul_32ns_3cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DNN_u_fdiv_32ns_3dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DNN_u_fcmp_32ns_3eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component DNN_u_mean_in IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DNN_u_std_in IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DNN_u_L1_BIAS IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DNN_u_L1_WEIGHTS IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DNN_u_L2_BIAS IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DNN_u_L2_WEIGHTS IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DNN_u_std_o IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DNN_u_mean_o IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DNN_u_LS_data IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DNN_u_norm_LS_data IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DNN_u_y_L2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DNN_u_denorm_DNN IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mean_in_U : component DNN_u_mean_in
    generic map (
        DataWidth => 32,
        AddressRange => 104,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => mean_in_address0,
        ce0 => mean_in_ce0,
        q0 => mean_in_q0);

    std_in_U : component DNN_u_std_in
    generic map (
        DataWidth => 32,
        AddressRange => 104,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => std_in_address0,
        ce0 => std_in_ce0,
        q0 => std_in_q0);

    L1_BIAS_U : component DNN_u_L1_BIAS
    generic map (
        DataWidth => 32,
        AddressRange => 52,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => L1_BIAS_address0,
        ce0 => L1_BIAS_ce0,
        q0 => L1_BIAS_q0);

    L1_WEIGHTS_U : component DNN_u_L1_WEIGHTS
    generic map (
        DataWidth => 32,
        AddressRange => 5408,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => L1_WEIGHTS_address0,
        ce0 => L1_WEIGHTS_ce0,
        q0 => L1_WEIGHTS_q0);

    L2_BIAS_U : component DNN_u_L2_BIAS
    generic map (
        DataWidth => 32,
        AddressRange => 104,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => L2_BIAS_address0,
        ce0 => L2_BIAS_ce0,
        q0 => L2_BIAS_q0);

    L2_WEIGHTS_U : component DNN_u_L2_WEIGHTS
    generic map (
        DataWidth => 32,
        AddressRange => 5408,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => L2_WEIGHTS_address0,
        ce0 => L2_WEIGHTS_ce0,
        q0 => L2_WEIGHTS_q0);

    std_o_U : component DNN_u_std_o
    generic map (
        DataWidth => 32,
        AddressRange => 104,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => std_o_address0,
        ce0 => std_o_ce0,
        q0 => std_o_q0);

    mean_o_U : component DNN_u_mean_o
    generic map (
        DataWidth => 32,
        AddressRange => 104,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => mean_o_address0,
        ce0 => mean_o_ce0,
        q0 => mean_o_q0);

    LS_data_U : component DNN_u_LS_data
    generic map (
        DataWidth => 32,
        AddressRange => 104,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => LS_data_address0,
        ce0 => LS_data_ce0,
        we0 => LS_data_we0,
        d0 => grp_separate_complex_u_fu_431_sep_d0,
        q0 => LS_data_q0,
        address1 => grp_separate_complex_u_fu_431_sep_address1,
        ce1 => LS_data_ce1,
        we1 => LS_data_we1,
        d1 => grp_separate_complex_u_fu_431_sep_d1);

    norm_LS_data_U : component DNN_u_norm_LS_data
    generic map (
        DataWidth => 32,
        AddressRange => 104,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => norm_LS_data_address0,
        ce0 => norm_LS_data_ce0,
        we0 => norm_LS_data_we0,
        d0 => tmp_1_i_reg_712,
        q0 => norm_LS_data_q0);

    y_L2_U : component DNN_u_y_L2
    generic map (
        DataWidth => 32,
        AddressRange => 52,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => y_L2_address0,
        ce0 => y_L2_ce0,
        we0 => y_L2_we0,
        d0 => y_L2_d0,
        q0 => y_L2_q0);

    y_L3_U : component DNN_u_norm_LS_data
    generic map (
        DataWidth => 32,
        AddressRange => 104,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => y_L3_address0,
        ce0 => y_L3_ce0,
        we0 => y_L3_we0,
        d0 => before_relu_0_i17_reg_378,
        q0 => y_L3_q0);

    denorm_DNN_U : component DNN_u_denorm_DNN
    generic map (
        DataWidth => 32,
        AddressRange => 104,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => denorm_DNN_address0,
        ce0 => denorm_DNN_ce0,
        we0 => denorm_DNN_we0,
        d0 => reg_460,
        q0 => denorm_DNN_q0,
        address1 => grp_reconstruct_complex_s_fu_422_y_L3_address1,
        ce1 => denorm_DNN_ce1,
        q1 => denorm_DNN_q1);

    grp_reconstruct_complex_s_fu_422 : component reconstruct_complex_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_reconstruct_complex_s_fu_422_ap_start,
        ap_done => grp_reconstruct_complex_s_fu_422_ap_done,
        ap_idle => grp_reconstruct_complex_s_fu_422_ap_idle,
        ap_ready => grp_reconstruct_complex_s_fu_422_ap_ready,
        y_L3_address0 => grp_reconstruct_complex_s_fu_422_y_L3_address0,
        y_L3_ce0 => grp_reconstruct_complex_s_fu_422_y_L3_ce0,
        y_L3_q0 => denorm_DNN_q0,
        y_L3_address1 => grp_reconstruct_complex_s_fu_422_y_L3_address1,
        y_L3_ce1 => grp_reconstruct_complex_s_fu_422_y_L3_ce1,
        y_L3_q1 => denorm_DNN_q1,
        DNN_out_TDATA => grp_reconstruct_complex_s_fu_422_DNN_out_TDATA,
        DNN_out_TVALID => grp_reconstruct_complex_s_fu_422_DNN_out_TVALID,
        DNN_out_TREADY => grp_reconstruct_complex_s_fu_422_DNN_out_TREADY,
        DNN_out_TLAST => grp_reconstruct_complex_s_fu_422_DNN_out_TLAST);

    grp_separate_complex_u_fu_431 : component separate_complex_u
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_separate_complex_u_fu_431_ap_start,
        ap_done => grp_separate_complex_u_fu_431_ap_done,
        ap_idle => grp_separate_complex_u_fu_431_ap_idle,
        ap_ready => grp_separate_complex_u_fu_431_ap_ready,
        LS_stream_TDATA => LS_stream_V_data_0_data_out,
        LS_stream_TVALID => grp_separate_complex_u_fu_431_LS_stream_TVALID,
        LS_stream_TREADY => grp_separate_complex_u_fu_431_LS_stream_TREADY,
        LS_stream_TLAST => LS_stream_V_last_V_0_data_out,
        sep_address0 => grp_separate_complex_u_fu_431_sep_address0,
        sep_ce0 => grp_separate_complex_u_fu_431_sep_ce0,
        sep_we0 => grp_separate_complex_u_fu_431_sep_we0,
        sep_d0 => grp_separate_complex_u_fu_431_sep_d0,
        sep_address1 => grp_separate_complex_u_fu_431_sep_address1,
        sep_ce1 => grp_separate_complex_u_fu_431_sep_ce1,
        sep_we1 => grp_separate_complex_u_fu_431_sep_we1,
        sep_d1 => grp_separate_complex_u_fu_431_sep_d1);

    DNN_u_faddfsub_32bkb_U7 : component DNN_u_faddfsub_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_440_p0,
        din1 => grp_fu_440_p1,
        opcode => grp_fu_440_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_440_p2);

    DNN_u_fmul_32ns_3cud_U8 : component DNN_u_fmul_32ns_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_446_p0,
        din1 => grp_fu_446_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_446_p2);

    DNN_u_fdiv_32ns_3dEe_U9 : component DNN_u_fdiv_32ns_3dEe
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_460,
        din1 => std_in_load_reg_707,
        ce => ap_const_logic_1,
        dout => grp_fu_450_p2);

    DNN_u_fcmp_32ns_3eOg_U10 : component DNN_u_fcmp_32ns_3eOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => x_assign_reg_334,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_454_p2);





    DNN_out_V_data_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                DNN_out_V_data_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = DNN_out_V_data_1_ack_out) and (ap_const_logic_1 = DNN_out_V_data_1_vld_out))) then 
                                        DNN_out_V_data_1_sel_rd <= not(DNN_out_V_data_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    DNN_out_V_data_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                DNN_out_V_data_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = DNN_out_V_data_1_ack_in) and (ap_const_logic_1 = DNN_out_V_data_1_vld_in))) then 
                                        DNN_out_V_data_1_sel_wr <= not(DNN_out_V_data_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    DNN_out_V_data_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                DNN_out_V_data_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = DNN_out_V_data_1_vld_in) and (ap_const_lv2_2 = DNN_out_V_data_1_state)) or ((ap_const_logic_0 = DNN_out_V_data_1_vld_in) and (ap_const_logic_1 = DNN_out_V_data_1_ack_out) and (ap_const_lv2_3 = DNN_out_V_data_1_state)))) then 
                    DNN_out_V_data_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_0 = DNN_out_TREADY) and (ap_const_lv2_1 = DNN_out_V_data_1_state)) or ((ap_const_logic_0 = DNN_out_TREADY) and (ap_const_logic_1 = DNN_out_V_data_1_vld_in) and (ap_const_lv2_3 = DNN_out_V_data_1_state)))) then 
                    DNN_out_V_data_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = DNN_out_V_data_1_vld_in) and (ap_const_logic_1 = DNN_out_V_data_1_ack_out))) and not(((ap_const_logic_0 = DNN_out_TREADY) and (ap_const_logic_1 = DNN_out_V_data_1_vld_in))) and (ap_const_lv2_3 = DNN_out_V_data_1_state)) or ((ap_const_logic_1 = DNN_out_V_data_1_ack_out) and (ap_const_lv2_1 = DNN_out_V_data_1_state)) or ((ap_const_logic_1 = DNN_out_V_data_1_vld_in) and (ap_const_lv2_2 = DNN_out_V_data_1_state)))) then 
                    DNN_out_V_data_1_state <= ap_const_lv2_3;
                else 
                    DNN_out_V_data_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    DNN_out_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                DNN_out_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = DNN_out_V_last_V_1_ack_out) and (ap_const_logic_1 = DNN_out_V_last_V_1_vld_out))) then 
                                        DNN_out_V_last_V_1_sel_rd <= not(DNN_out_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    DNN_out_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                DNN_out_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = DNN_out_V_last_V_1_ack_in) and (ap_const_logic_1 = DNN_out_V_last_V_1_vld_in))) then 
                                        DNN_out_V_last_V_1_sel_wr <= not(DNN_out_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    DNN_out_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                DNN_out_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = DNN_out_V_last_V_1_vld_in) and (ap_const_lv2_2 = DNN_out_V_last_V_1_state)) or ((ap_const_logic_0 = DNN_out_V_last_V_1_vld_in) and (ap_const_logic_1 = DNN_out_V_last_V_1_ack_out) and (ap_const_lv2_3 = DNN_out_V_last_V_1_state)))) then 
                    DNN_out_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_0 = DNN_out_TREADY) and (ap_const_lv2_1 = DNN_out_V_last_V_1_state)) or ((ap_const_logic_0 = DNN_out_TREADY) and (ap_const_logic_1 = DNN_out_V_last_V_1_vld_in) and (ap_const_lv2_3 = DNN_out_V_last_V_1_state)))) then 
                    DNN_out_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = DNN_out_V_last_V_1_vld_in) and (ap_const_logic_1 = DNN_out_V_last_V_1_ack_out))) and not(((ap_const_logic_0 = DNN_out_TREADY) and (ap_const_logic_1 = DNN_out_V_last_V_1_vld_in))) and (ap_const_lv2_3 = DNN_out_V_last_V_1_state)) or ((ap_const_logic_1 = DNN_out_V_last_V_1_ack_out) and (ap_const_lv2_1 = DNN_out_V_last_V_1_state)) or ((ap_const_logic_1 = DNN_out_V_last_V_1_vld_in) and (ap_const_lv2_2 = DNN_out_V_last_V_1_state)))) then 
                    DNN_out_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    DNN_out_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    LS_stream_V_data_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                LS_stream_V_data_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = LS_stream_V_data_0_ack_out) and (ap_const_logic_1 = LS_stream_V_data_0_vld_out))) then 
                                        LS_stream_V_data_0_sel_rd <= not(LS_stream_V_data_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    LS_stream_V_data_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                LS_stream_V_data_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = LS_stream_V_data_0_ack_in) and (ap_const_logic_1 = LS_stream_V_data_0_vld_in))) then 
                                        LS_stream_V_data_0_sel_wr <= not(LS_stream_V_data_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    LS_stream_V_data_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                LS_stream_V_data_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = LS_stream_V_data_0_state) and (ap_const_logic_0 = LS_stream_V_data_0_vld_in)) or ((ap_const_lv2_3 = LS_stream_V_data_0_state) and (ap_const_logic_0 = LS_stream_V_data_0_vld_in) and (ap_const_logic_1 = LS_stream_V_data_0_ack_out)))) then 
                    LS_stream_V_data_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = LS_stream_V_data_0_state) and (ap_const_logic_0 = LS_stream_V_data_0_ack_out)) or ((ap_const_lv2_3 = LS_stream_V_data_0_state) and (ap_const_logic_0 = LS_stream_V_data_0_ack_out) and (ap_const_logic_1 = LS_stream_V_data_0_vld_in)))) then 
                    LS_stream_V_data_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = LS_stream_V_data_0_vld_in) and (ap_const_logic_1 = LS_stream_V_data_0_ack_out))) and not(((ap_const_logic_0 = LS_stream_V_data_0_ack_out) and (ap_const_logic_1 = LS_stream_V_data_0_vld_in))) and (ap_const_lv2_3 = LS_stream_V_data_0_state)) or ((ap_const_lv2_1 = LS_stream_V_data_0_state) and (ap_const_logic_1 = LS_stream_V_data_0_ack_out)) or ((ap_const_lv2_2 = LS_stream_V_data_0_state) and (ap_const_logic_1 = LS_stream_V_data_0_vld_in)))) then 
                    LS_stream_V_data_0_state <= ap_const_lv2_3;
                else 
                    LS_stream_V_data_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    LS_stream_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                LS_stream_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = LS_stream_V_last_V_0_ack_out) and (ap_const_logic_1 = LS_stream_V_last_V_0_vld_out))) then 
                                        LS_stream_V_last_V_0_sel_rd <= not(LS_stream_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    LS_stream_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                LS_stream_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = LS_stream_V_last_V_0_ack_in) and (ap_const_logic_1 = LS_stream_V_last_V_0_vld_in))) then 
                                        LS_stream_V_last_V_0_sel_wr <= not(LS_stream_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    LS_stream_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                LS_stream_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = LS_stream_V_last_V_0_vld_in) and (ap_const_lv2_2 = LS_stream_V_last_V_0_state)) or ((ap_const_logic_0 = LS_stream_V_last_V_0_vld_in) and (ap_const_logic_1 = LS_stream_V_last_V_0_ack_out) and (ap_const_lv2_3 = LS_stream_V_last_V_0_state)))) then 
                    LS_stream_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_0 = LS_stream_V_last_V_0_ack_out) and (ap_const_lv2_1 = LS_stream_V_last_V_0_state)) or ((ap_const_logic_0 = LS_stream_V_last_V_0_ack_out) and (ap_const_logic_1 = LS_stream_V_last_V_0_vld_in) and (ap_const_lv2_3 = LS_stream_V_last_V_0_state)))) then 
                    LS_stream_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = LS_stream_V_last_V_0_vld_in) and (ap_const_logic_1 = LS_stream_V_last_V_0_ack_out))) and not(((ap_const_logic_0 = LS_stream_V_last_V_0_ack_out) and (ap_const_logic_1 = LS_stream_V_last_V_0_vld_in))) and (ap_const_lv2_3 = LS_stream_V_last_V_0_state)) or ((ap_const_logic_1 = LS_stream_V_last_V_0_ack_out) and (ap_const_lv2_1 = LS_stream_V_last_V_0_state)) or ((ap_const_logic_1 = LS_stream_V_last_V_0_vld_in) and (ap_const_lv2_2 = LS_stream_V_last_V_0_state)))) then 
                    LS_stream_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    LS_stream_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_reconstruct_complex_s_fu_422_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_reconstruct_complex_s_fu_422_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state56) and (icmp_ln164_fu_650_p2 = ap_const_lv1_1))) then 
                    grp_reconstruct_complex_s_fu_422_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_reconstruct_complex_s_fu_422_ap_ready = ap_const_logic_1)) then 
                    grp_reconstruct_complex_s_fu_422_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_separate_complex_u_fu_431_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_separate_complex_u_fu_431_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_separate_complex_u_fu_431_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_separate_complex_u_fu_431_ap_ready = ap_const_logic_1)) then 
                    grp_separate_complex_u_fu_431_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    before_relu_0_i17_reg_378_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                before_relu_0_i17_reg_378 <= grp_fu_440_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                before_relu_0_i17_reg_378 <= L2_BIAS_q0;
            end if; 
        end if;
    end process;

    i_0_i12_reg_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln131_fu_474_p2 = ap_const_lv1_1))) then 
                i_0_i12_reg_322 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                i_0_i12_reg_322 <= i_1_reg_720;
            end if; 
        end if;
    end process;

    i_0_i14_reg_366_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln138_fu_492_p2 = ap_const_lv1_1))) then 
                i_0_i14_reg_366 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state45) and (icmp_ln154_fu_617_p2 = ap_const_lv1_1))) then 
                i_0_i14_reg_366 <= i_3_reg_786;
            end if; 
        end if;
    end process;

    i_0_i24_reg_411_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) and (icmp_ln151_fu_596_p2 = ap_const_lv1_1))) then 
                i_0_i24_reg_411 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
                i_0_i24_reg_411 <= i_2_reg_847;
            end if; 
        end if;
    end process;

    i_0_i_reg_311_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                i_0_i_reg_311 <= i_reg_671;
            elsif (((grp_separate_complex_u_fu_431_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_i_reg_311 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_0_i18_reg_389_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                j_0_i18_reg_389 <= j_1_reg_814;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                j_0_i18_reg_389 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_0_i_reg_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                j_0_i_reg_344 <= j_reg_748;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                j_0_i_reg_344 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_400_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                phi_mul1_reg_400 <= add_ln155_1_reg_819;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                phi_mul1_reg_400 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_355_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                phi_mul_reg_355 <= add_ln142_1_reg_753;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                phi_mul_reg_355 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    x_assign_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                x_assign_reg_334 <= grp_fu_440_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                x_assign_reg_334 <= L1_BIAS_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = DNN_out_V_data_1_load_A)) then
                DNN_out_V_data_1_payload_A <= grp_reconstruct_complex_s_fu_422_DNN_out_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = DNN_out_V_data_1_load_B)) then
                DNN_out_V_data_1_payload_B <= grp_reconstruct_complex_s_fu_422_DNN_out_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = DNN_out_V_last_V_1_load_A)) then
                DNN_out_V_last_V_1_payload_A <= grp_reconstruct_complex_s_fu_422_DNN_out_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = DNN_out_V_last_V_1_load_B)) then
                DNN_out_V_last_V_1_payload_B <= grp_reconstruct_complex_s_fu_422_DNN_out_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                L1_WEIGHTS_load_reg_773 <= L1_WEIGHTS_q0;
                norm_LS_data_load_reg_768 <= norm_LS_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                L2_WEIGHTS_load_reg_839 <= L2_WEIGHTS_q0;
                y_L2_load_reg_834 <= y_L2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                LS_data_load_reg_692 <= LS_data_q0;
                mean_in_load_reg_697 <= mean_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = LS_stream_V_data_0_load_A)) then
                LS_stream_V_data_0_payload_A <= LS_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = LS_stream_V_data_0_load_B)) then
                LS_stream_V_data_0_payload_B <= LS_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = LS_stream_V_last_V_0_load_A)) then
                LS_stream_V_last_V_0_payload_A <= LS_stream_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = LS_stream_V_last_V_0_load_B)) then
                LS_stream_V_last_V_0_payload_B <= LS_stream_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln141_fu_513_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                add_ln142_1_reg_753 <= add_ln142_1_fu_530_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln154_fu_617_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                add_ln155_1_reg_819 <= add_ln155_1_fu_634_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                i_1_reg_720 <= i_1_fu_498_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then
                i_2_reg_847 <= i_2_fu_656_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                i_3_reg_786 <= i_3_fu_602_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_reg_671 <= i_fu_480_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                j_1_reg_814 <= j_1_fu_623_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                j_reg_748 <= j_fu_519_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then
                mean_o_load_reg_883 <= mean_o_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_460 <= grp_fu_440_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state35))) then
                reg_468 <= grp_fu_446_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                std_in_load_reg_707 <= std_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state57)) then
                std_o_load_reg_873 <= std_o_q0;
                y_L3_load_reg_868 <= y_L3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                tmp_1_i_reg_712 <= grp_fu_450_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                tmp_1_reg_778 <= grp_fu_454_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln131_fu_474_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    zext_ln132_reg_676(6 downto 0) <= zext_ln132_fu_486_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                    zext_ln140_1_reg_735(5 downto 0) <= zext_ln140_1_fu_509_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln138_fu_492_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    zext_ln140_reg_725(5 downto 0) <= zext_ln140_fu_504_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                    zext_ln153_1_reg_801(6 downto 0) <= zext_ln153_1_fu_613_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln151_fu_596_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    zext_ln153_reg_791(6 downto 0) <= zext_ln153_fu_608_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln164_fu_650_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state56))) then
                    zext_ln165_reg_852(6 downto 0) <= zext_ln165_fu_662_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln132_reg_676(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln140_reg_725(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln140_1_reg_735(12 downto 6) <= "0000000";
    zext_ln153_reg_791(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln153_1_reg_801(12 downto 7) <= "000000";
    zext_ln165_reg_852(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (DNN_out_TREADY, DNN_out_V_data_1_state, DNN_out_V_last_V_1_state, ap_CS_fsm, ap_CS_fsm_state4, icmp_ln131_fu_474_p2, ap_CS_fsm_state28, icmp_ln138_fu_492_p2, ap_CS_fsm_state30, icmp_ln141_fu_513_p2, ap_CS_fsm_state43, icmp_ln151_fu_596_p2, ap_CS_fsm_state45, icmp_ln154_fu_617_p2, ap_CS_fsm_state56, icmp_ln164_fu_650_p2, grp_reconstruct_complex_s_fu_422_ap_done, grp_separate_complex_u_fu_431_ap_done, ap_CS_fsm_state3, ap_CS_fsm_state68, ap_CS_fsm_state69)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_separate_complex_u_fu_431_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln131_fu_474_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln138_fu_492_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (icmp_ln141_fu_513_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state43 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state43) and (icmp_ln151_fu_596_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state45) and (icmp_ln154_fu_617_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state56 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state56) and (icmp_ln164_fu_650_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state68;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state68 => 
                if (((grp_reconstruct_complex_s_fu_422_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state68))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                else
                    ap_NS_fsm <= ap_ST_fsm_state68;
                end if;
            when ap_ST_fsm_state69 => 
                if ((not(((ap_const_lv2_1 = DNN_out_V_last_V_1_state) or (ap_const_lv2_1 = DNN_out_V_data_1_state) or ((ap_const_logic_0 = DNN_out_TREADY) and (ap_const_lv2_3 = DNN_out_V_last_V_1_state)) or ((ap_const_logic_0 = DNN_out_TREADY) and (ap_const_lv2_3 = DNN_out_V_data_1_state)))) and (ap_const_logic_1 = ap_CS_fsm_state69))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state69;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    DNN_out_TDATA <= DNN_out_V_data_1_data_out;
    DNN_out_TLAST <= DNN_out_V_last_V_1_data_out;
    DNN_out_TVALID <= DNN_out_V_last_V_1_state(0);
    DNN_out_V_data_1_ack_in <= DNN_out_V_data_1_state(1);
    DNN_out_V_data_1_ack_out <= DNN_out_TREADY;

    DNN_out_V_data_1_data_out_assign_proc : process(DNN_out_V_data_1_payload_A, DNN_out_V_data_1_payload_B, DNN_out_V_data_1_sel)
    begin
        if ((ap_const_logic_1 = DNN_out_V_data_1_sel)) then 
            DNN_out_V_data_1_data_out <= DNN_out_V_data_1_payload_B;
        else 
            DNN_out_V_data_1_data_out <= DNN_out_V_data_1_payload_A;
        end if; 
    end process;

    DNN_out_V_data_1_load_A <= (not(DNN_out_V_data_1_sel_wr) and DNN_out_V_data_1_state_cmp_full);
    DNN_out_V_data_1_load_B <= (DNN_out_V_data_1_state_cmp_full and DNN_out_V_data_1_sel_wr);
    DNN_out_V_data_1_sel <= DNN_out_V_data_1_sel_rd;
    DNN_out_V_data_1_state_cmp_full <= '0' when (DNN_out_V_data_1_state = ap_const_lv2_1) else '1';
    DNN_out_V_data_1_vld_in <= grp_reconstruct_complex_s_fu_422_DNN_out_TVALID;
    DNN_out_V_data_1_vld_out <= DNN_out_V_data_1_state(0);
    DNN_out_V_last_V_1_ack_in <= DNN_out_V_last_V_1_state(1);
    DNN_out_V_last_V_1_ack_out <= DNN_out_TREADY;

    DNN_out_V_last_V_1_data_out_assign_proc : process(DNN_out_V_last_V_1_payload_A, DNN_out_V_last_V_1_payload_B, DNN_out_V_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = DNN_out_V_last_V_1_sel)) then 
            DNN_out_V_last_V_1_data_out <= DNN_out_V_last_V_1_payload_B;
        else 
            DNN_out_V_last_V_1_data_out <= DNN_out_V_last_V_1_payload_A;
        end if; 
    end process;

    DNN_out_V_last_V_1_load_A <= (not(DNN_out_V_last_V_1_sel_wr) and DNN_out_V_last_V_1_state_cmp_full);
    DNN_out_V_last_V_1_load_B <= (DNN_out_V_last_V_1_state_cmp_full and DNN_out_V_last_V_1_sel_wr);
    DNN_out_V_last_V_1_sel <= DNN_out_V_last_V_1_sel_rd;
    DNN_out_V_last_V_1_state_cmp_full <= '0' when (DNN_out_V_last_V_1_state = ap_const_lv2_1) else '1';
    DNN_out_V_last_V_1_vld_in <= grp_reconstruct_complex_s_fu_422_DNN_out_TVALID;
    DNN_out_V_last_V_1_vld_out <= DNN_out_V_last_V_1_state(0);
    L1_BIAS_address0 <= zext_ln140_fu_504_p1(6 - 1 downto 0);

    L1_BIAS_ce0_assign_proc : process(ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            L1_BIAS_ce0 <= ap_const_logic_1;
        else 
            L1_BIAS_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    L1_WEIGHTS_address0 <= zext_ln142_1_fu_541_p1(13 - 1 downto 0);

    L1_WEIGHTS_ce0_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            L1_WEIGHTS_ce0 <= ap_const_logic_1;
        else 
            L1_WEIGHTS_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    L2_BIAS_address0 <= zext_ln153_fu_608_p1(7 - 1 downto 0);

    L2_BIAS_ce0_assign_proc : process(ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            L2_BIAS_ce0 <= ap_const_logic_1;
        else 
            L2_BIAS_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    L2_WEIGHTS_address0 <= zext_ln155_1_fu_645_p1(13 - 1 downto 0);

    L2_WEIGHTS_ce0_assign_proc : process(ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            L2_WEIGHTS_ce0 <= ap_const_logic_1;
        else 
            L2_WEIGHTS_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    LS_data_address0_assign_proc : process(ap_CS_fsm_state4, zext_ln132_fu_486_p1, grp_separate_complex_u_fu_431_sep_address0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            LS_data_address0 <= zext_ln132_fu_486_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            LS_data_address0 <= grp_separate_complex_u_fu_431_sep_address0;
        else 
            LS_data_address0 <= "XXXXXXX";
        end if; 
    end process;


    LS_data_ce0_assign_proc : process(ap_CS_fsm_state4, grp_separate_complex_u_fu_431_sep_ce0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            LS_data_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            LS_data_ce0 <= grp_separate_complex_u_fu_431_sep_ce0;
        else 
            LS_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    LS_data_ce1_assign_proc : process(grp_separate_complex_u_fu_431_sep_ce1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            LS_data_ce1 <= grp_separate_complex_u_fu_431_sep_ce1;
        else 
            LS_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    LS_data_we0_assign_proc : process(grp_separate_complex_u_fu_431_sep_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            LS_data_we0 <= grp_separate_complex_u_fu_431_sep_we0;
        else 
            LS_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    LS_data_we1_assign_proc : process(grp_separate_complex_u_fu_431_sep_we1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            LS_data_we1 <= grp_separate_complex_u_fu_431_sep_we1;
        else 
            LS_data_we1 <= ap_const_logic_0;
        end if; 
    end process;

    LS_stream_TREADY <= LS_stream_V_last_V_0_state(1);
    LS_stream_V_data_0_ack_in <= LS_stream_V_data_0_state(1);

    LS_stream_V_data_0_ack_out_assign_proc : process(grp_separate_complex_u_fu_431_LS_stream_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            LS_stream_V_data_0_ack_out <= grp_separate_complex_u_fu_431_LS_stream_TREADY;
        else 
            LS_stream_V_data_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    LS_stream_V_data_0_data_out_assign_proc : process(LS_stream_V_data_0_payload_A, LS_stream_V_data_0_payload_B, LS_stream_V_data_0_sel)
    begin
        if ((ap_const_logic_1 = LS_stream_V_data_0_sel)) then 
            LS_stream_V_data_0_data_out <= LS_stream_V_data_0_payload_B;
        else 
            LS_stream_V_data_0_data_out <= LS_stream_V_data_0_payload_A;
        end if; 
    end process;

    LS_stream_V_data_0_load_A <= (not(LS_stream_V_data_0_sel_wr) and LS_stream_V_data_0_state_cmp_full);
    LS_stream_V_data_0_load_B <= (LS_stream_V_data_0_state_cmp_full and LS_stream_V_data_0_sel_wr);
    LS_stream_V_data_0_sel <= LS_stream_V_data_0_sel_rd;
    LS_stream_V_data_0_state_cmp_full <= '0' when (LS_stream_V_data_0_state = ap_const_lv2_1) else '1';
    LS_stream_V_data_0_vld_in <= LS_stream_TVALID;
    LS_stream_V_data_0_vld_out <= LS_stream_V_data_0_state(0);
    LS_stream_V_last_V_0_ack_in <= LS_stream_V_last_V_0_state(1);

    LS_stream_V_last_V_0_ack_out_assign_proc : process(grp_separate_complex_u_fu_431_LS_stream_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            LS_stream_V_last_V_0_ack_out <= grp_separate_complex_u_fu_431_LS_stream_TREADY;
        else 
            LS_stream_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    LS_stream_V_last_V_0_data_out_assign_proc : process(LS_stream_V_last_V_0_payload_A, LS_stream_V_last_V_0_payload_B, LS_stream_V_last_V_0_sel)
    begin
        if ((ap_const_logic_1 = LS_stream_V_last_V_0_sel)) then 
            LS_stream_V_last_V_0_data_out <= LS_stream_V_last_V_0_payload_B;
        else 
            LS_stream_V_last_V_0_data_out <= LS_stream_V_last_V_0_payload_A;
        end if; 
    end process;

    LS_stream_V_last_V_0_load_A <= (not(LS_stream_V_last_V_0_sel_wr) and LS_stream_V_last_V_0_state_cmp_full);
    LS_stream_V_last_V_0_load_B <= (LS_stream_V_last_V_0_state_cmp_full and LS_stream_V_last_V_0_sel_wr);
    LS_stream_V_last_V_0_sel <= LS_stream_V_last_V_0_sel_rd;
    LS_stream_V_last_V_0_state_cmp_full <= '0' when (LS_stream_V_last_V_0_state = ap_const_lv2_1) else '1';
    LS_stream_V_last_V_0_vld_in <= LS_stream_TVALID;
    LS_stream_V_last_V_0_vld_out <= LS_stream_V_last_V_0_state(0);
    add_ln142_1_fu_530_p2 <= std_logic_vector(unsigned(phi_mul_reg_355) + unsigned(ap_const_lv13_34));
    add_ln142_fu_536_p2 <= std_logic_vector(unsigned(zext_ln140_1_reg_735) + unsigned(phi_mul_reg_355));
    add_ln155_1_fu_634_p2 <= std_logic_vector(unsigned(phi_mul1_reg_400) + unsigned(ap_const_lv13_68));
    add_ln155_fu_640_p2 <= std_logic_vector(unsigned(zext_ln153_1_reg_801) + unsigned(phi_mul1_reg_400));
    and_ln110_fu_582_p2 <= (tmp_1_reg_778 and or_ln110_fu_576_p2);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state69_assign_proc : process(DNN_out_TREADY, DNN_out_V_data_1_state, DNN_out_V_last_V_1_state)
    begin
                ap_block_state69 <= ((ap_const_lv2_1 = DNN_out_V_last_V_1_state) or (ap_const_lv2_1 = DNN_out_V_data_1_state) or ((ap_const_logic_0 = DNN_out_TREADY) and (ap_const_lv2_3 = DNN_out_V_last_V_1_state)) or ((ap_const_logic_0 = DNN_out_TREADY) and (ap_const_lv2_3 = DNN_out_V_data_1_state)));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln110_fu_546_p1 <= x_assign_reg_334;

    denorm_DNN_address0_assign_proc : process(zext_ln165_reg_852, grp_reconstruct_complex_s_fu_422_y_L3_address0, ap_CS_fsm_state67, ap_CS_fsm_state68)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            denorm_DNN_address0 <= zext_ln165_reg_852(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            denorm_DNN_address0 <= grp_reconstruct_complex_s_fu_422_y_L3_address0;
        else 
            denorm_DNN_address0 <= "XXXXXXX";
        end if; 
    end process;


    denorm_DNN_ce0_assign_proc : process(grp_reconstruct_complex_s_fu_422_y_L3_ce0, ap_CS_fsm_state67, ap_CS_fsm_state68)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            denorm_DNN_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            denorm_DNN_ce0 <= grp_reconstruct_complex_s_fu_422_y_L3_ce0;
        else 
            denorm_DNN_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    denorm_DNN_ce1_assign_proc : process(grp_reconstruct_complex_s_fu_422_y_L3_ce1, ap_CS_fsm_state68)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            denorm_DNN_ce1 <= grp_reconstruct_complex_s_fu_422_y_L3_ce1;
        else 
            denorm_DNN_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    denorm_DNN_we0_assign_proc : process(ap_CS_fsm_state67)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            denorm_DNN_we0 <= ap_const_logic_1;
        else 
            denorm_DNN_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_440_opcode_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state36, ap_CS_fsm_state51, ap_CS_fsm_state62)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_440_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            grp_fu_440_opcode <= ap_const_lv2_0;
        else 
            grp_fu_440_opcode <= "XX";
        end if; 
    end process;


    grp_fu_440_p0_assign_proc : process(reg_468, LS_data_load_reg_692, x_assign_reg_334, before_relu_0_i17_reg_378, ap_CS_fsm_state6, ap_CS_fsm_state36, ap_CS_fsm_state51, ap_CS_fsm_state62)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            grp_fu_440_p0 <= reg_468;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_fu_440_p0 <= before_relu_0_i17_reg_378;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_440_p0 <= x_assign_reg_334;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_440_p0 <= LS_data_load_reg_692;
        else 
            grp_fu_440_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_440_p1_assign_proc : process(reg_468, mean_in_load_reg_697, mean_o_load_reg_883, ap_CS_fsm_state6, ap_CS_fsm_state36, ap_CS_fsm_state51, ap_CS_fsm_state62)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            grp_fu_440_p1 <= mean_o_load_reg_883;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            grp_fu_440_p1 <= reg_468;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_440_p1 <= mean_in_load_reg_697;
        else 
            grp_fu_440_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_446_p0_assign_proc : process(norm_LS_data_load_reg_768, y_L2_load_reg_834, y_L3_load_reg_868, ap_CS_fsm_state32, ap_CS_fsm_state47, ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            grp_fu_446_p0 <= y_L3_load_reg_868;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_446_p0 <= y_L2_load_reg_834;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_446_p0 <= norm_LS_data_load_reg_768;
        else 
            grp_fu_446_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_446_p1_assign_proc : process(L1_WEIGHTS_load_reg_773, L2_WEIGHTS_load_reg_839, std_o_load_reg_873, ap_CS_fsm_state32, ap_CS_fsm_state47, ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            grp_fu_446_p1 <= std_o_load_reg_873;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_446_p1 <= L2_WEIGHTS_load_reg_839;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_446_p1 <= L1_WEIGHTS_load_reg_773;
        else 
            grp_fu_446_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_reconstruct_complex_s_fu_422_DNN_out_TREADY <= ((ap_CS_fsm_state68 and DNN_out_V_last_V_1_ack_in) or (ap_CS_fsm_state68 and DNN_out_V_data_1_ack_in));
    grp_reconstruct_complex_s_fu_422_ap_start <= grp_reconstruct_complex_s_fu_422_ap_start_reg;
    grp_separate_complex_u_fu_431_LS_stream_TVALID <= LS_stream_V_last_V_0_state(0);
    grp_separate_complex_u_fu_431_ap_start <= grp_separate_complex_u_fu_431_ap_start_reg;
    i_1_fu_498_p2 <= std_logic_vector(unsigned(i_0_i12_reg_322) + unsigned(ap_const_lv6_1));
    i_2_fu_656_p2 <= std_logic_vector(unsigned(i_0_i24_reg_411) + unsigned(ap_const_lv7_1));
    i_3_fu_602_p2 <= std_logic_vector(unsigned(i_0_i14_reg_366) + unsigned(ap_const_lv7_1));
    i_fu_480_p2 <= std_logic_vector(unsigned(i_0_i_reg_311) + unsigned(ap_const_lv7_1));
    icmp_ln110_1_fu_570_p2 <= "1" when (trunc_ln110_fu_560_p1 = ap_const_lv23_0) else "0";
    icmp_ln110_fu_564_p2 <= "0" when (tmp_fu_550_p4 = ap_const_lv8_FF) else "1";
    icmp_ln131_fu_474_p2 <= "1" when (i_0_i_reg_311 = ap_const_lv7_68) else "0";
    icmp_ln138_fu_492_p2 <= "1" when (i_0_i12_reg_322 = ap_const_lv6_34) else "0";
    icmp_ln141_fu_513_p2 <= "1" when (j_0_i_reg_344 = ap_const_lv7_68) else "0";
    icmp_ln151_fu_596_p2 <= "1" when (i_0_i14_reg_366 = ap_const_lv7_68) else "0";
    icmp_ln154_fu_617_p2 <= "1" when (j_0_i18_reg_389 = ap_const_lv6_34) else "0";
    icmp_ln164_fu_650_p2 <= "1" when (i_0_i24_reg_411 = ap_const_lv7_68) else "0";
    j_1_fu_623_p2 <= std_logic_vector(unsigned(j_0_i18_reg_389) + unsigned(ap_const_lv6_1));
    j_fu_519_p2 <= std_logic_vector(unsigned(j_0_i_reg_344) + unsigned(ap_const_lv7_1));
    mean_in_address0 <= zext_ln132_fu_486_p1(7 - 1 downto 0);

    mean_in_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            mean_in_ce0 <= ap_const_logic_1;
        else 
            mean_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mean_o_address0 <= zext_ln165_reg_852(7 - 1 downto 0);

    mean_o_ce0_assign_proc : process(ap_CS_fsm_state60)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            mean_o_ce0 <= ap_const_logic_1;
        else 
            mean_o_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    norm_LS_data_address0_assign_proc : process(zext_ln132_reg_676, ap_CS_fsm_state30, ap_CS_fsm_state27, zext_ln142_fu_525_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            norm_LS_data_address0 <= zext_ln142_fu_525_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            norm_LS_data_address0 <= zext_ln132_reg_676(7 - 1 downto 0);
        else 
            norm_LS_data_address0 <= "XXXXXXX";
        end if; 
    end process;


    norm_LS_data_ce0_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            norm_LS_data_ce0 <= ap_const_logic_1;
        else 
            norm_LS_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    norm_LS_data_we0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            norm_LS_data_we0 <= ap_const_logic_1;
        else 
            norm_LS_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln110_fu_576_p2 <= (icmp_ln110_fu_564_p2 or icmp_ln110_1_fu_570_p2);
    std_in_address0 <= zext_ln132_reg_676(7 - 1 downto 0);

    std_in_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            std_in_ce0 <= ap_const_logic_1;
        else 
            std_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    std_o_address0 <= zext_ln165_fu_662_p1(7 - 1 downto 0);

    std_o_ce0_assign_proc : process(ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            std_o_ce0 <= ap_const_logic_1;
        else 
            std_o_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_550_p4 <= bitcast_ln110_fu_546_p1(30 downto 23);
    trunc_ln110_fu_560_p1 <= bitcast_ln110_fu_546_p1(23 - 1 downto 0);

    y_L2_address0_assign_proc : process(zext_ln140_reg_725, ap_CS_fsm_state45, ap_CS_fsm_state42, zext_ln155_fu_629_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            y_L2_address0 <= zext_ln155_fu_629_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            y_L2_address0 <= zext_ln140_reg_725(6 - 1 downto 0);
        else 
            y_L2_address0 <= "XXXXXX";
        end if; 
    end process;


    y_L2_ce0_assign_proc : process(ap_CS_fsm_state45, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            y_L2_ce0 <= ap_const_logic_1;
        else 
            y_L2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    y_L2_d0 <= 
        ap_const_lv32_0 when (and_ln110_fu_582_p2(0) = '1') else 
        x_assign_reg_334;

    y_L2_we0_assign_proc : process(ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            y_L2_we0 <= ap_const_logic_1;
        else 
            y_L2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y_L3_address0_assign_proc : process(zext_ln153_reg_791, ap_CS_fsm_state45, ap_CS_fsm_state56, zext_ln165_fu_662_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            y_L3_address0 <= zext_ln165_fu_662_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            y_L3_address0 <= zext_ln153_reg_791(7 - 1 downto 0);
        else 
            y_L3_address0 <= "XXXXXXX";
        end if; 
    end process;


    y_L3_ce0_assign_proc : process(ap_CS_fsm_state45, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            y_L3_ce0 <= ap_const_logic_1;
        else 
            y_L3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_L3_we0_assign_proc : process(ap_CS_fsm_state45, icmp_ln154_fu_617_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) and (icmp_ln154_fu_617_p2 = ap_const_lv1_1))) then 
            y_L3_we0 <= ap_const_logic_1;
        else 
            y_L3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln132_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_311),64));
    zext_ln140_1_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i12_reg_322),13));
    zext_ln140_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i12_reg_322),64));
    zext_ln142_1_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln142_fu_536_p2),64));
    zext_ln142_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_reg_344),64));
    zext_ln153_1_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i14_reg_366),13));
    zext_ln153_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i14_reg_366),64));
    zext_ln155_1_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln155_fu_640_p2),64));
    zext_ln155_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i18_reg_389),64));
    zext_ln165_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i24_reg_411),64));
end behav;
