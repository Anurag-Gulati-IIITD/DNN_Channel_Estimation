// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module separate_complex_wlo (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        LS_stream_TDATA,
        LS_stream_TVALID,
        LS_stream_TREADY,
        LS_stream_TLAST,
        sep_V_address0,
        sep_V_ce0,
        sep_V_we0,
        sep_V_d0,
        sep_V_address1,
        sep_V_ce1,
        sep_V_we1,
        sep_V_d1
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] LS_stream_TDATA;
input   LS_stream_TVALID;
output   LS_stream_TREADY;
input  [0:0] LS_stream_TLAST;
output  [6:0] sep_V_address0;
output   sep_V_ce0;
output   sep_V_we0;
output  [15:0] sep_V_d0;
output  [6:0] sep_V_address1;
output   sep_V_ce1;
output   sep_V_we1;
output  [15:0] sep_V_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg LS_stream_TREADY;
reg sep_V_ce0;
reg sep_V_we0;
reg sep_V_ce1;
reg sep_V_we1;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    LS_stream_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln604_fu_141_p2;
reg   [5:0] i_0_reg_123;
reg   [5:0] i_0_reg_123_pp0_iter1_reg;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [5:0] i_0_reg_123_pp0_iter2_reg;
reg   [0:0] icmp_ln604_reg_747;
reg   [0:0] icmp_ln604_reg_747_pp0_iter1_reg;
reg   [0:0] icmp_ln604_reg_747_pp0_iter2_reg;
wire   [5:0] i_fu_147_p2;
reg   [5:0] i_reg_751;
reg   [63:0] LS_stream_V_data_val_reg_756;
reg   [63:0] LS_stream_V_data_val_reg_756_pp0_iter1_reg;
reg   [63:0] LS_stream_V_data_val_reg_756_pp0_iter2_reg;
wire   [53:0] man_V_2_fu_233_p3;
reg   [53:0] man_V_2_reg_772;
wire   [0:0] icmp_ln571_fu_241_p2;
reg   [0:0] icmp_ln571_reg_777;
wire   [0:0] icmp_ln581_fu_253_p2;
reg   [0:0] icmp_ln581_reg_783;
wire  signed [11:0] sh_amt_fu_271_p3;
reg  signed [11:0] sh_amt_reg_789;
wire   [0:0] icmp_ln582_fu_279_p2;
reg   [0:0] icmp_ln582_reg_795;
wire   [15:0] trunc_ln583_fu_285_p1;
reg   [15:0] trunc_ln583_reg_801;
reg   [15:0] trunc_ln583_reg_801_pp0_iter2_reg;
reg   [7:0] tmp_4_reg_807;
wire   [53:0] man_V_5_fu_351_p3;
reg   [53:0] man_V_5_reg_812;
wire   [0:0] icmp_ln571_1_fu_359_p2;
reg   [0:0] icmp_ln571_1_reg_817;
wire   [0:0] icmp_ln581_1_fu_371_p2;
reg   [0:0] icmp_ln581_1_reg_823;
wire  signed [11:0] sh_amt_1_fu_389_p3;
reg  signed [11:0] sh_amt_1_reg_829;
wire   [0:0] icmp_ln582_1_fu_397_p2;
reg   [0:0] icmp_ln582_1_reg_835;
wire   [15:0] trunc_ln583_1_fu_403_p1;
reg   [15:0] trunc_ln583_1_reg_841;
reg   [15:0] trunc_ln583_1_reg_841_pp0_iter2_reg;
reg   [7:0] tmp_7_reg_847;
wire  signed [31:0] sext_ln581_fu_417_p1;
reg  signed [31:0] sext_ln581_reg_852;
wire   [0:0] and_ln603_fu_497_p2;
reg   [0:0] and_ln603_reg_857;
wire   [0:0] or_ln603_fu_503_p2;
reg   [0:0] or_ln603_reg_862;
wire   [15:0] select_ln603_1_fu_509_p3;
reg   [15:0] select_ln603_1_reg_867;
wire   [0:0] or_ln603_2_fu_522_p2;
reg   [0:0] or_ln603_2_reg_872;
wire  signed [31:0] sext_ln581_1_fu_528_p1;
reg  signed [31:0] sext_ln581_1_reg_877;
wire   [0:0] and_ln603_1_fu_608_p2;
reg   [0:0] and_ln603_1_reg_882;
wire   [0:0] or_ln603_3_fu_614_p2;
reg   [0:0] or_ln603_3_reg_887;
wire   [15:0] select_ln603_5_fu_620_p3;
reg   [15:0] select_ln603_5_reg_892;
wire   [0:0] or_ln603_5_fu_633_p2;
reg   [0:0] or_ln603_5_reg_897;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg   [5:0] ap_phi_mux_i_0_phi_fu_127_p4;
wire   [63:0] zext_ln607_fu_643_p1;
wire   [63:0] zext_ln608_fu_698_p1;
wire   [31:0] grp_fu_135_p0;
wire   [31:0] grp_fu_138_p0;
wire   [31:0] trunc_ln28_fu_157_p1;
wire   [31:0] v_assign_1_new8_fu_166_p4;
wire   [63:0] grp_fu_135_p1;
wire   [63:0] ireg_V_fu_181_p1;
wire   [10:0] exp_tmp_V_fu_197_p4;
wire   [51:0] trunc_ln565_fu_211_p1;
wire   [52:0] tmp_1_fu_215_p3;
wire   [53:0] p_Result_1_fu_223_p1;
wire   [0:0] p_Result_s_fu_189_p3;
wire   [53:0] man_V_1_fu_227_p2;
wire   [62:0] trunc_ln556_fu_185_p1;
wire   [11:0] zext_ln461_fu_207_p1;
wire   [11:0] F2_fu_247_p2;
wire   [11:0] add_ln581_fu_259_p2;
wire   [11:0] sub_ln581_fu_265_p2;
wire   [63:0] grp_fu_138_p1;
wire   [63:0] ireg_V_1_fu_299_p1;
wire   [10:0] exp_tmp_V_1_fu_315_p4;
wire   [51:0] trunc_ln565_1_fu_329_p1;
wire   [52:0] tmp_2_fu_333_p3;
wire   [53:0] p_Result_3_fu_341_p1;
wire   [0:0] p_Result_2_fu_307_p3;
wire   [53:0] man_V_4_fu_345_p2;
wire   [62:0] trunc_ln556_1_fu_303_p1;
wire   [11:0] zext_ln461_1_fu_325_p1;
wire   [11:0] F2_1_fu_365_p2;
wire   [11:0] add_ln581_1_fu_377_p2;
wire   [11:0] sub_ln581_1_fu_383_p2;
wire   [53:0] zext_ln586_fu_430_p1;
wire   [53:0] ashr_ln586_fu_434_p2;
wire   [0:0] xor_ln571_fu_443_p2;
wire   [0:0] or_ln582_fu_453_p2;
wire   [0:0] xor_ln582_fu_457_p2;
wire   [0:0] and_ln581_fu_463_p2;
wire   [0:0] icmp_ln585_fu_420_p2;
wire   [0:0] xor_ln585_fu_474_p2;
wire   [0:0] or_ln581_fu_486_p2;
wire   [0:0] icmp_ln603_fu_425_p2;
wire   [0:0] xor_ln581_fu_491_p2;
wire   [0:0] and_ln585_1_fu_480_p2;
wire   [0:0] and_ln585_fu_468_p2;
wire   [15:0] trunc_ln586_fu_439_p1;
wire   [0:0] and_ln582_fu_448_p2;
wire   [0:0] or_ln603_1_fu_516_p2;
wire   [53:0] zext_ln586_1_fu_541_p1;
wire   [53:0] ashr_ln586_1_fu_545_p2;
wire   [0:0] xor_ln571_1_fu_554_p2;
wire   [0:0] or_ln582_1_fu_564_p2;
wire   [0:0] xor_ln582_1_fu_568_p2;
wire   [0:0] and_ln581_1_fu_574_p2;
wire   [0:0] icmp_ln585_1_fu_531_p2;
wire   [0:0] xor_ln585_1_fu_585_p2;
wire   [0:0] or_ln581_1_fu_597_p2;
wire   [0:0] icmp_ln603_1_fu_536_p2;
wire   [0:0] xor_ln581_1_fu_602_p2;
wire   [0:0] and_ln585_3_fu_591_p2;
wire   [0:0] and_ln585_2_fu_579_p2;
wire   [15:0] trunc_ln586_1_fu_550_p1;
wire   [0:0] and_ln582_1_fu_559_p2;
wire   [0:0] or_ln603_4_fu_627_p2;
wire   [0:0] tmp_5_fu_648_p3;
wire   [15:0] sext_ln581cast_fu_663_p1;
wire   [15:0] shl_ln604_fu_666_p2;
wire   [15:0] select_ln588_fu_655_p3;
wire   [15:0] select_ln603_fu_671_p3;
wire   [15:0] select_ln603_2_fu_678_p3;
wire   [6:0] zext_ln604_fu_639_p1;
wire   [6:0] add_ln608_fu_692_p2;
wire   [0:0] tmp_8_fu_703_p3;
wire   [15:0] sext_ln581_1cast_fu_718_p1;
wire   [15:0] shl_ln604_1_fu_721_p2;
wire   [15:0] select_ln588_1_fu_710_p3;
wire   [15:0] select_ln603_4_fu_726_p3;
wire   [15:0] select_ln603_6_fu_733_p3;
reg    grp_fu_135_ce;
reg    grp_fu_138_ce;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

DNN_wlo_166_fpextbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
DNN_wlo_166_fpextbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_135_p0),
    .ce(grp_fu_135_ce),
    .dout(grp_fu_135_p1)
);

DNN_wlo_166_fpextbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
DNN_wlo_166_fpextbkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_138_p0),
    .ce(grp_fu_138_ce),
    .dout(grp_fu_138_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln604_reg_747 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_0_reg_123 <= i_reg_751;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_123 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln604_fu_141_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        LS_stream_V_data_val_reg_756 <= LS_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        LS_stream_V_data_val_reg_756_pp0_iter1_reg <= LS_stream_V_data_val_reg_756;
        i_0_reg_123_pp0_iter1_reg <= i_0_reg_123;
        icmp_ln604_reg_747 <= icmp_ln604_fu_141_p2;
        icmp_ln604_reg_747_pp0_iter1_reg <= icmp_ln604_reg_747;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        LS_stream_V_data_val_reg_756_pp0_iter2_reg <= LS_stream_V_data_val_reg_756_pp0_iter1_reg;
        i_0_reg_123_pp0_iter2_reg <= i_0_reg_123_pp0_iter1_reg;
        icmp_ln604_reg_747_pp0_iter2_reg <= icmp_ln604_reg_747_pp0_iter1_reg;
        trunc_ln583_1_reg_841_pp0_iter2_reg <= trunc_ln583_1_reg_841;
        trunc_ln583_reg_801_pp0_iter2_reg <= trunc_ln583_reg_801;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln604_reg_747_pp0_iter1_reg == 1'd0))) begin
        and_ln603_1_reg_882 <= and_ln603_1_fu_608_p2;
        and_ln603_reg_857 <= and_ln603_fu_497_p2;
        or_ln603_2_reg_872 <= or_ln603_2_fu_522_p2;
        or_ln603_3_reg_887 <= or_ln603_3_fu_614_p2;
        or_ln603_5_reg_897 <= or_ln603_5_fu_633_p2;
        or_ln603_reg_862 <= or_ln603_fu_503_p2;
        select_ln603_1_reg_867 <= select_ln603_1_fu_509_p3;
        select_ln603_5_reg_892 <= select_ln603_5_fu_620_p3;
        sext_ln581_1_reg_877 <= sext_ln581_1_fu_528_p1;
        sext_ln581_reg_852 <= sext_ln581_fu_417_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_751 <= i_fu_147_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln604_reg_747 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln571_1_reg_817 <= icmp_ln571_1_fu_359_p2;
        icmp_ln571_reg_777 <= icmp_ln571_fu_241_p2;
        icmp_ln581_1_reg_823 <= icmp_ln581_1_fu_371_p2;
        icmp_ln581_reg_783 <= icmp_ln581_fu_253_p2;
        icmp_ln582_1_reg_835 <= icmp_ln582_1_fu_397_p2;
        icmp_ln582_reg_795 <= icmp_ln582_fu_279_p2;
        man_V_2_reg_772 <= man_V_2_fu_233_p3;
        man_V_5_reg_812 <= man_V_5_fu_351_p3;
        sh_amt_1_reg_829 <= sh_amt_1_fu_389_p3;
        sh_amt_reg_789 <= sh_amt_fu_271_p3;
        tmp_4_reg_807 <= {{sh_amt_fu_271_p3[11:4]}};
        tmp_7_reg_847 <= {{sh_amt_1_fu_389_p3[11:4]}};
        trunc_ln583_1_reg_841 <= trunc_ln583_1_fu_403_p1;
        trunc_ln583_reg_801 <= trunc_ln583_fu_285_p1;
    end
end

always @ (*) begin
    if (((icmp_ln604_fu_141_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        LS_stream_TDATA_blk_n = LS_stream_TVALID;
    end else begin
        LS_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln604_fu_141_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        LS_stream_TREADY = 1'b1;
    end else begin
        LS_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln604_fu_141_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln604_reg_747 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_0_phi_fu_127_p4 = i_reg_751;
    end else begin
        ap_phi_mux_i_0_phi_fu_127_p4 = i_0_reg_123;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_135_ce = 1'b1;
    end else begin
        grp_fu_135_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_138_ce = 1'b1;
    end else begin
        grp_fu_138_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        sep_V_ce0 = 1'b1;
    end else begin
        sep_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        sep_V_ce1 = 1'b1;
    end else begin
        sep_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln604_reg_747_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        sep_V_we0 = 1'b1;
    end else begin
        sep_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln604_reg_747_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        sep_V_we1 = 1'b1;
    end else begin
        sep_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln604_fu_141_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln604_fu_141_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_1_fu_365_p2 = (12'd1075 - zext_ln461_1_fu_325_p1);

assign F2_fu_247_p2 = (12'd1075 - zext_ln461_fu_207_p1);

assign add_ln581_1_fu_377_p2 = ($signed(12'd4086) + $signed(F2_1_fu_365_p2));

assign add_ln581_fu_259_p2 = ($signed(12'd4086) + $signed(F2_fu_247_p2));

assign add_ln608_fu_692_p2 = (7'd52 + zext_ln604_fu_639_p1);

assign and_ln581_1_fu_574_p2 = (xor_ln582_1_fu_568_p2 & icmp_ln581_1_reg_823);

assign and_ln581_fu_463_p2 = (xor_ln582_fu_457_p2 & icmp_ln581_reg_783);

assign and_ln582_1_fu_559_p2 = (xor_ln571_1_fu_554_p2 & icmp_ln582_1_reg_835);

assign and_ln582_fu_448_p2 = (xor_ln571_fu_443_p2 & icmp_ln582_reg_795);

assign and_ln585_1_fu_480_p2 = (xor_ln585_fu_474_p2 & and_ln581_fu_463_p2);

assign and_ln585_2_fu_579_p2 = (icmp_ln585_1_fu_531_p2 & and_ln581_1_fu_574_p2);

assign and_ln585_3_fu_591_p2 = (xor_ln585_1_fu_585_p2 & and_ln581_1_fu_574_p2);

assign and_ln585_fu_468_p2 = (icmp_ln585_fu_420_p2 & and_ln581_fu_463_p2);

assign and_ln603_1_fu_608_p2 = (xor_ln581_1_fu_602_p2 & icmp_ln603_1_fu_536_p2);

assign and_ln603_fu_497_p2 = (xor_ln581_fu_491_p2 & icmp_ln603_fu_425_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln604_fu_141_p2 == 1'd0) & (1'b0 == LS_stream_TVALID) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln604_fu_141_p2 == 1'd0) & (1'b0 == LS_stream_TVALID) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((icmp_ln604_fu_141_p2 == 1'd0) & (1'b0 == LS_stream_TVALID));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ashr_ln586_1_fu_545_p2 = $signed(man_V_5_reg_812) >>> zext_ln586_1_fu_541_p1;

assign ashr_ln586_fu_434_p2 = $signed(man_V_2_reg_772) >>> zext_ln586_fu_430_p1;

assign exp_tmp_V_1_fu_315_p4 = {{ireg_V_1_fu_299_p1[62:52]}};

assign exp_tmp_V_fu_197_p4 = {{ireg_V_fu_181_p1[62:52]}};

assign grp_fu_135_p0 = trunc_ln28_fu_157_p1;

assign grp_fu_138_p0 = v_assign_1_new8_fu_166_p4;

assign i_fu_147_p2 = (ap_phi_mux_i_0_phi_fu_127_p4 + 6'd1);

assign icmp_ln571_1_fu_359_p2 = ((trunc_ln556_1_fu_303_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_241_p2 = ((trunc_ln556_fu_185_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln581_1_fu_371_p2 = (($signed(F2_1_fu_365_p2) > $signed(12'd10)) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_253_p2 = (($signed(F2_fu_247_p2) > $signed(12'd10)) ? 1'b1 : 1'b0);

assign icmp_ln582_1_fu_397_p2 = ((F2_1_fu_365_p2 == 12'd10) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_279_p2 = ((F2_fu_247_p2 == 12'd10) ? 1'b1 : 1'b0);

assign icmp_ln585_1_fu_531_p2 = ((sh_amt_1_reg_829 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_420_p2 = ((sh_amt_reg_789 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln603_1_fu_536_p2 = ((tmp_7_reg_847 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_425_p2 = ((tmp_4_reg_807 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln604_fu_141_p2 = ((ap_phi_mux_i_0_phi_fu_127_p4 == 6'd52) ? 1'b1 : 1'b0);

assign ireg_V_1_fu_299_p1 = grp_fu_138_p1;

assign ireg_V_fu_181_p1 = grp_fu_135_p1;

assign man_V_1_fu_227_p2 = (54'd0 - p_Result_1_fu_223_p1);

assign man_V_2_fu_233_p3 = ((p_Result_s_fu_189_p3[0:0] === 1'b1) ? man_V_1_fu_227_p2 : p_Result_1_fu_223_p1);

assign man_V_4_fu_345_p2 = (54'd0 - p_Result_3_fu_341_p1);

assign man_V_5_fu_351_p3 = ((p_Result_2_fu_307_p3[0:0] === 1'b1) ? man_V_4_fu_345_p2 : p_Result_3_fu_341_p1);

assign or_ln581_1_fu_597_p2 = (or_ln582_1_fu_564_p2 | icmp_ln581_1_reg_823);

assign or_ln581_fu_486_p2 = (or_ln582_fu_453_p2 | icmp_ln581_reg_783);

assign or_ln582_1_fu_564_p2 = (icmp_ln582_1_reg_835 | icmp_ln571_1_reg_817);

assign or_ln582_fu_453_p2 = (icmp_ln582_reg_795 | icmp_ln571_reg_777);

assign or_ln603_1_fu_516_p2 = (and_ln585_fu_468_p2 | and_ln582_fu_448_p2);

assign or_ln603_2_fu_522_p2 = (or_ln603_fu_503_p2 | or_ln603_1_fu_516_p2);

assign or_ln603_3_fu_614_p2 = (and_ln603_1_fu_608_p2 | and_ln585_3_fu_591_p2);

assign or_ln603_4_fu_627_p2 = (and_ln585_2_fu_579_p2 | and_ln582_1_fu_559_p2);

assign or_ln603_5_fu_633_p2 = (or_ln603_4_fu_627_p2 | or_ln603_3_fu_614_p2);

assign or_ln603_fu_503_p2 = (and_ln603_fu_497_p2 | and_ln585_1_fu_480_p2);

assign p_Result_1_fu_223_p1 = tmp_1_fu_215_p3;

assign p_Result_2_fu_307_p3 = ireg_V_1_fu_299_p1[32'd63];

assign p_Result_3_fu_341_p1 = tmp_2_fu_333_p3;

assign p_Result_s_fu_189_p3 = ireg_V_fu_181_p1[32'd63];

assign select_ln588_1_fu_710_p3 = ((tmp_8_fu_703_p3[0:0] === 1'b1) ? 16'd65535 : 16'd0);

assign select_ln588_fu_655_p3 = ((tmp_5_fu_648_p3[0:0] === 1'b1) ? 16'd65535 : 16'd0);

assign select_ln603_1_fu_509_p3 = ((and_ln585_fu_468_p2[0:0] === 1'b1) ? trunc_ln586_fu_439_p1 : trunc_ln583_reg_801);

assign select_ln603_2_fu_678_p3 = ((or_ln603_reg_862[0:0] === 1'b1) ? select_ln603_fu_671_p3 : select_ln603_1_reg_867);

assign select_ln603_4_fu_726_p3 = ((and_ln603_1_reg_882[0:0] === 1'b1) ? shl_ln604_1_fu_721_p2 : select_ln588_1_fu_710_p3);

assign select_ln603_5_fu_620_p3 = ((and_ln585_2_fu_579_p2[0:0] === 1'b1) ? trunc_ln586_1_fu_550_p1 : trunc_ln583_1_reg_841);

assign select_ln603_6_fu_733_p3 = ((or_ln603_3_reg_887[0:0] === 1'b1) ? select_ln603_4_fu_726_p3 : select_ln603_5_reg_892);

assign select_ln603_fu_671_p3 = ((and_ln603_reg_857[0:0] === 1'b1) ? shl_ln604_fu_666_p2 : select_ln588_fu_655_p3);

assign sep_V_address0 = zext_ln607_fu_643_p1;

assign sep_V_address1 = zext_ln608_fu_698_p1;

assign sep_V_d0 = ((or_ln603_2_reg_872[0:0] === 1'b1) ? select_ln603_2_fu_678_p3 : 16'd0);

assign sep_V_d1 = ((or_ln603_5_reg_897[0:0] === 1'b1) ? select_ln603_6_fu_733_p3 : 16'd0);

assign sext_ln581_1_fu_528_p1 = sh_amt_1_reg_829;

assign sext_ln581_1cast_fu_718_p1 = sext_ln581_1_reg_877[15:0];

assign sext_ln581_fu_417_p1 = sh_amt_reg_789;

assign sext_ln581cast_fu_663_p1 = sext_ln581_reg_852[15:0];

assign sh_amt_1_fu_389_p3 = ((icmp_ln581_1_fu_371_p2[0:0] === 1'b1) ? add_ln581_1_fu_377_p2 : sub_ln581_1_fu_383_p2);

assign sh_amt_fu_271_p3 = ((icmp_ln581_fu_253_p2[0:0] === 1'b1) ? add_ln581_fu_259_p2 : sub_ln581_fu_265_p2);

assign shl_ln604_1_fu_721_p2 = trunc_ln583_1_reg_841_pp0_iter2_reg << sext_ln581_1cast_fu_718_p1;

assign shl_ln604_fu_666_p2 = trunc_ln583_reg_801_pp0_iter2_reg << sext_ln581cast_fu_663_p1;

assign sub_ln581_1_fu_383_p2 = (12'd10 - F2_1_fu_365_p2);

assign sub_ln581_fu_265_p2 = (12'd10 - F2_fu_247_p2);

assign tmp_1_fu_215_p3 = {{1'd1}, {trunc_ln565_fu_211_p1}};

assign tmp_2_fu_333_p3 = {{1'd1}, {trunc_ln565_1_fu_329_p1}};

assign tmp_5_fu_648_p3 = LS_stream_V_data_val_reg_756_pp0_iter2_reg[32'd31];

assign tmp_8_fu_703_p3 = LS_stream_V_data_val_reg_756_pp0_iter2_reg[32'd63];

assign trunc_ln28_fu_157_p1 = LS_stream_TDATA[31:0];

assign trunc_ln556_1_fu_303_p1 = ireg_V_1_fu_299_p1[62:0];

assign trunc_ln556_fu_185_p1 = ireg_V_fu_181_p1[62:0];

assign trunc_ln565_1_fu_329_p1 = ireg_V_1_fu_299_p1[51:0];

assign trunc_ln565_fu_211_p1 = ireg_V_fu_181_p1[51:0];

assign trunc_ln583_1_fu_403_p1 = man_V_5_fu_351_p3[15:0];

assign trunc_ln583_fu_285_p1 = man_V_2_fu_233_p3[15:0];

assign trunc_ln586_1_fu_550_p1 = ashr_ln586_1_fu_545_p2[15:0];

assign trunc_ln586_fu_439_p1 = ashr_ln586_fu_434_p2[15:0];

assign v_assign_1_new8_fu_166_p4 = {{LS_stream_TDATA[63:32]}};

assign xor_ln571_1_fu_554_p2 = (icmp_ln571_1_reg_817 ^ 1'd1);

assign xor_ln571_fu_443_p2 = (icmp_ln571_reg_777 ^ 1'd1);

assign xor_ln581_1_fu_602_p2 = (or_ln581_1_fu_597_p2 ^ 1'd1);

assign xor_ln581_fu_491_p2 = (or_ln581_fu_486_p2 ^ 1'd1);

assign xor_ln582_1_fu_568_p2 = (or_ln582_1_fu_564_p2 ^ 1'd1);

assign xor_ln582_fu_457_p2 = (or_ln582_fu_453_p2 ^ 1'd1);

assign xor_ln585_1_fu_585_p2 = (icmp_ln585_1_fu_531_p2 ^ 1'd1);

assign xor_ln585_fu_474_p2 = (icmp_ln585_fu_420_p2 ^ 1'd1);

assign zext_ln461_1_fu_325_p1 = exp_tmp_V_1_fu_315_p4;

assign zext_ln461_fu_207_p1 = exp_tmp_V_fu_197_p4;

assign zext_ln586_1_fu_541_p1 = $unsigned(sext_ln581_1_fu_528_p1);

assign zext_ln586_fu_430_p1 = $unsigned(sext_ln581_fu_417_p1);

assign zext_ln604_fu_639_p1 = i_0_reg_123_pp0_iter2_reg;

assign zext_ln607_fu_643_p1 = i_0_reg_123_pp0_iter2_reg;

assign zext_ln608_fu_698_p1 = add_ln608_fu_692_p2;

endmodule //separate_complex_wlo
