-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DNN_wlo_166 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    LS_stream_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    LS_stream_TVALID : IN STD_LOGIC;
    LS_stream_TREADY : OUT STD_LOGIC;
    LS_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    DNN_out_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    DNN_out_TVALID : OUT STD_LOGIC;
    DNN_out_TREADY : IN STD_LOGIC;
    DNN_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of DNN_wlo_166 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "DNN_wlo_166,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.634000,HLS_SYN_LAT=1077,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=157,HLS_SYN_FF=17794,HLS_SYN_LUT=11271,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv7_68 : STD_LOGIC_VECTOR (6 downto 0) := "1101000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal LS_stream_V_data_0_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal LS_stream_V_data_0_vld_in : STD_LOGIC;
    signal LS_stream_V_data_0_vld_out : STD_LOGIC;
    signal LS_stream_V_data_0_ack_in : STD_LOGIC;
    signal LS_stream_V_data_0_ack_out : STD_LOGIC;
    signal LS_stream_V_data_0_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal LS_stream_V_data_0_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal LS_stream_V_data_0_sel_rd : STD_LOGIC := '0';
    signal LS_stream_V_data_0_sel_wr : STD_LOGIC := '0';
    signal LS_stream_V_data_0_sel : STD_LOGIC;
    signal LS_stream_V_data_0_load_A : STD_LOGIC;
    signal LS_stream_V_data_0_load_B : STD_LOGIC;
    signal LS_stream_V_data_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal LS_stream_V_data_0_state_cmp_full : STD_LOGIC;
    signal LS_stream_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal LS_stream_V_last_V_0_vld_in : STD_LOGIC;
    signal LS_stream_V_last_V_0_vld_out : STD_LOGIC;
    signal LS_stream_V_last_V_0_ack_in : STD_LOGIC;
    signal LS_stream_V_last_V_0_ack_out : STD_LOGIC;
    signal LS_stream_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal LS_stream_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal LS_stream_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal LS_stream_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal LS_stream_V_last_V_0_sel : STD_LOGIC;
    signal LS_stream_V_last_V_0_load_A : STD_LOGIC;
    signal LS_stream_V_last_V_0_load_B : STD_LOGIC;
    signal LS_stream_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal LS_stream_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal DNN_out_V_data_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal DNN_out_V_data_1_vld_in : STD_LOGIC;
    signal DNN_out_V_data_1_vld_out : STD_LOGIC;
    signal DNN_out_V_data_1_ack_in : STD_LOGIC;
    signal DNN_out_V_data_1_ack_out : STD_LOGIC;
    signal DNN_out_V_data_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal DNN_out_V_data_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal DNN_out_V_data_1_sel_rd : STD_LOGIC := '0';
    signal DNN_out_V_data_1_sel_wr : STD_LOGIC := '0';
    signal DNN_out_V_data_1_sel : STD_LOGIC;
    signal DNN_out_V_data_1_load_A : STD_LOGIC;
    signal DNN_out_V_data_1_load_B : STD_LOGIC;
    signal DNN_out_V_data_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal DNN_out_V_data_1_state_cmp_full : STD_LOGIC;
    signal DNN_out_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal DNN_out_V_last_V_1_vld_in : STD_LOGIC;
    signal DNN_out_V_last_V_1_vld_out : STD_LOGIC;
    signal DNN_out_V_last_V_1_ack_in : STD_LOGIC;
    signal DNN_out_V_last_V_1_ack_out : STD_LOGIC;
    signal DNN_out_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal DNN_out_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal DNN_out_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal DNN_out_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal DNN_out_V_last_V_1_sel : STD_LOGIC;
    signal DNN_out_V_last_V_1_load_A : STD_LOGIC;
    signal DNN_out_V_last_V_1_load_B : STD_LOGIC;
    signal DNN_out_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal DNN_out_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal std_o_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal std_o_V_ce0 : STD_LOGIC;
    signal std_o_V_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mean_o_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mean_o_V_ce0 : STD_LOGIC;
    signal mean_o_V_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_i_reg_460 : STD_LOGIC_VECTOR (6 downto 0);
    signal norm_LS_data_0_0_V_reg_1814 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_normalize_wlo_166_fu_789_ap_ready : STD_LOGIC;
    signal grp_normalize_wlo_166_fu_789_ap_done : STD_LOGIC;
    signal norm_LS_data_0_1_V_reg_1819 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_1_0_V_reg_1824 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_1_1_V_reg_1829 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_2_0_V_reg_1834 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_2_1_V_reg_1839 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_3_0_V_reg_1844 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_3_1_V_reg_1849 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_4_0_V_reg_1854 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_4_1_V_reg_1859 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_5_0_V_reg_1864 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_5_1_V_reg_1869 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_6_0_V_reg_1874 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_6_1_V_reg_1879 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_7_0_V_reg_1884 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_7_1_V_reg_1889 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_8_0_V_reg_1894 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_8_1_V_reg_1899 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_9_0_V_reg_1904 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_9_1_V_reg_1909 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_10_0_s_reg_1914 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_10_1_s_reg_1919 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_11_0_s_reg_1924 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_11_1_s_reg_1929 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_12_0_s_reg_1934 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_12_1_s_reg_1939 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_13_0_s_reg_1944 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_13_1_s_reg_1949 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_14_0_s_reg_1954 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_14_1_s_reg_1959 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_15_0_s_reg_1964 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_15_1_s_reg_1969 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_16_0_s_reg_1974 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_16_1_s_reg_1979 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_17_0_s_reg_1984 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_17_1_s_reg_1989 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_18_0_s_reg_1994 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_18_1_s_reg_1999 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_19_0_s_reg_2004 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_19_1_s_reg_2009 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_20_0_s_reg_2014 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_20_1_s_reg_2019 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_21_0_s_reg_2024 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_21_1_s_reg_2029 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_22_0_s_reg_2034 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_22_1_s_reg_2039 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_23_0_s_reg_2044 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_23_1_s_reg_2049 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_24_0_s_reg_2054 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_24_1_s_reg_2059 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_25_0_s_reg_2064 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_25_1_s_reg_2069 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_26_0_s_reg_2074 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_26_1_s_reg_2079 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_27_0_s_reg_2084 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_27_1_s_reg_2089 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_28_0_s_reg_2094 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_28_1_s_reg_2099 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_29_0_s_reg_2104 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_29_1_s_reg_2109 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_30_0_s_reg_2114 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_30_1_s_reg_2119 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_31_0_s_reg_2124 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_31_1_s_reg_2129 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_32_0_s_reg_2134 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_32_1_s_reg_2139 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_33_0_s_reg_2144 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_33_1_s_reg_2149 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_34_0_s_reg_2154 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_34_1_s_reg_2159 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_35_0_s_reg_2164 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_35_1_s_reg_2169 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_36_0_s_reg_2174 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_36_1_s_reg_2179 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_37_0_s_reg_2184 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_37_1_s_reg_2189 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_38_0_s_reg_2194 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_38_1_s_reg_2199 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_39_0_s_reg_2204 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_39_1_s_reg_2209 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_40_0_s_reg_2214 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_40_1_s_reg_2219 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_41_0_s_reg_2224 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_41_1_s_reg_2229 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_42_0_s_reg_2234 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_42_1_s_reg_2239 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_43_0_s_reg_2244 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_43_1_s_reg_2249 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_44_0_s_reg_2254 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_44_1_s_reg_2259 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_45_0_s_reg_2264 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_45_1_s_reg_2269 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_46_0_s_reg_2274 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_46_1_s_reg_2279 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_47_0_s_reg_2284 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_47_1_s_reg_2289 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_48_0_s_reg_2294 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_48_1_s_reg_2299 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_49_0_s_reg_2304 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_49_1_s_reg_2309 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_50_0_s_reg_2314 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_50_1_s_reg_2319 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_51_0_s_reg_2324 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_51_1_s_reg_2329 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_0_0_V_reg_2334 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_L2_wlo_166_fu_471_ap_ready : STD_LOGIC;
    signal grp_L2_wlo_166_fu_471_ap_done : STD_LOGIC;
    signal y_L2_0_1_V_reg_2339 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_1_0_V_reg_2344 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_1_1_V_reg_2349 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_2_0_V_reg_2354 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_2_1_V_reg_2359 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_3_0_V_reg_2364 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_3_1_V_reg_2369 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_4_0_V_reg_2374 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_4_1_V_reg_2379 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_5_0_V_reg_2384 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_5_1_V_reg_2389 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_6_0_V_reg_2394 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_6_1_V_reg_2399 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_7_0_V_reg_2404 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_7_1_V_reg_2409 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_8_0_V_reg_2414 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_8_1_V_reg_2419 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_9_0_V_reg_2424 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_9_1_V_reg_2429 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_10_0_V_reg_2434 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_10_1_V_reg_2439 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_11_0_V_reg_2444 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_11_1_V_reg_2449 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_12_0_V_reg_2454 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_12_1_V_reg_2459 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_13_0_V_reg_2464 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_13_1_V_reg_2469 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_14_0_V_reg_2474 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_14_1_V_reg_2479 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_15_0_V_reg_2484 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_15_1_V_reg_2489 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_16_0_V_reg_2494 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_16_1_V_reg_2499 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_17_0_V_reg_2504 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_17_1_V_reg_2509 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_18_0_V_reg_2514 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_18_1_V_reg_2519 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_19_0_V_reg_2524 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_19_1_V_reg_2529 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_20_0_V_reg_2534 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_20_1_V_reg_2539 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_21_0_V_reg_2544 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_21_1_V_reg_2549 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_22_0_V_reg_2554 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_22_1_V_reg_2559 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_23_0_V_reg_2564 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_23_1_V_reg_2569 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_24_0_V_reg_2574 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_24_1_V_reg_2579 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_25_0_V_reg_2584 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_25_1_V_reg_2589 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln653_fu_1759_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln653_reg_2594 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state8_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln653_reg_2594_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_1765_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal zext_ln655_fu_1771_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln655_reg_2603 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln655_reg_2603_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal y_L3_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L3_V_load_reg_2623 : STD_LOGIC_VECTOR (15 downto 0);
    signal std_o_V_load_reg_2628 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_12_reg_2633 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_L3_wlo_166_fu_798_ap_ready : STD_LOGIC;
    signal grp_L3_wlo_166_fu_798_ap_done : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state8 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal LS_data_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal LS_data_V_ce0 : STD_LOGIC;
    signal LS_data_V_we0 : STD_LOGIC;
    signal LS_data_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal LS_data_V_ce1 : STD_LOGIC;
    signal LS_data_V_we1 : STD_LOGIC;
    signal y_L3_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal y_L3_V_ce0 : STD_LOGIC;
    signal y_L3_V_we0 : STD_LOGIC;
    signal denorm_DNN_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal denorm_DNN_V_ce0 : STD_LOGIC;
    signal denorm_DNN_V_we0 : STD_LOGIC;
    signal denorm_DNN_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal denorm_DNN_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal denorm_DNN_V_ce1 : STD_LOGIC;
    signal denorm_DNN_V_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_start : STD_LOGIC;
    signal grp_L2_wlo_166_fu_471_ap_idle : STD_LOGIC;
    signal grp_L2_wlo_166_fu_471_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_7 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_8 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_9 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_11 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_12 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_13 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_14 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_15 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_16 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_17 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_18 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_19 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_20 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_21 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_22 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_23 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_24 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_25 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_26 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_27 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_28 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_29 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_30 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_31 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_32 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_33 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_34 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_35 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_36 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_37 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_38 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_39 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_40 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_41 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_42 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_43 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_44 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_45 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_46 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_47 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_48 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_49 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_50 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_return_51 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_start : STD_LOGIC;
    signal grp_normalize_wlo_166_fu_789_ap_idle : STD_LOGIC;
    signal grp_normalize_wlo_166_fu_789_LS_data_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_normalize_wlo_166_fu_789_LS_data_V_ce0 : STD_LOGIC;
    signal grp_normalize_wlo_166_fu_789_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_7 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_8 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_9 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_11 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_12 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_13 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_14 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_15 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_16 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_17 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_18 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_19 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_20 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_21 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_22 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_23 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_24 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_25 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_26 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_27 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_28 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_29 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_30 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_31 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_32 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_33 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_34 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_35 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_36 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_37 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_38 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_39 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_40 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_41 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_42 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_43 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_44 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_45 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_46 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_47 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_48 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_49 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_50 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_51 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_52 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_53 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_54 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_55 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_56 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_57 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_58 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_59 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_60 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_61 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_62 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_63 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_64 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_65 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_66 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_67 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_68 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_69 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_70 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_71 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_72 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_73 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_74 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_75 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_76 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_77 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_78 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_79 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_80 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_81 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_82 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_83 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_84 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_85 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_86 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_87 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_88 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_89 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_90 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_91 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_92 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_93 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_94 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_95 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_96 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_97 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_98 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_99 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_100 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_101 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_102 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_166_fu_789_ap_return_103 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L3_wlo_166_fu_798_ap_start : STD_LOGIC;
    signal grp_L3_wlo_166_fu_798_ap_idle : STD_LOGIC;
    signal grp_L3_wlo_166_fu_798_y_L3_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_L3_wlo_166_fu_798_y_L3_V_ce0 : STD_LOGIC;
    signal grp_L3_wlo_166_fu_798_y_L3_V_we0 : STD_LOGIC;
    signal grp_L3_wlo_166_fu_798_y_L3_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_separate_complex_wlo_fu_961_ap_start : STD_LOGIC;
    signal grp_separate_complex_wlo_fu_961_ap_done : STD_LOGIC;
    signal grp_separate_complex_wlo_fu_961_ap_idle : STD_LOGIC;
    signal grp_separate_complex_wlo_fu_961_ap_ready : STD_LOGIC;
    signal grp_separate_complex_wlo_fu_961_LS_stream_TVALID : STD_LOGIC;
    signal grp_separate_complex_wlo_fu_961_LS_stream_TREADY : STD_LOGIC;
    signal grp_separate_complex_wlo_fu_961_sep_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_separate_complex_wlo_fu_961_sep_V_ce0 : STD_LOGIC;
    signal grp_separate_complex_wlo_fu_961_sep_V_we0 : STD_LOGIC;
    signal grp_separate_complex_wlo_fu_961_sep_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_separate_complex_wlo_fu_961_sep_V_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_separate_complex_wlo_fu_961_sep_V_ce1 : STD_LOGIC;
    signal grp_separate_complex_wlo_fu_961_sep_V_we1 : STD_LOGIC;
    signal grp_separate_complex_wlo_fu_961_sep_V_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_reconstruct_complex_s_fu_970_ap_start : STD_LOGIC;
    signal grp_reconstruct_complex_s_fu_970_ap_done : STD_LOGIC;
    signal grp_reconstruct_complex_s_fu_970_ap_idle : STD_LOGIC;
    signal grp_reconstruct_complex_s_fu_970_ap_ready : STD_LOGIC;
    signal grp_reconstruct_complex_s_fu_970_y_L3_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_reconstruct_complex_s_fu_970_y_L3_V_ce0 : STD_LOGIC;
    signal grp_reconstruct_complex_s_fu_970_y_L3_V_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_reconstruct_complex_s_fu_970_y_L3_V_ce1 : STD_LOGIC;
    signal grp_reconstruct_complex_s_fu_970_DNN_out_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_reconstruct_complex_s_fu_970_DNN_out_TVALID : STD_LOGIC;
    signal grp_reconstruct_complex_s_fu_970_DNN_out_TREADY : STD_LOGIC;
    signal grp_reconstruct_complex_s_fu_970_DNN_out_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_L2_wlo_166_fu_471_ap_start_reg : STD_LOGIC := '0';
    signal grp_normalize_wlo_166_fu_789_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_L3_wlo_166_fu_798_ap_start_reg : STD_LOGIC := '0';
    signal grp_separate_complex_wlo_fu_961_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_reconstruct_complex_s_fu_970_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal rhs_V_fu_1784_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1805_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_1805_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_block_state13 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1805_p00 : STD_LOGIC_VECTOR (25 downto 0);

    component L2_wlo_166 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_0_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_0_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_1_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_1_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_2_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_2_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_3_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_3_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_4_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_4_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_5_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_5_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_6_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_6_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_7_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_7_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_8_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_8_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_9_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_9_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_10_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_10_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_11_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_11_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_12_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_12_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_13_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_13_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_14_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_14_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_15_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_15_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_16_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_16_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_17_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_17_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_18_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_18_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_19_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_19_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_20_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_20_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_21_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_21_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_22_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_22_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_23_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_23_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_24_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_24_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_25_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_25_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_26_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_26_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_27_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_27_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_28_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_28_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_29_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_29_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_30_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_30_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_31_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_31_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_32_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_32_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_33_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_33_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_34_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_34_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_35_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_35_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_36_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_36_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_37_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_37_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_38_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_38_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_39_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_39_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_40_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_40_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_41_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_41_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_42_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_42_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_43_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_43_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_44_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_44_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_45_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_45_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_46_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_46_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_47_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_47_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_48_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_48_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_49_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_49_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_50_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_50_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_51_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_51_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_20 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_21 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_22 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_23 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_24 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_25 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_26 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_27 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_28 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_29 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_30 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_31 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_32 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_33 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_34 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_35 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_36 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_37 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_38 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_39 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_40 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_41 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_42 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_43 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_44 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_45 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_46 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_47 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_48 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_49 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_50 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_51 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component normalize_wlo_166 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        LS_data_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        LS_data_V_ce0 : OUT STD_LOGIC;
        LS_data_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_20 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_21 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_22 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_23 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_24 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_25 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_26 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_27 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_28 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_29 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_30 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_31 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_32 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_33 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_34 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_35 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_36 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_37 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_38 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_39 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_40 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_41 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_42 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_43 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_44 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_45 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_46 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_47 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_48 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_49 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_50 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_51 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_52 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_53 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_54 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_55 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_56 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_57 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_58 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_59 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_60 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_61 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_62 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_63 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_64 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_65 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_66 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_67 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_68 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_69 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_70 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_71 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_72 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_73 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_74 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_75 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_76 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_77 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_78 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_79 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_80 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_81 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_82 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_83 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_84 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_85 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_86 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_87 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_88 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_89 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_90 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_91 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_92 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_93 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_94 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_95 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_96 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_97 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_98 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_99 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_100 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_101 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_102 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_103 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component L3_wlo_166 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_0_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_0_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_1_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_1_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_2_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_2_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_3_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_3_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_4_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_4_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_5_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_5_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_6_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_6_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_7_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_7_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_8_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_8_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_9_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_9_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_10_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_10_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_11_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_11_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_12_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_12_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_13_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_13_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_14_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_14_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_15_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_15_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_16_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_16_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_17_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_17_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_18_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_18_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_19_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_19_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_20_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_20_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_21_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_21_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_22_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_22_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_23_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_23_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_24_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_24_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_25_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        x_25_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        y_L3_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        y_L3_V_ce0 : OUT STD_LOGIC;
        y_L3_V_we0 : OUT STD_LOGIC;
        y_L3_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component separate_complex_wlo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        LS_stream_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        LS_stream_TVALID : IN STD_LOGIC;
        LS_stream_TREADY : OUT STD_LOGIC;
        LS_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        sep_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        sep_V_ce0 : OUT STD_LOGIC;
        sep_V_we0 : OUT STD_LOGIC;
        sep_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        sep_V_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        sep_V_ce1 : OUT STD_LOGIC;
        sep_V_we1 : OUT STD_LOGIC;
        sep_V_d1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component reconstruct_complex_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        y_L3_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        y_L3_V_ce0 : OUT STD_LOGIC;
        y_L3_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        y_L3_V_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        y_L3_V_ce1 : OUT STD_LOGIC;
        y_L3_V_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        DNN_out_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        DNN_out_TVALID : OUT STD_LOGIC;
        DNN_out_TREADY : IN STD_LOGIC;
        DNN_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component DNN_wlo_166_mac_mc2C IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component DNN_wlo_166_std_o_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component DNN_wlo_166_mean_cZC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component DNN_wlo_166_LS_dac0C IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component DNN_wlo_166_y_L3_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component DNN_wlo_166_denorc1C IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    std_o_V_U : component DNN_wlo_166_std_o_V
    generic map (
        DataWidth => 10,
        AddressRange => 104,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => std_o_V_address0,
        ce0 => std_o_V_ce0,
        q0 => std_o_V_q0);

    mean_o_V_U : component DNN_wlo_166_mean_cZC
    generic map (
        DataWidth => 4,
        AddressRange => 104,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => mean_o_V_address0,
        ce0 => mean_o_V_ce0,
        q0 => mean_o_V_q0);

    LS_data_V_U : component DNN_wlo_166_LS_dac0C
    generic map (
        DataWidth => 16,
        AddressRange => 104,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => LS_data_V_address0,
        ce0 => LS_data_V_ce0,
        we0 => LS_data_V_we0,
        d0 => grp_separate_complex_wlo_fu_961_sep_V_d0,
        q0 => LS_data_V_q0,
        address1 => grp_separate_complex_wlo_fu_961_sep_V_address1,
        ce1 => LS_data_V_ce1,
        we1 => LS_data_V_we1,
        d1 => grp_separate_complex_wlo_fu_961_sep_V_d1);

    y_L3_V_U : component DNN_wlo_166_y_L3_V
    generic map (
        DataWidth => 16,
        AddressRange => 104,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => y_L3_V_address0,
        ce0 => y_L3_V_ce0,
        we0 => y_L3_V_we0,
        d0 => grp_L3_wlo_166_fu_798_y_L3_V_d0,
        q0 => y_L3_V_q0);

    denorm_DNN_V_U : component DNN_wlo_166_denorc1C
    generic map (
        DataWidth => 16,
        AddressRange => 104,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => denorm_DNN_V_address0,
        ce0 => denorm_DNN_V_ce0,
        we0 => denorm_DNN_V_we0,
        d0 => denorm_DNN_V_d0,
        q0 => denorm_DNN_V_q0,
        address1 => grp_reconstruct_complex_s_fu_970_y_L3_V_address1,
        ce1 => denorm_DNN_V_ce1,
        q1 => denorm_DNN_V_q1);

    grp_L2_wlo_166_fu_471 : component L2_wlo_166
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_L2_wlo_166_fu_471_ap_start,
        ap_done => grp_L2_wlo_166_fu_471_ap_done,
        ap_idle => grp_L2_wlo_166_fu_471_ap_idle,
        ap_ready => grp_L2_wlo_166_fu_471_ap_ready,
        x_0_0_V_read => norm_LS_data_0_0_V_reg_1814,
        x_0_1_V_read => norm_LS_data_0_1_V_reg_1819,
        x_1_0_V_read => norm_LS_data_1_0_V_reg_1824,
        x_1_1_V_read => norm_LS_data_1_1_V_reg_1829,
        x_2_0_V_read => norm_LS_data_2_0_V_reg_1834,
        x_2_1_V_read => norm_LS_data_2_1_V_reg_1839,
        x_3_0_V_read => norm_LS_data_3_0_V_reg_1844,
        x_3_1_V_read => norm_LS_data_3_1_V_reg_1849,
        x_4_0_V_read => norm_LS_data_4_0_V_reg_1854,
        x_4_1_V_read => norm_LS_data_4_1_V_reg_1859,
        x_5_0_V_read => norm_LS_data_5_0_V_reg_1864,
        x_5_1_V_read => norm_LS_data_5_1_V_reg_1869,
        x_6_0_V_read => norm_LS_data_6_0_V_reg_1874,
        x_6_1_V_read => norm_LS_data_6_1_V_reg_1879,
        x_7_0_V_read => norm_LS_data_7_0_V_reg_1884,
        x_7_1_V_read => norm_LS_data_7_1_V_reg_1889,
        x_8_0_V_read => norm_LS_data_8_0_V_reg_1894,
        x_8_1_V_read => norm_LS_data_8_1_V_reg_1899,
        x_9_0_V_read => norm_LS_data_9_0_V_reg_1904,
        x_9_1_V_read => norm_LS_data_9_1_V_reg_1909,
        x_10_0_V_read => norm_LS_data_10_0_s_reg_1914,
        x_10_1_V_read => norm_LS_data_10_1_s_reg_1919,
        x_11_0_V_read => norm_LS_data_11_0_s_reg_1924,
        x_11_1_V_read => norm_LS_data_11_1_s_reg_1929,
        x_12_0_V_read => norm_LS_data_12_0_s_reg_1934,
        x_12_1_V_read => norm_LS_data_12_1_s_reg_1939,
        x_13_0_V_read => norm_LS_data_13_0_s_reg_1944,
        x_13_1_V_read => norm_LS_data_13_1_s_reg_1949,
        x_14_0_V_read => norm_LS_data_14_0_s_reg_1954,
        x_14_1_V_read => norm_LS_data_14_1_s_reg_1959,
        x_15_0_V_read => norm_LS_data_15_0_s_reg_1964,
        x_15_1_V_read => norm_LS_data_15_1_s_reg_1969,
        x_16_0_V_read => norm_LS_data_16_0_s_reg_1974,
        x_16_1_V_read => norm_LS_data_16_1_s_reg_1979,
        x_17_0_V_read => norm_LS_data_17_0_s_reg_1984,
        x_17_1_V_read => norm_LS_data_17_1_s_reg_1989,
        x_18_0_V_read => norm_LS_data_18_0_s_reg_1994,
        x_18_1_V_read => norm_LS_data_18_1_s_reg_1999,
        x_19_0_V_read => norm_LS_data_19_0_s_reg_2004,
        x_19_1_V_read => norm_LS_data_19_1_s_reg_2009,
        x_20_0_V_read => norm_LS_data_20_0_s_reg_2014,
        x_20_1_V_read => norm_LS_data_20_1_s_reg_2019,
        x_21_0_V_read => norm_LS_data_21_0_s_reg_2024,
        x_21_1_V_read => norm_LS_data_21_1_s_reg_2029,
        x_22_0_V_read => norm_LS_data_22_0_s_reg_2034,
        x_22_1_V_read => norm_LS_data_22_1_s_reg_2039,
        x_23_0_V_read => norm_LS_data_23_0_s_reg_2044,
        x_23_1_V_read => norm_LS_data_23_1_s_reg_2049,
        x_24_0_V_read => norm_LS_data_24_0_s_reg_2054,
        x_24_1_V_read => norm_LS_data_24_1_s_reg_2059,
        x_25_0_V_read => norm_LS_data_25_0_s_reg_2064,
        x_25_1_V_read => norm_LS_data_25_1_s_reg_2069,
        x_26_0_V_read => norm_LS_data_26_0_s_reg_2074,
        x_26_1_V_read => norm_LS_data_26_1_s_reg_2079,
        x_27_0_V_read => norm_LS_data_27_0_s_reg_2084,
        x_27_1_V_read => norm_LS_data_27_1_s_reg_2089,
        x_28_0_V_read => norm_LS_data_28_0_s_reg_2094,
        x_28_1_V_read => norm_LS_data_28_1_s_reg_2099,
        x_29_0_V_read => norm_LS_data_29_0_s_reg_2104,
        x_29_1_V_read => norm_LS_data_29_1_s_reg_2109,
        x_30_0_V_read => norm_LS_data_30_0_s_reg_2114,
        x_30_1_V_read => norm_LS_data_30_1_s_reg_2119,
        x_31_0_V_read => norm_LS_data_31_0_s_reg_2124,
        x_31_1_V_read => norm_LS_data_31_1_s_reg_2129,
        x_32_0_V_read => norm_LS_data_32_0_s_reg_2134,
        x_32_1_V_read => norm_LS_data_32_1_s_reg_2139,
        x_33_0_V_read => norm_LS_data_33_0_s_reg_2144,
        x_33_1_V_read => norm_LS_data_33_1_s_reg_2149,
        x_34_0_V_read => norm_LS_data_34_0_s_reg_2154,
        x_34_1_V_read => norm_LS_data_34_1_s_reg_2159,
        x_35_0_V_read => norm_LS_data_35_0_s_reg_2164,
        x_35_1_V_read => norm_LS_data_35_1_s_reg_2169,
        x_36_0_V_read => norm_LS_data_36_0_s_reg_2174,
        x_36_1_V_read => norm_LS_data_36_1_s_reg_2179,
        x_37_0_V_read => norm_LS_data_37_0_s_reg_2184,
        x_37_1_V_read => norm_LS_data_37_1_s_reg_2189,
        x_38_0_V_read => norm_LS_data_38_0_s_reg_2194,
        x_38_1_V_read => norm_LS_data_38_1_s_reg_2199,
        x_39_0_V_read => norm_LS_data_39_0_s_reg_2204,
        x_39_1_V_read => norm_LS_data_39_1_s_reg_2209,
        x_40_0_V_read => norm_LS_data_40_0_s_reg_2214,
        x_40_1_V_read => norm_LS_data_40_1_s_reg_2219,
        x_41_0_V_read => norm_LS_data_41_0_s_reg_2224,
        x_41_1_V_read => norm_LS_data_41_1_s_reg_2229,
        x_42_0_V_read => norm_LS_data_42_0_s_reg_2234,
        x_42_1_V_read => norm_LS_data_42_1_s_reg_2239,
        x_43_0_V_read => norm_LS_data_43_0_s_reg_2244,
        x_43_1_V_read => norm_LS_data_43_1_s_reg_2249,
        x_44_0_V_read => norm_LS_data_44_0_s_reg_2254,
        x_44_1_V_read => norm_LS_data_44_1_s_reg_2259,
        x_45_0_V_read => norm_LS_data_45_0_s_reg_2264,
        x_45_1_V_read => norm_LS_data_45_1_s_reg_2269,
        x_46_0_V_read => norm_LS_data_46_0_s_reg_2274,
        x_46_1_V_read => norm_LS_data_46_1_s_reg_2279,
        x_47_0_V_read => norm_LS_data_47_0_s_reg_2284,
        x_47_1_V_read => norm_LS_data_47_1_s_reg_2289,
        x_48_0_V_read => norm_LS_data_48_0_s_reg_2294,
        x_48_1_V_read => norm_LS_data_48_1_s_reg_2299,
        x_49_0_V_read => norm_LS_data_49_0_s_reg_2304,
        x_49_1_V_read => norm_LS_data_49_1_s_reg_2309,
        x_50_0_V_read => norm_LS_data_50_0_s_reg_2314,
        x_50_1_V_read => norm_LS_data_50_1_s_reg_2319,
        x_51_0_V_read => norm_LS_data_51_0_s_reg_2324,
        x_51_1_V_read => norm_LS_data_51_1_s_reg_2329,
        ap_return_0 => grp_L2_wlo_166_fu_471_ap_return_0,
        ap_return_1 => grp_L2_wlo_166_fu_471_ap_return_1,
        ap_return_2 => grp_L2_wlo_166_fu_471_ap_return_2,
        ap_return_3 => grp_L2_wlo_166_fu_471_ap_return_3,
        ap_return_4 => grp_L2_wlo_166_fu_471_ap_return_4,
        ap_return_5 => grp_L2_wlo_166_fu_471_ap_return_5,
        ap_return_6 => grp_L2_wlo_166_fu_471_ap_return_6,
        ap_return_7 => grp_L2_wlo_166_fu_471_ap_return_7,
        ap_return_8 => grp_L2_wlo_166_fu_471_ap_return_8,
        ap_return_9 => grp_L2_wlo_166_fu_471_ap_return_9,
        ap_return_10 => grp_L2_wlo_166_fu_471_ap_return_10,
        ap_return_11 => grp_L2_wlo_166_fu_471_ap_return_11,
        ap_return_12 => grp_L2_wlo_166_fu_471_ap_return_12,
        ap_return_13 => grp_L2_wlo_166_fu_471_ap_return_13,
        ap_return_14 => grp_L2_wlo_166_fu_471_ap_return_14,
        ap_return_15 => grp_L2_wlo_166_fu_471_ap_return_15,
        ap_return_16 => grp_L2_wlo_166_fu_471_ap_return_16,
        ap_return_17 => grp_L2_wlo_166_fu_471_ap_return_17,
        ap_return_18 => grp_L2_wlo_166_fu_471_ap_return_18,
        ap_return_19 => grp_L2_wlo_166_fu_471_ap_return_19,
        ap_return_20 => grp_L2_wlo_166_fu_471_ap_return_20,
        ap_return_21 => grp_L2_wlo_166_fu_471_ap_return_21,
        ap_return_22 => grp_L2_wlo_166_fu_471_ap_return_22,
        ap_return_23 => grp_L2_wlo_166_fu_471_ap_return_23,
        ap_return_24 => grp_L2_wlo_166_fu_471_ap_return_24,
        ap_return_25 => grp_L2_wlo_166_fu_471_ap_return_25,
        ap_return_26 => grp_L2_wlo_166_fu_471_ap_return_26,
        ap_return_27 => grp_L2_wlo_166_fu_471_ap_return_27,
        ap_return_28 => grp_L2_wlo_166_fu_471_ap_return_28,
        ap_return_29 => grp_L2_wlo_166_fu_471_ap_return_29,
        ap_return_30 => grp_L2_wlo_166_fu_471_ap_return_30,
        ap_return_31 => grp_L2_wlo_166_fu_471_ap_return_31,
        ap_return_32 => grp_L2_wlo_166_fu_471_ap_return_32,
        ap_return_33 => grp_L2_wlo_166_fu_471_ap_return_33,
        ap_return_34 => grp_L2_wlo_166_fu_471_ap_return_34,
        ap_return_35 => grp_L2_wlo_166_fu_471_ap_return_35,
        ap_return_36 => grp_L2_wlo_166_fu_471_ap_return_36,
        ap_return_37 => grp_L2_wlo_166_fu_471_ap_return_37,
        ap_return_38 => grp_L2_wlo_166_fu_471_ap_return_38,
        ap_return_39 => grp_L2_wlo_166_fu_471_ap_return_39,
        ap_return_40 => grp_L2_wlo_166_fu_471_ap_return_40,
        ap_return_41 => grp_L2_wlo_166_fu_471_ap_return_41,
        ap_return_42 => grp_L2_wlo_166_fu_471_ap_return_42,
        ap_return_43 => grp_L2_wlo_166_fu_471_ap_return_43,
        ap_return_44 => grp_L2_wlo_166_fu_471_ap_return_44,
        ap_return_45 => grp_L2_wlo_166_fu_471_ap_return_45,
        ap_return_46 => grp_L2_wlo_166_fu_471_ap_return_46,
        ap_return_47 => grp_L2_wlo_166_fu_471_ap_return_47,
        ap_return_48 => grp_L2_wlo_166_fu_471_ap_return_48,
        ap_return_49 => grp_L2_wlo_166_fu_471_ap_return_49,
        ap_return_50 => grp_L2_wlo_166_fu_471_ap_return_50,
        ap_return_51 => grp_L2_wlo_166_fu_471_ap_return_51);

    grp_normalize_wlo_166_fu_789 : component normalize_wlo_166
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_normalize_wlo_166_fu_789_ap_start,
        ap_done => grp_normalize_wlo_166_fu_789_ap_done,
        ap_idle => grp_normalize_wlo_166_fu_789_ap_idle,
        ap_ready => grp_normalize_wlo_166_fu_789_ap_ready,
        LS_data_V_address0 => grp_normalize_wlo_166_fu_789_LS_data_V_address0,
        LS_data_V_ce0 => grp_normalize_wlo_166_fu_789_LS_data_V_ce0,
        LS_data_V_q0 => LS_data_V_q0,
        ap_return_0 => grp_normalize_wlo_166_fu_789_ap_return_0,
        ap_return_1 => grp_normalize_wlo_166_fu_789_ap_return_1,
        ap_return_2 => grp_normalize_wlo_166_fu_789_ap_return_2,
        ap_return_3 => grp_normalize_wlo_166_fu_789_ap_return_3,
        ap_return_4 => grp_normalize_wlo_166_fu_789_ap_return_4,
        ap_return_5 => grp_normalize_wlo_166_fu_789_ap_return_5,
        ap_return_6 => grp_normalize_wlo_166_fu_789_ap_return_6,
        ap_return_7 => grp_normalize_wlo_166_fu_789_ap_return_7,
        ap_return_8 => grp_normalize_wlo_166_fu_789_ap_return_8,
        ap_return_9 => grp_normalize_wlo_166_fu_789_ap_return_9,
        ap_return_10 => grp_normalize_wlo_166_fu_789_ap_return_10,
        ap_return_11 => grp_normalize_wlo_166_fu_789_ap_return_11,
        ap_return_12 => grp_normalize_wlo_166_fu_789_ap_return_12,
        ap_return_13 => grp_normalize_wlo_166_fu_789_ap_return_13,
        ap_return_14 => grp_normalize_wlo_166_fu_789_ap_return_14,
        ap_return_15 => grp_normalize_wlo_166_fu_789_ap_return_15,
        ap_return_16 => grp_normalize_wlo_166_fu_789_ap_return_16,
        ap_return_17 => grp_normalize_wlo_166_fu_789_ap_return_17,
        ap_return_18 => grp_normalize_wlo_166_fu_789_ap_return_18,
        ap_return_19 => grp_normalize_wlo_166_fu_789_ap_return_19,
        ap_return_20 => grp_normalize_wlo_166_fu_789_ap_return_20,
        ap_return_21 => grp_normalize_wlo_166_fu_789_ap_return_21,
        ap_return_22 => grp_normalize_wlo_166_fu_789_ap_return_22,
        ap_return_23 => grp_normalize_wlo_166_fu_789_ap_return_23,
        ap_return_24 => grp_normalize_wlo_166_fu_789_ap_return_24,
        ap_return_25 => grp_normalize_wlo_166_fu_789_ap_return_25,
        ap_return_26 => grp_normalize_wlo_166_fu_789_ap_return_26,
        ap_return_27 => grp_normalize_wlo_166_fu_789_ap_return_27,
        ap_return_28 => grp_normalize_wlo_166_fu_789_ap_return_28,
        ap_return_29 => grp_normalize_wlo_166_fu_789_ap_return_29,
        ap_return_30 => grp_normalize_wlo_166_fu_789_ap_return_30,
        ap_return_31 => grp_normalize_wlo_166_fu_789_ap_return_31,
        ap_return_32 => grp_normalize_wlo_166_fu_789_ap_return_32,
        ap_return_33 => grp_normalize_wlo_166_fu_789_ap_return_33,
        ap_return_34 => grp_normalize_wlo_166_fu_789_ap_return_34,
        ap_return_35 => grp_normalize_wlo_166_fu_789_ap_return_35,
        ap_return_36 => grp_normalize_wlo_166_fu_789_ap_return_36,
        ap_return_37 => grp_normalize_wlo_166_fu_789_ap_return_37,
        ap_return_38 => grp_normalize_wlo_166_fu_789_ap_return_38,
        ap_return_39 => grp_normalize_wlo_166_fu_789_ap_return_39,
        ap_return_40 => grp_normalize_wlo_166_fu_789_ap_return_40,
        ap_return_41 => grp_normalize_wlo_166_fu_789_ap_return_41,
        ap_return_42 => grp_normalize_wlo_166_fu_789_ap_return_42,
        ap_return_43 => grp_normalize_wlo_166_fu_789_ap_return_43,
        ap_return_44 => grp_normalize_wlo_166_fu_789_ap_return_44,
        ap_return_45 => grp_normalize_wlo_166_fu_789_ap_return_45,
        ap_return_46 => grp_normalize_wlo_166_fu_789_ap_return_46,
        ap_return_47 => grp_normalize_wlo_166_fu_789_ap_return_47,
        ap_return_48 => grp_normalize_wlo_166_fu_789_ap_return_48,
        ap_return_49 => grp_normalize_wlo_166_fu_789_ap_return_49,
        ap_return_50 => grp_normalize_wlo_166_fu_789_ap_return_50,
        ap_return_51 => grp_normalize_wlo_166_fu_789_ap_return_51,
        ap_return_52 => grp_normalize_wlo_166_fu_789_ap_return_52,
        ap_return_53 => grp_normalize_wlo_166_fu_789_ap_return_53,
        ap_return_54 => grp_normalize_wlo_166_fu_789_ap_return_54,
        ap_return_55 => grp_normalize_wlo_166_fu_789_ap_return_55,
        ap_return_56 => grp_normalize_wlo_166_fu_789_ap_return_56,
        ap_return_57 => grp_normalize_wlo_166_fu_789_ap_return_57,
        ap_return_58 => grp_normalize_wlo_166_fu_789_ap_return_58,
        ap_return_59 => grp_normalize_wlo_166_fu_789_ap_return_59,
        ap_return_60 => grp_normalize_wlo_166_fu_789_ap_return_60,
        ap_return_61 => grp_normalize_wlo_166_fu_789_ap_return_61,
        ap_return_62 => grp_normalize_wlo_166_fu_789_ap_return_62,
        ap_return_63 => grp_normalize_wlo_166_fu_789_ap_return_63,
        ap_return_64 => grp_normalize_wlo_166_fu_789_ap_return_64,
        ap_return_65 => grp_normalize_wlo_166_fu_789_ap_return_65,
        ap_return_66 => grp_normalize_wlo_166_fu_789_ap_return_66,
        ap_return_67 => grp_normalize_wlo_166_fu_789_ap_return_67,
        ap_return_68 => grp_normalize_wlo_166_fu_789_ap_return_68,
        ap_return_69 => grp_normalize_wlo_166_fu_789_ap_return_69,
        ap_return_70 => grp_normalize_wlo_166_fu_789_ap_return_70,
        ap_return_71 => grp_normalize_wlo_166_fu_789_ap_return_71,
        ap_return_72 => grp_normalize_wlo_166_fu_789_ap_return_72,
        ap_return_73 => grp_normalize_wlo_166_fu_789_ap_return_73,
        ap_return_74 => grp_normalize_wlo_166_fu_789_ap_return_74,
        ap_return_75 => grp_normalize_wlo_166_fu_789_ap_return_75,
        ap_return_76 => grp_normalize_wlo_166_fu_789_ap_return_76,
        ap_return_77 => grp_normalize_wlo_166_fu_789_ap_return_77,
        ap_return_78 => grp_normalize_wlo_166_fu_789_ap_return_78,
        ap_return_79 => grp_normalize_wlo_166_fu_789_ap_return_79,
        ap_return_80 => grp_normalize_wlo_166_fu_789_ap_return_80,
        ap_return_81 => grp_normalize_wlo_166_fu_789_ap_return_81,
        ap_return_82 => grp_normalize_wlo_166_fu_789_ap_return_82,
        ap_return_83 => grp_normalize_wlo_166_fu_789_ap_return_83,
        ap_return_84 => grp_normalize_wlo_166_fu_789_ap_return_84,
        ap_return_85 => grp_normalize_wlo_166_fu_789_ap_return_85,
        ap_return_86 => grp_normalize_wlo_166_fu_789_ap_return_86,
        ap_return_87 => grp_normalize_wlo_166_fu_789_ap_return_87,
        ap_return_88 => grp_normalize_wlo_166_fu_789_ap_return_88,
        ap_return_89 => grp_normalize_wlo_166_fu_789_ap_return_89,
        ap_return_90 => grp_normalize_wlo_166_fu_789_ap_return_90,
        ap_return_91 => grp_normalize_wlo_166_fu_789_ap_return_91,
        ap_return_92 => grp_normalize_wlo_166_fu_789_ap_return_92,
        ap_return_93 => grp_normalize_wlo_166_fu_789_ap_return_93,
        ap_return_94 => grp_normalize_wlo_166_fu_789_ap_return_94,
        ap_return_95 => grp_normalize_wlo_166_fu_789_ap_return_95,
        ap_return_96 => grp_normalize_wlo_166_fu_789_ap_return_96,
        ap_return_97 => grp_normalize_wlo_166_fu_789_ap_return_97,
        ap_return_98 => grp_normalize_wlo_166_fu_789_ap_return_98,
        ap_return_99 => grp_normalize_wlo_166_fu_789_ap_return_99,
        ap_return_100 => grp_normalize_wlo_166_fu_789_ap_return_100,
        ap_return_101 => grp_normalize_wlo_166_fu_789_ap_return_101,
        ap_return_102 => grp_normalize_wlo_166_fu_789_ap_return_102,
        ap_return_103 => grp_normalize_wlo_166_fu_789_ap_return_103);

    grp_L3_wlo_166_fu_798 : component L3_wlo_166
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_L3_wlo_166_fu_798_ap_start,
        ap_done => grp_L3_wlo_166_fu_798_ap_done,
        ap_idle => grp_L3_wlo_166_fu_798_ap_idle,
        ap_ready => grp_L3_wlo_166_fu_798_ap_ready,
        x_0_0_V_read => y_L2_0_0_V_reg_2334,
        x_0_1_V_read => y_L2_0_1_V_reg_2339,
        x_1_0_V_read => y_L2_1_0_V_reg_2344,
        x_1_1_V_read => y_L2_1_1_V_reg_2349,
        x_2_0_V_read => y_L2_2_0_V_reg_2354,
        x_2_1_V_read => y_L2_2_1_V_reg_2359,
        x_3_0_V_read => y_L2_3_0_V_reg_2364,
        x_3_1_V_read => y_L2_3_1_V_reg_2369,
        x_4_0_V_read => y_L2_4_0_V_reg_2374,
        x_4_1_V_read => y_L2_4_1_V_reg_2379,
        x_5_0_V_read => y_L2_5_0_V_reg_2384,
        x_5_1_V_read => y_L2_5_1_V_reg_2389,
        x_6_0_V_read => y_L2_6_0_V_reg_2394,
        x_6_1_V_read => y_L2_6_1_V_reg_2399,
        x_7_0_V_read => y_L2_7_0_V_reg_2404,
        x_7_1_V_read => y_L2_7_1_V_reg_2409,
        x_8_0_V_read => y_L2_8_0_V_reg_2414,
        x_8_1_V_read => y_L2_8_1_V_reg_2419,
        x_9_0_V_read => y_L2_9_0_V_reg_2424,
        x_9_1_V_read => y_L2_9_1_V_reg_2429,
        x_10_0_V_read => y_L2_10_0_V_reg_2434,
        x_10_1_V_read => y_L2_10_1_V_reg_2439,
        x_11_0_V_read => y_L2_11_0_V_reg_2444,
        x_11_1_V_read => y_L2_11_1_V_reg_2449,
        x_12_0_V_read => y_L2_12_0_V_reg_2454,
        x_12_1_V_read => y_L2_12_1_V_reg_2459,
        x_13_0_V_read => y_L2_13_0_V_reg_2464,
        x_13_1_V_read => y_L2_13_1_V_reg_2469,
        x_14_0_V_read => y_L2_14_0_V_reg_2474,
        x_14_1_V_read => y_L2_14_1_V_reg_2479,
        x_15_0_V_read => y_L2_15_0_V_reg_2484,
        x_15_1_V_read => y_L2_15_1_V_reg_2489,
        x_16_0_V_read => y_L2_16_0_V_reg_2494,
        x_16_1_V_read => y_L2_16_1_V_reg_2499,
        x_17_0_V_read => y_L2_17_0_V_reg_2504,
        x_17_1_V_read => y_L2_17_1_V_reg_2509,
        x_18_0_V_read => y_L2_18_0_V_reg_2514,
        x_18_1_V_read => y_L2_18_1_V_reg_2519,
        x_19_0_V_read => y_L2_19_0_V_reg_2524,
        x_19_1_V_read => y_L2_19_1_V_reg_2529,
        x_20_0_V_read => y_L2_20_0_V_reg_2534,
        x_20_1_V_read => y_L2_20_1_V_reg_2539,
        x_21_0_V_read => y_L2_21_0_V_reg_2544,
        x_21_1_V_read => y_L2_21_1_V_reg_2549,
        x_22_0_V_read => y_L2_22_0_V_reg_2554,
        x_22_1_V_read => y_L2_22_1_V_reg_2559,
        x_23_0_V_read => y_L2_23_0_V_reg_2564,
        x_23_1_V_read => y_L2_23_1_V_reg_2569,
        x_24_0_V_read => y_L2_24_0_V_reg_2574,
        x_24_1_V_read => y_L2_24_1_V_reg_2579,
        x_25_0_V_read => y_L2_25_0_V_reg_2584,
        x_25_1_V_read => y_L2_25_1_V_reg_2589,
        y_L3_V_address0 => grp_L3_wlo_166_fu_798_y_L3_V_address0,
        y_L3_V_ce0 => grp_L3_wlo_166_fu_798_y_L3_V_ce0,
        y_L3_V_we0 => grp_L3_wlo_166_fu_798_y_L3_V_we0,
        y_L3_V_d0 => grp_L3_wlo_166_fu_798_y_L3_V_d0);

    grp_separate_complex_wlo_fu_961 : component separate_complex_wlo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_separate_complex_wlo_fu_961_ap_start,
        ap_done => grp_separate_complex_wlo_fu_961_ap_done,
        ap_idle => grp_separate_complex_wlo_fu_961_ap_idle,
        ap_ready => grp_separate_complex_wlo_fu_961_ap_ready,
        LS_stream_TDATA => LS_stream_V_data_0_data_out,
        LS_stream_TVALID => grp_separate_complex_wlo_fu_961_LS_stream_TVALID,
        LS_stream_TREADY => grp_separate_complex_wlo_fu_961_LS_stream_TREADY,
        LS_stream_TLAST => LS_stream_V_last_V_0_data_out,
        sep_V_address0 => grp_separate_complex_wlo_fu_961_sep_V_address0,
        sep_V_ce0 => grp_separate_complex_wlo_fu_961_sep_V_ce0,
        sep_V_we0 => grp_separate_complex_wlo_fu_961_sep_V_we0,
        sep_V_d0 => grp_separate_complex_wlo_fu_961_sep_V_d0,
        sep_V_address1 => grp_separate_complex_wlo_fu_961_sep_V_address1,
        sep_V_ce1 => grp_separate_complex_wlo_fu_961_sep_V_ce1,
        sep_V_we1 => grp_separate_complex_wlo_fu_961_sep_V_we1,
        sep_V_d1 => grp_separate_complex_wlo_fu_961_sep_V_d1);

    grp_reconstruct_complex_s_fu_970 : component reconstruct_complex_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_reconstruct_complex_s_fu_970_ap_start,
        ap_done => grp_reconstruct_complex_s_fu_970_ap_done,
        ap_idle => grp_reconstruct_complex_s_fu_970_ap_idle,
        ap_ready => grp_reconstruct_complex_s_fu_970_ap_ready,
        y_L3_V_address0 => grp_reconstruct_complex_s_fu_970_y_L3_V_address0,
        y_L3_V_ce0 => grp_reconstruct_complex_s_fu_970_y_L3_V_ce0,
        y_L3_V_q0 => denorm_DNN_V_q0,
        y_L3_V_address1 => grp_reconstruct_complex_s_fu_970_y_L3_V_address1,
        y_L3_V_ce1 => grp_reconstruct_complex_s_fu_970_y_L3_V_ce1,
        y_L3_V_q1 => denorm_DNN_V_q1,
        DNN_out_TDATA => grp_reconstruct_complex_s_fu_970_DNN_out_TDATA,
        DNN_out_TVALID => grp_reconstruct_complex_s_fu_970_DNN_out_TVALID,
        DNN_out_TREADY => grp_reconstruct_complex_s_fu_970_DNN_out_TREADY,
        DNN_out_TLAST => grp_reconstruct_complex_s_fu_970_DNN_out_TLAST);

    DNN_wlo_166_mac_mc2C_U500 : component DNN_wlo_166_mac_mc2C
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 16,
        din2_WIDTH => 14,
        dout_WIDTH => 26)
    port map (
        din0 => grp_fu_1805_p0,
        din1 => y_L3_V_load_reg_2623,
        din2 => rhs_V_fu_1784_p3,
        dout => grp_fu_1805_p3);





    DNN_out_V_data_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                DNN_out_V_data_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = DNN_out_V_data_1_ack_out) and (ap_const_logic_1 = DNN_out_V_data_1_vld_out))) then 
                                        DNN_out_V_data_1_sel_rd <= not(DNN_out_V_data_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    DNN_out_V_data_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                DNN_out_V_data_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = DNN_out_V_data_1_ack_in) and (ap_const_logic_1 = DNN_out_V_data_1_vld_in))) then 
                                        DNN_out_V_data_1_sel_wr <= not(DNN_out_V_data_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    DNN_out_V_data_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                DNN_out_V_data_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = DNN_out_V_data_1_state) and (ap_const_logic_0 = DNN_out_V_data_1_vld_in)) or ((ap_const_lv2_3 = DNN_out_V_data_1_state) and (ap_const_logic_0 = DNN_out_V_data_1_vld_in) and (ap_const_logic_1 = DNN_out_V_data_1_ack_out)))) then 
                    DNN_out_V_data_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = DNN_out_V_data_1_state) and (ap_const_logic_0 = DNN_out_TREADY)) or ((ap_const_lv2_3 = DNN_out_V_data_1_state) and (ap_const_logic_0 = DNN_out_TREADY) and (ap_const_logic_1 = DNN_out_V_data_1_vld_in)))) then 
                    DNN_out_V_data_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = DNN_out_V_data_1_vld_in) and (ap_const_logic_1 = DNN_out_V_data_1_ack_out))) and not(((ap_const_logic_0 = DNN_out_TREADY) and (ap_const_logic_1 = DNN_out_V_data_1_vld_in))) and (ap_const_lv2_3 = DNN_out_V_data_1_state)) or ((ap_const_lv2_1 = DNN_out_V_data_1_state) and (ap_const_logic_1 = DNN_out_V_data_1_ack_out)) or ((ap_const_lv2_2 = DNN_out_V_data_1_state) and (ap_const_logic_1 = DNN_out_V_data_1_vld_in)))) then 
                    DNN_out_V_data_1_state <= ap_const_lv2_3;
                else 
                    DNN_out_V_data_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    DNN_out_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                DNN_out_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = DNN_out_V_last_V_1_ack_out) and (ap_const_logic_1 = DNN_out_V_last_V_1_vld_out))) then 
                                        DNN_out_V_last_V_1_sel_rd <= not(DNN_out_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    DNN_out_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                DNN_out_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = DNN_out_V_last_V_1_ack_in) and (ap_const_logic_1 = DNN_out_V_last_V_1_vld_in))) then 
                                        DNN_out_V_last_V_1_sel_wr <= not(DNN_out_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    DNN_out_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                DNN_out_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = DNN_out_V_last_V_1_state) and (ap_const_logic_0 = DNN_out_V_last_V_1_vld_in)) or ((ap_const_lv2_3 = DNN_out_V_last_V_1_state) and (ap_const_logic_0 = DNN_out_V_last_V_1_vld_in) and (ap_const_logic_1 = DNN_out_V_last_V_1_ack_out)))) then 
                    DNN_out_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = DNN_out_V_last_V_1_state) and (ap_const_logic_0 = DNN_out_TREADY)) or ((ap_const_lv2_3 = DNN_out_V_last_V_1_state) and (ap_const_logic_0 = DNN_out_TREADY) and (ap_const_logic_1 = DNN_out_V_last_V_1_vld_in)))) then 
                    DNN_out_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = DNN_out_V_last_V_1_vld_in) and (ap_const_logic_1 = DNN_out_V_last_V_1_ack_out))) and not(((ap_const_logic_0 = DNN_out_TREADY) and (ap_const_logic_1 = DNN_out_V_last_V_1_vld_in))) and (ap_const_lv2_3 = DNN_out_V_last_V_1_state)) or ((ap_const_lv2_1 = DNN_out_V_last_V_1_state) and (ap_const_logic_1 = DNN_out_V_last_V_1_ack_out)) or ((ap_const_lv2_2 = DNN_out_V_last_V_1_state) and (ap_const_logic_1 = DNN_out_V_last_V_1_vld_in)))) then 
                    DNN_out_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    DNN_out_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    LS_stream_V_data_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                LS_stream_V_data_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = LS_stream_V_data_0_ack_out) and (ap_const_logic_1 = LS_stream_V_data_0_vld_out))) then 
                                        LS_stream_V_data_0_sel_rd <= not(LS_stream_V_data_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    LS_stream_V_data_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                LS_stream_V_data_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = LS_stream_V_data_0_ack_in) and (ap_const_logic_1 = LS_stream_V_data_0_vld_in))) then 
                                        LS_stream_V_data_0_sel_wr <= not(LS_stream_V_data_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    LS_stream_V_data_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                LS_stream_V_data_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = LS_stream_V_data_0_state) and (ap_const_logic_0 = LS_stream_V_data_0_vld_in)) or ((ap_const_lv2_3 = LS_stream_V_data_0_state) and (ap_const_logic_0 = LS_stream_V_data_0_vld_in) and (ap_const_logic_1 = LS_stream_V_data_0_ack_out)))) then 
                    LS_stream_V_data_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = LS_stream_V_data_0_state) and (ap_const_logic_0 = LS_stream_V_data_0_ack_out)) or ((ap_const_lv2_3 = LS_stream_V_data_0_state) and (ap_const_logic_0 = LS_stream_V_data_0_ack_out) and (ap_const_logic_1 = LS_stream_V_data_0_vld_in)))) then 
                    LS_stream_V_data_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = LS_stream_V_data_0_vld_in) and (ap_const_logic_1 = LS_stream_V_data_0_ack_out))) and not(((ap_const_logic_0 = LS_stream_V_data_0_ack_out) and (ap_const_logic_1 = LS_stream_V_data_0_vld_in))) and (ap_const_lv2_3 = LS_stream_V_data_0_state)) or ((ap_const_lv2_1 = LS_stream_V_data_0_state) and (ap_const_logic_1 = LS_stream_V_data_0_ack_out)) or ((ap_const_lv2_2 = LS_stream_V_data_0_state) and (ap_const_logic_1 = LS_stream_V_data_0_vld_in)))) then 
                    LS_stream_V_data_0_state <= ap_const_lv2_3;
                else 
                    LS_stream_V_data_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    LS_stream_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                LS_stream_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = LS_stream_V_last_V_0_ack_out) and (ap_const_logic_1 = LS_stream_V_last_V_0_vld_out))) then 
                                        LS_stream_V_last_V_0_sel_rd <= not(LS_stream_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    LS_stream_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                LS_stream_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = LS_stream_V_last_V_0_ack_in) and (ap_const_logic_1 = LS_stream_V_last_V_0_vld_in))) then 
                                        LS_stream_V_last_V_0_sel_wr <= not(LS_stream_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    LS_stream_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                LS_stream_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = LS_stream_V_last_V_0_state) and (ap_const_logic_0 = LS_stream_V_last_V_0_vld_in)) or ((ap_const_lv2_3 = LS_stream_V_last_V_0_state) and (ap_const_logic_0 = LS_stream_V_last_V_0_vld_in) and (ap_const_logic_1 = LS_stream_V_last_V_0_ack_out)))) then 
                    LS_stream_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = LS_stream_V_last_V_0_state) and (ap_const_logic_0 = LS_stream_V_last_V_0_ack_out)) or ((ap_const_lv2_3 = LS_stream_V_last_V_0_state) and (ap_const_logic_0 = LS_stream_V_last_V_0_ack_out) and (ap_const_logic_1 = LS_stream_V_last_V_0_vld_in)))) then 
                    LS_stream_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = LS_stream_V_last_V_0_vld_in) and (ap_const_logic_1 = LS_stream_V_last_V_0_ack_out))) and not(((ap_const_logic_0 = LS_stream_V_last_V_0_ack_out) and (ap_const_logic_1 = LS_stream_V_last_V_0_vld_in))) and (ap_const_lv2_3 = LS_stream_V_last_V_0_state)) or ((ap_const_lv2_1 = LS_stream_V_last_V_0_state) and (ap_const_logic_1 = LS_stream_V_last_V_0_ack_out)) or ((ap_const_lv2_2 = LS_stream_V_last_V_0_state) and (ap_const_logic_1 = LS_stream_V_last_V_0_vld_in)))) then 
                    LS_stream_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    LS_stream_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((grp_L3_wlo_166_fu_798_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state8);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((grp_L3_wlo_166_fu_798_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_L2_wlo_166_fu_471_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_L2_wlo_166_fu_471_ap_start_reg <= ap_const_logic_0;
            else
                if (((grp_normalize_wlo_166_fu_789_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_L2_wlo_166_fu_471_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_L2_wlo_166_fu_471_ap_ready = ap_const_logic_1)) then 
                    grp_L2_wlo_166_fu_471_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_L3_wlo_166_fu_798_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_L3_wlo_166_fu_798_ap_start_reg <= ap_const_logic_0;
            else
                if (((grp_L2_wlo_166_fu_471_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    grp_L3_wlo_166_fu_798_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_L3_wlo_166_fu_798_ap_ready = ap_const_logic_1)) then 
                    grp_L3_wlo_166_fu_798_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_normalize_wlo_166_fu_789_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_normalize_wlo_166_fu_789_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_normalize_wlo_166_fu_789_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_normalize_wlo_166_fu_789_ap_ready = ap_const_logic_1)) then 
                    grp_normalize_wlo_166_fu_789_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_reconstruct_complex_s_fu_970_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_reconstruct_complex_s_fu_970_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_reconstruct_complex_s_fu_970_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_reconstruct_complex_s_fu_970_ap_ready = ap_const_logic_1)) then 
                    grp_reconstruct_complex_s_fu_970_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_separate_complex_wlo_fu_961_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_separate_complex_wlo_fu_961_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_separate_complex_wlo_fu_961_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_separate_complex_wlo_fu_961_ap_ready = ap_const_logic_1)) then 
                    grp_separate_complex_wlo_fu_961_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_reg_460_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln653_fu_1759_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_i_reg_460 <= i_fu_1765_p2;
            elsif (((grp_L3_wlo_166_fu_798_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_0_i_reg_460 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = DNN_out_V_data_1_load_A)) then
                DNN_out_V_data_1_payload_A <= grp_reconstruct_complex_s_fu_970_DNN_out_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = DNN_out_V_data_1_load_B)) then
                DNN_out_V_data_1_payload_B <= grp_reconstruct_complex_s_fu_970_DNN_out_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = DNN_out_V_last_V_1_load_A)) then
                DNN_out_V_last_V_1_payload_A <= grp_reconstruct_complex_s_fu_970_DNN_out_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = DNN_out_V_last_V_1_load_B)) then
                DNN_out_V_last_V_1_payload_B <= grp_reconstruct_complex_s_fu_970_DNN_out_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = LS_stream_V_data_0_load_A)) then
                LS_stream_V_data_0_payload_A <= LS_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = LS_stream_V_data_0_load_B)) then
                LS_stream_V_data_0_payload_B <= LS_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = LS_stream_V_last_V_0_load_A)) then
                LS_stream_V_last_V_0_payload_A <= LS_stream_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = LS_stream_V_last_V_0_load_B)) then
                LS_stream_V_last_V_0_payload_B <= LS_stream_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln653_reg_2594 <= icmp_ln653_fu_1759_p2;
                icmp_ln653_reg_2594_pp0_iter1_reg <= icmp_ln653_reg_2594;
                    zext_ln655_reg_2603_pp0_iter1_reg(6 downto 0) <= zext_ln655_reg_2603(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_normalize_wlo_166_fu_789_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                norm_LS_data_0_0_V_reg_1814 <= grp_normalize_wlo_166_fu_789_ap_return_0;
                norm_LS_data_0_1_V_reg_1819 <= grp_normalize_wlo_166_fu_789_ap_return_1;
                norm_LS_data_10_0_s_reg_1914 <= grp_normalize_wlo_166_fu_789_ap_return_20;
                norm_LS_data_10_1_s_reg_1919 <= grp_normalize_wlo_166_fu_789_ap_return_21;
                norm_LS_data_11_0_s_reg_1924 <= grp_normalize_wlo_166_fu_789_ap_return_22;
                norm_LS_data_11_1_s_reg_1929 <= grp_normalize_wlo_166_fu_789_ap_return_23;
                norm_LS_data_12_0_s_reg_1934 <= grp_normalize_wlo_166_fu_789_ap_return_24;
                norm_LS_data_12_1_s_reg_1939 <= grp_normalize_wlo_166_fu_789_ap_return_25;
                norm_LS_data_13_0_s_reg_1944 <= grp_normalize_wlo_166_fu_789_ap_return_26;
                norm_LS_data_13_1_s_reg_1949 <= grp_normalize_wlo_166_fu_789_ap_return_27;
                norm_LS_data_14_0_s_reg_1954 <= grp_normalize_wlo_166_fu_789_ap_return_28;
                norm_LS_data_14_1_s_reg_1959 <= grp_normalize_wlo_166_fu_789_ap_return_29;
                norm_LS_data_15_0_s_reg_1964 <= grp_normalize_wlo_166_fu_789_ap_return_30;
                norm_LS_data_15_1_s_reg_1969 <= grp_normalize_wlo_166_fu_789_ap_return_31;
                norm_LS_data_16_0_s_reg_1974 <= grp_normalize_wlo_166_fu_789_ap_return_32;
                norm_LS_data_16_1_s_reg_1979 <= grp_normalize_wlo_166_fu_789_ap_return_33;
                norm_LS_data_17_0_s_reg_1984 <= grp_normalize_wlo_166_fu_789_ap_return_34;
                norm_LS_data_17_1_s_reg_1989 <= grp_normalize_wlo_166_fu_789_ap_return_35;
                norm_LS_data_18_0_s_reg_1994 <= grp_normalize_wlo_166_fu_789_ap_return_36;
                norm_LS_data_18_1_s_reg_1999 <= grp_normalize_wlo_166_fu_789_ap_return_37;
                norm_LS_data_19_0_s_reg_2004 <= grp_normalize_wlo_166_fu_789_ap_return_38;
                norm_LS_data_19_1_s_reg_2009 <= grp_normalize_wlo_166_fu_789_ap_return_39;
                norm_LS_data_1_0_V_reg_1824 <= grp_normalize_wlo_166_fu_789_ap_return_2;
                norm_LS_data_1_1_V_reg_1829 <= grp_normalize_wlo_166_fu_789_ap_return_3;
                norm_LS_data_20_0_s_reg_2014 <= grp_normalize_wlo_166_fu_789_ap_return_40;
                norm_LS_data_20_1_s_reg_2019 <= grp_normalize_wlo_166_fu_789_ap_return_41;
                norm_LS_data_21_0_s_reg_2024 <= grp_normalize_wlo_166_fu_789_ap_return_42;
                norm_LS_data_21_1_s_reg_2029 <= grp_normalize_wlo_166_fu_789_ap_return_43;
                norm_LS_data_22_0_s_reg_2034 <= grp_normalize_wlo_166_fu_789_ap_return_44;
                norm_LS_data_22_1_s_reg_2039 <= grp_normalize_wlo_166_fu_789_ap_return_45;
                norm_LS_data_23_0_s_reg_2044 <= grp_normalize_wlo_166_fu_789_ap_return_46;
                norm_LS_data_23_1_s_reg_2049 <= grp_normalize_wlo_166_fu_789_ap_return_47;
                norm_LS_data_24_0_s_reg_2054 <= grp_normalize_wlo_166_fu_789_ap_return_48;
                norm_LS_data_24_1_s_reg_2059 <= grp_normalize_wlo_166_fu_789_ap_return_49;
                norm_LS_data_25_0_s_reg_2064 <= grp_normalize_wlo_166_fu_789_ap_return_50;
                norm_LS_data_25_1_s_reg_2069 <= grp_normalize_wlo_166_fu_789_ap_return_51;
                norm_LS_data_26_0_s_reg_2074 <= grp_normalize_wlo_166_fu_789_ap_return_52;
                norm_LS_data_26_1_s_reg_2079 <= grp_normalize_wlo_166_fu_789_ap_return_53;
                norm_LS_data_27_0_s_reg_2084 <= grp_normalize_wlo_166_fu_789_ap_return_54;
                norm_LS_data_27_1_s_reg_2089 <= grp_normalize_wlo_166_fu_789_ap_return_55;
                norm_LS_data_28_0_s_reg_2094 <= grp_normalize_wlo_166_fu_789_ap_return_56;
                norm_LS_data_28_1_s_reg_2099 <= grp_normalize_wlo_166_fu_789_ap_return_57;
                norm_LS_data_29_0_s_reg_2104 <= grp_normalize_wlo_166_fu_789_ap_return_58;
                norm_LS_data_29_1_s_reg_2109 <= grp_normalize_wlo_166_fu_789_ap_return_59;
                norm_LS_data_2_0_V_reg_1834 <= grp_normalize_wlo_166_fu_789_ap_return_4;
                norm_LS_data_2_1_V_reg_1839 <= grp_normalize_wlo_166_fu_789_ap_return_5;
                norm_LS_data_30_0_s_reg_2114 <= grp_normalize_wlo_166_fu_789_ap_return_60;
                norm_LS_data_30_1_s_reg_2119 <= grp_normalize_wlo_166_fu_789_ap_return_61;
                norm_LS_data_31_0_s_reg_2124 <= grp_normalize_wlo_166_fu_789_ap_return_62;
                norm_LS_data_31_1_s_reg_2129 <= grp_normalize_wlo_166_fu_789_ap_return_63;
                norm_LS_data_32_0_s_reg_2134 <= grp_normalize_wlo_166_fu_789_ap_return_64;
                norm_LS_data_32_1_s_reg_2139 <= grp_normalize_wlo_166_fu_789_ap_return_65;
                norm_LS_data_33_0_s_reg_2144 <= grp_normalize_wlo_166_fu_789_ap_return_66;
                norm_LS_data_33_1_s_reg_2149 <= grp_normalize_wlo_166_fu_789_ap_return_67;
                norm_LS_data_34_0_s_reg_2154 <= grp_normalize_wlo_166_fu_789_ap_return_68;
                norm_LS_data_34_1_s_reg_2159 <= grp_normalize_wlo_166_fu_789_ap_return_69;
                norm_LS_data_35_0_s_reg_2164 <= grp_normalize_wlo_166_fu_789_ap_return_70;
                norm_LS_data_35_1_s_reg_2169 <= grp_normalize_wlo_166_fu_789_ap_return_71;
                norm_LS_data_36_0_s_reg_2174 <= grp_normalize_wlo_166_fu_789_ap_return_72;
                norm_LS_data_36_1_s_reg_2179 <= grp_normalize_wlo_166_fu_789_ap_return_73;
                norm_LS_data_37_0_s_reg_2184 <= grp_normalize_wlo_166_fu_789_ap_return_74;
                norm_LS_data_37_1_s_reg_2189 <= grp_normalize_wlo_166_fu_789_ap_return_75;
                norm_LS_data_38_0_s_reg_2194 <= grp_normalize_wlo_166_fu_789_ap_return_76;
                norm_LS_data_38_1_s_reg_2199 <= grp_normalize_wlo_166_fu_789_ap_return_77;
                norm_LS_data_39_0_s_reg_2204 <= grp_normalize_wlo_166_fu_789_ap_return_78;
                norm_LS_data_39_1_s_reg_2209 <= grp_normalize_wlo_166_fu_789_ap_return_79;
                norm_LS_data_3_0_V_reg_1844 <= grp_normalize_wlo_166_fu_789_ap_return_6;
                norm_LS_data_3_1_V_reg_1849 <= grp_normalize_wlo_166_fu_789_ap_return_7;
                norm_LS_data_40_0_s_reg_2214 <= grp_normalize_wlo_166_fu_789_ap_return_80;
                norm_LS_data_40_1_s_reg_2219 <= grp_normalize_wlo_166_fu_789_ap_return_81;
                norm_LS_data_41_0_s_reg_2224 <= grp_normalize_wlo_166_fu_789_ap_return_82;
                norm_LS_data_41_1_s_reg_2229 <= grp_normalize_wlo_166_fu_789_ap_return_83;
                norm_LS_data_42_0_s_reg_2234 <= grp_normalize_wlo_166_fu_789_ap_return_84;
                norm_LS_data_42_1_s_reg_2239 <= grp_normalize_wlo_166_fu_789_ap_return_85;
                norm_LS_data_43_0_s_reg_2244 <= grp_normalize_wlo_166_fu_789_ap_return_86;
                norm_LS_data_43_1_s_reg_2249 <= grp_normalize_wlo_166_fu_789_ap_return_87;
                norm_LS_data_44_0_s_reg_2254 <= grp_normalize_wlo_166_fu_789_ap_return_88;
                norm_LS_data_44_1_s_reg_2259 <= grp_normalize_wlo_166_fu_789_ap_return_89;
                norm_LS_data_45_0_s_reg_2264 <= grp_normalize_wlo_166_fu_789_ap_return_90;
                norm_LS_data_45_1_s_reg_2269 <= grp_normalize_wlo_166_fu_789_ap_return_91;
                norm_LS_data_46_0_s_reg_2274 <= grp_normalize_wlo_166_fu_789_ap_return_92;
                norm_LS_data_46_1_s_reg_2279 <= grp_normalize_wlo_166_fu_789_ap_return_93;
                norm_LS_data_47_0_s_reg_2284 <= grp_normalize_wlo_166_fu_789_ap_return_94;
                norm_LS_data_47_1_s_reg_2289 <= grp_normalize_wlo_166_fu_789_ap_return_95;
                norm_LS_data_48_0_s_reg_2294 <= grp_normalize_wlo_166_fu_789_ap_return_96;
                norm_LS_data_48_1_s_reg_2299 <= grp_normalize_wlo_166_fu_789_ap_return_97;
                norm_LS_data_49_0_s_reg_2304 <= grp_normalize_wlo_166_fu_789_ap_return_98;
                norm_LS_data_49_1_s_reg_2309 <= grp_normalize_wlo_166_fu_789_ap_return_99;
                norm_LS_data_4_0_V_reg_1854 <= grp_normalize_wlo_166_fu_789_ap_return_8;
                norm_LS_data_4_1_V_reg_1859 <= grp_normalize_wlo_166_fu_789_ap_return_9;
                norm_LS_data_50_0_s_reg_2314 <= grp_normalize_wlo_166_fu_789_ap_return_100;
                norm_LS_data_50_1_s_reg_2319 <= grp_normalize_wlo_166_fu_789_ap_return_101;
                norm_LS_data_51_0_s_reg_2324 <= grp_normalize_wlo_166_fu_789_ap_return_102;
                norm_LS_data_51_1_s_reg_2329 <= grp_normalize_wlo_166_fu_789_ap_return_103;
                norm_LS_data_5_0_V_reg_1864 <= grp_normalize_wlo_166_fu_789_ap_return_10;
                norm_LS_data_5_1_V_reg_1869 <= grp_normalize_wlo_166_fu_789_ap_return_11;
                norm_LS_data_6_0_V_reg_1874 <= grp_normalize_wlo_166_fu_789_ap_return_12;
                norm_LS_data_6_1_V_reg_1879 <= grp_normalize_wlo_166_fu_789_ap_return_13;
                norm_LS_data_7_0_V_reg_1884 <= grp_normalize_wlo_166_fu_789_ap_return_14;
                norm_LS_data_7_1_V_reg_1889 <= grp_normalize_wlo_166_fu_789_ap_return_15;
                norm_LS_data_8_0_V_reg_1894 <= grp_normalize_wlo_166_fu_789_ap_return_16;
                norm_LS_data_8_1_V_reg_1899 <= grp_normalize_wlo_166_fu_789_ap_return_17;
                norm_LS_data_9_0_V_reg_1904 <= grp_normalize_wlo_166_fu_789_ap_return_18;
                norm_LS_data_9_1_V_reg_1909 <= grp_normalize_wlo_166_fu_789_ap_return_19;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln653_reg_2594 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_Val2_12_reg_2633 <= mean_o_V_q0;
                std_o_V_load_reg_2628 <= std_o_V_q0;
                y_L3_V_load_reg_2623 <= y_L3_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_L2_wlo_166_fu_471_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                y_L2_0_0_V_reg_2334 <= grp_L2_wlo_166_fu_471_ap_return_0;
                y_L2_0_1_V_reg_2339 <= grp_L2_wlo_166_fu_471_ap_return_1;
                y_L2_10_0_V_reg_2434 <= grp_L2_wlo_166_fu_471_ap_return_20;
                y_L2_10_1_V_reg_2439 <= grp_L2_wlo_166_fu_471_ap_return_21;
                y_L2_11_0_V_reg_2444 <= grp_L2_wlo_166_fu_471_ap_return_22;
                y_L2_11_1_V_reg_2449 <= grp_L2_wlo_166_fu_471_ap_return_23;
                y_L2_12_0_V_reg_2454 <= grp_L2_wlo_166_fu_471_ap_return_24;
                y_L2_12_1_V_reg_2459 <= grp_L2_wlo_166_fu_471_ap_return_25;
                y_L2_13_0_V_reg_2464 <= grp_L2_wlo_166_fu_471_ap_return_26;
                y_L2_13_1_V_reg_2469 <= grp_L2_wlo_166_fu_471_ap_return_27;
                y_L2_14_0_V_reg_2474 <= grp_L2_wlo_166_fu_471_ap_return_28;
                y_L2_14_1_V_reg_2479 <= grp_L2_wlo_166_fu_471_ap_return_29;
                y_L2_15_0_V_reg_2484 <= grp_L2_wlo_166_fu_471_ap_return_30;
                y_L2_15_1_V_reg_2489 <= grp_L2_wlo_166_fu_471_ap_return_31;
                y_L2_16_0_V_reg_2494 <= grp_L2_wlo_166_fu_471_ap_return_32;
                y_L2_16_1_V_reg_2499 <= grp_L2_wlo_166_fu_471_ap_return_33;
                y_L2_17_0_V_reg_2504 <= grp_L2_wlo_166_fu_471_ap_return_34;
                y_L2_17_1_V_reg_2509 <= grp_L2_wlo_166_fu_471_ap_return_35;
                y_L2_18_0_V_reg_2514 <= grp_L2_wlo_166_fu_471_ap_return_36;
                y_L2_18_1_V_reg_2519 <= grp_L2_wlo_166_fu_471_ap_return_37;
                y_L2_19_0_V_reg_2524 <= grp_L2_wlo_166_fu_471_ap_return_38;
                y_L2_19_1_V_reg_2529 <= grp_L2_wlo_166_fu_471_ap_return_39;
                y_L2_1_0_V_reg_2344 <= grp_L2_wlo_166_fu_471_ap_return_2;
                y_L2_1_1_V_reg_2349 <= grp_L2_wlo_166_fu_471_ap_return_3;
                y_L2_20_0_V_reg_2534 <= grp_L2_wlo_166_fu_471_ap_return_40;
                y_L2_20_1_V_reg_2539 <= grp_L2_wlo_166_fu_471_ap_return_41;
                y_L2_21_0_V_reg_2544 <= grp_L2_wlo_166_fu_471_ap_return_42;
                y_L2_21_1_V_reg_2549 <= grp_L2_wlo_166_fu_471_ap_return_43;
                y_L2_22_0_V_reg_2554 <= grp_L2_wlo_166_fu_471_ap_return_44;
                y_L2_22_1_V_reg_2559 <= grp_L2_wlo_166_fu_471_ap_return_45;
                y_L2_23_0_V_reg_2564 <= grp_L2_wlo_166_fu_471_ap_return_46;
                y_L2_23_1_V_reg_2569 <= grp_L2_wlo_166_fu_471_ap_return_47;
                y_L2_24_0_V_reg_2574 <= grp_L2_wlo_166_fu_471_ap_return_48;
                y_L2_24_1_V_reg_2579 <= grp_L2_wlo_166_fu_471_ap_return_49;
                y_L2_25_0_V_reg_2584 <= grp_L2_wlo_166_fu_471_ap_return_50;
                y_L2_25_1_V_reg_2589 <= grp_L2_wlo_166_fu_471_ap_return_51;
                y_L2_2_0_V_reg_2354 <= grp_L2_wlo_166_fu_471_ap_return_4;
                y_L2_2_1_V_reg_2359 <= grp_L2_wlo_166_fu_471_ap_return_5;
                y_L2_3_0_V_reg_2364 <= grp_L2_wlo_166_fu_471_ap_return_6;
                y_L2_3_1_V_reg_2369 <= grp_L2_wlo_166_fu_471_ap_return_7;
                y_L2_4_0_V_reg_2374 <= grp_L2_wlo_166_fu_471_ap_return_8;
                y_L2_4_1_V_reg_2379 <= grp_L2_wlo_166_fu_471_ap_return_9;
                y_L2_5_0_V_reg_2384 <= grp_L2_wlo_166_fu_471_ap_return_10;
                y_L2_5_1_V_reg_2389 <= grp_L2_wlo_166_fu_471_ap_return_11;
                y_L2_6_0_V_reg_2394 <= grp_L2_wlo_166_fu_471_ap_return_12;
                y_L2_6_1_V_reg_2399 <= grp_L2_wlo_166_fu_471_ap_return_13;
                y_L2_7_0_V_reg_2404 <= grp_L2_wlo_166_fu_471_ap_return_14;
                y_L2_7_1_V_reg_2409 <= grp_L2_wlo_166_fu_471_ap_return_15;
                y_L2_8_0_V_reg_2414 <= grp_L2_wlo_166_fu_471_ap_return_16;
                y_L2_8_1_V_reg_2419 <= grp_L2_wlo_166_fu_471_ap_return_17;
                y_L2_9_0_V_reg_2424 <= grp_L2_wlo_166_fu_471_ap_return_18;
                y_L2_9_1_V_reg_2429 <= grp_L2_wlo_166_fu_471_ap_return_19;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln653_fu_1759_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln655_reg_2603(6 downto 0) <= zext_ln655_fu_1771_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln655_reg_2603(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln655_reg_2603_pp0_iter1_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (DNN_out_TREADY, DNN_out_V_data_1_state, DNN_out_V_last_V_1_state, ap_CS_fsm, ap_CS_fsm_state5, grp_normalize_wlo_166_fu_789_ap_done, ap_CS_fsm_state6, grp_L2_wlo_166_fu_471_ap_done, icmp_ln653_fu_1759_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state7, grp_L3_wlo_166_fu_798_ap_done, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, grp_separate_complex_wlo_fu_961_ap_done, grp_reconstruct_complex_s_fu_970_ap_done, ap_CS_fsm_state3, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_separate_complex_wlo_fu_961_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((grp_normalize_wlo_166_fu_789_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((grp_L2_wlo_166_fu_471_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((grp_L3_wlo_166_fu_798_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln653_fu_1759_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln653_fu_1759_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_reconstruct_complex_s_fu_970_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if ((not(((ap_const_lv2_1 = DNN_out_V_last_V_1_state) or (ap_const_lv2_1 = DNN_out_V_data_1_state) or ((ap_const_lv2_3 = DNN_out_V_last_V_1_state) and (ap_const_logic_0 = DNN_out_TREADY)) or ((ap_const_lv2_3 = DNN_out_V_data_1_state) and (ap_const_logic_0 = DNN_out_TREADY)))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    DNN_out_TDATA <= DNN_out_V_data_1_data_out;
    DNN_out_TLAST <= DNN_out_V_last_V_1_data_out;
    DNN_out_TVALID <= DNN_out_V_last_V_1_state(0);
    DNN_out_V_data_1_ack_in <= DNN_out_V_data_1_state(1);
    DNN_out_V_data_1_ack_out <= DNN_out_TREADY;

    DNN_out_V_data_1_data_out_assign_proc : process(DNN_out_V_data_1_payload_A, DNN_out_V_data_1_payload_B, DNN_out_V_data_1_sel)
    begin
        if ((ap_const_logic_1 = DNN_out_V_data_1_sel)) then 
            DNN_out_V_data_1_data_out <= DNN_out_V_data_1_payload_B;
        else 
            DNN_out_V_data_1_data_out <= DNN_out_V_data_1_payload_A;
        end if; 
    end process;

    DNN_out_V_data_1_load_A <= (not(DNN_out_V_data_1_sel_wr) and DNN_out_V_data_1_state_cmp_full);
    DNN_out_V_data_1_load_B <= (DNN_out_V_data_1_state_cmp_full and DNN_out_V_data_1_sel_wr);
    DNN_out_V_data_1_sel <= DNN_out_V_data_1_sel_rd;
    DNN_out_V_data_1_state_cmp_full <= '0' when (DNN_out_V_data_1_state = ap_const_lv2_1) else '1';
    DNN_out_V_data_1_vld_in <= grp_reconstruct_complex_s_fu_970_DNN_out_TVALID;
    DNN_out_V_data_1_vld_out <= DNN_out_V_data_1_state(0);
    DNN_out_V_last_V_1_ack_in <= DNN_out_V_last_V_1_state(1);
    DNN_out_V_last_V_1_ack_out <= DNN_out_TREADY;

    DNN_out_V_last_V_1_data_out_assign_proc : process(DNN_out_V_last_V_1_payload_A, DNN_out_V_last_V_1_payload_B, DNN_out_V_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = DNN_out_V_last_V_1_sel)) then 
            DNN_out_V_last_V_1_data_out <= DNN_out_V_last_V_1_payload_B;
        else 
            DNN_out_V_last_V_1_data_out <= DNN_out_V_last_V_1_payload_A;
        end if; 
    end process;

    DNN_out_V_last_V_1_load_A <= (not(DNN_out_V_last_V_1_sel_wr) and DNN_out_V_last_V_1_state_cmp_full);
    DNN_out_V_last_V_1_load_B <= (DNN_out_V_last_V_1_state_cmp_full and DNN_out_V_last_V_1_sel_wr);
    DNN_out_V_last_V_1_sel <= DNN_out_V_last_V_1_sel_rd;
    DNN_out_V_last_V_1_state_cmp_full <= '0' when (DNN_out_V_last_V_1_state = ap_const_lv2_1) else '1';
    DNN_out_V_last_V_1_vld_in <= grp_reconstruct_complex_s_fu_970_DNN_out_TVALID;
    DNN_out_V_last_V_1_vld_out <= DNN_out_V_last_V_1_state(0);

    LS_data_V_address0_assign_proc : process(ap_CS_fsm_state5, grp_normalize_wlo_166_fu_789_LS_data_V_address0, grp_separate_complex_wlo_fu_961_sep_V_address0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            LS_data_V_address0 <= grp_separate_complex_wlo_fu_961_sep_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            LS_data_V_address0 <= grp_normalize_wlo_166_fu_789_LS_data_V_address0;
        else 
            LS_data_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    LS_data_V_ce0_assign_proc : process(ap_CS_fsm_state5, grp_normalize_wlo_166_fu_789_LS_data_V_ce0, grp_separate_complex_wlo_fu_961_sep_V_ce0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            LS_data_V_ce0 <= grp_separate_complex_wlo_fu_961_sep_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            LS_data_V_ce0 <= grp_normalize_wlo_166_fu_789_LS_data_V_ce0;
        else 
            LS_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    LS_data_V_ce1_assign_proc : process(grp_separate_complex_wlo_fu_961_sep_V_ce1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            LS_data_V_ce1 <= grp_separate_complex_wlo_fu_961_sep_V_ce1;
        else 
            LS_data_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    LS_data_V_we0_assign_proc : process(grp_separate_complex_wlo_fu_961_sep_V_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            LS_data_V_we0 <= grp_separate_complex_wlo_fu_961_sep_V_we0;
        else 
            LS_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    LS_data_V_we1_assign_proc : process(grp_separate_complex_wlo_fu_961_sep_V_we1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            LS_data_V_we1 <= grp_separate_complex_wlo_fu_961_sep_V_we1;
        else 
            LS_data_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    LS_stream_TREADY <= LS_stream_V_last_V_0_state(1);
    LS_stream_V_data_0_ack_in <= LS_stream_V_data_0_state(1);

    LS_stream_V_data_0_ack_out_assign_proc : process(grp_separate_complex_wlo_fu_961_LS_stream_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            LS_stream_V_data_0_ack_out <= grp_separate_complex_wlo_fu_961_LS_stream_TREADY;
        else 
            LS_stream_V_data_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    LS_stream_V_data_0_data_out_assign_proc : process(LS_stream_V_data_0_payload_A, LS_stream_V_data_0_payload_B, LS_stream_V_data_0_sel)
    begin
        if ((ap_const_logic_1 = LS_stream_V_data_0_sel)) then 
            LS_stream_V_data_0_data_out <= LS_stream_V_data_0_payload_B;
        else 
            LS_stream_V_data_0_data_out <= LS_stream_V_data_0_payload_A;
        end if; 
    end process;

    LS_stream_V_data_0_load_A <= (not(LS_stream_V_data_0_sel_wr) and LS_stream_V_data_0_state_cmp_full);
    LS_stream_V_data_0_load_B <= (LS_stream_V_data_0_state_cmp_full and LS_stream_V_data_0_sel_wr);
    LS_stream_V_data_0_sel <= LS_stream_V_data_0_sel_rd;
    LS_stream_V_data_0_state_cmp_full <= '0' when (LS_stream_V_data_0_state = ap_const_lv2_1) else '1';
    LS_stream_V_data_0_vld_in <= LS_stream_TVALID;
    LS_stream_V_data_0_vld_out <= LS_stream_V_data_0_state(0);
    LS_stream_V_last_V_0_ack_in <= LS_stream_V_last_V_0_state(1);

    LS_stream_V_last_V_0_ack_out_assign_proc : process(grp_separate_complex_wlo_fu_961_LS_stream_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            LS_stream_V_last_V_0_ack_out <= grp_separate_complex_wlo_fu_961_LS_stream_TREADY;
        else 
            LS_stream_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    LS_stream_V_last_V_0_data_out_assign_proc : process(LS_stream_V_last_V_0_payload_A, LS_stream_V_last_V_0_payload_B, LS_stream_V_last_V_0_sel)
    begin
        if ((ap_const_logic_1 = LS_stream_V_last_V_0_sel)) then 
            LS_stream_V_last_V_0_data_out <= LS_stream_V_last_V_0_payload_B;
        else 
            LS_stream_V_last_V_0_data_out <= LS_stream_V_last_V_0_payload_A;
        end if; 
    end process;

    LS_stream_V_last_V_0_load_A <= (not(LS_stream_V_last_V_0_sel_wr) and LS_stream_V_last_V_0_state_cmp_full);
    LS_stream_V_last_V_0_load_B <= (LS_stream_V_last_V_0_state_cmp_full and LS_stream_V_last_V_0_sel_wr);
    LS_stream_V_last_V_0_sel <= LS_stream_V_last_V_0_sel_rd;
    LS_stream_V_last_V_0_state_cmp_full <= '0' when (LS_stream_V_last_V_0_state = ap_const_lv2_1) else '1';
    LS_stream_V_last_V_0_vld_in <= LS_stream_TVALID;
    LS_stream_V_last_V_0_vld_out <= LS_stream_V_last_V_0_state(0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state11 <= ap_CS_fsm(8);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_assign_proc : process(DNN_out_TREADY, DNN_out_V_data_1_state, DNN_out_V_last_V_1_state)
    begin
                ap_block_state13 <= ((ap_const_lv2_1 = DNN_out_V_last_V_1_state) or (ap_const_lv2_1 = DNN_out_V_data_1_state) or ((ap_const_lv2_3 = DNN_out_V_last_V_1_state) and (ap_const_logic_0 = DNN_out_TREADY)) or ((ap_const_lv2_3 = DNN_out_V_data_1_state) and (ap_const_logic_0 = DNN_out_TREADY)));
    end process;

        ap_block_state8_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state8_assign_proc : process(icmp_ln653_fu_1759_p2)
    begin
        if ((icmp_ln653_fu_1759_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    denorm_DNN_V_address0_assign_proc : process(zext_ln655_reg_2603_pp0_iter1_reg, ap_enable_reg_pp0_iter2, grp_reconstruct_complex_s_fu_970_y_L3_V_address0, ap_CS_fsm_state12, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            denorm_DNN_V_address0 <= zext_ln655_reg_2603_pp0_iter1_reg(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            denorm_DNN_V_address0 <= grp_reconstruct_complex_s_fu_970_y_L3_V_address0;
        else 
            denorm_DNN_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    denorm_DNN_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2, grp_reconstruct_complex_s_fu_970_y_L3_V_ce0, ap_CS_fsm_state12)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            denorm_DNN_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            denorm_DNN_V_ce0 <= grp_reconstruct_complex_s_fu_970_y_L3_V_ce0;
        else 
            denorm_DNN_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    denorm_DNN_V_ce1_assign_proc : process(grp_reconstruct_complex_s_fu_970_y_L3_V_ce1, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            denorm_DNN_V_ce1 <= grp_reconstruct_complex_s_fu_970_y_L3_V_ce1;
        else 
            denorm_DNN_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    denorm_DNN_V_d0 <= grp_fu_1805_p3(25 downto 10);

    denorm_DNN_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln653_reg_2594_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln653_reg_2594_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            denorm_DNN_V_we0 <= ap_const_logic_1;
        else 
            denorm_DNN_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_L2_wlo_166_fu_471_ap_start <= grp_L2_wlo_166_fu_471_ap_start_reg;
    grp_L3_wlo_166_fu_798_ap_start <= grp_L3_wlo_166_fu_798_ap_start_reg;
    grp_fu_1805_p0 <= grp_fu_1805_p00(10 - 1 downto 0);
    grp_fu_1805_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_o_V_load_reg_2628),26));
    grp_normalize_wlo_166_fu_789_ap_start <= grp_normalize_wlo_166_fu_789_ap_start_reg;
    grp_reconstruct_complex_s_fu_970_DNN_out_TREADY <= ((ap_CS_fsm_state12 and DNN_out_V_last_V_1_ack_in) or (ap_CS_fsm_state12 and DNN_out_V_data_1_ack_in));
    grp_reconstruct_complex_s_fu_970_ap_start <= grp_reconstruct_complex_s_fu_970_ap_start_reg;
    grp_separate_complex_wlo_fu_961_LS_stream_TVALID <= LS_stream_V_last_V_0_state(0);
    grp_separate_complex_wlo_fu_961_ap_start <= grp_separate_complex_wlo_fu_961_ap_start_reg;
    i_fu_1765_p2 <= std_logic_vector(unsigned(i_0_i_reg_460) + unsigned(ap_const_lv7_1));
    icmp_ln653_fu_1759_p2 <= "1" when (i_0_i_reg_460 = ap_const_lv7_68) else "0";
    mean_o_V_address0 <= zext_ln655_fu_1771_p1(7 - 1 downto 0);

    mean_o_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            mean_o_V_ce0 <= ap_const_logic_1;
        else 
            mean_o_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rhs_V_fu_1784_p3 <= (p_Val2_12_reg_2633 & ap_const_lv10_0);
    std_o_V_address0 <= zext_ln655_fu_1771_p1(7 - 1 downto 0);

    std_o_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            std_o_V_ce0 <= ap_const_logic_1;
        else 
            std_o_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_L3_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln655_fu_1771_p1, ap_CS_fsm_state7, grp_L3_wlo_166_fu_798_y_L3_V_address0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_L3_V_address0 <= zext_ln655_fu_1771_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            y_L3_V_address0 <= grp_L3_wlo_166_fu_798_y_L3_V_address0;
        else 
            y_L3_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    y_L3_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state7, grp_L3_wlo_166_fu_798_y_L3_V_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_L3_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            y_L3_V_ce0 <= grp_L3_wlo_166_fu_798_y_L3_V_ce0;
        else 
            y_L3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_L3_V_we0_assign_proc : process(ap_CS_fsm_state7, grp_L3_wlo_166_fu_798_y_L3_V_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            y_L3_V_we0 <= grp_L3_wlo_166_fu_798_y_L3_V_we0;
        else 
            y_L3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln655_fu_1771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_460),64));
end behav;
