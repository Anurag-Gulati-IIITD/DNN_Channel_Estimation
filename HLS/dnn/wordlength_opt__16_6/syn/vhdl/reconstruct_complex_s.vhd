-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity reconstruct_complex_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    y_L3_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    y_L3_V_ce0 : OUT STD_LOGIC;
    y_L3_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    y_L3_V_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    y_L3_V_ce1 : OUT STD_LOGIC;
    y_L3_V_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    DNN_out_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    DNN_out_TVALID : OUT STD_LOGIC;
    DNN_out_TREADY : IN STD_LOGIC;
    DNN_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of reconstruct_complex_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_34 : STD_LOGIC_VECTOR (5 downto 0) := "110100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv7_34 : STD_LOGIC_VECTOR (6 downto 0) := "0110100";
    constant ap_const_lv6_33 : STD_LOGIC_VECTOR (5 downto 0) := "110011";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv16_FFE8 : STD_LOGIC_VECTOR (15 downto 0) := "1111111111101000";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal DNN_out_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln661_reg_751 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln661_reg_751_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_137 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln661_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln661_reg_751_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln661_reg_751_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_154_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_last_V_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_770 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_770_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_770_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_770_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_775 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_775_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_775_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_15_fu_192_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_15_reg_780 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_15_reg_780_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_15_reg_780_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_7_fu_206_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_7_reg_785 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_7_reg_785_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_fu_214_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_reg_792 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln935_1_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_1_reg_797 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_1_reg_797_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_1_reg_797_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_18_fu_230_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_18_reg_802 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_18_reg_802_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_18_reg_802_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_9_fu_244_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_9_reg_807 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_9_reg_807_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_10_fu_252_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_10_reg_814 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln944_fu_277_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_reg_819 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln944_fu_283_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln944_reg_825 : STD_LOGIC_VECTOR (15 downto 0);
    signal lsb_index_fu_287_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_reg_830 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_836 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln947_fu_307_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln947_reg_841 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln943_fu_313_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_846 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_846_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln944_1_fu_332_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_1_reg_851 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln944_1_fu_338_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln944_1_reg_857 : STD_LOGIC_VECTOR (15 downto 0);
    signal lsb_index_1_fu_342_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_1_reg_862 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_868 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln947_1_fu_362_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln947_1_reg_873 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln943_1_fu_368_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_1_reg_878 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_1_reg_878_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal m_s_reg_883 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_12_reg_888 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_3_reg_893 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_16_reg_898 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal zext_ln666_fu_164_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln666_1_fu_175_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln661_fu_160_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln666_fu_169_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_V_fu_200_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_4_fu_238_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_16_fu_262_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_269_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln947_fu_303_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_19_fu_317_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_1_fu_324_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln947_1_fu_358_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln947_fu_377_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln947_fu_380_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_6_fu_386_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln947_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln947_1_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_403_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln949_fu_416_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_7_fu_421_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln949_2_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_fu_448_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln958_fu_456_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln958_fu_467_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln958_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln958_fu_461_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln958_fu_472_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_1_fu_478_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_440_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_2_fu_486_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln947_1_fu_515_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln947_1_fu_518_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_12_fu_524_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln947_2_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln947_3_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_541_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln949_1_fu_554_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_13_fu_559_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_1_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_1_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_1_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln949_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_9_fu_586_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln958_1_fu_594_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln958_1_fu_605_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln958_1_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln958_1_fu_599_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln958_1_fu_610_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_10_fu_616_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln949_1_fu_578_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_12_fu_624_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln964_fu_651_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln964_fu_658_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_fu_663_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_15_fu_648_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_669_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln964_1_fu_691_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln964_1_fu_698_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_1_fu_703_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_16_fu_688_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_709_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_17_fu_676_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_20_fu_716_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln162_1_fu_735_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln162_fu_728_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln661_fu_148_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_reg_137 <= i_fu_154_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_137 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln661_reg_751 <= icmp_ln661_fu_148_p2;
                icmp_ln661_reg_751_pp0_iter1_reg <= icmp_ln661_reg_751;
                tmp_last_V_reg_770_pp0_iter1_reg <= tmp_last_V_reg_770;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln661_reg_751_pp0_iter2_reg <= icmp_ln661_reg_751_pp0_iter1_reg;
                icmp_ln661_reg_751_pp0_iter3_reg <= icmp_ln661_reg_751_pp0_iter2_reg;
                icmp_ln935_1_reg_797_pp0_iter2_reg <= icmp_ln935_1_reg_797;
                icmp_ln935_1_reg_797_pp0_iter3_reg <= icmp_ln935_1_reg_797_pp0_iter2_reg;
                icmp_ln935_reg_775_pp0_iter2_reg <= icmp_ln935_reg_775;
                icmp_ln935_reg_775_pp0_iter3_reg <= icmp_ln935_reg_775_pp0_iter2_reg;
                p_Result_15_reg_780_pp0_iter2_reg <= p_Result_15_reg_780;
                p_Result_15_reg_780_pp0_iter3_reg <= p_Result_15_reg_780_pp0_iter2_reg;
                p_Result_18_reg_802_pp0_iter2_reg <= p_Result_18_reg_802;
                p_Result_18_reg_802_pp0_iter3_reg <= p_Result_18_reg_802_pp0_iter2_reg;
                tmp_V_7_reg_785_pp0_iter2_reg <= tmp_V_7_reg_785;
                tmp_V_9_reg_807_pp0_iter2_reg <= tmp_V_9_reg_807;
                tmp_last_V_reg_770_pp0_iter2_reg <= tmp_last_V_reg_770_pp0_iter1_reg;
                tmp_last_V_reg_770_pp0_iter3_reg <= tmp_last_V_reg_770_pp0_iter2_reg;
                trunc_ln943_1_reg_878_pp0_iter3_reg <= trunc_ln943_1_reg_878;
                trunc_ln943_reg_846_pp0_iter3_reg <= trunc_ln943_reg_846;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln661_reg_751 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln935_1_reg_797 <= icmp_ln935_1_fu_224_p2;
                icmp_ln935_reg_775 <= icmp_ln935_fu_186_p2;
                p_Result_10_reg_814 <= p_Result_10_fu_252_p4;
                p_Result_15_reg_780 <= y_L3_V_q0(15 downto 15);
                p_Result_18_reg_802 <= y_L3_V_q1(15 downto 15);
                p_Result_s_reg_792 <= p_Result_s_fu_214_p4;
                tmp_V_7_reg_785 <= tmp_V_7_fu_206_p3;
                tmp_V_9_reg_807 <= tmp_V_9_fu_244_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln661_reg_751_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln935_1_reg_797 = ap_const_lv1_0))) then
                lsb_index_1_reg_862 <= lsb_index_1_fu_342_p2;
                sub_ln944_1_reg_851 <= sub_ln944_1_fu_332_p2;
                sub_ln947_1_reg_873 <= sub_ln947_1_fu_362_p2;
                tmp_14_reg_868 <= lsb_index_1_fu_342_p2(31 downto 1);
                trunc_ln943_1_reg_878 <= trunc_ln943_1_fu_368_p1;
                trunc_ln944_1_reg_857 <= trunc_ln944_1_fu_338_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln935_reg_775 = ap_const_lv1_0) and (icmp_ln661_reg_751_pp0_iter1_reg = ap_const_lv1_0))) then
                lsb_index_reg_830 <= lsb_index_fu_287_p2;
                sub_ln944_reg_819 <= sub_ln944_fu_277_p2;
                sub_ln947_reg_841 <= sub_ln947_fu_307_p2;
                tmp_10_reg_836 <= lsb_index_fu_287_p2(31 downto 1);
                trunc_ln943_reg_846 <= trunc_ln943_fu_313_p1;
                trunc_ln944_reg_825 <= trunc_ln944_fu_283_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln661_reg_751_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln935_1_reg_797_pp0_iter2_reg = ap_const_lv1_0))) then
                m_3_reg_893 <= m_12_fu_624_p2(31 downto 1);
                tmp_16_reg_898 <= m_12_fu_624_p2(25 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln935_reg_775_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln661_reg_751_pp0_iter2_reg = ap_const_lv1_0))) then
                m_s_reg_883 <= m_2_fu_486_p2(31 downto 1);
                tmp_12_reg_888 <= m_2_fu_486_p2(25 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln661_fu_148_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_last_V_reg_770 <= tmp_last_V_fu_180_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter4, icmp_ln661_fu_148_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln661_fu_148_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln661_fu_148_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    DNN_out_TDATA <= (select_ln162_1_fu_735_p3 & select_ln162_fu_728_p3);

    DNN_out_TDATA_blk_n_assign_proc : process(DNN_out_TREADY, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, icmp_ln661_reg_751_pp0_iter3_reg)
    begin
        if (((icmp_ln661_reg_751_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            DNN_out_TDATA_blk_n <= DNN_out_TREADY;
        else 
            DNN_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    DNN_out_TLAST <= tmp_last_V_reg_770_pp0_iter3_reg;

    DNN_out_TVALID_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln661_reg_751_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln661_reg_751_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            DNN_out_TVALID <= ap_const_logic_1;
        else 
            DNN_out_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    a_1_fu_535_p2 <= (icmp_ln947_3_fu_529_p2 and icmp_ln947_2_fu_510_p2);
    a_fu_397_p2 <= (icmp_ln947_fu_372_p2 and icmp_ln947_1_fu_391_p2);
    add_ln666_fu_169_p2 <= std_logic_vector(unsigned(ap_const_lv7_34) + unsigned(zext_ln661_fu_160_p1));
    add_ln949_1_fu_554_p2 <= std_logic_vector(signed(ap_const_lv16_FFE8) + signed(trunc_ln944_1_reg_857));
    add_ln949_fu_416_p2 <= std_logic_vector(signed(ap_const_lv16_FFE8) + signed(trunc_ln944_reg_825));
    add_ln958_1_fu_594_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE7) + signed(sub_ln944_1_reg_851));
    add_ln958_fu_456_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE7) + signed(sub_ln944_reg_819));
    add_ln964_1_fu_703_p2 <= std_logic_vector(unsigned(select_ln964_1_fu_691_p3) + unsigned(sub_ln964_1_fu_698_p2));
    add_ln964_fu_663_p2 <= std_logic_vector(unsigned(select_ln964_fu_651_p3) + unsigned(sub_ln964_fu_658_p2));
    and_ln949_1_fu_566_p2 <= (xor_ln949_1_fu_548_p2 and p_Result_13_fu_559_p3);
    and_ln949_fu_428_p2 <= (xor_ln949_fu_410_p2 and p_Result_7_fu_421_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_state6_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_io));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_state6_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_io));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_io_assign_proc : process(DNN_out_TREADY, icmp_ln661_reg_751_pp0_iter3_reg)
    begin
                ap_block_state6_io <= ((icmp_ln661_reg_751_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_0 = DNN_out_TREADY));
    end process;

        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln661_fu_148_p2)
    begin
        if ((icmp_ln661_fu_148_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_154_p2 <= std_logic_vector(unsigned(i_0_reg_137) + unsigned(ap_const_lv6_1));
    icmp_ln661_fu_148_p2 <= "1" when (i_0_reg_137 = ap_const_lv6_34) else "0";
    icmp_ln935_1_fu_224_p2 <= "1" when (y_L3_V_q1 = ap_const_lv16_0) else "0";
    icmp_ln935_fu_186_p2 <= "1" when (y_L3_V_q0 = ap_const_lv16_0) else "0";
    icmp_ln947_1_fu_391_p2 <= "0" when (p_Result_6_fu_386_p2 = ap_const_lv16_0) else "1";
    icmp_ln947_2_fu_510_p2 <= "1" when (signed(tmp_14_reg_868) > signed(ap_const_lv31_0)) else "0";
    icmp_ln947_3_fu_529_p2 <= "0" when (p_Result_12_fu_524_p2 = ap_const_lv16_0) else "1";
    icmp_ln947_fu_372_p2 <= "1" when (signed(tmp_10_reg_836) > signed(ap_const_lv31_0)) else "0";
    icmp_ln958_1_fu_589_p2 <= "1" when (signed(lsb_index_1_reg_862) > signed(ap_const_lv32_0)) else "0";
    icmp_ln958_fu_451_p2 <= "1" when (signed(lsb_index_reg_830) > signed(ap_const_lv32_0)) else "0";
    
    l_1_fu_324_p3_proc : process(p_Result_19_fu_317_p3)
    begin
        l_1_fu_324_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_19_fu_317_p3(i) = '1' then
                l_1_fu_324_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    l_fu_269_p3_proc : process(p_Result_16_fu_262_p3)
    begin
        l_fu_269_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_16_fu_262_p3(i) = '1' then
                l_fu_269_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lsb_index_1_fu_342_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE8) + signed(sub_ln944_1_fu_332_p2));
    lsb_index_fu_287_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE8) + signed(sub_ln944_fu_277_p2));
    lshr_ln947_1_fu_518_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv16_FFFF),to_integer(unsigned('0' & zext_ln947_1_fu_515_p1(16-1 downto 0)))));
    lshr_ln947_fu_380_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv16_FFFF),to_integer(unsigned('0' & zext_ln947_fu_377_p1(16-1 downto 0)))));
    lshr_ln958_1_fu_599_p2 <= std_logic_vector(shift_right(unsigned(m_9_fu_586_p1),to_integer(unsigned('0' & add_ln958_1_fu_594_p2(31-1 downto 0)))));
    lshr_ln958_fu_461_p2 <= std_logic_vector(shift_right(unsigned(m_fu_448_p1),to_integer(unsigned('0' & add_ln958_fu_456_p2(31-1 downto 0)))));
    m_10_fu_616_p3 <= 
        lshr_ln958_1_fu_599_p2 when (icmp_ln958_1_fu_589_p2(0) = '1') else 
        shl_ln958_1_fu_610_p2;
    m_12_fu_624_p2 <= std_logic_vector(unsigned(m_10_fu_616_p3) + unsigned(or_ln949_1_fu_578_p3));
    m_15_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_s_reg_883),32));
    m_16_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_3_reg_893),32));
    m_1_fu_478_p3 <= 
        lshr_ln958_fu_461_p2 when (icmp_ln958_fu_451_p2(0) = '1') else 
        shl_ln958_fu_472_p2;
    m_2_fu_486_p2 <= std_logic_vector(unsigned(m_1_fu_478_p3) + unsigned(or_ln_fu_440_p3));
    m_9_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_9_reg_807_pp0_iter2_reg),32));
    m_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_7_reg_785_pp0_iter2_reg),32));
    or_ln949_1_fu_578_p3 <= (ap_const_lv31_0 & or_ln949_fu_572_p2);
    or_ln949_2_fu_434_p2 <= (and_ln949_fu_428_p2 or a_fu_397_p2);
    or_ln949_fu_572_p2 <= (and_ln949_1_fu_566_p2 or a_1_fu_535_p2);
    or_ln_fu_440_p3 <= (ap_const_lv31_0 & or_ln949_2_fu_434_p2);
    
    p_Result_10_fu_252_p4_proc : process(tmp_V_9_fu_244_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable p_Result_10_fu_252_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_F(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := tmp_V_9_fu_244_p3;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_F(4-1 downto 0)));
            for p_Result_10_fu_252_p4_i in 0 to 16-1 loop
                v0_cpy(p_Result_10_fu_252_p4_i) := tmp_V_9_fu_244_p3(16-1-p_Result_10_fu_252_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(16-1 downto 0)))));
        res_mask := res_mask(16-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_10_fu_252_p4 <= resvalue(16-1 downto 0);
    end process;

    p_Result_12_fu_524_p2 <= (tmp_V_9_reg_807_pp0_iter2_reg and lshr_ln947_1_fu_518_p2);
    p_Result_13_fu_559_p3 <= tmp_V_9_reg_807_pp0_iter2_reg(to_integer(unsigned(add_ln949_1_fu_554_p2)) downto to_integer(unsigned(add_ln949_1_fu_554_p2))) when (to_integer(unsigned(add_ln949_1_fu_554_p2))>= 0 and to_integer(unsigned(add_ln949_1_fu_554_p2))<=15) else "-";
    p_Result_15_fu_192_p3 <= y_L3_V_q0(15 downto 15);
    p_Result_16_fu_262_p3 <= (ap_const_lv16_FFFF & p_Result_s_reg_792);
    p_Result_17_fu_676_p5 <= (tmp_4_fu_669_p3 & m_15_fu_648_p1(22 downto 0));
    p_Result_18_fu_230_p3 <= y_L3_V_q1(15 downto 15);
    p_Result_19_fu_317_p3 <= (ap_const_lv16_FFFF & p_Result_10_reg_814);
    p_Result_20_fu_716_p5 <= (tmp_6_fu_709_p3 & m_16_fu_688_p1(22 downto 0));
    p_Result_6_fu_386_p2 <= (tmp_V_7_reg_785_pp0_iter2_reg and lshr_ln947_fu_380_p2);
    p_Result_7_fu_421_p3 <= tmp_V_7_reg_785_pp0_iter2_reg(to_integer(unsigned(add_ln949_fu_416_p2)) downto to_integer(unsigned(add_ln949_fu_416_p2))) when (to_integer(unsigned(add_ln949_fu_416_p2))>= 0 and to_integer(unsigned(add_ln949_fu_416_p2))<=15) else "-";
    
    p_Result_s_fu_214_p4_proc : process(tmp_V_7_fu_206_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable p_Result_s_fu_214_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_F(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := tmp_V_7_fu_206_p3;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_F(4-1 downto 0)));
            for p_Result_s_fu_214_p4_i in 0 to 16-1 loop
                v0_cpy(p_Result_s_fu_214_p4_i) := tmp_V_7_fu_206_p3(16-1-p_Result_s_fu_214_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(16-1 downto 0)))));
        res_mask := res_mask(16-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_214_p4 <= resvalue(16-1 downto 0);
    end process;

    select_ln162_1_fu_735_p3 <= 
        ap_const_lv32_0 when (icmp_ln935_1_reg_797_pp0_iter3_reg(0) = '1') else 
        p_Result_20_fu_716_p5;
    select_ln162_fu_728_p3 <= 
        ap_const_lv32_0 when (icmp_ln935_reg_775_pp0_iter3_reg(0) = '1') else 
        p_Result_17_fu_676_p5;
    select_ln964_1_fu_691_p3 <= 
        ap_const_lv8_7F when (tmp_16_reg_898(0) = '1') else 
        ap_const_lv8_7E;
    select_ln964_fu_651_p3 <= 
        ap_const_lv8_7F when (tmp_12_reg_888(0) = '1') else 
        ap_const_lv8_7E;
    shl_ln958_1_fu_610_p2 <= std_logic_vector(shift_left(unsigned(m_9_fu_586_p1),to_integer(unsigned('0' & sub_ln958_1_fu_605_p2(31-1 downto 0)))));
    shl_ln958_fu_472_p2 <= std_logic_vector(shift_left(unsigned(m_fu_448_p1),to_integer(unsigned('0' & sub_ln958_fu_467_p2(31-1 downto 0)))));
    sub_ln944_1_fu_332_p2 <= std_logic_vector(unsigned(ap_const_lv32_10) - unsigned(l_1_fu_324_p3));
    sub_ln944_fu_277_p2 <= std_logic_vector(unsigned(ap_const_lv32_10) - unsigned(l_fu_269_p3));
    sub_ln947_1_fu_362_p2 <= std_logic_vector(unsigned(ap_const_lv5_9) - unsigned(trunc_ln947_1_fu_358_p1));
    sub_ln947_fu_307_p2 <= std_logic_vector(unsigned(ap_const_lv5_9) - unsigned(trunc_ln947_fu_303_p1));
    sub_ln958_1_fu_605_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_1_reg_851));
    sub_ln958_fu_467_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_reg_819));
    sub_ln964_1_fu_698_p2 <= std_logic_vector(unsigned(ap_const_lv8_6) - unsigned(trunc_ln943_1_reg_878_pp0_iter3_reg));
    sub_ln964_fu_658_p2 <= std_logic_vector(unsigned(ap_const_lv8_6) - unsigned(trunc_ln943_reg_846_pp0_iter3_reg));
    tmp_11_fu_403_p3 <= lsb_index_reg_830(31 downto 31);
    tmp_15_fu_541_p3 <= lsb_index_1_reg_862(31 downto 31);
    tmp_4_fu_669_p3 <= (p_Result_15_reg_780_pp0_iter3_reg & add_ln964_fu_663_p2);
    tmp_6_fu_709_p3 <= (p_Result_18_reg_802_pp0_iter3_reg & add_ln964_1_fu_703_p2);
    tmp_V_4_fu_238_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(y_L3_V_q1));
    tmp_V_7_fu_206_p3 <= 
        tmp_V_fu_200_p2 when (p_Result_15_fu_192_p3(0) = '1') else 
        y_L3_V_q0;
    tmp_V_9_fu_244_p3 <= 
        tmp_V_4_fu_238_p2 when (p_Result_18_fu_230_p3(0) = '1') else 
        y_L3_V_q1;
    tmp_V_fu_200_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(y_L3_V_q0));
    tmp_last_V_fu_180_p2 <= "1" when (i_0_reg_137 = ap_const_lv6_33) else "0";
    trunc_ln943_1_fu_368_p1 <= l_1_fu_324_p3(8 - 1 downto 0);
    trunc_ln943_fu_313_p1 <= l_fu_269_p3(8 - 1 downto 0);
    trunc_ln944_1_fu_338_p1 <= sub_ln944_1_fu_332_p2(16 - 1 downto 0);
    trunc_ln944_fu_283_p1 <= sub_ln944_fu_277_p2(16 - 1 downto 0);
    trunc_ln947_1_fu_358_p1 <= sub_ln944_1_fu_332_p2(5 - 1 downto 0);
    trunc_ln947_fu_303_p1 <= sub_ln944_fu_277_p2(5 - 1 downto 0);
    xor_ln949_1_fu_548_p2 <= (tmp_15_fu_541_p3 xor ap_const_lv1_1);
    xor_ln949_fu_410_p2 <= (tmp_11_fu_403_p3 xor ap_const_lv1_1);
    y_L3_V_address0 <= zext_ln666_fu_164_p1(7 - 1 downto 0);
    y_L3_V_address1 <= zext_ln666_1_fu_175_p1(7 - 1 downto 0);

    y_L3_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_L3_V_ce0 <= ap_const_logic_1;
        else 
            y_L3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_L3_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_L3_V_ce1 <= ap_const_logic_1;
        else 
            y_L3_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln661_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_137),7));
    zext_ln666_1_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln666_fu_169_p2),64));
    zext_ln666_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_137),64));
    zext_ln947_1_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_1_reg_873),16));
    zext_ln947_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_reg_841),16));
end behav;
