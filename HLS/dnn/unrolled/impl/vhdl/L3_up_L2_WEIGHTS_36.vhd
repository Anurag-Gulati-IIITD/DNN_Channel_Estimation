-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_36_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_36_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100001011010010000100110110", 
    1 => "00111010111010000100001001110100", 
    2 => "10111011111111000100011111100101", 
    3 => "00111010101110000110101100010110", 
    4 => "00111100010111111001101111011100", 
    5 => "00111011010110011110100000111110", 
    6 => "00111011001011000100101101001101", 
    7 => "10111100000001101000111111010010", 
    8 => "10111011100111100101010111000001", 
    9 => "10111010111011000101001010100100", 
    10 => "00111100100000000111001101011000", 
    11 => "00111100100001011000001101100010", 
    12 => "00111100011010100110001110110111", 
    13 => "00111011100001000111101100100100", 
    14 => "10111011001100010100011001011111", 
    15 => "10111100001011101000100111101100", 
    16 => "10111011101101101011111101000100", 
    17 => "00111011100001100110101000010010", 
    18 => "00111011101100010101011100100110", 
    19 => "10111011001000110000110110110111", 
    20 => "00111011110011010010000010110000", 
    21 => "10111011011010011110010111100010", 
    22 => "00111011000000110101010110001010", 
    23 => "10111010101111001011111001100010", 
    24 => "10111100000010000001000110110010", 
    25 => "10111011100010001001001110111000", 
    26 => "10111011010111011111100001101110", 
    27 => "10111100000100101101110110111110", 
    28 => "10111011010110111100111011001000", 
    29 => "00111011010011010011000101110111", 
    30 => "00111011001110110000101000101101", 
    31 => "00111100001111110010111101010101", 
    32 => "00111100011010000111110100101100", 
    33 => "10111011001011101111101100101011", 
    34 => "00111100000000011110010001110001", 
    35 => "00111011110110011100111100010100", 
    36 => "10111011010101011100011101000111", 
    37 => "00111010110101000101011000101110", 
    38 => "10111100010111111000101100010101", 
    39 => "10111100000010111111110000100010", 
    40 => "10111010111111000101000001001000", 
    41 => "00111010100010111001011101111000", 
    42 => "00111100010110010111001011001101", 
    43 => "00111100001001110100001110100110", 
    44 => "10111011010000001100111010010010", 
    45 => "10111100011011000101101100001000", 
    46 => "10111100010100110111001110110000", 
    47 => "00111011101111111101101101001101", 
    48 => "00111011111110111001011110111011", 
    49 => "00111011011111001101011010000000", 
    50 => "10111100010010000011111011001001", 
    51 => "10111100100101011111100010010000", 
    52 => "10111100000010100000110100110101", 
    53 => "10111011100100101110011000100001", 
    54 => "10111011001100010000001101000011", 
    55 => "00111010100011010010101000100000", 
    56 => "00111011100101111101100011001111", 
    57 => "10111011101110001111000101001110", 
    58 => "10111100000101100001001111010011", 
    59 => "10111100000100011110001000010101", 
    60 => "00111100000010100101010010000010", 
    61 => "00111100010000011101011011010000", 
    62 => "00111100001110101100101101000011", 
    63 => "00111011101000010101100110000001", 
    64 => "10111100010000101001001110001110", 
    65 => "10111100011000100001000100000010", 
    66 => "10111100000110001000000010010101", 
    67 => "10111010111000011011010010111011", 
    68 => "10111011010001100010111001001101", 
    69 => "00111100011110110000100100100000", 
    70 => "00111011111011111110010100000000", 
    71 => "00111010010000000110100111101000", 
    72 => "00111010101010101100100101101101", 
    73 => "00111011001111100001111010110100", 
    74 => "10111100001011001101111000011010", 
    75 => "10111011010011101000000100000010", 
    76 => "00111000110001110011101010111101", 
    77 => "10111000111001001001011011101110", 
    78 => "00111010101010101010011111011111", 
    79 => "00111011000100001110011001101101", 
    80 => "00111011010111001010100011100011", 
    81 => "00111011000111110101000101101001", 
    82 => "00111100000111111000110000100010", 
    83 => "10111011110000111011000011000100", 
    84 => "00111100000010001011000100010100", 
    85 => "10111011000010101100111000100101", 
    86 => "10111011000110001100001110110001", 
    87 => "00111011100101000111100011001000", 
    88 => "10111100000111101101001110010101", 
    89 => "10111100001000001100001010000011", 
    90 => "10111010010110011101011101110111", 
    91 => "00111010011011010011110110000110", 
    92 => "00111100001111111111000001000101", 
    93 => "00111100000101000000101110111011", 
    94 => "10111010100010101100111000100101", 
    95 => "10111100001101110011100011100111", 
    96 => "10111100000011010100101110101101", 
    97 => "10111011000011101101111001010101", 
    98 => "00111010001011011000101000010001", 
    99 => "00111100000001110000110110100110", 
    100 => "10111011000100010110110010100100", 
    101 => "10111100001110110101000101111010", 
    102 => "10111011001101000011100101011000", 
    103 => "00111010101001100011001100000101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_36 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_36 is
    component L3_up_L2_WEIGHTS_36_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_36_rom_U :  component L3_up_L2_WEIGHTS_36_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


