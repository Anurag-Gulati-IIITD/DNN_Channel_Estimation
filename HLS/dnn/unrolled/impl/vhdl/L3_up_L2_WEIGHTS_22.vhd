-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_22_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_22_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111011010110111000101110101100", 
    1 => "10111100111111011010101001010000", 
    2 => "10111100000100000111010100101110", 
    3 => "00111101000011110000110001111000", 
    4 => "00111011001011110010110110000000", 
    5 => "10111100100101101100000111100011", 
    6 => "10111101110000000101010101110101", 
    7 => "10111101011000110101000011010011", 
    8 => "00111101000001000000000110000010", 
    9 => "00111101100010011101000011101010", 
    10 => "00111101010010100001010010001100", 
    11 => "10111100010001110101001111100111", 
    12 => "10111101101110001100011101011100", 
    13 => "10111101100001010000101001000110", 
    14 => "10111100110100011010001000011111", 
    15 => "00111101011110111011011000100100", 
    16 => "00111101100101100101011011101111", 
    17 => "10111001100011010000100010010010", 
    18 => "10111101100011000010110011100100", 
    19 => "10111101101001000110000111111010", 
    20 => "10111011100100110001100001110110", 
    21 => "00111101011001110000010010111100", 
    22 => "00111101100110110111011100111010", 
    23 => "00111101001010101111111111110011", 
    24 => "10111101010001001110111001111100", 
    25 => "10111101101010001111100001100010", 
    26 => "00111011010101101011001000101001", 
    27 => "00111101010001101000010001001001", 
    28 => "00111101011101000001011111001010", 
    29 => "00111101001010100010010011001100", 
    30 => "10111011011001100010100110010101", 
    31 => "10111101000111010011011101111110", 
    32 => "10111100110011011101001011110010", 
    33 => "10111100111000011100011110011011", 
    34 => "10111101001111001010110110011011", 
    35 => "10111100111011011000110100110111", 
    36 => "00111101000011001010100000011010", 
    37 => "00111101011110110100100000001010", 
    38 => "00111101101011100000111100111101", 
    39 => "00111100111001100100110100111100", 
    40 => "10111101000011000101011001010000", 
    41 => "10111101101000010111110000011100", 
    42 => "10111101101000000010101001111000", 
    43 => "10111100101000011101010100111101", 
    44 => "00111101011000111100101110000001", 
    45 => "00111101100111111001100000110001", 
    46 => "00111101010110010111000010110101", 
    47 => "00111100010000011000111110000010", 
    48 => "10111100101000110101110101101000", 
    49 => "10111100011101111100001001000100", 
    50 => "10111101000001100001111010010011", 
    51 => "10111100111001111001100010010110", 
    52 => "00111100100101011001100000011000", 
    53 => "00111100101001010001001110110110", 
    54 => "00111100011101001101101111100000", 
    55 => "10111100011100100010001110011110", 
    56 => "10111100111111111000110010101000", 
    57 => "10111101001110000011010110011100", 
    58 => "00111100100100011110010000101110", 
    59 => "00111101010100001001001110010110", 
    60 => "00111101100001111011101100110000", 
    61 => "00111100111000101001000011101111", 
    62 => "10111100111101110110100000010110", 
    63 => "10111101101011001111000110000000", 
    64 => "10111101001010010001110010001111", 
    65 => "00111101000101010011001101101110", 
    66 => "00111101100001001110010100001100", 
    67 => "00111101011000011001110010011101", 
    68 => "10111100010111101011010100101101", 
    69 => "10111101100101001101101111100000", 
    70 => "10111101011100101010101011100011", 
    71 => "00111101000010000111111111001100", 
    72 => "00111101101110001101100010101001", 
    73 => "00111101001101101110111110000000", 
    74 => "10111100110111001111111011011111", 
    75 => "10111101101001101100111000110110", 
    76 => "10111101100101011010000001111011", 
    77 => "10111011011101111101101101101110", 
    78 => "00111101010101101111000000000111", 
    79 => "00111100100011011101011000010111", 
    80 => "10111001111010111110110111111010", 
    81 => "10111100111110101010111011110011", 
    82 => "10111101001000011101011101010110", 
    83 => "10111100100000110001101011010010", 
    84 => "10111101000010000001011111111100", 
    85 => "10111100000001100000000100110110", 
    86 => "00111100110110001111110101011101", 
    87 => "00111101000101010000010101001011", 
    88 => "00111101100010000100111100001001", 
    89 => "00111100000111000101101000111110", 
    90 => "10111100111100001011001010000101", 
    91 => "10111101100111110101011100101110", 
    92 => "10111101101101001110111010111111", 
    93 => "10111100100101010001101001000011", 
    94 => "00111101011100110100011000010011", 
    95 => "00111101100011100000001010100111", 
    96 => "00111101011001101011111001111011", 
    97 => "00111011111010101000110110101000", 
    98 => "10111100010111000010001010101011", 
    99 => "10111101010000000001111101110101", 
    100 => "10111101000101100110011110110110", 
    101 => "10111100011001010111010100111010", 
    102 => "10111100010111110100001111001000", 
    103 => "00111101010101001100000100100010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_22 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_22 is
    component L3_up_L2_WEIGHTS_22_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_22_rom_U :  component L3_up_L2_WEIGHTS_22_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


