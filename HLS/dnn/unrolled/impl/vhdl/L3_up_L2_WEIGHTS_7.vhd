-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_7_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_7_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111011011000011110011100010000", 
    1 => "00111101000000100011111110101011", 
    2 => "00111100000100110011111000110110", 
    3 => "10111101000100100011001111011111", 
    4 => "10111011001011011101110111110100", 
    5 => "00111100100111000010011111101001", 
    6 => "00111101110001010010100110111011", 
    7 => "00111101011010001111011011001111", 
    8 => "10111101000010000010110011110101", 
    9 => "10111101100011011000010001001101", 
    10 => "10111101010011110100010100010111", 
    11 => "00111100010011010110011111111101", 
    12 => "00111101101111010111001111001001", 
    13 => "00111101100010001101111100110111", 
    14 => "00111100110101111101010110101010", 
    15 => "10111101100000001101011011110101", 
    16 => "10111101100110100001111000111111", 
    17 => "00111001001011010000001111011010", 
    18 => "00111101100011110101101000010000", 
    19 => "00111101101010000011100100000100", 
    20 => "00111011100101010100001000011100", 
    21 => "10111101011011000110110011011011", 
    22 => "10111101100111110010101010011101", 
    23 => "10111101001011101110010000011001", 
    24 => "00111101010010011111001011111110", 
    25 => "00111101101011011000101110100100", 
    26 => "10111011010110101111010010101110", 
    27 => "10111101010010111111111000111011", 
    28 => "10111101011110110010010101110000", 
    29 => "10111101001011110010100001000001", 
    30 => "00111011011001010110000001000010", 
    31 => "00111101001000011101101001111011", 
    32 => "00111100110100111110000010111101", 
    33 => "00111100111010001000010110010000", 
    34 => "00111101010000011000011100011110", 
    35 => "00111100111100110000000111101011", 
    36 => "10111101000100001000110000111111", 
    37 => "10111101100000001110011000101010", 
    38 => "10111101101100100111010011100010", 
    39 => "10111100111010111010100011000110", 
    40 => "00111101000100000000000011001001", 
    41 => "00111101101001011001010110111100", 
    42 => "00111101101001000100011010110111", 
    43 => "00111100101001001101110100101111", 
    44 => "10111101011010011000000000101100", 
    45 => "10111101101000111011110001001101", 
    46 => "10111101010111101000111101101101", 
    47 => "10111100010001011110001011001110", 
    48 => "00111100101001111110011100111010", 
    49 => "00111100011111011111110000011010", 
    50 => "00111101000010011100000010101001", 
    51 => "00111100111011010010001001000010", 
    52 => "10111100100110000110110110110101", 
    53 => "10111100101010010111111000010011", 
    54 => "10111100011110110000100100100000", 
    55 => "00111100011110100000100101000110", 
    56 => "00111101000000101110011101110001", 
    57 => "00111101001111000100111100111100", 
    58 => "10111100100101100111110010101111", 
    59 => "10111101010101100100000011101010", 
    60 => "10111101100010110011101100110010", 
    61 => "10111100111001111111000010101010", 
    62 => "00111100111111101011111100100011", 
    63 => "00111101101100010100010001000110", 
    64 => "00111101001011011100100011111100", 
    65 => "10111101000110001101001101101011", 
    66 => "10111101100010000100000001011011", 
    67 => "10111101011001110111101100111001", 
    68 => "00111100011000100000110011010000", 
    69 => "00111101100110000110010001000101", 
    70 => "00111101011110000101001011111000", 
    71 => "10111101000010111001111011001111", 
    72 => "10111101101111010011101100101010", 
    73 => "10111101001110110000111101101011", 
    74 => "00111100111000101111110111111100", 
    75 => "00111101101010110000111110101110", 
    76 => "00111101100110010110010000011111", 
    77 => "00111011011111100110100100100111", 
    78 => "10111101010111010000111010011001", 
    79 => "10111100100100101000100111011011", 
    80 => "00111001110100110100100110111111", 
    81 => "00111101000000010001000010100001", 
    82 => "00111101001001100110001000110101", 
    83 => "00111100100010000011001101000000", 
    84 => "00111101000010111011011011101101", 
    85 => "00111100000010001001110000011011", 
    86 => "10111100110111111111101000111100", 
    87 => "10111101000110001111011000000110", 
    88 => "10111101100010111100011000100010", 
    89 => "10111100001000001000101111111100", 
    90 => "00111100111101110100000000111110", 
    91 => "00111101101000110101000011010011", 
    92 => "00111101101110010111000100111011", 
    93 => "00111100100110010010101001110011", 
    94 => "10111101011110010010110100010011", 
    95 => "10111101100100011001111011111001", 
    96 => "10111101011011000111011101010111", 
    97 => "10111011111100000010100000011100", 
    98 => "00111100011000000101110011001101", 
    99 => "00111101010001001110110001100011", 
    100 => "00111101000110011010110110000110", 
    101 => "00111100011010010001110010001111", 
    102 => "00111100011001010111010100111010", 
    103 => "10111101010110011001110111001011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_7 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_7 is
    component L3_up_L2_WEIGHTS_7_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_7_rom_U :  component L3_up_L2_WEIGHTS_7_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


