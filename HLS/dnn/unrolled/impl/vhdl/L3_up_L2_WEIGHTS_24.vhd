-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_24_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_24_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100010010100110000000001011", 
    1 => "10111010100011101011110011000111", 
    2 => "00111011111010100100001000101001", 
    3 => "00111100010101110111111110101110", 
    4 => "00111100010010000001010011010111", 
    5 => "00111010010101000001001100010010", 
    6 => "10111011101100100111010001011100", 
    7 => "10111011000000111000011111011111", 
    8 => "10111011101011100111110101010110", 
    9 => "00111010011111111101101001000000", 
    10 => "00111011100111010000111010011001", 
    11 => "10111001110111001011100110101010", 
    12 => "10111011001011010001010010100001", 
    13 => "00111011100001111111010001010110", 
    14 => "00111011000111111011011000010011", 
    15 => "00111011100000111101001101011111", 
    16 => "00111011010000010001000110101110", 
    17 => "10111011000000111010100101101101", 
    18 => "10111011011101101111000010001101", 
    19 => "00111011001101000011100101011000", 
    20 => "00111010010100001110110111000100", 
    21 => "10111011100100101000000101110111", 
    22 => "10111011110110111010110100111010", 
    23 => "10111011111101000101100111011010", 
    24 => "10111011010010110000011111010001", 
    25 => "00111100000101101000010100010010", 
    26 => "00111011000011100100011101010110", 
    27 => "10111011100001100101100101001011", 
    28 => "10111100010100110010110001100010", 
    29 => "10111100000101100100111010001011", 
    30 => "00111011111001011111111110100100", 
    31 => "00111100010001001001011101110100", 
    32 => "00111011100111111111000011001100", 
    33 => "10111011100011101010001110011100", 
    34 => "10111100001000100011011111001110", 
    35 => "10111011111110110001000110000100", 
    36 => "00111001100111100101010111000001", 
    37 => "00111100001001111011010011100101", 
    38 => "00111011111000101011100011000111", 
    39 => "00111011100001100110000110101110", 
    40 => "10111010111010000110010000000010", 
    41 => "10111011100100100000110000000111", 
    42 => "10111011100101011001111001100010", 
    43 => "10111011100010010110110111010010", 
    44 => "10111100000001101000111111010010", 
    45 => "10111011100011101100010100101010", 
    46 => "10111001011001011010001101011101", 
    47 => "00111011100101100100011000101000", 
    48 => "00111100001011001100010011110000", 
    49 => "00111100000111011011001000101101", 
    50 => "00111011001010111000000111111001", 
    51 => "10111100000001101000011101101110", 
    52 => "00111011111010100101101101010011", 
    53 => "00111100001110011100011100110111", 
    54 => "00111100011000010111010111010001", 
    55 => "00111010101110101100011100010001", 
    56 => "10111100000010110000110100001111", 
    57 => "10111100001001001000111110010111", 
    58 => "10111100000111000101111001110000", 
    59 => "10111001011101010101110111100110", 
    60 => "00111011100111001100001100011010", 
    61 => "00111010001101001001111000000010", 
    62 => "10111010110111111001101111011100", 
    63 => "10111010000101001010001010111010", 
    64 => "10111010100101010110110000001101", 
    65 => "00111011010111101101001010001001", 
    66 => "00111011110110100110011000010011", 
    67 => "10111011000001010010101101001110", 
    68 => "10111011110001110111010101110101", 
    69 => "00111001100011111010011110101000", 
    70 => "10111001111011011000000010100001", 
    71 => "00111010101101111010000111000010", 
    72 => "10111011001100000001100001100001", 
    73 => "10111011010001001000101011011111", 
    74 => "10111011010010001100110101100100", 
    75 => "00111011110110010010111110110010", 
    76 => "00111011101101001101000001010111", 
    77 => "00111011100001101001110001100111", 
    78 => "10111100001111010110000111110110", 
    79 => "10111011110010001000101001001000", 
    80 => "10111010101111101101011101000001", 
    81 => "00111011111110001111100010100101", 
    82 => "00111011111111101110011011111011", 
    83 => "00111001001111101101011101000001", 
    84 => "10111100001011100111000011000001", 
    85 => "10111100000000111011000111010001", 
    86 => "10111011011000000000000010000110", 
    87 => "00111100001100000001100001100001", 
    88 => "00111100000011101001001011010101", 
    89 => "00111011100011001101011000111101", 
    90 => "10111011001110100100000011011001", 
    91 => "10111100001010000001110111000001", 
    92 => "10111011111010001000010110010000", 
    93 => "10111011000010100001010110011000", 
    94 => "00111000110111000011001101110010", 
    95 => "00111001110111011100011000011001", 
    96 => "00111011000010000111001000101010", 
    97 => "00111011100100101101110110111110", 
    98 => "00111011111001110000001110110000", 
    99 => "00111100000100010110010001000001", 
    100 => "00111010110000011111110010001111", 
    101 => "10111011111001101000010111011011", 
    102 => "10111100010110101111010010101110", 
    103 => "10111100001101110101001000010001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_24 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_24 is
    component L3_up_L2_WEIGHTS_24_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_24_rom_U :  component L3_up_L2_WEIGHTS_24_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


