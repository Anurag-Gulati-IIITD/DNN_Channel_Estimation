-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_5_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_5_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101011110010011101111000001", 
    1 => "10111101001011110110110001101010", 
    2 => "00111100100000101110110010101111", 
    3 => "00111101011001110111011100001000", 
    4 => "00111101100000111100011001000011", 
    5 => "00111010111111000101000001001000", 
    6 => "10111100101101101010000111101000", 
    7 => "10111101000010010001101011111100", 
    8 => "00111011101000000111011100000011", 
    9 => "00111101000110101101000100000111", 
    10 => "00111100111010010010010011110010", 
    11 => "10111100100011011001000011100010", 
    12 => "10111101011001101000000110101010", 
    13 => "10111101000010100010000100100001", 
    14 => "00111100100101001101011100101000", 
    15 => "00111101011011000111000000000000", 
    16 => "00111101010010010101111100100100", 
    17 => "00111100100100001001011010111100", 
    18 => "10111100100000110010000100011101", 
    19 => "10111100110110110000010101110101", 
    20 => "00111010001101000101101011100110", 
    21 => "00111100100011010100011101111100", 
    22 => "00111100000111000010011111101001", 
    23 => "10111100100111111100101100001100", 
    24 => "10111100110110101010001011100100", 
    25 => "10111011100001110011001101100110", 
    26 => "00111101010110111010001010111110", 
    27 => "00111101000011001100110011001101", 
    28 => "10111011110010010010100110101010", 
    29 => "10111100111001000101000110111001", 
    30 => "10111101000010010101111100100100", 
    31 => "10111001111100101011111011001111", 
    32 => "00111011100111000001001011110001", 
    33 => "10111100000010101110011101001111", 
    34 => "10111100101000101111011010100101", 
    35 => "10111001100100100100011010111111", 
    36 => "00111100110011011110101000000011", 
    37 => "00111101001101001011011000100000", 
    38 => "00111100111101001011011000100000", 
    39 => "10111100000110100101001000100110", 
    40 => "10111101001010110001010011101100", 
    41 => "10111101001010111110001101111110", 
    42 => "10111001100111001100001100011010", 
    43 => "00111100110000010011111111010001", 
    44 => "00111100001101010010100001101011", 
    45 => "10111011100100110100101011001011", 
    46 => "10111100010110000011010000001001", 
    47 => "00111100010011001000000101001101", 
    48 => "00111100101011011000011111111001", 
    49 => "00111100111110100010011010100010", 
    50 => "00111010110101101111010101000101", 
    51 => "10111100110101110010101111001011", 
    52 => "10111100001001111001111111101101", 
    53 => "00111101011111100100101010111110", 
    54 => "00111101100100101111001100111101", 
    55 => "00111100110011111001001110111100", 
    56 => "10111100110110011000000101111100", 
    57 => "10111101010111111100001110110101", 
    58 => "10111101000001011100110011001001", 
    59 => "00111100101110111111001011110101", 
    60 => "00111101000011100101000011000110", 
    61 => "00111011101110011101110000101111", 
    62 => "10111101000010101000110100100010", 
    63 => "10111101001101111111100011001011", 
    64 => "10111011101101101100011110101000", 
    65 => "00111101010001010110001011100001", 
    66 => "00111101100001101001001001110001", 
    67 => "00111100110101111110100010001010", 
    68 => "10111100110101010110101100000001", 
    69 => "10111101010111011100101001001011", 
    70 => "10111100111111011000011010101001", 
    71 => "00111100001010011001111110100001", 
    72 => "00111100011110100011001100110111", 
    73 => "00111100010011011010011011100111", 
    74 => "10111100001000010001101010010111", 
    75 => "10111100011010010100111011100100", 
    76 => "00111100011101110011001110101001", 
    77 => "00111101001111110010101100100100", 
    78 => "00111011101110101100011100010001", 
    79 => "10111100111000001001010101101100", 
    80 => "10111101001011010101110011111011", 
    81 => "10111100110011011010110100110010", 
    82 => "00111100010010100111100100110101", 
    83 => "00111100000100100111110101000110", 
    84 => "00111100000110101101110010010000", 
    85 => "10111010101100101000010100100011", 
    86 => "00111100000110110000001001001111", 
    87 => "00111100110001111100000011110100", 
    88 => "00111100110000110111111001101111", 
    89 => "10111011100101101011101110011001", 
    90 => "10111100110111111100001110110101", 
    91 => "10111101010010001101011111100000", 
    92 => "10111100101001001100011000011110", 
    93 => "00111100101110100110001001100111", 
    94 => "00111100111010001011010111001100", 
    95 => "00111100100110101111111000011110", 
    96 => "10111100001100000101111110101111", 
    97 => "10111011101100110000101101011011", 
    98 => "10111011010010101000000110011001", 
    99 => "00111100100101111000001011010100", 
    100 => "00111100010010111111011011100100", 
    101 => "10111100110100100010001000001100", 
    102 => "10111100111101111111000001100111", 
    103 => "10111101001000001011001111010101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_5 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_5 is
    component L3_up_L2_WEIGHTS_5_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_5_rom_U :  component L3_up_L2_WEIGHTS_5_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


