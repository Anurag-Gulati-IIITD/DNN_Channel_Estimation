-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_48_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_48_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100110000100011101101111", 
    1 => "10111100101000100110110000111100", 
    2 => "00111101011011101011100100011011", 
    3 => "00111101110100100000111110110010", 
    4 => "00111101101110000000110111000011", 
    5 => "00111101000001000000001110011011", 
    6 => "10111100101010101001010011111111", 
    7 => "10111101101110010000000110001110", 
    8 => "10111101011101010010111010110110", 
    9 => "10111101001001101001000101100100", 
    10 => "10111100100101011101100100011011", 
    11 => "00111100000111100111011101001111", 
    12 => "00111101011101000110111111011111", 
    13 => "00111101101111101000001011011000", 
    14 => "00111101100011101001101010110011", 
    15 => "10111101001001100001010110101001", 
    16 => "10111101101111100011101100000100", 
    17 => "10111101101110011101001101000110", 
    18 => "10111101100100001101101001011110", 
    19 => "00111011000100110110001111110101", 
    20 => "00111101100011011111101111010111", 
    21 => "00111101110001101011101011001111", 
    22 => "00111101100100000000000111010110", 
    23 => "10111100010101110100000011000100", 
    24 => "10111101101000101000100000000101", 
    25 => "10111101100000011000100100110111", 
    26 => "00111100000101110110111111110100", 
    27 => "00111100111011000000000011011010", 
    28 => "00111100101110101110101010111000", 
    29 => "00111101000010001010001101110010", 
    30 => "00111100100111100111010100110110", 
    31 => "00111100010100101010101001011100", 
    32 => "10111100101100010000110110111111", 
    33 => "10111101100011010000111001010110", 
    34 => "10111101011001010100110101100010", 
    35 => "10111101001000010000001110000110", 
    36 => "10111010111011100010100001100111", 
    37 => "00111101011001100110000000011100", 
    38 => "00111101010100100010100001010110", 
    39 => "00111101001010001110110101011111", 
    40 => "00111011110000100110000100111001", 
    41 => "10111100110001000010001000000011", 
    42 => "10111101000111110011101101100100", 
    43 => "10111101001010001101000000000011", 
    44 => "10111101100000101011100111010100", 
    45 => "10111101100011010100100010001000", 
    46 => "10111100000100100111010011100010", 
    47 => "00111100110100101110111110010001", 
    48 => "00111101111011111111111100110111", 
    49 => "00111101101010110110101111110100", 
    50 => "00111101011110101000001111110101", 
    51 => "10111101011001001001011011101110", 
    52 => "00111101100001011001001100011101", 
    53 => "00111101110101011010001110100001", 
    54 => "00111101010111110101100011000001", 
    55 => "00111101001010110111001000111111", 
    56 => "10111101100001101100111111001000", 
    57 => "10111101101011001111111010011011", 
    58 => "10111101101000111011010011110110", 
    59 => "10111101000001111001101000101000", 
    60 => "00111100001101000000101100110101", 
    61 => "00111101010011000111110100011100", 
    62 => "00111101011011001110010101110001", 
    63 => "00111101010011110110001110000000", 
    64 => "00111101011000100001000100000010", 
    65 => "10111100111000111011011010001001", 
    66 => "10111101010111101011001000000111", 
    67 => "10111101101010010000100010100010", 
    68 => "10111101100101110000101000111101", 
    69 => "10111100110001000110011100111000", 
    70 => "00111101101100011111001001010110", 
    71 => "00111101110010111111001100111000", 
    72 => "00111101110000110010100110000000", 
    73 => "00111100101000001100000001101010", 
    74 => "10111101101100001000110000111111", 
    75 => "10111101100001111001001111011110", 
    76 => "10111100101010111010011110111001", 
    77 => "00111011100100100100011010111111", 
    78 => "00111101010110011011000110111000", 
    79 => "00111100111101001100101100011001", 
    80 => "00111100110011100101010011111000", 
    81 => "00111011100111100111011101001111", 
    82 => "10111100111111111111101111001110", 
    83 => "10111101001101001101101011010011", 
    84 => "10111101010001000010110010000000", 
    85 => "10111100110111001010110100010101", 
    86 => "00111100110000000011001101100001", 
    87 => "00111101100010011110000110110001", 
    88 => "00111101010111010000001100010000", 
    89 => "00111101010110000101110111111011", 
    90 => "00111100110010011001001010000110", 
    91 => "10111100010000000011001101100001", 
    92 => "10111101001010001000000001010010", 
    93 => "10111101000010101110110110011010", 
    94 => "10111100110100111110101100111010", 
    95 => "10111101001100010011001101111111", 
    96 => "00111100000011010011111100011000", 
    97 => "00111100100111000101110001010111", 
    98 => "00111101101000111011010011110110", 
    99 => "00111101111110100111000010001111", 
    100 => "00111101001110001010111100111110", 
    101 => "10111101100010101000011101011101", 
    102 => "10111101101011000001100001110010", 
    103 => "10111101100000100110001101010010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_48 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_48 is
    component L3_up_L2_WEIGHTS_48_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_48_rom_U :  component L3_up_L2_WEIGHTS_48_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


