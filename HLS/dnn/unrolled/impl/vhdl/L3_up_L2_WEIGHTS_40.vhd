-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_40_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_40_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111011110100100110011101000001", 
    1 => "10111011111011001000010011111001", 
    2 => "00111011011011011010001000101111", 
    3 => "00111100000100000000110001010010", 
    4 => "00111011100110100011010011001010", 
    5 => "10111010100110111111100111000110", 
    6 => "10111011110011010101001100000101", 
    7 => "10111011101001110101000000111100", 
    8 => "10111011000100011111001011011100", 
    9 => "00111011011110010101110101001111", 
    10 => "00111011000000010110111100000000", 
    11 => "00111001001100010011010110011000", 
    12 => "00111001100101100111100001111101", 
    13 => "10111010100000111011101000110100", 
    14 => "10111010100010001111100001100010", 
    15 => "00111011010001111111001101001001", 
    16 => "00111011100000110101110111101110", 
    17 => "10111000110011111001111000111000", 
    18 => "10111010110110100001101010010011", 
    19 => "10111011011001110010010100111110", 
    20 => "10111011110101011100111110101011", 
    21 => "10111011001010110011111011011110", 
    22 => "00111010101100011111111011101011", 
    23 => "00111011100010111100000101101010", 
    24 => "00111010101001100011001100000101", 
    25 => "00111010101010001101001000011100", 
    26 => "10111011101001110010111010101110", 
    27 => "10111011100001000111101100100100", 
    28 => "10111011000000010101111000111001", 
    29 => "00111010111101110111011011000101", 
    30 => "00111011011000111011110011010011", 
    31 => "00111010111110001010010011000010", 
    32 => "00111000100011001000001001011010", 
    33 => "10111010110010111010111110010110", 
    34 => "10111010100110010111110000111101", 
    35 => "00111001010011000111100011101010", 
    36 => "00111011001100000111110100001011", 
    37 => "00111011010101000000001001001011", 
    38 => "00111010001000011011111000101011", 
    39 => "10111010100110101010101000111011", 
    40 => "10111011000010011111010000001010", 
    41 => "10111011000000101100111101010011", 
    42 => "10111011001000000011110001001011", 
    43 => "10111010011111000111000111010110", 
    44 => "00111010101011101101100110011101", 
    45 => "00111011011100011110010010110100", 
    46 => "00111011101110110100010011100101", 
    47 => "00111001100110101010101000111011", 
    48 => "10111011011100001011011010110111", 
    49 => "10111011011001010100111101111011", 
    50 => "10111011100111101001100011011101", 
    51 => "00111001110100101100001110000111", 
    52 => "00111010111110000100000000011000", 
    53 => "00111011011010111110110111111010", 
    54 => "00111011111110001010110100100101", 
    55 => "00111010110100110000011010100011", 
    56 => "10111011101110001110100011101010", 
    57 => "10111011110000111101001001010010", 
    58 => "10111011010001110011101010111101", 
    59 => "00111011001011010111100101001010", 
    60 => "00111011100100001001101011101101", 
    61 => "00111011010010100010110110110110", 
    62 => "00111001100100111101100101100110", 
    63 => "10111011010011001111111100100010", 
    64 => "10111000000011101001101100111001", 
    65 => "00111010110010010011001000001110", 
    66 => "00111011100100111111001010010001", 
    67 => "10111001111100001010010111110000", 
    68 => "10111010100111001010000110001100", 
    69 => "10111011101001001000011100110011", 
    70 => "10111011101100110000101101011011", 
    71 => "10111010110110010101000101000000", 
    72 => "00111010100010001101011011010100", 
    73 => "00111010010000000010011011001100", 
    74 => "00111010111011111001100110000000", 
    75 => "00111011001111001101111111110000", 
    76 => "10111011011101001101011110101110", 
    77 => "10111011100110111100111111010101", 
    78 => "10111011100001111011100110011101", 
    79 => "00111011100010000000110110000000", 
    80 => "00111011100000110010101110011001", 
    81 => "00111011001111000110101001111111", 
    82 => "10111001001001101011100100111101", 
    83 => "10111011000111100000000111011110", 
    84 => "10111011000101011001111001100010", 
    85 => "10111001110101010110001010011110", 
    86 => "00111011000010000001111001000111", 
    87 => "00111001000001000001111011011110", 
    88 => "00111010000011110010000101110001", 
    89 => "00111011000010110111010111101010", 
    90 => "10111011011100101011111011001111", 
    91 => "10111010110011011100100001110101", 
    92 => "10111010111101110001001000011011", 
    93 => "00111010010000011011100101110011", 
    94 => "00111001101101111000000000110100", 
    95 => "00111011001000001110010000010001", 
    96 => "00111011100001101011110111110101", 
    97 => "00111011001111010101010101100001", 
    98 => "00111001110110101010000011001011", 
    99 => "10111011101011100001100010101101", 
    100 => "10111011100111011110000001010000", 
    101 => "00111010111001011000000111001111", 
    102 => "00111001011001101010111111001101", 
    103 => "00111011011001100110110010110001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_40 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_40 is
    component L3_up_L2_WEIGHTS_40_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_40_rom_U :  component L3_up_L2_WEIGHTS_40_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


