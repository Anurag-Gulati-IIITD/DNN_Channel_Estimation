-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_17_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_17_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111011100011110001000010101010", 
    1 => "10111011011111101001101101111100", 
    2 => "10111011011000111010110000001100", 
    3 => "10111011100100110001000000010011", 
    4 => "00111011000110000011110101111001", 
    5 => "00111011100000011100101101000111", 
    6 => "00111011101000100110010111110001", 
    7 => "00111011101011101110101001100100", 
    8 => "10111010010111001111110011000110", 
    9 => "10111011011010110110011111000011", 
    10 => "10111011011100001110100100001100", 
    11 => "10111011100001010100010001111000", 
    12 => "10111011010100001000100100011010", 
    13 => "00111010100010111101101010010100", 
    14 => "10111001001000010111101100001111", 
    15 => "00111001100001010010101101001110", 
    16 => "00111011101010000101010001000111", 
    17 => "00111011010001010001000100010111", 
    18 => "00111011000111110101000101101001", 
    19 => "10111000100100101100110011110111", 
    20 => "10111011001101011101110011000110", 
    21 => "10111010111101011100001010001111", 
    22 => "10111011001011000000100000110001", 
    23 => "10111010110110101110001111100111", 
    24 => "00111010010101000101011000101110", 
    25 => "00111010110111000111011010001110", 
    26 => "00111011110001010011101100001000", 
    27 => "00111011001000110010111101000101", 
    28 => "10111010111101011110010000011101", 
    29 => "10111011111011010101011010110000", 
    30 => "10111011111100101011111011001111", 
    31 => "10111001101000010111101100001111", 
    32 => "00111011100110101011101100000010", 
    33 => "00111100000000000010110000001010", 
    34 => "00111011001100000101101101111101", 
    35 => "10111011111011111100101111010101", 
    36 => "10111011111100011010000110011000", 
    37 => "10111011101111101111000001101011", 
    38 => "00111011100101010101001011100011", 
    39 => "00111100001011010011101001100000", 
    40 => "00111100000000111101011110010000", 
    41 => "00111011000001001001010001001111", 
    42 => "10111011110011010001100001001100", 
    43 => "10111011110011101111011001110011", 
    44 => "10111010110101101011001000101001", 
    45 => "00111011010010011010011101111110", 
    46 => "00111011000101100011010101100001", 
    47 => "10111010110011010100001000111110", 
    48 => "10111011011110101001110000010011", 
    49 => "10111011000110011001110111001011", 
    50 => "00111011101000001010000011110101", 
    51 => "00111100000000100110011001110111", 
    52 => "10111011000000001001010011100110", 
    53 => "00111010100110011110000011100111", 
    54 => "00111011010011010000111111101001", 
    55 => "00111011001101111010000111000010", 
    56 => "00111011101001101000111101001011", 
    57 => "00111011101111011100001001101110", 
    58 => "10111010100111100111011101001111", 
    59 => "10111011011111110110010011010000", 
    60 => "10111011100110101101010000101100", 
    61 => "10111011101110101010110111100110", 
    62 => "10111000000001100011011110111101", 
    63 => "00111011010111101110001101010000", 
    64 => "00111011000110100101011001011000", 
    65 => "00111011000001010110111001101001", 
    66 => "00111011101001001010000001011110", 
    67 => "00111010110010110010100101011111", 
    68 => "00111010101010010001010100111000", 
    69 => "00111001010001110011101010111101", 
    70 => "10111011101001111010110010000010", 
    71 => "10111011001111110111111100000110", 
    72 => "10111010101100111101010010101110", 
    73 => "10111010000111110110001000110000", 
    74 => "00111011001011000111110110100010", 
    75 => "00111010011011101000110100010001", 
    76 => "00111011100001110111011010000001", 
    77 => "00111011100000100111001100001100", 
    78 => "10111001110101001101110001100110", 
    79 => "10111011111111001000001010011101", 
    80 => "10111011111011101110100101010111", 
    81 => "10111010110111001001100000011100", 
    82 => "00111011001110101111100101100110", 
    83 => "00111100000010110000010010101011", 
    84 => "00111011111000101101000111110010", 
    85 => "10111011100011110011101010011011", 
    86 => "10111011101000111110011111010001", 
    87 => "10111011111100100001011100001001", 
    88 => "00111010010100000110011110001100", 
    89 => "00111100000101000001110010000010", 
    90 => "00111100000101110101001010010111", 
    91 => "00111011100101000101011100111010", 
    92 => "10111011101101001110100110000001", 
    93 => "10111100001011011000000110101110", 
    94 => "10111011110000001100111010010010", 
    95 => "10111001101011011000101000010001", 
    96 => "00111011100001110100110010010000", 
    97 => "00111011000010100101100010110100", 
    98 => "10111010101110111001000001100100", 
    99 => "10111011001101111111010110100101", 
    100 => "00111011000001000101000100110011", 
    101 => "00111011101101111101010000010111", 
    102 => "00111011101110101010110111100110", 
    103 => "00111001101011100001000001001001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_17 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_17 is
    component L3_up_L2_WEIGHTS_17_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_17_rom_U :  component L3_up_L2_WEIGHTS_17_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


