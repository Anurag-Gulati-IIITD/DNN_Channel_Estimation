-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_29_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_29_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100101100001011101111111", 
    1 => "00111101010100011001101011001000", 
    2 => "10111100100111010101010111100111", 
    3 => "10111101100010111111101100010110", 
    4 => "10111101100111110110000110101010", 
    5 => "10111011011000011000001001100110", 
    6 => "00111100110101011110001010001011", 
    7 => "00111101001000111101010111111110", 
    8 => "10111011100101101010101011010010", 
    9 => "10111101001100111111011000111100", 
    10 => "10111101000010000011001000110011", 
    11 => "00111100101010001101111010110001", 
    12 => "00111101100010010000111001100111", 
    13 => "00111101001000010110011100100011", 
    14 => "10111100101101111000000000110100", 
    15 => "10111101100011100000111010110110", 
    16 => "10111101011100011010010111001010", 
    17 => "10111100101011001000011000000101", 
    18 => "00111100101000000111011100000011", 
    19 => "00111101000001000110000111111010", 
    20 => "10111001101000111001001111101110", 
    21 => "10111100101001100011111110011010", 
    22 => "10111100001101111110110101000010", 
    23 => "00111100101111001110001000001001", 
    24 => "00111101000000100010011010000001", 
    25 => "00111011100110110010100000001111", 
    26 => "10111101100000110111110001010111", 
    27 => "10111101001010001110100000100001", 
    28 => "00111011111011110000001010000010", 
    29 => "00111101000010010101001010001111", 
    30 => "00111101001001101010100110000010", 
    31 => "00111010011010101001111001101111", 
    32 => "10111011101011001110101010101111", 
    33 => "00111100001000011110100000011101", 
    34 => "00111100110000001001000111000001", 
    35 => "00111001111000001110101101101000", 
    36 => "10111100111101001001010010010010", 
    37 => "10111101010101111000100000010010", 
    38 => "10111101000100110111011111100010", 
    39 => "00111100001001111100000101111011", 
    40 => "00111101010010011001111100011011", 
    41 => "00111101010011001110000010111001", 
    42 => "00111010100000010111111111000111", 
    43 => "10111100110110111000101110101100", 
    44 => "10111100010010100100111101000100", 
    45 => "00111011101110011101001111001100", 
    46 => "00111100011110001100111010110011", 
    47 => "10111100011111111011000001001111", 
    48 => "10111100110101010110100011101000", 
    49 => "10111101000110000000111001001001", 
    50 => "10111011001001100011001100000101", 
    51 => "00111101000000001010101011101011", 
    52 => "00111100001110111000110000110011", 
    53 => "10111101100110001111011010001100", 
    54 => "10111101101100001111111010001011", 
    55 => "10111100111111100000100010101111", 
    56 => "00111101000000011110011110010110", 
    57 => "00111101100001110001000001000101", 
    58 => "00111101001000111101101000110000", 
    59 => "10111100110101110001100011101100", 
    60 => "10111101001001101010101110011011", 
    61 => "10111011110111001010100011100011", 
    62 => "00111101001000100010100000010011", 
    63 => "00111101010110001101001001011111", 
    64 => "00111011101111110101010100010101", 
    65 => "10111101011011001111010100101100", 
    66 => "10111101101000001011100010001101", 
    67 => "10111100111111101110000010110001", 
    68 => "00111101000000010111110110101111", 
    69 => "00111101100001010010101011000111", 
    70 => "00111101000110010110100101011110", 
    71 => "10111100010001100000100010001101", 
    72 => "10111100100101011100010000100010", 
    73 => "10111100011110111000011011110100", 
    74 => "00111100001110001100011101011100", 
    75 => "00111100100010001011101110010000", 
    76 => "10111100100100111110010111111011", 
    77 => "10111101011001000111001000111011", 
    78 => "10111011110111000110010111000111", 
    79 => "00111101000001100110000010100010", 
    80 => "00111101010100010001001110000011", 
    81 => "00111100111110001111000001000001", 
    82 => "10111100011010101110111000100000", 
    83 => "10111100001100111111101001101110", 
    84 => "10111100010000001010100011010010", 
    85 => "00111010100111110001111100010101", 
    86 => "10111100001101011011111101101010", 
    87 => "10111100111011101011011100000010", 
    88 => "10111100111010011100100010000110", 
    89 => "00111011101000111010010010110101", 
    90 => "00111101000000111100111100101101", 
    91 => "00111101011100000010111101110011", 
    92 => "00111100110010100011010000000001", 
    93 => "10111100110101001100011101101101", 
    94 => "10111101000001111011000000101101", 
    95 => "10111100101110000100011101101111", 
    96 => "00111100010001110110100011100000", 
    97 => "00111011101100001100000000100111", 
    98 => "00111011010001100001110110000110", 
    99 => "10111100101101110011001010011100", 
    100 => "10111100011100001001010100101001", 
    101 => "00111100111111110111000101100101", 
    102 => "00111101000101100001001111010011", 
    103 => "00111101010000100111101101110000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_29 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_29 is
    component L3_up_L2_WEIGHTS_29_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_29_rom_U :  component L3_up_L2_WEIGHTS_29_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


