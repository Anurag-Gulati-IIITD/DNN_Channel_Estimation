-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_41_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_41_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001011111000000001010110", 
    1 => "10111101110110001100111100111010", 
    2 => "10111101111010000000011000101001", 
    3 => "10111101001001100100011011110001", 
    4 => "00111100111011010001010110101101", 
    5 => "00111101110110011101001111001100", 
    6 => "00111101101101100011011101111010", 
    7 => "00111101000110000001000101101111", 
    8 => "10111100111011010110001101000101", 
    9 => "10111100110100000101000001111010", 
    10 => "10111100000010100100011111101101", 
    11 => "10111100011000100111100111011101", 
    12 => "10111101001110110111100001000110", 
    13 => "10111101000101000001101001101001", 
    14 => "10111100010001010001110110101100", 
    15 => "00111101000111110101010110011011", 
    16 => "00111101101100010000011011101110", 
    17 => "00111101100110101010001001011110", 
    18 => "00111100001010010011111100101001", 
    19 => "10111101011100000110100100011111", 
    20 => "10111101101111100101001110101000", 
    21 => "10111101000110111001011000101001", 
    22 => "00111100111101111010011100000001", 
    23 => "00111101001011110001010101100010", 
    24 => "00111100000101011101000010110111", 
    25 => "00111100001000110011011110101000", 
    26 => "00111100000010110000110100001111", 
    27 => "00111101000011110110110111111100", 
    28 => "10111011101111001001010001110000", 
    29 => "10111101010100000111011000111010", 
    30 => "10111101100010011101001100000010", 
    31 => "10111100101101111000110011001010", 
    32 => "00111100011010100111000001001100", 
    33 => "00111101100001010001101100001101", 
    34 => "00111101010010001110001101101001", 
    35 => "10111100100001101101101101010001", 
    36 => "10111101100110101101100111110001", 
    37 => "10111101010000010010110011110001", 
    38 => "00111100100010101000111100111011", 
    39 => "00111101100100011101001011100001", 
    40 => "00111101000010111101010001001010", 
    41 => "10111101001001001111000000001111", 
    42 => "10111101100001010100000101010011", 
    43 => "10111101001111001111010011101000", 
    44 => "00111101010011010100110111000110", 
    45 => "00111101110001000101100110010110", 
    46 => "00111101100011011011001011110110", 
    47 => "10111101011001101011011100100100", 
    48 => "10111110000001001011110000100111", 
    49 => "10111110000000111110010010101100", 
    50 => "10111010010110001000011111101100", 
    51 => "00111101110111111011110111110001", 
    52 => "10111101110110101101000110001101", 
    53 => "10111101101011101000100101100101", 
    54 => "00111100101010111110100010111100", 
    55 => "00111110000010110011010001100001", 
    56 => "00111101110000001001100010010001", 
    57 => "00111101000100010011110101110101", 
    58 => "10111101000001111110011111000000", 
    59 => "10111101011100010011100010111101", 
    60 => "10111101010101101001110000100100", 
    61 => "10111100111010110111011001110001", 
    62 => "10111100010111100110010101111100", 
    63 => "10111101010011011010111101001011", 
    64 => "10111011101111100100100010100110", 
    65 => "00111100101011000001001010101110", 
    66 => "00111101101010011110100110001110", 
    67 => "00111101101010010101011011000001", 
    68 => "00111100101110001101011000001010", 
    69 => "10111101011110111111111001111110", 
    70 => "10111101111010001110010001110101", 
    71 => "10111101100101010001101111010110", 
    72 => "10111011101010011100110111000100", 
    73 => "00111101100001110011001011011111", 
    74 => "00111101011010000101000000010110", 
    75 => "00111100111000011000011010011000", 
    76 => "10111100111011100001101111010010", 
    77 => "10111100110010010010001101100000", 
    78 => "00111100001000101110011111110111", 
    79 => "00111011011110000010111101010001", 
    80 => "10111101001000111011011010001001", 
    81 => "10111101001011010000110101001010", 
    82 => "10111011111111011001111111010011", 
    83 => "00111101100101110001110010010111", 
    84 => "00111101011110010000110110011101", 
    85 => "00111100110001100111100111001100", 
    86 => "10111101101000100010100110100110", 
    87 => "10111101010010111111010011001011", 
    88 => "10111100100111000110101100000101", 
    89 => "00111101010100001011010100100100", 
    90 => "00111101100011000010101111011000", 
    91 => "10111001000111010100100101010010", 
    92 => "10111101010000110010101010001101", 
    93 => "10111100110001011100001101011001", 
    94 => "00111100101100100111000000101010", 
    95 => "00111101101010101101111001100101", 
    96 => "00111101101001111010100111100011", 
    97 => "10111100100001010111000010000010", 
    98 => "10111101111011100011011000001001", 
    99 => "10111101111101110011010010110101", 
    100 => "10111101010111000001011000010110", 
    101 => "00111101011100101011010001010011", 
    102 => "00111110001101000101011011110111", 
    103 => "00111110000011111000100111000110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_41 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_41 is
    component L3_up_L2_WEIGHTS_41_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_41_rom_U :  component L3_up_L2_WEIGHTS_41_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


