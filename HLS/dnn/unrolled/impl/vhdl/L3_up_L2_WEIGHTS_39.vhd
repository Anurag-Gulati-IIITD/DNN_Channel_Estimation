-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_39_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_39_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110001010101001000010001010", 
    1 => "10111110000001100111100000111010", 
    2 => "10111100100001111000110110010011", 
    3 => "00111101101001010100010110000100", 
    4 => "00111101111001011000101100111111", 
    5 => "00111110000000101110010100010101", 
    6 => "00111101010110000111000011011010", 
    7 => "10111100111001010111011101010011", 
    8 => "10111101101111110111000101100101", 
    9 => "10111110000001000110000100110001", 
    10 => "10111101101001110001110111100111", 
    11 => "10111100110011010101010100011101", 
    12 => "00111101010101001011101011011000", 
    13 => "00111101100101100011110010111000", 
    14 => "00111101101010111111000100100000", 
    15 => "00111101011110010110011010111110", 
    16 => "00111011101001101111001111110101", 
    17 => "10111101101000101111011010100101", 
    18 => "10111101110000100111100111011101", 
    19 => "10111101101110101101011001000101", 
    20 => "10111100111111010100101111110001", 
    21 => "00111101000001011001100101100111", 
    22 => "00111101011000000011100100100110", 
    23 => "00111101110101100000011100111110", 
    24 => "00111101100110010110101111111101", 
    25 => "00111011011101100101100110001110", 
    26 => "10111101110100111000010001110111", 
    27 => "10111101110010101011011010001101", 
    28 => "10111101011010110001100000010001", 
    29 => "00111100111111011000011010101001", 
    30 => "00111101101110001010001010101001", 
    31 => "00111101110111001101000111001000", 
    32 => "00111101101110001011001001100100", 
    33 => "00111100010011011000010101011001", 
    34 => "10111101101010101011110001010001", 
    35 => "10111101111110110111000101110110", 
    36 => "10111101111101001010011101110010", 
    37 => "10111101100101101000010100010010", 
    38 => "00111101000011010010011011111010", 
    39 => "00111101100101110101101110000001", 
    40 => "00111101110101100000001100001100", 
    41 => "00111101110000001000011010111110", 
    42 => "00111101001111110001100101010000", 
    43 => "10111011111110110010001001001011", 
    44 => "10111101010100001001101111111010", 
    45 => "10111101101011000101100101110101", 
    46 => "10111101110100100011000010111010", 
    47 => "10111101101011111110001001100001", 
    48 => "10111100011011000101001010100100", 
    49 => "00111101110111111010111111001001", 
    50 => "00111110000111111101001111110110", 
    51 => "00111110000100111011000111010001", 
    52 => "10111010011100110000000111101011", 
    53 => "00111101110000001111111011001110", 
    54 => "00111110001001110110101011111001", 
    55 => "00111101111001100110111001000100", 
    56 => "00111101100010101001011010010010", 
    57 => "10111100110101110000011000001100", 
    58 => "10111101110001011000101100111111", 
    59 => "10111101111101110111100101100100", 
    60 => "10111101101001001100101001001111", 
    61 => "10111100010011111100100000101010", 
    62 => "00111101010010101010011101011001", 
    63 => "00111101111001000111111001001010", 
    64 => "00111101100101110001000000000010", 
    65 => "00111100101110110110111011010110", 
    66 => "10111100100111111001110011101001", 
    67 => "10111101100111111110011011010110", 
    68 => "10111101101010110000101101111100", 
    69 => "10111101101011010110100110010000", 
    70 => "10111101010000111011111101110010", 
    71 => "00111101000011000110011000001010", 
    72 => "00111101101010010000100000011100", 
    73 => "00111101011010111000000011101101", 
    74 => "00111101010110101111110000000101", 
    75 => "10111100100100001001011010111100", 
    76 => "10111101010100101000000101110111", 
    77 => "10111101110110010101001101011000", 
    78 => "10111100100011001101001000001011", 
    79 => "00111101001011101001011010000001", 
    80 => "00111101110010000100111110010000", 
    81 => "00111101111011000101000110011000", 
    82 => "00111101011111000111001111101111", 
    83 => "00111100101000010001010001001101", 
    84 => "10111101100010101000100101110110", 
    85 => "10111110000001101010010111010111", 
    86 => "10111101111110001000111010111101", 
    87 => "10111101010011011010010011001111", 
    88 => "00111101010111000000110110110010", 
    89 => "00111101111110111010111101010011", 
    90 => "00111101110101110001100011101100", 
    91 => "00111101100110000001000101101111", 
    92 => "00111100100101000110100000000001", 
    93 => "10111100111110001110111000101000", 
    94 => "10111101101010000001101110101000", 
    95 => "10111101110011100111010001101101", 
    96 => "10111101110000000011000101001000", 
    97 => "10111101000110110010011100000011", 
    98 => "00111101010110010110110010000011", 
    99 => "00111101101110100100100010110110", 
    100 => "00111110000100111000000001000101", 
    101 => "00111110000001101111100000100111", 
    102 => "00111100010111000011011110100100", 
    103 => "10111110000000100111110100000011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_39 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_39 is
    component L3_up_L2_WEIGHTS_39_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_39_rom_U :  component L3_up_L2_WEIGHTS_39_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


