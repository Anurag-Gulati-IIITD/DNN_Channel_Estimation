-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_25_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_25_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100111111100010011000001011", 
    1 => "00111100111010010000010101111101", 
    2 => "00111011011100111000100000100010", 
    3 => "00111101001101101101011001010110", 
    4 => "10111010100010101100111000100101", 
    5 => "10111011101011101000111000011101", 
    6 => "10111100001110000000101010011110", 
    7 => "10111011100100100100011010111111", 
    8 => "00111011100000100111001100001100", 
    9 => "10111100001011011000000110101110", 
    10 => "00111010111000001000011010111110", 
    11 => "00111100100110000010111011001011", 
    12 => "10111100101010011101000111110110", 
    13 => "00111101001001000000110010000100", 
    14 => "00111001000000100000010111111111", 
    15 => "10111100110111001011001101011111", 
    16 => "10111011101000101111110011110000", 
    17 => "00111011111110110000000010111101", 
    18 => "00111100010010111111011011100100", 
    19 => "10111011000011011100000100011110", 
    20 => "00111100100100101101001101000001", 
    21 => "10111100101101111010001111011011", 
    22 => "00111011110100110011000010010100", 
    23 => "10111011010000011101101100000001", 
    24 => "10111100011011010001001110010100", 
    25 => "10111100001100100001110001000111", 
    26 => "00111100110111100111100001011011", 
    27 => "00111100110101110011110010010010", 
    28 => "10111100001101110101111010100110", 
    29 => "10111100110010011100010011011011", 
    30 => "10111011101101110100010101111100", 
    31 => "00111011110101110001111100110110", 
    32 => "10111100100010010100100000010011", 
    33 => "10111100111011111101000000000111", 
    34 => "00111100010110000011110001101101", 
    35 => "00111100010110101111000001111100", 
    36 => "00111100111000000100111000011110", 
    37 => "00111100101100001100001001000000", 
    38 => "10111100100011110100000011100110", 
    39 => "00111011001101001101000001010111", 
    40 => "10111100101111111011101111011000", 
    41 => "00111100001000101100111011001101", 
    42 => "00111100100001100010101100101000", 
    43 => "00111010111001110111100100100000", 
    44 => "10111100100011100101011000000100", 
    45 => "00111011101111000111001011100010", 
    46 => "00111101000101001000010101011110", 
    47 => "10111100101001001100100000110110", 
    48 => "10111011100100110001000000010011", 
    49 => "00111100101000100000011110010010", 
    50 => "00111011011111010101110010111000", 
    51 => "10111100101101001011011100101100", 
    52 => "00111101000111011101011011100000", 
    53 => "10111100010101101111110110101000", 
    54 => "10111100100001110100100001011110", 
    55 => "00111100101000000011100000011001", 
    56 => "10111011110010110000011111010001", 
    57 => "00111100000110110010001111011101", 
    58 => "10111100000011110010000101110001", 
    59 => "10111011000011101011110011000111", 
    60 => "10111011100100010101001101111010", 
    61 => "10111100101011000001000010010101", 
    62 => "00111011011001001001011011101110", 
    63 => "10111100001101001110000100011110", 
    64 => "00111011011101110110010111111110", 
    65 => "10111100011111111100010101001000", 
    66 => "10111100101010011001110110001000", 
    67 => "00111100101001111110110110000101", 
    68 => "10111100001010110000010000100101", 
    69 => "00111101000111011011100110000100", 
    70 => "10111100110111011101100011111001", 
    71 => "00111011110111111011110101101010", 
    72 => "00111100100011011000001000110100", 
    73 => "10111011010101111100111101011111", 
    74 => "00111011100011001001001100100001", 
    75 => "10111100010000110111111001101111", 
    76 => "10111100010001010001000100010111", 
    77 => "10111101001000101011100111010100", 
    78 => "10111100110000111100001110100100", 
    79 => "00111100010110101001000000000100", 
    80 => "00111011100111110011100000111111", 
    81 => "00111100000100111100100010011111", 
    82 => "00111100010000000110000110000100", 
    83 => "00111100100101110010101010111111", 
    84 => "00111101000101001101100000110100", 
    85 => "00111100000010100000100100000011", 
    86 => "00111011100011011111001101110011", 
    87 => "00111011111000111101010111111110", 
    88 => "10111011110110101100101010111100", 
    89 => "00111101000000110010110010100101", 
    90 => "00111100010000000001101000110111", 
    91 => "10111101000010111110010100010001", 
    92 => "10111101000101101111101010000011", 
    93 => "00111101001011001100111101101100", 
    94 => "00111100101000000110011000111100", 
    95 => "00111011011111001011010011110010", 
    96 => "10111100111010001010111110000001", 
    97 => "00111011111000000110010100110000", 
    98 => "00111100011010010100101010110010", 
    99 => "10111100101111101110100000001000", 
    100 => "10111100010011101101010011100101", 
    101 => "10111100100010111100100111001101", 
    102 => "00111011110001101011010010000101", 
    103 => "00111100101111011100011010100000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_25 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_25 is
    component L3_up_L2_WEIGHTS_25_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_25_rom_U :  component L3_up_L2_WEIGHTS_25_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


