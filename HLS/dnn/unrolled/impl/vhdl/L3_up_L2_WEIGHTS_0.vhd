-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_0_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_0_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111011001010100110010011000011", 
    1 => "00111011111100000011000001111111", 
    2 => "00111011010110010101000101000000", 
    3 => "00111010101000110111001001100000", 
    4 => "10111011110111001111110011000110", 
    5 => "10111011011111010110110101111111", 
    6 => "10111100010010100111110101100111", 
    7 => "10111011000010010110110111010010", 
    8 => "10111011001011011110111010111011", 
    9 => "10111001111001100010100110010101", 
    10 => "00111011110000101010010001010101", 
    11 => "00111100001011100100111100110011", 
    12 => "00111011000001010010101101001110", 
    13 => "10111010110001010110010011111001", 
    14 => "10111100000010010001100111110000", 
    15 => "00111010110001010100001101101100", 
    16 => "00111011000010011000111101100000", 
    17 => "00111010101001011000101100111111", 
    18 => "00111010011001001101101000001010", 
    19 => "10111100001010000000010010010110", 
    20 => "10111010010000010111011001010111", 
    21 => "10111010110101011110100011010101", 
    22 => "00111010010001000001010101101110", 
    23 => "00111100001010001000001001101011", 
    24 => "00111010100101111100100000001000", 
    25 => "10111011010000000011011110010011", 
    26 => "10111100100111000001011100100010", 
    27 => "10111011010110011100011010110000", 
    28 => "00111011100100001001101011101101", 
    29 => "00111100010100011110000100001001", 
    30 => "00111100010010110000001110011111", 
    31 => "10111001011001011010001101011101", 
    32 => "00111011011101111001100001010010", 
    33 => "10111001101100110100111001110111", 
    34 => "10111011100100000111100101011111", 
    35 => "00111011010100101110010100010101", 
    36 => "10111010100111110100000010100011", 
    37 => "10111010111011010101111100010100", 
    38 => "00111011101111100101000100001001", 
    39 => "00111011011110101011110110100001", 
    40 => "00111011010111110111101001001110", 
    41 => "10111011000001001101011101101011", 
    42 => "10111100000000001100101101101100", 
    43 => "00111010010100101100001110000111", 
    44 => "00111100010111010010001010000101", 
    45 => "00111100010001000111010111100110", 
    46 => "10111011110111010010111100011011", 
    47 => "10111100100111101010110111010110", 
    48 => "10111100101001000001001111011011", 
    49 => "10111010100110111001010100011100", 
    50 => "00111100101100111110000101000011", 
    51 => "00111100110001001000111100010001", 
    52 => "00111100100110011001111111100100", 
    53 => "00111011110101110100000011000100", 
    54 => "00111010100010111101101010010100", 
    55 => "10111100000111010001001011001011", 
    56 => "10111011101101101010111001111101", 
    57 => "10111011100110011110100101001011", 
    58 => "00111011000010101011110101011110", 
    59 => "00111010110111000011001101110010", 
    60 => "00111100000001011101011101000101", 
    61 => "00111011111011000001011111101100", 
    62 => "00111100001101000011100101011000", 
    63 => "00111010110110000010001101000010", 
    64 => "10111011110001100000010001011100", 
    65 => "10111011101001101111001111110101", 
    66 => "10111011011111111110101100000111", 
    67 => "00111011110111101010100010010111", 
    68 => "00111011010101111100111101011111", 
    69 => "00111011100110010011000010111110", 
    70 => "10111011101101110000101011000100", 
    71 => "00111001000011001000001001011010", 
    72 => "00111010111000001110101101101000", 
    73 => "00111100001100001101100101010001", 
    74 => "00111010110010000100011100101100", 
    75 => "10111011101110110111011100111010", 
    76 => "10111100001100100111100010001110", 
    77 => "10111100000100110010110101101111", 
    78 => "00111011100101111111000111111010", 
    79 => "00111011111000010101100001110101", 
    80 => "00111011101101111011001010001001", 
    81 => "10111010110101001111110111110100", 
    82 => "10111011100111001110010010101000", 
    83 => "10111011101111100111001010010111", 
    84 => "10111011010011000000001101111001", 
    85 => "10111011010100101111010111011100", 
    86 => "10111001101000010111101100001111", 
    87 => "00111001010110110010011100000011", 
    88 => "00111011101000110100000000001100", 
    89 => "10111100000011101111001101001101", 
    90 => "10111011100000001010111000010000", 
    91 => "10111001111110010000100101101100", 
    92 => "10111011111011010011010100100010", 
    93 => "10111100000001111000011101001000", 
    94 => "00111011001011011011110001100110", 
    95 => "00111011101100010001110001101101", 
    96 => "00111010100101111000010011101100", 
    97 => "10111100010001110101110001001011", 
    98 => "10111100010110001110010000110010", 
    99 => "10111011111110000011011110110101", 
    100 => "00111100011001010111100101101100", 
    101 => "00111100111100001110010011011010", 
    102 => "00111100011000110100011101100011", 
    103 => "10111100000000100110101010101001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_0 is
    component L3_up_L2_WEIGHTS_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_0_rom_U :  component L3_up_L2_WEIGHTS_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


