-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_38_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_38_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100101001011001100111101101", 
    1 => "10111110001011101111001100001010", 
    2 => "10111110010000001001100010010001", 
    3 => "10111101011110000100110110111010", 
    4 => "00111101100111111110111100111001", 
    5 => "00111110000100110000001000101110", 
    6 => "00111101100101110001111100110110", 
    7 => "10111100110111000001111001111001", 
    8 => "10111101101000110010011001011011", 
    9 => "10111101100100000011100111101111", 
    10 => "00111011111101100010111110011101", 
    11 => "00111101101000001101010111101001", 
    12 => "00111101100000100111110110001001", 
    13 => "00111100101001000000000011111100", 
    14 => "10111101101001011100011100000100", 
    15 => "10111101111000100110111101100001", 
    16 => "10111101011101100101010001010000", 
    17 => "00111101000101010011001101101110", 
    18 => "00111101111010100111000001001100", 
    19 => "00111101110111010110001100000010", 
    20 => "00111101011000110100111111000110", 
    21 => "10111101010101100110010010010001", 
    22 => "10111101111111111001100000110001", 
    23 => "10111101110110010010111000011111", 
    24 => "10111101000110010010010100110101", 
    25 => "00111101100100111100101000110010", 
    26 => "00111101110101100111011111110111", 
    27 => "00111100000101001100110010101011", 
    28 => "10111101100101010100111000101011", 
    29 => "10111101101101010000001110111000", 
    30 => "10111101100111010011000010101101", 
    31 => "10111011100100100100111100100010", 
    32 => "00111101010000000010000010000001", 
    33 => "00111101010100111111110100001101", 
    34 => "00111101000011111000111001111110", 
    35 => "00111100100110010101111011100001", 
    36 => "00111100100111000100110110101001", 
    37 => "00111010101110100001111101001011", 
    38 => "10111100110100001101011010110010", 
    39 => "10111101100000110011111110000101", 
    40 => "10111101100001111000011011000010", 
    41 => "10111100111001100010001101001011", 
    42 => "00111101001001101111000111011100", 
    43 => "00111101101000110110110110101000", 
    44 => "00111101101100101100110101111101", 
    45 => "00111100110101001010110000101010", 
    46 => "10111100101010100000100001111101", 
    47 => "10111101011001010011111010110100", 
    48 => "10111101011101001011110001101010", 
    49 => "10111101001010100111001001100101", 
    50 => "10111100101001010011001100101011", 
    51 => "10111010101101010010010000111010", 
    52 => "10111110010000011001110101100111", 
    53 => "10111101110000101110111111010100", 
    54 => "00111101010100010011011000011110", 
    55 => "00111110000110010011100000010101", 
    56 => "00111110000010101011001011100001", 
    57 => "00111100101000111111000000110101", 
    58 => "10111101100110101101001100100000", 
    59 => "10111101110101001100011001100001", 
    60 => "10111101000101001011011010100110", 
    61 => "00111101011100010101101001001011", 
    62 => "00111101101111011100101101011000", 
    63 => "00111101000010010001001110100101", 
    64 => "10111101001111111000100001110110", 
    65 => "10111101110001001000011010101101", 
    66 => "10111101100011111100111110000001", 
    67 => "00111100111010110101000010110001", 
    68 => "00111101110010110010101111111110", 
    69 => "00111101110111100101110110011110", 
    70 => "00111101001110000110011011100100", 
    71 => "10111101001111011011010111011001", 
    72 => "10111101110111100010000011001101", 
    73 => "10111101111100100110000101111100", 
    74 => "10111101001111011100101011010001", 
    75 => "00111101011111001011010111111110", 
    76 => "00111110000011110110000100100100", 
    77 => "00111101111110100100010110010001", 
    78 => "10111101100111111000100110000011", 
    79 => "10111110000001000111000001100101", 
    80 => "10111101101001100111110011110010", 
    81 => "10111000111000000110010100110000", 
    82 => "00111101011101000101000101110110", 
    83 => "00111101101001011000101000110011", 
    84 => "00111101010101111000110101010000", 
    85 => "00111011101100001110000110110101", 
    86 => "10111100000011001110101100110101", 
    87 => "10111100111110011000001100001110", 
    88 => "10111100111101010001001001100110", 
    89 => "10111101010111010110010110100001", 
    90 => "10111101000111011001001111000100", 
    91 => "10111100010111101011110110010000", 
    92 => "00111100110110100100110011101000", 
    93 => "00111101101001101101011110100101", 
    94 => "00111101101011001000111001101001", 
    95 => "00111100011111010001010101101010", 
    96 => "10111101001101011101000000110001", 
    97 => "10111101101001011101000011111010", 
    98 => "10111101100110000001000101101111", 
    99 => "10111100111011001101110100001110", 
    100 => "00111011101011000110110011011011", 
    101 => "00111100111101111110100000000100", 
    102 => "00111101010101000100110010111110", 
    103 => "00111101101101000000100010010110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_38 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_38 is
    component L3_up_L2_WEIGHTS_38_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_38_rom_U :  component L3_up_L2_WEIGHTS_38_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


