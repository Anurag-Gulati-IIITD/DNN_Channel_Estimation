-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_16_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_16_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111011100000110010001100110110", 
    1 => "00111011001001001100000111101100", 
    2 => "00111011110010110101101110110100", 
    3 => "10111100000101100101011011101111", 
    4 => "10111011010001000110100101010001", 
    5 => "10111100101101001111101001001000", 
    6 => "10111100000011100100101110001000", 
    7 => "10111011110100000011110110011011", 
    8 => "00111100011001110101111111110110", 
    9 => "00111100010111110000100100001111", 
    10 => "00111011011001111110111010010001", 
    11 => "10111011110100000110011110001100", 
    12 => "00111010100101111100100000001000", 
    13 => "10111100100000000110000001111000", 
    14 => "10111010011111111001011100100100", 
    15 => "10111010111011100000011011011001", 
    16 => "10111011100001010011001110110001", 
    17 => "10111011001100100011000101000000", 
    18 => "10111011111110010000000100001000", 
    19 => "00111010111000110000010001000111", 
    20 => "00111100000011100000010000111010", 
    21 => "00111011100001001000001110001000", 
    22 => "10111011000001101001110001100111", 
    23 => "10111011100000110011110001100000", 
    24 => "00111011110000101101111100001101", 
    25 => "10111100000110010010010000101001", 
    26 => "00111010010010111010111110010110", 
    27 => "10111011101100001000010101101110", 
    28 => "00111010011000110000010001000111", 
    29 => "00111011001111110001101001011101", 
    30 => "00111100010001111101101000011111", 
    31 => "00111011101010000001000100101100", 
    32 => "00111100011001110000110000010011", 
    33 => "10111001100010010101110100001011", 
    34 => "10111011111110000100100001111100", 
    35 => "10111011101101010011110101100100", 
    36 => "00111011000000110010001100110110", 
    37 => "00111011001001001000111110010111", 
    38 => "10111011100010000011011101110010", 
    39 => "10111100010010000111100110000001", 
    40 => "10111011110110100100110011101000", 
    41 => "00111011101100010101111110001001", 
    42 => "00111011100100001010001101010001", 
    43 => "00111100101100010100000000010100", 
    44 => "00111001100000111001100010100110", 
    45 => "00111010000011010000100010010010", 
    46 => "10111100001110000010001111001000", 
    47 => "10111010000101010010100011110010", 
    48 => "00111011011011110001001101001001", 
    49 => "10111010011101101010110101110001", 
    50 => "10111100100001000010100101011010", 
    51 => "10111100010001010010101001000001", 
    52 => "10111100011011111100101111010101", 
    53 => "00111100001100000001010000101111", 
    54 => "00111010001101111100001101010000", 
    55 => "10111100101000111010101100000000", 
    56 => "10111011110000110011001011110000", 
    57 => "00111011001000010010011100101101", 
    58 => "00111011110001001101111011000010", 
    59 => "00111100001110101000001111110101", 
    60 => "00111100010011100111100010011110", 
    61 => "00111011001000100010001011010101", 
    62 => "10111100000111011111100101111011", 
    63 => "00111011111011110111011111110010", 
    64 => "10111010111111000010111010111010", 
    65 => "00111011001010000110110101110010", 
    66 => "10111011001111101011010110110011", 
    67 => "10111100000100010110010001000001", 
    68 => "10111011101101101111000110011001", 
    69 => "00111001100110000000101100100100", 
    70 => "00111100101011000110010001110111", 
    71 => "00111100010011001111001010001100", 
    72 => "00111100010001001000111100010001", 
    73 => "00111010100011010000100010010010", 
    74 => "10111011010010010010000101000111", 
    75 => "10111100000001000011001111010111", 
    76 => "00111011000101011011111111110000", 
    77 => "10111010100101010010100011110010", 
    78 => "00111010111100110010001101111001", 
    79 => "10111011100001001010010100010110", 
    80 => "00111011100001100100100010000100", 
    81 => "00111100001001000011011110000010", 
    82 => "00111100100010000110010110010101", 
    83 => "10111100000111101000001111100100", 
    84 => "10111100000010110000000001111010", 
    85 => "10111100011111010010101001100011", 
    86 => "00111011111101000101100111011010", 
    87 => "10111011011110111100101000010000", 
    88 => "00111010101011011010101110011111", 
    89 => "00111011000100000011111010100111", 
    90 => "10111011100111110010011101111000", 
    91 => "00111011111111000100011111100101", 
    92 => "00111100000110101100001101100101", 
    93 => "10111011111000011000101011001010", 
    94 => "10111011100111100101010111000001", 
    95 => "10111100000010001111110010010011", 
    96 => "10111100010001110110010010101110", 
    97 => "10111011100000001101100000000010", 
    98 => "00111100001111100001001000011111", 
    99 => "00111011111010100111010001111110", 
    100 => "00111100001001000000100101011111", 
    101 => "00111011101011010010010101101000", 
    102 => "10111100011101100011001111001110", 
    103 => "10111100000111011001000010011111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_16 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_16 is
    component L3_up_L2_WEIGHTS_16_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_16_rom_U :  component L3_up_L2_WEIGHTS_16_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


