-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_50_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_50_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000101001001000011100110", 
    1 => "10111101110001101001011100101001", 
    2 => "10111101100010100111000001001100", 
    3 => "00111101000001111011000100111010", 
    4 => "00111101110010111010101001011000", 
    5 => "00111101101011010110010101011110", 
    6 => "00111100000101100010110011111110", 
    7 => "10111101101000110111010110000110", 
    8 => "10111101110011110110101101011101", 
    9 => "10111100101010111010100111010010", 
    10 => "00111101011101101101011001010110", 
    11 => "00111101101111010001000000101100", 
    12 => "00111101001101111000001001001101", 
    13 => "10111101001111001110101001101100", 
    14 => "10111101100010011100001111001110", 
    15 => "10111101001001100011000111111001", 
    16 => "00111101001001110011111101110101", 
    17 => "00111101011000011010110101100100", 
    18 => "00111100010110111000001101001001", 
    19 => "10111100110100100100011111001011", 
    20 => "10111101100111110101100111001101", 
    21 => "10111100100101001111000001010010", 
    22 => "00111101011000110111011110011111", 
    23 => "00111101101001001001011101110100", 
    24 => "00111101000110001010111010111000", 
    25 => "10111101010100011001001001100100", 
    26 => "10111101100100100000010010110000", 
    27 => "10111011000010001110011110011011", 
    28 => "00111101101000100100110001000000", 
    29 => "00111101101000111010111010101011", 
    30 => "00111101000011010010001011001001", 
    31 => "10111101001001110000000110010111", 
    32 => "10111101110001011001101001110100", 
    33 => "10111101100110001101101011000010", 
    34 => "00111010101000011011111000101011", 
    35 => "00111101011011111100100110111100", 
    36 => "00111101110000001000000011111010", 
    37 => "00111101010101111011110001111111", 
    38 => "10111101010001001100111100000111", 
    39 => "10111101110000111011001111101010", 
    40 => "10111101101010100001100010111101", 
    41 => "10111100000111100011100001100101", 
    42 => "00111101101001111000111010011111", 
    43 => "00111101110010100000000000011001", 
    44 => "00111101000101010001011100011110", 
    45 => "10111101010101010011110011011110", 
    46 => "10111101101101001100101110011111", 
    47 => "10111101010001101001011100101001", 
    48 => "00111100100111010101111001001010", 
    49 => "00111101010111001111010101101111", 
    50 => "00111101001000000000011111011101", 
    51 => "10111011111000011010001111110100", 
    52 => "10111101110000100101110110001101", 
    53 => "10111100110110010101110111010101", 
    54 => "00111101100111100100110011010111", 
    55 => "00111101110101101111111000101110", 
    56 => "00111101000010001010000101011010", 
    57 => "10111101011010111011011101110100", 
    58 => "10111101110110011111110000101011", 
    59 => "10111101011010001001001000100101", 
    60 => "00111100111001011010111111110011", 
    61 => "00111101110100111001110100011011", 
    62 => "00111101100010000010011100110001", 
    63 => "10111100101100110101000010001111", 
    64 => "10111101100111001011001101011111", 
    65 => "10111101011111000011101101001111", 
    66 => "00111100000001001000011110111010", 
    67 => "00111101010101001101101001001101", 
    68 => "00111101010110011110110001110000", 
    69 => "10111100011101110001011001001100", 
    70 => "10111101010100000111010000100001", 
    71 => "10111101010110101000110111101011", 
    72 => "00111100001010000101000000010110", 
    73 => "00111101011100010101011100100110", 
    74 => "00111101011010011000100010010000", 
    75 => "00111011010110001110110010010110", 
    76 => "10111101101000111000001110101110", 
    77 => "10111101101001101000101000001101", 
    78 => "00111101011001101100001010101101", 
    79 => "00111101110111000010111101000000", 
    80 => "00111101011100110001010011001011", 
    81 => "10111100100011101100001100010001", 
    82 => "10111101101001101010011001011101", 
    83 => "10111101110001111001110101001110", 
    84 => "10111101000010101010001100100111", 
    85 => "00111101100001110111111011100101", 
    86 => "00111101101110111000001101001001", 
    87 => "00111101011100101101000110101111", 
    88 => "10111100011101110111001010010011", 
    89 => "10111101011111011000111100001100", 
    90 => "10111101101111010100111010010000", 
    91 => "10111100101001111001011110001001", 
    92 => "00111101011001001100011000011110", 
    93 => "00111101110101011001111011101001", 
    94 => "00111101011001110010101110001000", 
    95 => "10111100010111101011010100101101", 
    96 => "10111101101110011111010101011010", 
    97 => "10111101100001000110001110001101", 
    98 => "10111100000101010110110000001101", 
    99 => "00111101010001010100110011011011", 
    100 => "00111101100101100110100011000010", 
    101 => "00111100101000010100110011101100", 
    102 => "10111101001101111001000011111011", 
    103 => "10111101011000111000011001001101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_50 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_50 is
    component L3_up_L2_WEIGHTS_50_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_50_rom_U :  component L3_up_L2_WEIGHTS_50_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


