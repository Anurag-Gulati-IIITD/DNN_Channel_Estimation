-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_21_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_21_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100100100101110000111101111", 
    1 => "00111100011101100010011100111001", 
    2 => "00111011001110100000111010000100", 
    3 => "10111011111101101011010111010100", 
    4 => "10111100001101111101110001111011", 
    5 => "10111011110000110011101101010100", 
    6 => "00111010111110111000011011110100", 
    7 => "00111011110101000110111101011000", 
    8 => "00111011011010111111111011000001", 
    9 => "10111011100000001001110101001001", 
    10 => "10111011000000100111101101110000", 
    11 => "10111011010000011010100010101100", 
    12 => "00111010010001110011101010111101", 
    13 => "00111100000001000001101010101100", 
    14 => "10111011011111001110011101000111", 
    15 => "10111100000000011010100110111001", 
    16 => "10111100000011110000110001111000", 
    17 => "10111010110000110010101010001101", 
    18 => "00111011110110001101001101101011", 
    19 => "00111100011100001011001010000101", 
    20 => "00111100010001011001001100011101", 
    21 => "00111011001010000100101111100100", 
    22 => "10111011010101100000101001100011", 
    23 => "10111011001000101010100100001101", 
    24 => "00111011101011010100111101011001", 
    25 => "00111100000000101010010101100001", 
    26 => "10111100000000101011000111110111", 
    27 => "10111100011100100101101000100101", 
    28 => "10111100000010100111111001110100", 
    29 => "00111011100111011000110001101101", 
    30 => "00111011101100101111101010010100", 
    31 => "00111011111111111011000001001111", 
    32 => "00111010000011110010000101110001", 
    33 => "10111011010101110011100001100001", 
    34 => "00111010100100000100111101101110", 
    35 => "00111001111111001011010011110010", 
    36 => "00111011101110101010110111100110", 
    37 => "10111011111011110110011100101100", 
    38 => "10111100010010001001001010101011", 
    39 => "10111011100100000000110001010010", 
    40 => "10111011001110001110000010000111", 
    41 => "10111010010011001111111100100010", 
    42 => "00111100001011001100010011110000", 
    43 => "00111010111100011011001001011111", 
    44 => "00111011100000111001000001000011", 
    45 => "10111010100101111110100110010110", 
    46 => "10111011100101111001111000010111", 
    47 => "10111011100101110001011111011111", 
    48 => "10111011111111110001000011101101", 
    49 => "10111011011001010110000001000010", 
    50 => "10111001110101011110100011010101", 
    51 => "00111100000111001000110010010011", 
    52 => "00111011010001110101110001001011", 
    53 => "10111100001011100111100100100101", 
    54 => "10111100011001001110101011010001", 
    55 => "10111100001110100001011011101000", 
    56 => "00111010110001100000110010111111", 
    57 => "00111100000000101011101001011010", 
    58 => "00111100000111010101010111100111", 
    59 => "00111011001100111111011000111100", 
    60 => "10111011110101111110100010001010", 
    61 => "10111011101110110010001101010111", 
    62 => "00111010010100101100001110000111", 
    63 => "00111011101101011011001011010101", 
    64 => "10111011011110100000010100010100", 
    65 => "10111011001100110011110110110000", 
    66 => "10111100011010001000000101011110", 
    67 => "10111011001111001010110110011011", 
    68 => "00111011111101000110001000111101", 
    69 => "00111100000011110010010110100010", 
    70 => "00111100000110101000000001001001", 
    71 => "10111010110011011110101000000011", 
    72 => "10111011111000100111111000001111", 
    73 => "10111100001011101100110100001000", 
    74 => "00111001100000101000110000110111", 
    75 => "00111010101101110011110100011001", 
    76 => "00111011100011100011011010001111", 
    77 => "10111010011001111011110000111100", 
    78 => "10111011100110101011001010011110", 
    79 => "00111010101010010001010100111000", 
    80 => "00111100000101001111101011001110", 
    81 => "00111100011010100011110111110111", 
    82 => "00111011101101000100000110111100", 
    83 => "10111010010110100001101010010011", 
    84 => "10111010011011110101011001100101", 
    85 => "10111011010011110010100011001000", 
    86 => "00111010000101011111001001000101", 
    87 => "10111011110101110001111100110110", 
    88 => "10111011000110001100001110110001", 
    89 => "10111100001001110000010010111100", 
    90 => "10111011100100010111010100001000", 
    91 => "00111011011011011000000010100001", 
    92 => "00111100001001010111101001111000", 
    93 => "00111011101111011001100001111100", 
    94 => "00111011001011100001000001001001", 
    95 => "10111010000100001111011100110100", 
    96 => "10111011110001100010111001001101", 
    97 => "10111011101010111000101001011101", 
    98 => "10111011101100111100110001001011", 
    99 => "00111001011010011101010100011011", 
    100 => "10111011100100000110100010011000", 
    101 => "00111011110100100000001010010111", 
    102 => "00111100001000110010101100010011", 
    103 => "00111010110101000111011110111100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_21 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_21 is
    component L3_up_L2_WEIGHTS_21_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_21_rom_U :  component L3_up_L2_WEIGHTS_21_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


