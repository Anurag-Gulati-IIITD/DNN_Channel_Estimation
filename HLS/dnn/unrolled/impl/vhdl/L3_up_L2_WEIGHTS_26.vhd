-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_26_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_26_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000110100100111101000100", 
    1 => "10111101101011100100010100111101", 
    2 => "10111100111100001011101011101001", 
    3 => "00111011110111011000101101100001", 
    4 => "00111100100111111110011001001111", 
    5 => "00111101000010001000000011011000", 
    6 => "00111101011011000111111010101110", 
    7 => "00111101110010110111101100101001", 
    8 => "00111101101010010110000000110001", 
    9 => "00111100100100001011010000011000", 
    10 => "10111101011010001011001010100111", 
    11 => "10111101101110011110011110111000", 
    12 => "10111101101110011000011000110100", 
    13 => "10111101010100110110000011010000", 
    14 => "10111100100000011010000101010101", 
    15 => "00111100110111010010111100011011", 
    16 => "00111101011011110100010010010001", 
    17 => "00111101100110001001011110100110", 
    18 => "00111101101010011101011110111010", 
    19 => "00111101010101011001110001001001", 
    20 => "00111100000000011010000101010101", 
    21 => "10111101001011110101000100100110", 
    22 => "10111101100111011100100100111111", 
    23 => "10111101101110100011110000100001", 
    24 => "10111101101000100100110111010011", 
    25 => "10111101001010101010100111111000", 
    26 => "00111101011101000100011011111010", 
    27 => "00111101101011010100110111000110", 
    28 => "00111101110000000101100010011011", 
    29 => "00111101011010101101100000011011", 
    30 => "00111011110101000110011011110101", 
    31 => "10111101001001011111011000110100", 
    32 => "10111101100010011101110001110010", 
    33 => "10111101100011100011110011011010", 
    34 => "10111101001100101100011000100110", 
    35 => "10111101000010011010000100110100", 
    36 => "00111011001000011111000010000000", 
    37 => "00111101001101100000011010111000", 
    38 => "00111101100101010001100010110001", 
    39 => "00111101101111101100100110011111", 
    40 => "00111101100100011010100101110110", 
    41 => "00111011110111011111100001101110", 
    42 => "10111101010110000111111110001000", 
    43 => "10111101101100100000001110100011", 
    44 => "10111101011101111101010100100100", 
    45 => "10111101001111100010100000100100", 
    46 => "10111100110000000010000010000001", 
    47 => "10111100100001111100111010010110", 
    48 => "10111010110100111010111001101000", 
    49 => "00111101001110000001011100110011", 
    50 => "00111110000001000011110100000100", 
    51 => "00111110000111100001110010011011", 
    52 => "00111011111111111100000100010110", 
    53 => "00111101100001110001001111110000", 
    54 => "00111101101001010100100110110110", 
    55 => "00111101011101011100010010101000", 
    56 => "00111101010000010010110111111101", 
    57 => "00111101010100101101110010110001", 
    58 => "00111101001001100010011001110000", 
    59 => "10111100010010111000010110100101", 
    60 => "10111101100011000001011111101100", 
    61 => "10111101110001000011000100111000", 
    62 => "10111101101100101110000111101111", 
    63 => "10111100111000110101111001110100", 
    64 => "00111100101011100100111100110011", 
    65 => "00111101100100101110011000100001", 
    66 => "00111101100100010010101110100001", 
    67 => "00111101100101011000000010000000", 
    68 => "00111101001110001100001000011110", 
    69 => "00111101000010100111101101001110", 
    70 => "10111100100101001100101010010010", 
    71 => "10111101100100010010101110100001", 
    72 => "10111101101110110011101011101111", 
    73 => "10111101101100110001011001011101", 
    74 => "10111101011001100110101110100101", 
    75 => "10111010011000011011010010111011", 
    76 => "00111101010100101011101100100011", 
    77 => "00111101101101111000101000101011", 
    78 => "00111101100001011001111100101100", 
    79 => "00111100010010011010011101111110", 
    80 => "10111101000100111110110001000110", 
    81 => "10111101100111101011001100010100", 
    82 => "10111101101110010011011110001111", 
    83 => "10111101101000011110101101000010", 
    84 => "10111100111011010110011101110111", 
    85 => "00111100000010101010110010010111", 
    86 => "00111101010101001110110000100000", 
    87 => "00111101100001001110000001010100", 
    88 => "00111101100101111101101101101110", 
    89 => "00111101100000000111000010111001", 
    90 => "00111100110111000110100111111001", 
    91 => "10111100011011100010110010011001", 
    92 => "10111101101000010000111010001000", 
    93 => "10111101111000110010011011100001", 
    94 => "10111101101001001100011010100100", 
    95 => "10111100101011001111100101011101", 
    96 => "00111100111101110000000101010100", 
    97 => "00111101001011100100100111110101", 
    98 => "00111100110101010011100010101100", 
    99 => "00111101001000010000101111101001", 
    100 => "00111101100001101110010000111011", 
    101 => "00111101110010010101100001010011", 
    102 => "00111101010001110100100001011110", 
    103 => "10111101001100101011111011001111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_26 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_26 is
    component L3_up_L2_WEIGHTS_26_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_26_rom_U :  component L3_up_L2_WEIGHTS_26_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


