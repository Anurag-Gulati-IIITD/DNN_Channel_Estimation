-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_6_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_6_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000101110010100110110011", 
    1 => "00111101000010011110110111000000", 
    2 => "00111100000010010000100100101001", 
    3 => "00111100100001000010100101011010", 
    4 => "10111011101001110000010010111100", 
    5 => "00111100001110011000110001111110", 
    6 => "00111101001001010001010011000010", 
    7 => "00111101010011010001011101000000", 
    8 => "00111011000111100010001101101100", 
    9 => "10111011101100001110000110110101", 
    10 => "10111101001010001010011100011110", 
    11 => "10111101010110100101100001110001", 
    12 => "10111101000000110101111011111010", 
    13 => "10111100010101110111001100011001", 
    14 => "00111101001101000100010011100001", 
    15 => "00111100110001011111011111000110", 
    16 => "00111100000111010001001011001011", 
    17 => "00111011101001111100010110101100", 
    18 => "10111101000011111000010000000010", 
    19 => "00111101001011110000011111000000", 
    20 => "00111101000101110101000110001011", 
    21 => "00111011000000111101101111000010", 
    22 => "10111101100100110001100110000011", 
    23 => "10111101100011011100001010110001", 
    24 => "10111101000001001011011111110110", 
    25 => "00111011111001010111000100001001", 
    26 => "00111101101001011100101000101010", 
    27 => "00111101001110110111100001000110", 
    28 => "00111100000011010110010011011000", 
    29 => "10111100101111100001100001101010", 
    30 => "10111101010001000001101010101100", 
    31 => "10111101000110011110111110010101", 
    32 => "10111101011010100000000000011001", 
    33 => "10111100001111110110101000001110", 
    34 => "10111100100001010010110101100110", 
    35 => "00111100110011110111110010101010", 
    36 => "00111101001011110011101000010101", 
    37 => "00111101000000001101101000011011", 
    38 => "10111011011011010101111100010100", 
    39 => "10111100110001000011011011111100", 
    40 => "10111101000110000000101100100100", 
    41 => "00111100101111111110011111100010", 
    42 => "00111100110111100011000100001110", 
    43 => "00111101000000000000101110001001", 
    44 => "00111011011011011001000101101000", 
    45 => "10111100001110000010110000101100", 
    46 => "10111100111000011110011100010000", 
    47 => "10111101010100001110000000100010", 
    48 => "10111100101010010111010110110000", 
    49 => "00111100111001010000100000101101", 
    50 => "00111101011000001101001101001010", 
    51 => "00111101101001110101101010111000", 
    52 => "00111100011001101001101011010100", 
    53 => "00111101100001010000001101110101", 
    54 => "00111100100010101000000010001101", 
    55 => "10111100101100010011001101111111", 
    56 => "10111011111100111010100110110000", 
    57 => "10111010001001001110001101111010", 
    58 => "00111100110001111111110111000110", 
    59 => "10111010111011011000000010100001", 
    60 => "10111101001001101110000100010101", 
    61 => "10111101100101000111111110011001", 
    62 => "10111101010101001001010000001100", 
    63 => "10111100101100001011100111011100", 
    64 => "00111101100011001000011100010010", 
    65 => "00111101010001011100111111101110", 
    66 => "00111101000010101000110000010101", 
    67 => "10111100001001111100000101111011", 
    68 => "10111100100011000110001011100101", 
    69 => "10111100011101111111100011001011", 
    70 => "00111100111011101001011110001101", 
    71 => "00111100010000011000111110000010", 
    72 => "10111100011000100101100001001111", 
    73 => "10111101001110011100101001011100", 
    74 => "10111011011100000110001011010100", 
    75 => "00111100100101111111100001000100", 
    76 => "00111101100000001001100110011110", 
    77 => "00111101101000110000001100111010", 
    78 => "00111100001011101000100111101100", 
    79 => "10111100011111111100000100010110", 
    80 => "10111101100001001111101110011000", 
    81 => "10111100101011110111111101001010", 
    82 => "10111101000000100110010101101011", 
    83 => "00111010101011010100011011110110", 
    84 => "00111100010100011011111101111011", 
    85 => "00111101000011011001001011111011", 
    86 => "00111100100000010111101110010110", 
    87 => "00111100110101011011010001100111", 
    88 => "00111001010110000000000110110100", 
    89 => "10111100010010001011110010011101", 
    90 => "10111100101100000100110011001111", 
    91 => "10111100100000111111111101101001", 
    92 => "00111100100100101001111011010100", 
    93 => "00111100011011111101100001101011", 
    94 => "00111011011010110111100010001001", 
    95 => "10111101001000111100010000101010", 
    96 => "10111101011010111111101010001111", 
    97 => "10111100110101010000100001110000", 
    98 => "00111011011001110111100100100000", 
    99 => "00111100101101011010001000001110", 
    100 => "00111101011110100110100010110010", 
    101 => "00111101010010101111010011110001", 
    102 => "00111100100101101000110101110110", 
    103 => "10111101010101100101111101010010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_6 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_6 is
    component L3_up_L2_WEIGHTS_6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_6_rom_U :  component L3_up_L2_WEIGHTS_6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


