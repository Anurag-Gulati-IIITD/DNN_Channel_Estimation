-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_37_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_37_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100110011100100101001111011", 
    1 => "00111101011110001110011011010001", 
    2 => "00111101101110100111100111111111", 
    3 => "00111101101011011100000010011000", 
    4 => "00111101000011000000010110010010", 
    5 => "10111101001110001101001011100101", 
    6 => "10111101111001100011100001000011", 
    7 => "10111110000010111101011100101100", 
    8 => "10111101110010011011100101010010", 
    9 => "00111100111011101001111111110001", 
    10 => "00111110000010010101011011000001", 
    11 => "00111110001011001001001101100100", 
    12 => "00111101111010001001011011011101", 
    13 => "10111100111001000101100000000100", 
    14 => "10111101111001011111110100000101", 
    15 => "10111110000100110101010101000111", 
    16 => "10111101111000010111101100001111", 
    17 => "10111101010000101010011001101110", 
    18 => "00111101001011000001100011111000", 
    19 => "00111110000011110010010110100010", 
    20 => "00111110000001011010110110010111", 
    21 => "00111101101101000110010101100010", 
    22 => "10111011001100010101011100100110", 
    23 => "10111101110100100010110100001110", 
    24 => "10111110000001100011100001000011", 
    25 => "10111101110110010101110111010101", 
    26 => "00111101010011100100011001001010", 
    27 => "00111101100111010100001010000001", 
    28 => "00111101010100011001100110111011", 
    29 => "10111011000111000001101101010100", 
    30 => "00111100100000100001101011111000", 
    31 => "00111100101000011010100100110011", 
    32 => "00111100100101100101100100001000", 
    33 => "10111100100010100000001010111000", 
    34 => "10111101101110110001011000111100", 
    35 => "10111101111110000000101000011000", 
    36 => "10111101011101001100110100110001", 
    37 => "00111101010011000110001111110001", 
    38 => "00111110000011011110111111001000", 
    39 => "00111110000101001100000001011001", 
    40 => "00111101010101100101011011101111", 
    41 => "10111101100010111111111101000111", 
    42 => "10111110000010101100000010000011", 
    43 => "10111101110110010011010011110000", 
    44 => "10111101000101010000000000001101", 
    45 => "00111101011110000011001001110110", 
    46 => "00111101101000111001101000111001", 
    47 => "00111101101001000011010001011101", 
    48 => "00111101000010110111100000000011", 
    49 => "10111010000100000010110111100000", 
    50 => "10111101010110101010001111110000", 
    51 => "10111101011001011000101000110011", 
    52 => "00111101100001100001110110000110", 
    53 => "00111101000111110100011111111010", 
    54 => "00111100100101101010000001010101", 
    55 => "10111101001101111010001111011011", 
    56 => "10111101110010011100000100101111", 
    57 => "10111101111100010010011101110000", 
    58 => "10111101100101100101011111111011", 
    59 => "00111101000010011110110111000000", 
    60 => "00111110000000011010010110000111", 
    61 => "00111110001000101101101110100101", 
    62 => "00111101110001001010100111001110", 
    63 => "10111100111100111010001101100110", 
    64 => "10111110000010010000001000010101", 
    65 => "10111110000111101011011101000101", 
    66 => "10111101110111110110110000100111", 
    67 => "10111100110010101001001001100000", 
    68 => "00111101101110000111110111110110", 
    69 => "00111110000011100110001011011100", 
    70 => "00111110000010011000100011010011", 
    71 => "00111101100011010111000011100111", 
    72 => "10111101001000011111100111110000", 
    73 => "10111101111101010100110100011111", 
    74 => "10111110000010111100001001110110", 
    75 => "10111101110001010110010011111001", 
    76 => "10111101000000101100100100001000", 
    77 => "00111101100011110110010110011001", 
    78 => "00111101100100000101010100110010", 
    79 => "00111100111011000010111011111101", 
    80 => "10111100110110010010110110011001", 
    81 => "10111100111011011101010010000100", 
    82 => "10111010101011101111101100101011", 
    83 => "10111100101001101101011010011001", 
    84 => "10111101100010100001011110110001", 
    85 => "10111101100011010100101010100001", 
    86 => "10111101011101110100111111111000", 
    87 => "00111101000001000100100111011100", 
    88 => "00111110000000010101001101111010", 
    89 => "00111110000111001111011010111110", 
    90 => "00111101010111100110001101100011", 
    91 => "10111101100011010011100001000111", 
    92 => "10111110000101001101011100101000", 
    93 => "10111110000001010100011110011101", 
    94 => "10111101001101110000111011110101", 
    95 => "00111101101011101110011100111110", 
    96 => "00111101111011010011011000101111", 
    97 => "00111101110111000001100100111011", 
    98 => "00111101001010101001000011001101", 
    99 => "10111101010000000001111101110101", 
    100 => "10111101011101010001100010110001", 
    101 => "10111101100000110011001001101010", 
    102 => "10111101100010001011110110101001", 
    103 => "10111101001100111010110111100010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_37 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_37 is
    component L3_up_L2_WEIGHTS_37_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_37_rom_U :  component L3_up_L2_WEIGHTS_37_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


