-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_44_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_44_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111011110010011100100100001100", 
    1 => "10111010111100101001110101000001", 
    2 => "00111011010000011110101111001000", 
    3 => "00111011110100110101001000100010", 
    4 => "00111010010000000010011011001100", 
    5 => "10111011100111101110110011000000", 
    6 => "00111011000100011100000010000111", 
    7 => "10111011101100110101011011011010", 
    8 => "10111011000010100010011001011111", 
    9 => "00111010100100001011010000011000", 
    10 => "00111011011000111011110011010011", 
    11 => "00111011011110111101101011010111", 
    12 => "00111011111001101000111000111111", 
    13 => "00111011110110010101100110100011", 
    14 => "10111011010110001100101100001000", 
    15 => "10111100010100001010001001000100", 
    16 => "10111011010001110001100100101111", 
    17 => "10111010010111111001101111011100", 
    18 => "00111011001110011100101101101000", 
    19 => "00111011101001011110111111101001", 
    20 => "10111011110101011111000100111001", 
    21 => "10111011001000001001000000101110", 
    22 => "00111011110100110001111111001101", 
    23 => "00111011100011000110000011001100", 
    24 => "10111010000101011111001001000101", 
    25 => "00111011001111011100101011010001", 
    26 => "10111100001000101001100001000110", 
    27 => "00111100000110010101111011100001", 
    28 => "10111001111001001001011011101110", 
    29 => "00111011110100010100000110100111", 
    30 => "00111011100101100010110011111110", 
    31 => "10111100000011100000100001101100", 
    32 => "10111100000100001101010110100110", 
    33 => "10111011101101100111001111000101", 
    34 => "00111001111100100011100010010111", 
    35 => "00111010101111100111001010010111", 
    36 => "00111100001001100001100111011011", 
    37 => "00111011000000010010101111100101", 
    38 => "10111010110001101001001011110111", 
    39 => "10111010101100101000010100100011", 
    40 => "00111011010100100110111110100100", 
    41 => "10111010010000100011111110101011", 
    42 => "10111011001001101000011011101000", 
    43 => "10111011101111010001001001000101", 
    44 => "10111001010001110011101010111101", 
    45 => "00111010011001110111100100100000", 
    46 => "00111011100010110101010001011100", 
    47 => "00111011111001101001111100000110", 
    48 => "00111011110101011010010110111001", 
    49 => "10111011101100110101011011011010", 
    50 => "10111011001001010100100000100100", 
    51 => "10111100001001001110101111011101", 
    52 => "00111011100000110101110111101110", 
    53 => "00111010000101101011101110011001", 
    54 => "10111011100101101010001001101110", 
    55 => "10111010100010000111001000101010", 
    56 => "10111011000110001100001110110001", 
    57 => "10111011010110100101110110101111", 
    58 => "10111010100111101011101001101011", 
    59 => "00111011100000111011000111010001", 
    60 => "00111010111101001101011110101110", 
    61 => "00111010111101011010000100000001", 
    62 => "00111011101001000110111000001001", 
    63 => "00111011100000110011001111111101", 
    64 => "10111011000110111100011101110001", 
    65 => "10111100001110111010110111000001", 
    66 => "10111011001010101101101000110100", 
    67 => "10111010010010100001110011101111", 
    68 => "00111011010001111100000011110100", 
    69 => "00111011111000011001001100101101", 
    70 => "10111011101100110100011000010011", 
    71 => "10111011001111100000110111101101", 
    72 => "00111011100000100011100001010100", 
    73 => "10111010110000100110000100111001", 
    74 => "00111011000010001111100001100010", 
    75 => "00111011011111110000000000100110", 
    76 => "10111011011000100000100010011110", 
    77 => "10111100000001111000111110101100", 
    78 => "10111011001001000101110101000010", 
    79 => "00111011101011101000111000011101", 
    80 => "00111100001101001011111110010000", 
    81 => "10111100000100011010101110001111", 
    82 => "10111011110000110001000101100010", 
    83 => "10111011100100010111010100001000", 
    84 => "10111010101001000101110101000010", 
    85 => "00111011010010010010000101000111", 
    86 => "00111100010000110000000010011011", 
    87 => "00111011001101100001111111100010", 
    88 => "10111011001010101110101011111011", 
    89 => "00111010100011010110110100111011", 
    90 => "10111011000010001010010001111111", 
    91 => "10111001100000001111100110010000", 
    92 => "10111000001110001000110010100100", 
    93 => "00111010010011110001100000000001", 
    94 => "00111001010110000000000110110100", 
    95 => "00111001100111001100001100011010", 
    96 => "00111011001111011111110100100110", 
    97 => "00111011100011110110110011110000", 
    98 => "10000000000000000000000000000000", 
    99 => "10111011011001111100110100000011", 
    100 => "10111011000101011110000101111110", 
    101 => "10111100000111100010011110011110", 
    102 => "10111011100000101110100001111101", 
    103 => "00111100000001011001010000101001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_44 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_44 is
    component L3_up_L2_WEIGHTS_44_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_44_rom_U :  component L3_up_L2_WEIGHTS_44_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


