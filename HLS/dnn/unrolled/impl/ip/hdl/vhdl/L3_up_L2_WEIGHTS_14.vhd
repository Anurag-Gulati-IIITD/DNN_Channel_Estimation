-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_14_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_14_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000110010110110101001100", 
    1 => "10111101110111110100011001100111", 
    2 => "00111011010111010110000101110000", 
    3 => "00111101101101111100000110111110", 
    4 => "00111110000010100010100010111011", 
    5 => "00111101110001000010100101011010", 
    6 => "10111011111111011001011101110000", 
    7 => "10111101101101000000000100111111", 
    8 => "10111101111101110100100000011011", 
    9 => "10111101101101000110100010001000", 
    10 => "10111100010000111000101100000101", 
    11 => "00111101001100001001110010000000", 
    12 => "00111101100100000010000101001011", 
    13 => "00111101001011011001101111100101", 
    14 => "00111100010010010001010010110001", 
    15 => "00111011111111010101110010111000", 
    16 => "10111100111001101011110001100010", 
    17 => "10111101000001110110011011000111", 
    18 => "10111100111000110101111001110100", 
    19 => "10111100110000111001011110011010", 
    20 => "00111100000000110110101010000011", 
    21 => "00111100010110101001000000000100", 
    22 => "00111100111011001001010111000000", 
    23 => "00111100110000001010010010100000", 
    24 => "00111011101010000010101001010110", 
    25 => "10111101001010000111000110100100", 
    26 => "10111101000011111110000101010100", 
    27 => "00111101011011110111001010110100", 
    28 => "00111101110100110010010010000101", 
    29 => "00111101101000001000001010001100", 
    30 => "00111011101011111111011011010011", 
    31 => "10111101111000001010101101110001", 
    32 => "10111101111001100000011110000001", 
    33 => "10111101000000010110010010000100", 
    34 => "00111101010101011111010101101010", 
    35 => "00111101110111111001100000110001", 
    36 => "00111101010001101100001000100111", 
    37 => "10111101001101010100011111100000", 
    38 => "10111101010011111001010111010101", 
    39 => "10111100001001000011101110110100", 
    40 => "00111101100000101010100100001101", 
    41 => "00111101101011011011010100001111", 
    42 => "10111100000011111110101011000100", 
    43 => "10111101101111101111100111011011", 
    44 => "10111101111110101010111101111001", 
    45 => "10111100101110011111100110001011", 
    46 => "00111101100110011100110011111011", 
    47 => "00111110000011010101111010001101", 
    48 => "00111101101101100110101011011011", 
    49 => "10111100001110101111010100110100", 
    50 => "10111101111101000101111110011110", 
    51 => "10111101110010100111001111110111", 
    52 => "10111011110101010001111110000010", 
    53 => "00111101110011110100111000000001", 
    54 => "00111110000111010011111100011000", 
    55 => "00111101110100100111110000111001", 
    56 => "00111100000001011011000110000101", 
    57 => "10111101110011110111001100111011", 
    58 => "10111110000011110001001100000110", 
    59 => "10111101110010010000110101011010", 
    60 => "00111010000100110101001100101110", 
    61 => "00111101011001001101111101001000", 
    62 => "00111101110010111111011011100100", 
    63 => "00111101101001100101111010001001", 
    64 => "00111100011010000110010000000010", 
    65 => "10111100111100000110001011010100", 
    66 => "10111101011011010100010111101001", 
    67 => "10111101010000000101111101101100", 
    68 => "10111100100111111010000100011011", 
    69 => "00111100010010110100111100011110", 
    70 => "00111100000010110110000011110010", 
    71 => "00111101000001111110000101110110", 
    72 => "00111100110000111010010000101111", 
    73 => "00111100111000000100001110100010", 
    74 => "00111100000101000000001101011000", 
    75 => "10111101001101010001110111101111", 
    76 => "10111101100010001111101100000001", 
    77 => "10111101001101101001110010101010", 
    78 => "00111101100110111010001101000100", 
    79 => "00111101100100001100000110111001", 
    80 => "00111011111111000110100101110011", 
    81 => "10111101101101101101000110011110", 
    82 => "10111101111011010101100101001111", 
    83 => "10111101010010110111000110111001", 
    84 => "00111101000110011011110101000000", 
    85 => "00111101110011111101110000010110", 
    86 => "00111101101011001010101100111111", 
    87 => "00111011100101111100100000001000", 
    88 => "10111101100001101011010010000101", 
    89 => "10111101101000011000110101101001", 
    90 => "10111001000101001110010111010110", 
    91 => "00111101010001011100100010010111", 
    92 => "00111101001101100110010000001010", 
    93 => "10111101010100000101111000011100", 
    94 => "10111101110000101001001110001110", 
    95 => "10111101011011111010100000101111", 
    96 => "00111101010100010110101010001100", 
    97 => "00111101111110011100101111101111", 
    98 => "00111110000001011000101010111001", 
    99 => "00111100001100110010110011101001", 
    100 => "10111101110111000010011111101001", 
    101 => "10111110000000001010100000001001", 
    102 => "10111101011110001000001000101000", 
    103 => "00111101001000010111000110011111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_14 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_14 is
    component L3_up_L2_WEIGHTS_14_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_14_rom_U :  component L3_up_L2_WEIGHTS_14_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


