-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_43_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_43_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101000111101010101110111101", 
    1 => "10111101011010101100001000010110", 
    2 => "10111101110101011011011100000111", 
    3 => "10111101110010001011111111000010", 
    4 => "10111100110111000010011011011101", 
    5 => "00111101100000110100001100110001", 
    6 => "00111101111110000001101001011000", 
    7 => "00111101110010100101111001111000", 
    8 => "00111100001101000110011101111011", 
    9 => "10111101101001101011110101101111", 
    10 => "10111110000001100100110001110011", 
    11 => "10111101110011110000001100001000", 
    12 => "10111010011010000100001001110100", 
    13 => "00111101100110100100111100000001", 
    14 => "00111101111001100001100001001000", 
    15 => "00111101100011001011100001011010", 
    16 => "10111100000110110001011101001000", 
    17 => "10111101011111110000010101100100", 
    18 => "10111101011110111010001101000100", 
    19 => "10111100100011011001010100010100", 
    20 => "10111100000000010101101000001000", 
    21 => "10111011111110000010011011101110", 
    22 => "10111010001110000000011001101100", 
    23 => "00111100100010000101011011100111", 
    24 => "00111101011100001000101010101101", 
    25 => "00111101011001001101011011100100", 
    26 => "10111101101011100010011011010101", 
    27 => "10111101110110100011111101000110", 
    28 => "10111101010000101010001101001000", 
    29 => "00111101011110010011011110001111", 
    30 => "00111110000111100001101111010010", 
    31 => "00111101110111111011000011010101", 
    32 => "10111100100110000010000000011101", 
    33 => "10111110000011111100100001101101", 
    34 => "10111110001011000110011000001010", 
    35 => "10111101100100111101111110110001", 
    36 => "00111101100001110011101111001001", 
    37 => "00111110000101101001010010001010", 
    38 => "00111110000000011011101100000110", 
    39 => "00111101000110111001101001011011", 
    40 => "10111101010101101010000001010101", 
    41 => "10111101101101110001100101110010", 
    42 => "10111101101010101110001010010111", 
    43 => "10111101001110000111011110101011", 
    44 => "10111100101011001100000010111110", 
    45 => "00111101000010101110010000101010", 
    46 => "00111101100100001100111101011011", 
    47 => "00111101110011111010110001100000", 
    48 => "00111101100110011011101110101110", 
    49 => "10111100010100110010110001100010", 
    50 => "10111101111101101101000010010001", 
    51 => "10111110000100011001100101111000", 
    52 => "10111101111001110001111101111001", 
    53 => "10111101110111000111001011100010", 
    54 => "10111100110101111011110001111111", 
    55 => "00111101100010111111000110100110", 
    56 => "00111101111001101101110111110000", 
    57 => "00111101110000100001110100010001", 
    58 => "00111100010110111001100001000010", 
    59 => "10111101100110011010101101101101", 
    60 => "10111110000000001100010100100010", 
    61 => "10111101110110000010110110111110", 
    62 => "10111100010111001010110100010101", 
    63 => "00111101101010011000011011111101", 
    64 => "00111110000000010101000011011011", 
    65 => "00111101101100010000011111111011", 
    66 => "10111011010101111010110111010001", 
    67 => "10111101101011001111100011010111", 
    68 => "10111101101011001101110110010100", 
    69 => "10111101001011000110001101101011", 
    70 => "00111100010001011000011010000111", 
    71 => "00111101000001111100111010010110", 
    72 => "00111100100011100010110000010011", 
    73 => "00111100100001101000110110111001", 
    74 => "00111100111100011010100111111100", 
    75 => "00111101000111000111000001000011", 
    76 => "10111011010000100011111110101011", 
    77 => "10111101011001001100001011111000", 
    78 => "10111101100001010011111111000000", 
    79 => "00111101000101100011100010000110", 
    80 => "00111101111100111000100100101111", 
    81 => "00111101111100000110001011010100", 
    82 => "00111100110000001010100011010010", 
    83 => "10111101111000000000111110111011", 
    84 => "10111110001100110101110010011110", 
    85 => "10111101110000011001001010100111", 
    86 => "00111101001001100000111101011110", 
    87 => "00111110001000010011111000111110", 
    88 => "00111110000111001000101101000100", 
    89 => "00111101011000111101111001100001", 
    90 => "10111101100011110100110011110101", 
    91 => "10111110000000110011001100110011", 
    92 => "10111101110001010101000010000111", 
    93 => "10111101000010011010100010001011", 
    94 => "00111100101101001100000110101001", 
    95 => "00111101100000110101011100011101", 
    96 => "00111101100110010010010100110101", 
    97 => "00111101100110110110011001110011", 
    98 => "00111101011101101001110010101010", 
    99 => "10111100011011101001010101110100", 
    100 => "10111101101110000011110111111111", 
    101 => "10111110000001100110000101101011", 
    102 => "10111101101100110001110010101000", 
    103 => "00111100101111010001111011011010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_43 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_43 is
    component L3_up_L2_WEIGHTS_43_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_43_rom_U :  component L3_up_L2_WEIGHTS_43_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


