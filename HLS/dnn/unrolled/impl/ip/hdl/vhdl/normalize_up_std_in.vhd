-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity normalize_up_std_in_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of normalize_up_std_in_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111111001101001011101110010000", 
    1 => "00111111001101101000011000101111", 
    2 => "00111111001101110100101010111010", 
    3 => "00111111001101011101111111001010", 
    4 => "00111111001101001110010110000010", 
    5 => "00111111001101100010000010001010", 
    6 => "00111111001101110010001011110010", 
    7 => "00111111001101100101101001000111", 
    8 => "00111111001101010101101001001011", 
    9 => "00111111001101100001000100110100", 
    10 => "00111111001101101110001010111001", 
    11 => "00111111001101100111100010001110", 
    12 => "00111111001101011010010010111110", 
    13 => "00111111001101011110101001111001", 
    14 => "00111111001101101011010001100011", 
    15 => "00111111001101100110111101010000", 
    16 => "00111111001101011001010000111010", 
    17 => "00111111001101100000100100100100", 
    18 => "00111111001101101110000101001000", 
    19 => "00111111001101100110000011000100", 
    20 => "00111111001101010100010100001111", 
    21 => "00111111001101011101001111001100", 
    22 => "00111111001101110000001101001011", 
    23 => "00111111001101101001000101000011", 
    24 => "00111111001101010001000110001100", 
    25 => "00111111001101010111001101000011", 
    26 => "00111111001101110010000010100111", 
    27 => "00111111001101010010011100111101", 
    28 => "00111111001101001111110111110100", 
    29 => "00111111001101101111010110011001", 
    30 => "00111111001101110111101010100010", 
    31 => "00111111001101011001110100010011", 
    32 => "00111111001101001000110011010110", 
    33 => "00111111001101100010110100110000", 
    34 => "00111111001101110111001111100010", 
    35 => "00111111001101100000011111010101", 
    36 => "00111111001101000110010001110111", 
    37 => "00111111001101010001101000000000", 
    38 => "00111111001101101100011001011000", 
    39 => "00111111001101101001111110101110", 
    40 => "00111111001101001101100101010001", 
    41 => "00111111001101000101000011110000", 
    42 => "00111111001101011110010011010110", 
    43 => "00111111001101110000011100011000", 
    44 => "00111111001101011110111011001100", 
    45 => "00111111001101000011010110101101", 
    46 => "00111111001101010001010000001010", 
    47 => "00111111001101110000111100010111", 
    48 => "00111111001101101101100001001101", 
    49 => "00111111001101001010101011111100", 
    50 => "00111111001101000100110000010110", 
    51 => "00111111001101100111000110001011", 
    52 => "00111111001101110011000011010111", 
    53 => "00111111001101010111111010011001", 
    54 => "00111111001101001011100010001101", 
    55 => "00111111001101100100011100000010", 
    56 => "00111111001101110011111111111011", 
    57 => "00111111001101100001001110110010", 
    58 => "00111111001101010011110100110010", 
    59 => "00111111001101100000001000010000", 
    60 => "00111111001101110000010010011011", 
    61 => "00111111001101100111000001101101", 
    62 => "00111111001101011010001101011101", 
    63 => "00111111001101100000100011000000", 
    64 => "00111111001101101101000101011011", 
    65 => "00111111001101101000001000011111", 
    66 => "00111111001101011011001100011000", 
    67 => "00111111001101100000100011110010", 
    68 => "00111111001101101101001010111011", 
    69 => "00111111001101100101100100001000", 
    70 => "00111111001101010111011101110101", 
    71 => "00111111001101011101111000000101", 
    72 => "00111111001101101111110111001010", 
    73 => "00111111001101100101111001111000", 
    74 => "00111111001101010010111011011000", 
    75 => "00111111001101011001101111100101", 
    76 => "00111111001101110001100011101100", 
    77 => "00111111001101101011111000111000", 
    78 => "00111111001101010011001100001001", 
    79 => "00111111001101110001111110101100", 
    80 => "00111111001101110100011101000001", 
    81 => "00111111001101010110110001000000", 
    82 => "00111111001101001100111010000001", 
    83 => "00111111001101101010100011001010", 
    84 => "00111111001101110111110010001001", 
    85 => "00111111001101011110010010110100", 
    86 => "00111111001101000101110111011001", 
    87 => "00111111001101011010100001011000", 
    88 => "00111111001101110001100010000111", 
    89 => "00111111001101100011111101101000", 
    90 => "00111111001101000111110000001111", 
    91 => "00111111001101001001110110111111", 
    92 => "00111111001101100100110010010100", 
    93 => "00111111001101101100011001101001", 
    94 => "00111111001101010110101110111010", 
    95 => "00111111001101000100010001001010", 
    96 => "00111111001101010111000001010000", 
    97 => "00111111001101110001001110011101", 
    98 => "00111111001101100111111010110111", 
    99 => "00111111001101000110010000000010", 
    100 => "00111111001101001011000000011000", 
    101 => "00111111001101101100111111111010", 
    102 => "00111111001101110010011011000000", 
    103 => "00111111001101010000011010111100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity normalize_up_std_in is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of normalize_up_std_in is
    component normalize_up_std_in_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    normalize_up_std_in_rom_U :  component normalize_up_std_in_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


