-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_1_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_1_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101101010011010100100010001", 
    1 => "00111101000100111100001001010101", 
    2 => "00111101111110100111010111001101", 
    3 => "00111101110111001110001010001111", 
    4 => "00111101001000111100111110110011", 
    5 => "10111101010010010010100110101010", 
    6 => "10111101110101110100111011101100", 
    7 => "10111101101110110100000010110011", 
    8 => "10111100100011011001110101110111", 
    9 => "00111101010101100000001000000000", 
    10 => "00111101101011110100010100010111", 
    11 => "00111101010010110000000001111010", 
    12 => "10111100000011001011100011100001", 
    13 => "10111101100110100011110100101110", 
    14 => "10111101101100111111000001111000", 
    15 => "10111101000111111101100110111010", 
    16 => "00111100110111011101100011111001", 
    17 => "00111101110100001010110000111011", 
    18 => "00111101110100000110000101000001", 
    19 => "00111100101110000000010001010011", 
    20 => "10111101100010000010100011000011", 
    21 => "10111110000100010010110101110111", 
    22 => "10111101111001110000100111111010", 
    23 => "10111100001111111000011101101010", 
    24 => "00111101110111100001000100010010", 
    25 => "00111110000110001100011110011111", 
    26 => "10111101001100111000000111011000", 
    27 => "10111101110100100111011011111011", 
    28 => "10111101110000000111110001000010", 
    29 => "10111011100111001011001001010011", 
    30 => "00111101101001000101111111100001", 
    31 => "00111101100100001110010001010100", 
    32 => "00111100100100110010100100111101", 
    33 => "10111101010001110101100000011001", 
    34 => "10111101100010000010010100011000", 
    35 => "10111100010100000011100101101001", 
    36 => "00111100111101001011111010000011", 
    37 => "00111101010111001001000011000101", 
    38 => "00111101001101111001011101000110", 
    39 => "10111011101111101000001101011110", 
    40 => "10111101001010011011111000001010", 
    41 => "10111101000011110001111101011000", 
    42 => "10111100101101101000011010100101", 
    43 => "00111100101001010100110001010101", 
    44 => "00111100111011111101111010110101", 
    45 => "00111100110001100111010110011011", 
    46 => "10111100100101100001100000000101", 
    47 => "10111101010000001100101101101100", 
    48 => "10111100101100101011111111011011", 
    49 => "00111100100011011000101010011000", 
    50 => "00111101010111111110101010000001", 
    51 => "00111101010111111100001010101001", 
    52 => "00111101111101110100001001010111", 
    53 => "00111110000010000111000111100111", 
    54 => "00111101011000100001111010100011", 
    55 => "10111101000111001100110010001010", 
    56 => "10111101111000000011011100001101", 
    57 => "10111101110101001000001101000101", 
    58 => "10111101000101101011110110110010", 
    59 => "00111101001111100001101010000010", 
    60 => "00111101110010101101011100001110", 
    61 => "00111101011101110101011101001111", 
    62 => "00111011100010100010011001011111", 
    63 => "10111101010101011010111000011101", 
    64 => "10111101101000111010011011001110", 
    65 => "10111101011001001101000010011010", 
    66 => "00111100100000010110001001101011", 
    67 => "00111101101010010111011111001001", 
    68 => "00111101101110111010011001101010", 
    69 => "00111101010000011010101011000101", 
    70 => "10111101010011000111000110010011", 
    71 => "10111101111001100100111011001111", 
    72 => "10111101110101110001001010100001", 
    73 => "10111100001010100010101000001011", 
    74 => "00111101101110011110000001100001", 
    75 => "00111110000010110101000100110111", 
    76 => "00111101101111100100010110000000", 
    77 => "10111100111001000110011010110010", 
    78 => "10111101111100001010001101010001", 
    79 => "10111101010000100101001110010111", 
    80 => "00111101011001010010010110001001", 
    81 => "00111101101110010010100001011011", 
    82 => "00111101010011011011011110101110", 
    83 => "10111100010011011111101011001010", 
    84 => "10111101100001100000000000101010", 
    85 => "10111101011001001001001010111100", 
    86 => "00111100010001000100011111000011", 
    87 => "00111101100010110000101011110110", 
    88 => "00111101010100100000110000000111", 
    89 => "10111011101110000110101100010110", 
    90 => "10111101001011010110101010011100", 
    91 => "10111101011010110101001111010110", 
    92 => "10111100100010010010011010000101", 
    93 => "00111100000101110101111100101101", 
    94 => "00111101001101001100101100011001", 
    95 => "00111100110110001111100100101011", 
    96 => "00111100000000000001111101110101", 
    97 => "10111101001100001010111101100000", 
    98 => "10111100101010011001101101101111", 
    99 => "00111100010110101001000000000100", 
    100 => "00111101000011000011110000011001", 
    101 => "00111101001111110011011110111001", 
    102 => "00111100111000000100111000011110", 
    103 => "10111100110101110011101001111001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_1 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_1 is
    component L3_up_L2_WEIGHTS_1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_1_rom_U :  component L3_up_L2_WEIGHTS_1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


