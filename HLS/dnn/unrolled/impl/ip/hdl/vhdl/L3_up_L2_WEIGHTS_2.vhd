-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_2_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_2_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111001001011110001110010111001", 
    1 => "00111010101010011011110011111101", 
    2 => "00111011001011101111101100101011", 
    3 => "00111010101001011100111001011011", 
    4 => "00111010000101001010001010111010", 
    5 => "00111001111110110010001001001011", 
    6 => "10111011010011001111111100100010", 
    7 => "10111011101000001000011111001010", 
    8 => "10111011101000010000111000000010", 
    9 => "10111010100111000001101101010100", 
    10 => "00111011100001000110000111111010", 
    11 => "00111011111000111101010111111110", 
    12 => "00111011110011101001101000101100", 
    13 => "10111010101001011010110011001101", 
    14 => "10111011101110001110000010000111", 
    15 => "10111011101110111001100011001000", 
    16 => "10111011010000110101110011100010", 
    17 => "00111011011111001100010110111001", 
    18 => "00111011101110110000101000101101", 
    19 => "00111010110110101110001111100111", 
    20 => "10111010111000110000010001000111", 
    21 => "10111011100011001010110001001011", 
    22 => "10111010101110010001001011011100", 
    23 => "00111010110011010110001111001100", 
    24 => "00111010101000000000100111110110", 
    25 => "10111000111101110111011011000101", 
    26 => "10111011011100111100101100111110", 
    27 => "10111001110100100011110101001111", 
    28 => "00111011010001010110010011111001", 
    29 => "00111011000011111001011011100001", 
    30 => "00111011000101111000010011101100", 
    31 => "10111010101001010000010100001000", 
    32 => "10111011001100010010010011010001", 
    33 => "10111010110010100001110011101111", 
    34 => "10111001100011111010011110101000", 
    35 => "00111000110001110011101010111101", 
    36 => "00111010010101000001001100010010", 
    37 => "00111010101111010000000101111110", 
    38 => "00111010110010111010111110010110", 
    39 => "00111011100001111000011101001000", 
    40 => "00111011000010001110011110011011", 
    41 => "10111011000010000110000101100011", 
    42 => "10111011101010011000101010101000", 
    43 => "10111011110001000011111101100000", 
    44 => "10111011001111101011010110110011", 
    45 => "00111011000101001000000100101100", 
    46 => "00111011101001111001001101010111", 
    47 => "00111011011000011010001111110100", 
    48 => "00111010110000000100100001011010", 
    49 => "10111011010010100011111001111101", 
    50 => "10111011001111101011010110110011", 
    51 => "10111010101000011001110010011101", 
    52 => "00111011011001011100010011101011", 
    53 => "00111010010111011100011000011001", 
    54 => "10111010100010000101000010011100", 
    55 => "00111010010000010011001100111100", 
    56 => "10111011001100101010011010110001", 
    57 => "10111011010010001001101100001111", 
    58 => "10111011011101001000001111001011", 
    59 => "10111010111100111110110011001100", 
    60 => "00111011011101101011111000111000", 
    61 => "00111011111011110100010110011110", 
    62 => "00111011110101001001100101001010", 
    63 => "00111010110001100111000101101001", 
    64 => "10111011101000111101011100001010", 
    65 => "10111011110111000101110101100100", 
    66 => "10111011101001111001001101010111", 
    67 => "00111011001101101001010101010011", 
    68 => "00111011101001010110000101001110", 
    69 => "00111011100111101111010100100011", 
    70 => "00111010101001011100111001011011", 
    71 => "10111011100111010001011011111101", 
    72 => "10111011100100100010110110010101", 
    73 => "00111001010111000011001101110010", 
    74 => "00111010001101111000000000110100", 
    75 => "00111011000001101001110001100111", 
    76 => "10111010111100001000010001100010", 
    77 => "10111011100001101011110111110101", 
    78 => "00111010100101001110010111010110", 
    79 => "00111011001111000111101101000110", 
    80 => "00111011000100110011000110100001", 
    81 => "10111010100000110111011100011000", 
    82 => "10111011010010000110100010111010", 
    83 => "10111011000111011010110111111011", 
    84 => "10111010110000000100100001011010", 
    85 => "00111010100110110011000001110011", 
    86 => "00111011001100011000100101111010", 
    87 => "00111011000011010001100101011001", 
    88 => "00111010101110010001001011011100", 
    89 => "00111011000001011111010010100001", 
    90 => "10111001110111010011111111100010", 
    91 => "10111010101100001000110111010010", 
    92 => "10111011001111000110101001111111", 
    93 => "10111011101111101111100011001111", 
    94 => "10111011001011011110111010111011", 
    95 => "00111011010001000111101000011000", 
    96 => "00111011110110010110101001101010", 
    97 => "00111011100101001101010100001111", 
    98 => "00111010111101000010111111101000", 
    99 => "10111011000001111110101111110010", 
    100 => "10111011101100011000100101111010", 
    101 => "10111011001001001111010001000001", 
    102 => "00111010000100110001000000010011", 
    103 => "00111011001100001000110111010010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_2 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_2 is
    component L3_up_L2_WEIGHTS_2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_2_rom_U :  component L3_up_L2_WEIGHTS_2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


