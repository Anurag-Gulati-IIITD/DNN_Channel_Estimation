-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_30_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_30_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000110010010100110101010", 
    1 => "00111101110111100100010011111010", 
    2 => "10111011010100111011111100101111", 
    3 => "10111101101101110100010101111100", 
    4 => "10111110000010011110111101010010", 
    5 => "10111101110001000001010001100010", 
    6 => "00111011111100100001011100001001", 
    7 => "00111101101100110010111001111011", 
    8 => "00111101111101110001100001100101", 
    9 => "00111101101101000010111111101000", 
    10 => "00111100010000111110001100011001", 
    11 => "10111101001100000011111000100001", 
    12 => "10111101100011111101110010011100", 
    13 => "10111101001011001001011111011001", 
    14 => "10111100010010000100011100101100", 
    15 => "10111011111110001100011001010000", 
    16 => "00111100111001011110000000101111", 
    17 => "00111101000001100001001100001010", 
    18 => "00111100111000111011100010100010", 
    19 => "00111100110000010111110010100010", 
    20 => "10111100000001010101100101110001", 
    21 => "10111100010110011101101110101001", 
    22 => "10111100111010011000011110000011", 
    23 => "10111100101111110111000001011000", 
    24 => "10111011101010001001111111000111", 
    25 => "00111101001010000111101100010100", 
    26 => "00111101000011101110111000001111", 
    27 => "10111101011011111000010010001000", 
    28 => "10111101110100110011000010010100", 
    29 => "10111101101000001010001110010100", 
    30 => "10111011101011011111111110000010", 
    31 => "00111101111000000100001010010110", 
    32 => "00111101111001100010100000000010", 
    33 => "00111101000000011011100001100111", 
    34 => "10111101010101000100000100110101", 
    35 => "10111101110111101110010001011100", 
    36 => "10111101010001100101110101111101", 
    37 => "00111101001101000011100101011000", 
    38 => "00111101010011100010010111001000", 
    39 => "00111100001000001001110011000011", 
    40 => "10111101100000100111000101111010", 
    41 => "10111101101011011010001100111100", 
    42 => "00111100000100011110111010101010", 
    43 => "00111101101111101101000001110000", 
    44 => "00111101111110100011111101000110", 
    45 => "00111100101110001100100101110101", 
    46 => "10111101100110011010111100011001", 
    47 => "10111110000011001110001001001100", 
    48 => "10111101101101010111100100101001", 
    49 => "00111100001110101110110011010000", 
    50 => "00111101111100110101100001101101", 
    51 => "00111101110010001101101001111111", 
    52 => "00111011110101110111001100011001", 
    53 => "10111101110011110110000011100001", 
    54 => "10111110000111001111011010111110", 
    55 => "10111101110100011100000010000111", 
    56 => "10111100000001101110011111100110", 
    57 => "00111101110011110000100011001100", 
    58 => "00111110000011101100001101010100", 
    59 => "00111101110010001101101001111111", 
    60 => "10111001110010111111001010110010", 
    61 => "10111101011000110110110100100010", 
    62 => "10111101110010110100011101000001", 
    63 => "10111101101001011101111010011100", 
    64 => "10111100011010101010101100000100", 
    65 => "00111100111100000011110100010100", 
    66 => "00111101011011000110011010010000", 
    67 => "00111101001111111011111011111101", 
    68 => "00111100100111100111100101101000", 
    69 => "10111100010010111111101100010110", 
    70 => "10111100000011011011010010001001", 
    71 => "10111101000001111000000011111110", 
    72 => "10111100110000110010110010100101", 
    73 => "10111100110111110101101011011001", 
    74 => "10111100000101110000001011100110", 
    75 => "00111101001101001010001000110100", 
    76 => "00111101100010000110001011110110", 
    77 => "00111101001101011001101010110111", 
    78 => "10111101100110111111111100000100", 
    79 => "10111101100100010000110000101100", 
    80 => "10111011111110000100000000011000", 
    81 => "00111101101101100110011110110110", 
    82 => "00111101111011010111111110010101", 
    83 => "00111101010010111100100111001101", 
    84 => "10111101000110010001111111110111", 
    85 => "10111101110011110100111010000111", 
    86 => "10111101101011000011011001010100", 
    87 => "10111011100111000001001011110001", 
    88 => "00111101100001011111110001111110", 
    89 => "00111101101000001011100110011001", 
    90 => "10111000001110001000110010100100", 
    91 => "10111101010001010001000100010111", 
    92 => "10111101001101010011011100011001", 
    93 => "00111101010100011010001000011111", 
    94 => "00111101110000101001100001000110", 
    95 => "00111101011100000000100110110011", 
    96 => "10111101010100001001111000010011", 
    97 => "10111101111110010111010111110011", 
    98 => "10111110000001010011011000001101", 
    99 => "10111100001100100000111110110010", 
    100 => "00111101110110110011101101110101", 
    101 => "00111110000000000000101110001001", 
    102 => "00111101011101101001111011000011", 
    103 => "10111101001000000100010110111011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_30 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_30 is
    component L3_up_L2_WEIGHTS_30_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_30_rom_U :  component L3_up_L2_WEIGHTS_30_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


