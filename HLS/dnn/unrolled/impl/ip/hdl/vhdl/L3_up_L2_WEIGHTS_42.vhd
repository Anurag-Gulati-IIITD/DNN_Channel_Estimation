-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_42_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_42_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100110110111010110100111010", 
    1 => "00111101001100010100010001000110", 
    2 => "00111101011010110110011111000011", 
    3 => "00111101000101011100010000100010", 
    4 => "00111100010111011111110010100000", 
    5 => "10111011110011000100011010010101", 
    6 => "10111100000011001100100110100111", 
    7 => "10111100010100011111011000000001", 
    8 => "10111101001011010010001001000010", 
    9 => "10111101011001011001110100010011", 
    10 => "10111100110001001000111100010001", 
    11 => "00111101001011000111000000000000", 
    12 => "00111101110011001100111001011111", 
    13 => "00111101111001011010011100001001", 
    14 => "00111101001100100110010110101110", 
    15 => "10111101010100011100010111000101", 
    16 => "10111110000001001010111011001001", 
    17 => "10111101111110100110110001011101", 
    18 => "10111101000111010110001001111100", 
    19 => "00111101010010101011110101011110", 
    20 => "00111110000000110010010011001000", 
    21 => "00111110000000001101000000100100", 
    22 => "00111101011011100011110101100000", 
    23 => "10111100101100110101001010101000", 
    24 => "10111101110000000001111001101001", 
    25 => "10111101111101111001000011111011", 
    26 => "10111100000010110001000101000001", 
    27 => "00111101100111110000111101011010", 
    28 => "00111110000001111100011000110010", 
    29 => "00111101111100111111000110000100", 
    30 => "00111100111100110011011001011001", 
    31 => "10111101100001000110111000001001", 
    32 => "10111110000010101111001110100001", 
    33 => "10111101111111000111111111111110", 
    34 => "10111101000100010011011100101010", 
    35 => "00111101100111000000101000000111", 
    36 => "00111110000100011110110110011110", 
    37 => "00111110000001101000011001100010", 
    38 => "00111101001110111101110111111101", 
    39 => "10111101100011001100001101011101", 
    40 => "10111110000101001011110110111010", 
    41 => "10111110000011100011010000110011", 
    42 => "10111101001110011011001000111110", 
    43 => "00111101100010101111101100111011", 
    44 => "00111110001000010100000100100000", 
    45 => "00111110000011011111111011111100", 
    46 => "00111101000111010001010011100100", 
    47 => "10111101101100110000101111100001", 
    48 => "10111110001000101100111111011001", 
    49 => "10111101111001100100111101010101", 
    50 => "00111100001010001111011111011011", 
    51 => "00111101111001011110111001010111", 
    52 => "00111101100011000100101011000111", 
    53 => "00111101011101011000011111010111", 
    54 => "00111100011011100101011010001010", 
    55 => "10111101000011000001110110110000", 
    56 => "10111101000000111011101101000001", 
    57 => "10111100110001101011110011101000", 
    58 => "10111100101001100000001011001001", 
    59 => "10111100101111101010111101101000", 
    60 => "10111100001010100011111100000011", 
    61 => "00111100110001101000011001100010", 
    62 => "00111101100011111111111110111101", 
    63 => "00111101101111100010100100110000", 
    64 => "00111101000100101111011111110101", 
    65 => "10111101010000001111110010110101", 
    66 => "10111101111110010010110110011001", 
    67 => "10111101111100100110010100101000", 
    68 => "10111101010010010100000111001000", 
    69 => "00111101100010100011000101100010", 
    70 => "00111110000000110101101111010101", 
    71 => "00111101111111001101101000101011", 
    72 => "00111101010001000000010010100111", 
    73 => "10111101001101101001000000010101", 
    74 => "10111101110111100001100011110000", 
    75 => "10111110000001001010000110101101", 
    76 => "10111101100011011111011100011111", 
    77 => "00111100010010000100101101011110", 
    78 => "00111110000010011101100111010011", 
    79 => "00111101110011011100100001110101", 
    80 => "00111100100001000000001110011011", 
    81 => "10111101101000000001110001010000", 
    82 => "10111110000011100101111101110100", 
    83 => "10111101111101010011000011001111", 
    84 => "10111100101011001000000111010100", 
    85 => "00111101100011110001111111011110", 
    86 => "00111110000100101011010000001111", 
    87 => "00111110000000101111100100000001", 
    88 => "00111101001000111101111101101110", 
    89 => "10111101100111000001111100000000", 
    90 => "10111110000110000001010010010100", 
    91 => "10111110000011111001000110100011", 
    92 => "10111101010010100101011110101000", 
    93 => "00111101100000010100101011010011", 
    94 => "00111110000101100100100101001101", 
    95 => "00111110000100011110011001000111", 
    96 => "00111101001111010011010111101011", 
    97 => "10111101101000010101101100010100", 
    98 => "10111110001011010001101010101000", 
    99 => "10111110000011000011000001001101", 
    100 => "10111100101111010000001110010111", 
    101 => "00111101110111100101011101010100", 
    102 => "00111110000110001011101011000111", 
    103 => "00111101100101010100100001100111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_42 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_42 is
    component L3_up_L2_WEIGHTS_42_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_42_rom_U :  component L3_up_L2_WEIGHTS_42_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


