-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_33_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_33_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111011000000101100111101010011", 
    1 => "00111011001111101110100000001000", 
    2 => "00111010001000000110111010100000", 
    3 => "10111000000101101111111010110101", 
    4 => "10111011000001101111000001001010", 
    5 => "00111011000110000110111111001110", 
    6 => "00111011011000110010010111010101", 
    7 => "00111011010001110000100001101000", 
    8 => "10111011010010110111110101000001", 
    9 => "10111011100101011101100100011011", 
    10 => "10111011010000001000101101110110", 
    11 => "00111001110111111101111011111000", 
    12 => "00111011010110010111001011001101", 
    13 => "00111011110110011000101111111000", 
    14 => "00111010010001010110010011111001", 
    15 => "10111011001101110110111101101101", 
    16 => "10111011001110101100011100010001", 
    17 => "10111011001100111010001001011001", 
    18 => "00111010111111001001001101100100", 
    19 => "00111011001110010101010111111000", 
    20 => "10111010100111000011110011100010", 
    21 => "10111010001000101000011101111111", 
    22 => "10111010000010011110001101000011", 
    23 => "00111000100100101100110011110111", 
    24 => "00111001000111000011110011100010", 
    25 => "00111011001100011100110010010110", 
    26 => "10111001111111100100011110011001", 
    27 => "00111001110001110011101010111101", 
    28 => "10111001001100000010100100101000", 
    29 => "10111001101000001111010011011000", 
    30 => "10111011010001010000000001010000", 
    31 => "10111010111100111000100000100010", 
    32 => "10111011010010010101001110011100", 
    33 => "00111001011000000110010100110000", 
    34 => "00111011010110101001000000000100", 
    35 => "00111010111000000110010100110000", 
    36 => "10111010011110100101100011110111", 
    37 => "10111011001011000111110110100010", 
    38 => "10111010100001100001011000101111", 
    39 => "00111011000111011010110111111011", 
    40 => "00111011001110110100110101001001", 
    41 => "00111010010000011111110010001111", 
    42 => "10111010011111010011101100101010", 
    43 => "10111011100111010000111010011001", 
    44 => "10111010101000100010001011010101", 
    45 => "00111001010011000111100011101010", 
    46 => "00111011001100010011010110011000", 
    47 => "00111000011000100111111000001111", 
    48 => "10111010101110110100110101001001", 
    49 => "10111010001010011001101101101111", 
    50 => "00111011001100010001010000001010", 
    51 => "00111011011100110101010111001110", 
    52 => "00111011101000000011110001001011", 
    53 => "10111011001111101010010011101100", 
    54 => "10111011010100000001001110101001", 
    55 => "00111010011010101110000110001011", 
    56 => "00111010101110011101110000101111", 
    57 => "00111011000010100000010011010001", 
    58 => "10110111100001100011011110111101", 
    59 => "10111011000111001111010101101111", 
    60 => "10111011100101010011100110111001", 
    61 => "10111011000101011011111111110000", 
    62 => "00111011011011001110100110100011", 
    63 => "00111010111111100000010001111101", 
    64 => "00111010111101111011100111100000", 
    65 => "10111010111111100110100100100111", 
    66 => "10111011010000111101001001010010", 
    67 => "10111011001011010100011011110110", 
    68 => "00111010101101011100101111111111", 
    69 => "00111011001100011001101001000001", 
    70 => "10111010111000110110100011110001", 
    71 => "10111010001001100111011000100001", 
    72 => "10111011001101110010110001010010", 
    73 => "10111010111001010001110100100110", 
    74 => "00111010100001000100000001101100", 
    75 => "00111011001101101101100001101111", 
    76 => "00111010001001001010000001011110", 
    77 => "10111010000000100000010111111111", 
    78 => "10111010011010100001100000110111", 
    79 => "00111010011110010100110010001000", 
    80 => "10111001100110011001110111001011", 
    81 => "10111010110011101111011001110011", 
    82 => "10111011010101101001000010011011", 
    83 => "00111010110011010100001000111110", 
    84 => "00111011010000001010110100000100", 
    85 => "00111011011010111000100101010000", 
    86 => "10111010100000111111110101010000", 
    87 => "10111010011101101010110101110001", 
    88 => "10111011001001000000100101011111", 
    89 => "10111001101001011010110011001101", 
    90 => "00111011001001111010010000011110", 
    91 => "00111010100111110001111100010101", 
    92 => "10111010000110001001000101011100", 
    93 => "00111001111111110101010000001001", 
    94 => "10111010001101000101101011100110", 
    95 => "00111010000011000011111100111110", 
    96 => "00111011001000111001001111101110", 
    97 => "00111010110010000110100010111010", 
    98 => "10111010110000110000100011111111", 
    99 => "10111010110100010101001001101110", 
    100 => "10111010111000001110101101101000", 
    101 => "10111001100011111010011110101000", 
    102 => "00111011100000100101000101111110", 
    103 => "00111010110010011101100111010011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_33 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_33 is
    component L3_up_L2_WEIGHTS_33_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_33_rom_U :  component L3_up_L2_WEIGHTS_33_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


