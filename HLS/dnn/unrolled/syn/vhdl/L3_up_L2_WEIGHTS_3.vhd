-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_3_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_3_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100000010110001000101000001", 
    1 => "10111100001110100001011011101000", 
    2 => "10111100001000101000111111100010", 
    3 => "10111100011000010111111000110101", 
    4 => "10111100100110101011110100011011", 
    5 => "00111100000111001101001111100001", 
    6 => "00111100010101111100011011111100", 
    7 => "00111100010100010011000011100000", 
    8 => "00111100100011011011111100000101", 
    9 => "10111001101000111001001111101110", 
    10 => "10111100100101000111101011100001", 
    11 => "10111100010011011110111000110101", 
    12 => "10111100001000101110110000101001", 
    13 => "10111011010011111110000101010100", 
    14 => "00111011100000101001010010011010", 
    15 => "00111011001001011011110110010100", 
    16 => "00111100001010001000001001101011", 
    17 => "00111100001100011110111000100100", 
    18 => "00111100001101111100001101010000", 
    19 => "10111011101011011101010110010001", 
    20 => "10111100011111111010001110111010", 
    21 => "10111100011101110001011001001100", 
    22 => "00111010001011110101111111010100", 
    23 => "10111011100111010000011000110110", 
    24 => "00111100011011110100000101101100", 
    25 => "00111100010011011110101000000011", 
    26 => "00111011101000101100001000110111", 
    27 => "10111100000100001100000010101101", 
    28 => "10111100001010110101100000001000", 
    29 => "10111011110011101110111000001111", 
    30 => "10111011010110101011000110010010", 
    31 => "10111010100001001010010100010110", 
    32 => "00111100000001010001011001010101", 
    33 => "00111011111111001100010110111001", 
    34 => "00111011110101100111011101110000", 
    35 => "00111100100101111000100100011110", 
    36 => "10111100010110001101011110011101", 
    37 => "10111100001110011101001111001100", 
    38 => "10111100011111111110101100000111", 
    39 => "10111100100110100000001001110101", 
    40 => "00111011010111000101010100000000", 
    41 => "00111100010111110101010010001111", 
    42 => "00111100011111011100010110010011", 
    43 => "00111100010110011001100010001101", 
    44 => "00111011110011100100111010101101", 
    45 => "10111100000001111111010001010110", 
    46 => "10111100010101100110101011011011", 
    47 => "10111100001110101000110001011000", 
    48 => "10111011111111110010000110110100", 
    49 => "10111010101101010000001010101100", 
    50 => "00111100000001000111101100100100", 
    51 => "00111100001101100101101010011011", 
    52 => "10111100000111000111001101101001", 
    53 => "10111100010110010100110100001110", 
    54 => "10111100101110101101000110001101", 
    55 => "00111100010111011111110010100000", 
    56 => "00111100000101111010001001001001", 
    57 => "00111100010011111111111010110000", 
    58 => "00111100100011010100001101001010", 
    59 => "10111100011000100001100101100101", 
    60 => "10111100010010101100000010000011", 
    61 => "10111100001101110100010101111100", 
    62 => "10111100001000011100111011110010", 
    63 => "00111010110001010100001101101100", 
    64 => "00111100001000000010101110000100", 
    65 => "00111100000101001100100001111010", 
    66 => "00111100001011100000001110110100", 
    67 => "00111100000000110100110100100111", 
    68 => "00111011101001101111001111110101", 
    69 => "10111010001000110000110110110111", 
    70 => "10111100000011111111001100101000", 
    71 => "10111100010000010011011101101101", 
    72 => "10111010101100101110100111001101", 
    73 => "00111100000011101010110000000000", 
    74 => "00111100001001010010011010010110", 
    75 => "00111100011011011010001000101111", 
    76 => "00111100001001000011011110000010", 
    77 => "00111011000011101001101100111001", 
    78 => "10111100011010001000000101011110", 
    79 => "10111011101111100111101011111010", 
    80 => "10111011100101111000110101010000", 
    81 => "10111010000101110100000111010001", 
    82 => "00111100000001110101110101010111", 
    83 => "00111100000000100110011001110111", 
    84 => "00111011100010100101000001010000", 
    85 => "00111100010001000110110110000011", 
    86 => "10111011100011101100010100101010", 
    87 => "10111011110001010100101111001111", 
    88 => "10111100010000101100010111100011", 
    89 => "10111100101101101011011011100001", 
    90 => "00111100000101100010010010011010", 
    91 => "00111100100100000111100101011111", 
    92 => "00111100100111011011010001000110", 
    93 => "00111100011000011011000010001010", 
    94 => "00111011011101110010001011100010", 
    95 => "10111100001011100001000001001001", 
    96 => "10111100010011101001010111111011", 
    97 => "10111100010111100011001100100111", 
    98 => "10111011111111001011010011110010", 
    99 => "00111100000011100111100110101011", 
    100 => "00111100001110001101100000100011", 
    101 => "00111011110100010110001100110101", 
    102 => "00111100100000010110101011001111", 
    103 => "00111100100000101101010110011101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_3 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_3 is
    component L3_up_L2_WEIGHTS_3_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_3_rom_U :  component L3_up_L2_WEIGHTS_3_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


