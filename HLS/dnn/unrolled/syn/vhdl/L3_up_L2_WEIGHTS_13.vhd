-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_13_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_13_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101000000001101100000000010", 
    1 => "10111100111011000000010100001100", 
    2 => "10111101010111111010001000100111", 
    3 => "10111100100101001111101011001110", 
    4 => "00111100100111110100110100111000", 
    5 => "00111100011100000100010101111000", 
    6 => "10111101001101010110101110000111", 
    7 => "10111101000110001011100000101000", 
    8 => "10111100001110011000110001111110", 
    9 => "00111101001110101011111110111010", 
    10 => "00111101100000010011010011001110", 
    11 => "00111100010111110100110000101011", 
    12 => "10111101000011000110010011111110", 
    13 => "10111101010010111011110000101100", 
    14 => "00111100000010011100111001001010", 
    15 => "00111101100011110101101100011101", 
    16 => "00111101001011110011001111001010", 
    17 => "10111101001000010000100111010000", 
    18 => "10111101101111110010110100111100", 
    19 => "10111101101000001000011010111110", 
    20 => "00111100101101100100100111010100", 
    21 => "00111101101111110111110011101110", 
    22 => "00111101100010111101001111000011", 
    23 => "10111100001011110100101011011100", 
    24 => "10111101100111011100100000110010", 
    25 => "10111101100011000001111111001001", 
    26 => "00111101010111100111010100110110", 
    27 => "00111101010010010100010011101101", 
    28 => "10111100010110011100101011100010", 
    29 => "10111101011011110101111111010100", 
    30 => "10111100110101011010111000011101", 
    31 => "00111100101000110111010001111001", 
    32 => "00111101010010010010000000111010", 
    33 => "00111101000001101000100110000111", 
    34 => "10111010101010010001010100111000", 
    35 => "10111100100101001111110011100111", 
    36 => "10111011100100011101100110110010", 
    37 => "00111100110111010000111110100110", 
    38 => "00111100101001010001111000110010", 
    39 => "10111100101110100101101000000100", 
    40 => "10111101010100100010000011111111", 
    41 => "10111100101001110010100001100011", 
    42 => "00111100110001100100101110101001", 
    43 => "00111101010000110000110000100100", 
    44 => "00111101000011011001000111101111", 
    45 => "10111101000111010011000100110011", 
    46 => "10111101011110101110111011101001", 
    47 => "10111100100110000010111011001011", 
    48 => "00111101100110010011001111100011", 
    49 => "00111101101100011011100010101010", 
    50 => "00111011111011111110110101100011", 
    51 => "10111101111110010100111000011010", 
    52 => "10111101110001000111111001001010", 
    53 => "10111101101101000101011100111010", 
    54 => "00111010100100010011101001010000", 
    55 => "00111101000111101110010001011100", 
    56 => "00111100001111111100111010111000", 
    57 => "10111100111001110100100011100100", 
    58 => "10111100111010100011101111011110", 
    59 => "00111100010100100011100100011101", 
    60 => "00111101100001111001100010010110", 
    61 => "00111101000101111111100101010001", 
    62 => "10111100110101010000001000100101", 
    63 => "10111101001010101010110100011101", 
    64 => "10111101000101010101001011100011", 
    65 => "00111100101111101100111011011101", 
    66 => "00111101001100010010101000001111", 
    67 => "00111100000011001010110001001011", 
    68 => "10111101100010001101001110101110", 
    69 => "10111101010110111011001001111001", 
    70 => "10111100010010110000110000000010", 
    71 => "00111101100010001001001000100101", 
    72 => "00111101110000000001110011010110", 
    73 => "00111100110101100000010000011001", 
    74 => "10111101100000010110111100000000", 
    75 => "10111101110111010001010101101010", 
    76 => "10111101001001111101101010100101", 
    77 => "00111101000100011100011111011110", 
    78 => "00111101000101101101011011011100", 
    79 => "10111101010011010010001011001001", 
    80 => "10111101100101100010000011101111", 
    81 => "10111100101010000101110010101011", 
    82 => "00111100111111100101110010010010", 
    83 => "00111101100000111101111011101000", 
    84 => "00111100111101010110110010010100", 
    85 => "10111101000011100101101101000010", 
    86 => "10111101000000111010110110011111", 
    87 => "00111100011100111101001110100010", 
    88 => "00111100110111101111000111111110", 
    89 => "00111011000100111001011001001010", 
    90 => "10111101010111100001000010001100", 
    91 => "10111101010001001100101111100010", 
    92 => "00111011100000011100001011100011", 
    93 => "00111101000000110101001101110010", 
    94 => "00111101010111111111001011100101", 
    95 => "00111011101010000011101100011101", 
    96 => "10111101001010001100100110111000", 
    97 => "10111101011001001001001111001001", 
    98 => "00111100001110111010110111000001", 
    99 => "00111101100100010010101010010101", 
    100 => "00111101000011010011111000001100", 
    101 => "10111101000011101100001100010001", 
    102 => "10111101111110110011001110011000", 
    103 => "10111101101100110111101100000111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_13 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_13 is
    component L3_up_L2_WEIGHTS_13_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_13_rom_U :  component L3_up_L2_WEIGHTS_13_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


