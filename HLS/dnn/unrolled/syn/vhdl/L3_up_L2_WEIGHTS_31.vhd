-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_31_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_31_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110001011000001001001101010", 
    1 => "00111101111010111110101001001111", 
    2 => "10111011001110000101101001001111", 
    3 => "10111101011010010000101111001000", 
    4 => "10111101011111100111110000000111", 
    5 => "10111101110010101001000001000111", 
    6 => "10111100110101001101110001100110", 
    7 => "00111101000101101110000001001100", 
    8 => "00111101101111000010010111010000", 
    9 => "00111101110100110111111100111001", 
    10 => "00111101010110111000100110010100", 
    11 => "00111101001000101100011001101001", 
    12 => "10111100110111010101100100001100", 
    13 => "10111101100011000001000110100001", 
    14 => "10111101010011100101111101110100", 
    15 => "10111101001001000010011010111011", 
    16 => "00111011101011101001011010000001", 
    17 => "00111101101011000011001110110101", 
    18 => "00111101100101110101110100010100", 
    19 => "00111101100110111110010011001101", 
    20 => "00111100101101100110001011111110", 
    21 => "10111101011100011001111110000000", 
    22 => "10111101000001100101010100011001", 
    23 => "10111101110100100001110111011010", 
    24 => "10111101101010001100110001010111", 
    25 => "10111100110101010011111011110111", 
    26 => "00111101101001110101001001010100", 
    27 => "00111101100101110000001001100000", 
    28 => "00111101000111000100101010000100", 
    29 => "10111100110010001110110011011001", 
    30 => "10111101101010101001110001010110", 
    31 => "10111101100100001110011011110011", 
    32 => "10111101010011110001010111101000", 
    33 => "00111101001000101111000001011010", 
    34 => "00111101101111110011110101111101", 
    35 => "00111101110100111011000100000111", 
    36 => "00111101101100110000001101111101", 
    37 => "00111101001010101110101011111011", 
    38 => "10111101000111011011011101101011", 
    39 => "10111100110100011110111110110111", 
    40 => "10111101100000101101010100010111", 
    41 => "10111101100101101010001101111011", 
    42 => "10111101100000001011100010001101", 
    43 => "10111011100101010011000101010101", 
    44 => "00111100111000101110011011101011", 
    45 => "00111101100110000110100001110111", 
    46 => "00111101101111000100010111001100", 
    47 => "00111101100101100010010010011010", 
    48 => "00111011111111111001011100100100", 
    49 => "10111101101111001010001010011000", 
    50 => "10111101111100100100011010111111", 
    51 => "10111101111111110000101010100010", 
    52 => "00111100010100110010001111111111", 
    53 => "10111101101011010101001110001011", 
    54 => "10111110000111100110100101101010", 
    55 => "10111101100101001101101001001101", 
    56 => "10111101101000010001001000110100", 
    57 => "10111100011010110101001011001010", 
    58 => "00111101100111111010011101100101", 
    59 => "00111101100111110100000010100011", 
    60 => "00111101010001101100010101001100", 
    61 => "00111100101111100001000000000110", 
    62 => "10111100100100101011110000110000", 
    63 => "10111101110100111010011000000101", 
    64 => "10111101011000001001111011011100", 
    65 => "10111011001101001001111000000010", 
    66 => "00111100001010101000111010110100", 
    67 => "00111101100011000111111100110101", 
    68 => "00111101010000101000011011111001", 
    69 => "00111101110100110010010110010010", 
    70 => "00111101100010101011100000100000", 
    71 => "10111100001010001001111111000111", 
    72 => "10111101100000001101111111011111", 
    73 => "10111100101100011000001100110000", 
    74 => "10111101010100101011100100001010", 
    75 => "00111100000111100111011101001111", 
    76 => "00111100001011011110111010111011", 
    77 => "00111101111000110011001001101010", 
    78 => "10111100001001010010001001100100", 
    79 => "10111101010000100110011001110111", 
    80 => "10111101110000001101110010111010", 
    81 => "10111101111011100100001100100100", 
    82 => "10111101000001010110100000011111", 
    83 => "10111100011101110101110110011010", 
    84 => "00111101100010010011010100110011", 
    85 => "00111101110101101110100100110110", 
    86 => "00111101101100101100010000001101", 
    87 => "00111101000011110011100110001111", 
    88 => "10111101010111000111111111111110", 
    89 => "10111101111010101000110110101000", 
    90 => "10111101100001001111101000000101", 
    91 => "10111101001110010111001101010100", 
    92 => "10111101000011011101111001111010", 
    93 => "10111011111000010111000110011111", 
    94 => "00111101000000110001110111110111", 
    95 => "00111101101110011010101011100111", 
    96 => "00111110000000010110100000110000", 
    97 => "00111101010001110100010100111001", 
    98 => "10111101011010000001011001101010", 
    99 => "10111101101110100010010010001001", 
    100 => "10111101110100010001110001101101", 
    101 => "10111101111011000010000001001111", 
    102 => "00111011010101000010001111011001", 
    103 => "00111110000001101000111010000010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_31 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_31 is
    component L3_up_L2_WEIGHTS_31_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_31_rom_U :  component L3_up_L2_WEIGHTS_31_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


