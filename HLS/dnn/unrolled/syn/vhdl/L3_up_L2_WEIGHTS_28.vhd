-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_28_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_28_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111010100101111110100110010110", 
    1 => "10111011010111000001000111100100", 
    2 => "10111011101111000101100110111000", 
    3 => "10111011100000101011111010001100", 
    4 => "10111011001010000101110010101011", 
    5 => "00111010111111010011101100101010", 
    6 => "00111011011010101011111111111101", 
    7 => "00111011011110010001101000110011", 
    8 => "00111011001000010000010110011111", 
    9 => "00111010100000011110010001110001", 
    10 => "10111001111111100100011110011001", 
    11 => "10111010101101111110010011011110", 
    12 => "10111011001000110000110110110111", 
    13 => "10111010010111000011001101110010", 
    14 => "10111001001010101110101011111011", 
    15 => "00111010001000100000000101000111", 
    16 => "10111001110001010010000111011110", 
    17 => "00111010010100011111101000110011", 
    18 => "00111010101101000111110001110100", 
    19 => "00111010110100100101111011011101", 
    20 => "00111011001000101000011101111111", 
    21 => "00111010100110110011000001110011", 
    22 => "00111010001001101111110001011001", 
    23 => "10111010100000101000110000110111", 
    24 => "10111011010100100101111011011101", 
    25 => "10111010100010010101110100001011", 
    26 => "10111010011110001000001100110100", 
    27 => "00111010011100110100010100000111", 
    28 => "00111010010101110011100001100001", 
    29 => "00111010110100110010100000110001", 
    30 => "00111010001111101001010000100101", 
    31 => "00111010101100010001010000001010", 
    32 => "10111010011111000010111010111010", 
    33 => "10111001111010000100001001110100", 
    34 => "10111001101101111000000000110100", 
    35 => "10111001110111000011001101110010", 
    36 => "10111011000010001111100001100010", 
    37 => "10111011001010010100011110001101", 
    38 => "10111010101100000010100100101000", 
    39 => "00111010000111000111111111111110", 
    40 => "00111011000100100111100100010100", 
    41 => "00111011010100000110011110001100", 
    42 => "00111011011011101011111101100110", 
    43 => "00111010100010110111010111101010", 
    44 => "10111010000000100000010111111111", 
    45 => "10111011001100001001111010011001", 
    46 => "10111011001110101011011001001010", 
    47 => "10111011011111000110000100001111", 
    48 => "10111011001011000100101101001101", 
    49 => "10111000101101100111001111000101", 
    50 => "00111011010101111111000011101101", 
    51 => "00111011100100100001110011001110", 
    52 => "10111011101001110000110100100000", 
    53 => "10111011110111011001110000101000", 
    54 => "10111011000110011111000110101110", 
    55 => "00111011011010000001000000011111", 
    56 => "00111011100011011111101111010111", 
    57 => "00111011011011111000100010111001", 
    58 => "00111011001110010101010111111000", 
    59 => "00111010001001110011111101110101", 
    60 => "10111011001001000100110001111011", 
    61 => "10111011010101001110110100101101", 
    62 => "10111011000100001111011100110100", 
    63 => "10111011100000000110101011110100", 
    64 => "10111000100110010001011110010100", 
    65 => "00111010010101010110001010011110", 
    66 => "00111010110001001001101110100110", 
    67 => "00111011001001011100111001011011", 
    68 => "00111010100110000010110010110010", 
    69 => "00111001111001111011110000111100", 
    70 => "10111000011011110001001101001001", 
    71 => "10111000111011110001001101001001", 
    72 => "10111010111000010000110011110110", 
    73 => "10111010110011111001111000111000", 
    74 => "10111011001101100110001011111110", 
    75 => "10111010110010101100010010110101", 
    76 => "10111010101110010001001011011100", 
    77 => "00111001100011001000001001011010", 
    78 => "00111010111000110010010111010101", 
    79 => "00111011001010001001111111000111", 
    80 => "00111010101110111001000001100100", 
    81 => "10111001010011011000010101011001", 
    82 => "10111011000001101111000001001010", 
    83 => "10110111111000100111111000001111", 
    84 => "10111010100000001101100000000010", 
    85 => "10111001011101100110101001010101", 
    86 => "10111011001000101011100111010100", 
    87 => "10111001101001110011111101110101", 
    88 => "10111010001110100001111101001011", 
    89 => "10111001001010001101001000011100", 
    90 => "00111011001101110110111101101101", 
    91 => "00111011000011110100001011111111", 
    92 => "00111011000111110110001000110000", 
    93 => "00111011010111100110110111011111", 
    94 => "10111001100111011100111110001001", 
    95 => "10111011001101110001101110001011", 
    96 => "10111011010001010011001010100101", 
    97 => "10111011011000110011011010011100", 
    98 => "10111010111110010110111000010110", 
    99 => "00111010011001111011110000111100", 
    100 => "00111011000000111110110010001001", 
    101 => "00111011001011011100110100101101", 
    102 => "00111011101100100101101100110001", 
    103 => "00111011011011100110101110000011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_28 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_28 is
    component L3_up_L2_WEIGHTS_28_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_28_rom_U :  component L3_up_L2_WEIGHTS_28_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


