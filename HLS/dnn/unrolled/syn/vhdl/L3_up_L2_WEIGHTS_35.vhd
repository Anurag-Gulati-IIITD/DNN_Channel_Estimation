-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_35_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_35_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001110000010001111001000", 
    1 => "00111101110000000011111001100100", 
    2 => "00111101100010111101001111000011", 
    3 => "00111101001101110101011001000011", 
    4 => "00111101000100010100010011001100", 
    5 => "00111101010011111001001110111100", 
    6 => "00111100101111001011101000110000", 
    7 => "10111100110011000000000101100000", 
    8 => "10111101101111100111011101001111", 
    9 => "10111101111011100010000110010110", 
    10 => "10111101100101000101001100001001", 
    11 => "00111100001011101111011011111001", 
    12 => "00111101100100001011010010011110", 
    13 => "00111101100011101111010011100000", 
    14 => "00111101010000010001010111011111", 
    15 => "00111100111111011111001110110110", 
    16 => "00111101000101011000100101101010", 
    17 => "00111100010111011111110010100000", 
    18 => "10111100100111111010011101100101", 
    19 => "10111101100000111010010000101111", 
    20 => "10111101110001100010010101100011", 
    21 => "10111101100110010111101000100101", 
    22 => "10111101000101001111000001010010", 
    23 => "00111100100000000010111000100011", 
    24 => "00111101001011110101010001001100", 
    25 => "00111101011011000011000100010110", 
    26 => "00111101101100101001100010001001", 
    27 => "00111101001000010010100101000101", 
    28 => "10111101000010001110100010100111", 
    29 => "10111101111100011001001111110111", 
    30 => "10111110000011100110011110010100", 
    31 => "10111101101101010001111110000010", 
    32 => "00111100001101111110110101000010", 
    33 => "00111101101000000100011001000001", 
    34 => "00111101101101010000010000111110", 
    35 => "00111101000101001110010011001001", 
    36 => "00111100101010010101010000100010", 
    37 => "00111101000011011110000110100000", 
    38 => "00111101001110011000010100100111", 
    39 => "00111100101111010100110011111101", 
    40 => "10111101010001011111110100000101", 
    41 => "10111110000000011010110000010101", 
    42 => "10111110000010100001111010000010", 
    43 => "10111101011111001000011111011011", 
    44 => "00111101011100000100110111011011", 
    45 => "00111101111000011110011110010110", 
    46 => "00111101110011100001010100000001", 
    47 => "00111101001101100100111100010010", 
    48 => "00111100011101101110100000101001", 
    49 => "00111100010010100011000111101000", 
    50 => "00111100011010100101111110000101", 
    51 => "10111101001100011001111110000000", 
    52 => "00111110000011100000100111111111", 
    53 => "00111101010001000100101111110101", 
    54 => "10111011011101010110111010101101", 
    55 => "10111100101100010110011111101100", 
    56 => "10111100001100111010011010001011", 
    57 => "10111100110101111010010101101110", 
    58 => "10111101100011110000111000001011", 
    59 => "10111101110011010010110111001011", 
    60 => "10111101011110110010010001100100", 
    61 => "00111100111110100011010101010000", 
    62 => "00111101101110010111101100110001", 
    63 => "00111101111010100010110110110110", 
    64 => "00111101011101101101011001010110", 
    65 => "00111100001011101001101010110011", 
    66 => "10111100110001010101110010010110", 
    67 => "10111100110111110001000101110011", 
    68 => "10111101000100100110011000110100", 
    69 => "10111101010101101011001100110101", 
    70 => "10111101100011111011111101000000", 
    71 => "10111101100001101011101101010110", 
    72 => "10111011101011011101010110010001", 
    73 => "00111101000010110111101000011100", 
    74 => "00111101100100110100111001110111", 
    75 => "00111101100111101111010100100011", 
    76 => "00111101100001110110000110001001", 
    77 => "00111101000111101110000000101010", 
    78 => "10111101010111110100110000101011", 
    79 => "10111101111011100101001011011111", 
    80 => "10111110000001001001101001010110", 
    81 => "10111101100100110011011001011001", 
    82 => "00111100101011010100100100001110", 
    83 => "00111101110101011100010010101000", 
    84 => "00111110000000001011011100111101", 
    85 => "00111101100101101100101111011010", 
    86 => "00111100010001011111001110010101", 
    87 => "10111100111100001001101101110100", 
    88 => "10111100011001010010010110001001", 
    89 => "00111010110100101110010100010101", 
    90 => "10111101010000111100010110111101", 
    91 => "10111101101010000010010000001011", 
    92 => "10111101110111111010100011111000", 
    93 => "10111101011011110100100111001111", 
    94 => "00111101010110110011011111001010", 
    95 => "00111110000011011100011001011100", 
    96 => "00111110000001111001010111110110", 
    97 => "00111101011011110111111101001010", 
    98 => "10111100110111011001010111011101", 
    99 => "10111101100001111010100001010000", 
    100 => "10111101010001001110000011011011", 
    101 => "10111100110101100001001011000111", 
    102 => "10111101101000111110110100001111", 
    103 => "10111101110100001010110011000001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_35 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_35 is
    component L3_up_L2_WEIGHTS_35_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_35_rom_U :  component L3_up_L2_WEIGHTS_35_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


