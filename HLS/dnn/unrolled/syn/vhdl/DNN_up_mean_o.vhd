-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity DNN_up_mean_o_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of DNN_up_mean_o_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111011001110000000011001101100", 
    1 => "10111010101011011100110100101101", 
    2 => "00111010001001000001101000100110", 
    3 => "00111011000110011010111010010010", 
    4 => "00111011010101000100010101100111", 
    5 => "00111011001111011100101011010001", 
    6 => "00111010101000110101000011010011", 
    7 => "10111010101000000010101110000100", 
    8 => "10111011011000100010101000101100", 
    9 => "10111011100010101100111000100101", 
    10 => "10111011010000000000010100111110", 
    11 => "00110111110000001111000000100000", 
    12 => "00111011010100000111100001010011", 
    13 => "00111011100111110011100000111111", 
    14 => "00111011100001100111101011011001", 
    15 => "00111010101001001100000111101100", 
    16 => "10111011000100101001101010100010", 
    17 => "10111011100101110110001101011110", 
    18 => "10111011100110110101101001100100", 
    19 => "10111011001010011100110111000100", 
    20 => "00111010010001010010000111011110", 
    21 => "00111011011100011101001111101101", 
    22 => "00111011100111110011100000111111", 
    23 => "00111011011101011110010000011101", 
    24 => "00111010011100010110111101000100", 
    25 => "10111011000101100100011000101000", 
    26 => "10111011100100100101111111101001", 
    27 => "10111011001000111101011100001010", 
    28 => "00111010000101111100100000001000", 
    29 => "00111011010111011110011110100111", 
    30 => "00111011100110010110001100010011", 
    31 => "00111011011111010100101111110001", 
    32 => "00111010101000100100010001100011", 
    33 => "10111011000010000001111001000111", 
    34 => "10111011100101001011101111100100", 
    35 => "10111011100111110111001011110111", 
    36 => "10111011001100110111000000000100", 
    37 => "00111010011001101010111111001101", 
    38 => "00111011100001101010010011001010", 
    39 => "00111011101010010110000010110111", 
    40 => "00111011011000101111001110000000", 
    41 => "00110101100001100011011110111101", 
    42 => "10111011010100101100001110000111", 
    43 => "10111011100100011101100110110010", 
    44 => "10111011010101110100100100101000", 
    45 => "10111010001110111011000111110010", 
    46 => "00111010110110110000010101110101", 
    47 => "00111011001101101000010010001100", 
    48 => "00111011001001011101111100100010", 
    49 => "00111010110001011110101100110001", 
    50 => "00111001101100101100100000111111", 
    51 => "10111010001111111010000010010100", 
    52 => "00111010101111011010100101000011", 
    53 => "00111011001110001010111000110010", 
    54 => "00111011010001110101110001001011", 
    55 => "00111011000010011101001001111100", 
    56 => "00111001100111001100001100011010", 
    57 => "10111010111010111110110111111010", 
    58 => "10111011010111011110011110100111", 
    59 => "10111011011011011110010101001011", 
    60 => "10111011000011000011111100111110", 
    61 => "00111010001001001110001101111010", 
    62 => "00111011010111100110110111011111", 
    63 => "00111011100110001001000101011100", 
    64 => "00111011011010110001001111100000", 
    65 => "00111010000111100101010111000001", 
    66 => "10111011001101110000101011000100", 
    67 => "10111011100111101010000101000000", 
    68 => "10111011100100110000011110101111", 
    69 => "10111010111111001001001101100100", 
    70 => "00111010110010011111101101100001", 
    71 => "00111011100010100111000111011110", 
    72 => "00111011100111110111101101011011", 
    73 => "00111011010100101001000100110010", 
    74 => "00111000101011100001000001001001", 
    75 => "10111011010001110010100111110110", 
    76 => "10111011100110100011110100101110", 
    77 => "10111011100010001100111001110000", 
    78 => "00111010110000000010011011001100", 
    79 => "00111011100000011001000010001110", 
    80 => "00111011100101111011011101000001", 
    81 => "00111011010100101011001011000000", 
    82 => "00111001101100011011101111001111", 
    83 => "10111011001100111011001100100000", 
    84 => "10111011100110000010110010110010", 
    85 => "10111011100100010001100011000010", 
    86 => "10111011000001110000000100010001", 
    87 => "00111010101111010010001100001100", 
    88 => "00111011100011110001000010101010", 
    89 => "00111011101010000001100110001111", 
    90 => "00111011010100101101010001001110", 
    91 => "10111001110100101100001110000111", 
    92 => "10111011011101001110100001110101", 
    93 => "10111011101000100001001000001110", 
    94 => "10111011011000111100110110011010", 
    95 => "10111001101111010100010010011010", 
    96 => "00111011001001011000101100111111", 
    97 => "00111011011100110011010001000000", 
    98 => "00111011010000010011001100111100", 
    99 => "00111010100011111100100100110110", 
    100 => "10111010001101010110011101010101", 
    101 => "10111010111001101010111111001101", 
    102 => "10111011000010010100110001000100", 
    103 => "10111010111111010001100110011100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity DNN_up_mean_o is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of DNN_up_mean_o is
    component DNN_up_mean_o_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    DNN_up_mean_o_rom_U :  component DNN_up_mean_o_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


