-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity DNN_up_std_o_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of DNN_up_std_o_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111111001101001001010010100011", 
    1 => "00111111001101100110100100010110", 
    2 => "00111111001101110010110111100100", 
    3 => "00111111001101011011100111011000", 
    4 => "00111111001101001101111101011001", 
    5 => "00111111001101100001010100100011", 
    6 => "00111111001101110000101011110110", 
    7 => "00111111001101100011100010101000", 
    8 => "00111111001101010101010010111001", 
    9 => "00111111001101011110100110101111", 
    10 => "00111111001101101100010011000110", 
    11 => "00111111001101100110011111101000", 
    12 => "00111111001101011001111010010101", 
    13 => "00111111001101011110010111110011", 
    14 => "00111111001101101010011110111101", 
    15 => "00111111001101100101101101000010", 
    16 => "00111111001101011000101100101111", 
    17 => "00111111001101011110000100011010", 
    18 => "00111111001101101011111101110111", 
    19 => "00111111001101100100100111110101", 
    20 => "00111111001101010011011001100001", 
    21 => "00111111001101011011000011011110", 
    22 => "00111111001101101111010111001011", 
    23 => "00111111001101100111111010010101", 
    24 => "00111111001101001111100101101110", 
    25 => "00111111001101010101011100000100", 
    26 => "00111111001101110000000100110010", 
    27 => "00111111001101010001011000110011", 
    28 => "00111111001101001110011101101000", 
    29 => "00111111001101101110010010011111", 
    30 => "00111111001101110110111000101111", 
    31 => "00111111001101010111101111001000", 
    32 => "00111111001101000111100111110110", 
    33 => "00111111001101100001100101000100", 
    34 => "00111111001101110101010000111011", 
    35 => "00111111001101011111101010011000", 
    36 => "00111111001101000101010000000100", 
    37 => "00111111001101010000010010000001", 
    38 => "00111111001101101010110000100001", 
    39 => "00111111001101101000000111001011", 
    40 => "00111111001101001100101011100110", 
    41 => "00111111001101000100000111101110", 
    42 => "00111111001101011100100101110001", 
    43 => "00111111001101101111001100001010", 
    44 => "00111111001101011100110100011100", 
    45 => "00111111001101000010110011010100", 
    46 => "00111111001101001111000111000011", 
    47 => "00111111001101101111100100000001", 
    48 => "00111111001101101100110000111110", 
    49 => "00111111001101001010010111110000", 
    50 => "00111111001101000100010010111111", 
    51 => "00111111001101100101111101010010", 
    52 => "00111111001101110001011101101010", 
    53 => "00111111001101010101111000011000", 
    54 => "00111111001101001010111100111110", 
    55 => "00111111001101100011101100100101", 
    56 => "00111111001101110010011100000011", 
    57 => "00111111001101100000001110000010", 
    58 => "00111111001101010001101001010100", 
    59 => "00111111001101011111100110001011", 
    60 => "00111111001101101110011000110010", 
    61 => "00111111001101100101100110011111", 
    62 => "00111111001101011000001110100101", 
    63 => "00111111001101011110010010010011", 
    64 => "00111111001101101010111011110011", 
    65 => "00111111001101100110011010101010", 
    66 => "00111111001101011010000011001111", 
    67 => "00111111001101011110011100100001", 
    68 => "00111111001101101010111000011001", 
    69 => "00111111001101100100111000111000", 
    70 => "00111111001101010110010000001111", 
    71 => "00111111001101011100111101000110", 
    72 => "00111111001101101101100010110010", 
    73 => "00111111001101100101100001100000", 
    74 => "00111111001101010000111100001111", 
    75 => "00111111001101011000011110110101", 
    76 => "00111111001101110000111111110001", 
    77 => "00111111001101101011101001011010", 
    78 => "00111111001101010010000011110011", 
    79 => "00111111001101110001001001001101", 
    80 => "00111111001101110100001011101110", 
    81 => "00111111001101010100001101001010", 
    82 => "00111111001101001010110101111001", 
    83 => "00111111001101101000111111110011", 
    84 => "00111111001101110111010110100111", 
    85 => "00111111001101011011100111000111", 
    86 => "00111111001101000101011111000001", 
    87 => "00111111001101011000111010101000", 
    88 => "00111111001101110000110110010101", 
    89 => "00111111001101100011110110110100", 
    90 => "00111111001101000111100101001111", 
    91 => "00111111001101001001000000101110", 
    92 => "00111111001101100011110001110101", 
    93 => "00111111001101101100000110100000", 
    94 => "00111111001101010100000110110111", 
    95 => "00111111001101000010000101001011", 
    96 => "00111111001101010101101000001000", 
    97 => "00111111001101110000100100110001", 
    98 => "00111111001101100101011101100100", 
    99 => "00111111001101000101110001111001", 
    100 => "00111111001101001001001110100111", 
    101 => "00111111001101101011111010001100", 
    102 => "00111111001101110001110110000010", 
    103 => "00111111001101001111111111001001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity DNN_up_std_o is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of DNN_up_std_o is
    component DNN_up_std_o_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    DNN_up_std_o_rom_U :  component DNN_up_std_o_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


