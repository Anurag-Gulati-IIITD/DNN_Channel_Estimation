-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_32_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_32_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100110110010000100111110010", 
    1 => "10111101101010111010101001011000", 
    2 => "10111101100001001111110010100100", 
    3 => "10111101011100011111101010111001", 
    4 => "00111100100101011111110011000010", 
    5 => "10111011101111011111010011000011", 
    6 => "00111100111110011100000111111000", 
    7 => "10111100000110100100110111110100", 
    8 => "00111100111000010111101000000011", 
    9 => "00111101001001111000011011000010", 
    10 => "00111100101000100011011111001110", 
    11 => "10111100111000111000110010010111", 
    12 => "10111100111001001000000111110101", 
    13 => "10111101110001100011000101110010", 
    14 => "10111100101010001101111010110001", 
    15 => "00111100100100001000010111110101", 
    16 => "00111101010100010010001100111110", 
    17 => "00111101010000001011101110110010", 
    18 => "10111100110001011010010111111100", 
    19 => "10111101001000100101110110001101", 
    20 => "10111101001000101011001110001001", 
    21 => "10111011101111100101000100001001", 
    22 => "00111100111101100101010101011100", 
    23 => "00111100011101101100111011111111", 
    24 => "00111100100010100010110010101010", 
    25 => "10111101001100100001111001100000", 
    26 => "00111100000111101111100101010101", 
    27 => "00111100100110101110111101110000", 
    28 => "00111011111100001000110011000101", 
    29 => "10111101000001100101000011100111", 
    30 => "10111100000000001010111000010000", 
    31 => "00110111000101101111111010110101", 
    32 => "00111101100011011000011101110010", 
    33 => "00111101010110011110001100000000", 
    34 => "00111100001010001010110001011100", 
    35 => "10111101001011110001000000100011", 
    36 => "10111101100001010010001011101010", 
    37 => "10111100111111000110010101000001", 
    38 => "00111011101011100110010000101100", 
    39 => "00111100110001101100011101100101", 
    40 => "00111100001001000010101011101101", 
    41 => "10111100100001010010101101001110", 
    42 => "10111101010010000010000101101100", 
    43 => "00111101000011111101011011011000", 
    44 => "00111101001000101000100010001011", 
    45 => "00111101101011000000101111011101", 
    46 => "00111100011110001011100110111011", 
    47 => "10111101010011000111110000001111", 
    48 => "10111101110001010011101100001000", 
    49 => "10111101111001111011110011000011", 
    50 => "10111101011111010001010001011110", 
    51 => "00111101010001000011000110111110", 
    52 => "10111110000100101100010101011101", 
    53 => "10111100111101011111110101001000", 
    54 => "00111100110011010110001111001100", 
    55 => "00111101001001101111100100110011", 
    56 => "00111101010000100010011110001101", 
    57 => "00111100111001111010111110100111", 
    58 => "10111100010110100000010110011010", 
    59 => "00111011001000100111011010111000", 
    60 => "00111100101000010010110101110111", 
    61 => "10111010100000000101000111001010", 
    62 => "10111101001111111100101010000110", 
    63 => "10111100100010011001111000001110", 
    64 => "10111100110011000010100100111001", 
    65 => "00111100100011011011101011010100", 
    66 => "00111101011000101001101001011111", 
    67 => "00111100111111110110011011101000", 
    68 => "10111011000100111010011100010001", 
    69 => "10111101001111011010100000110111", 
    70 => "10111011110011110011000100101011", 
    71 => "10111011100110100100110111110100", 
    72 => "00111101010001101110110000011000", 
    73 => "00111101011100110001011011100011", 
    74 => "00111100101100010001010000001010", 
    75 => "10111100101011000110110011011011", 
    76 => "10111100111001011111100101011001", 
    77 => "10111100111000100110101100101111", 
    78 => "00111100111001110001000001000101", 
    79 => "10111011101011010001010010100001", 
    80 => "10111100100100101000100111011011", 
    81 => "10111011001101100110001011111110", 
    82 => "00111101010111011011000000010100", 
    83 => "00111100110100001001100111100001", 
    84 => "00111100100000001111011101110111", 
    85 => "10111101001110001001000111100010", 
    86 => "10111101001011110011010011010111", 
    87 => "10111101011001111001000000110010", 
    88 => "10111011011100100110101011101100", 
    89 => "00111101100000111110011101001011", 
    90 => "00111101001111100111001010010111", 
    91 => "00111100111101110100110011010011", 
    92 => "10111100001101000111100001000010", 
    93 => "10111101011010101111011010000011", 
    94 => "10111011100100010111110101101011", 
    95 => "00111101001011001010101111000101", 
    96 => "00111101000001000001010001100010", 
    97 => "10111100110010001010100110111101", 
    98 => "10111101010100110001000100011111", 
    99 => "10111101100100010000010011010101", 
    100 => "10111011100001010101010100111111", 
    101 => "00111101100011110001001000111100", 
    102 => "00111101110001100111000001011101", 
    103 => "00111101101010000111000010010111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_32 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_32 is
    component L3_up_L2_WEIGHTS_32_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_32_rom_U :  component L3_up_L2_WEIGHTS_32_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


