-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_49_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_49_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101010010011101100111010011", 
    1 => "00111100111111010010101001100011", 
    2 => "10111100010001001101001000101101", 
    3 => "00111011111111000011111110000001", 
    4 => "00111101000100110010001111111111", 
    5 => "00111100110000101011010100011100", 
    6 => "10111100110010010100001011010101", 
    7 => "10111101100000011011000000000011", 
    8 => "10111101100000100000101000110001", 
    9 => "10111100100111011001100100000011", 
    10 => "00111101100010111101100100000010", 
    11 => "00111101111101111011001110010110", 
    12 => "00111101100101001110111111001100", 
    13 => "00111100111000011010101000111111", 
    14 => "10111101100000001011110101000101", 
    15 => "10111101100100000100011110010001", 
    16 => "10111100110011001010100100100110", 
    17 => "00111100101100011000010101001001", 
    18 => "00111100100110111001100101001110", 
    19 => "10111101011000111100100001011100", 
    20 => "10111101000000101101011010101010", 
    21 => "00111100110111101010010001100110", 
    22 => "00111101110010011000011011111101", 
    23 => "00111110000110010100001010010001", 
    24 => "00111101100011010011110110000110", 
    25 => "10111101010100100010010100110001", 
    26 => "10111110000011011000101000010001", 
    27 => "10111101100110001001000001001111", 
    28 => "00111101001111010110110101111111", 
    29 => "00111110000010110110011000110000", 
    30 => "00111101110001100100110000110000", 
    31 => "00111101101101111101011111000011", 
    32 => "00111100101100101001010111101010", 
    33 => "10111101001110010110101111111101", 
    34 => "10111101100111101110001001000011", 
    35 => "10111101110010110111011101111101", 
    36 => "10111101100011110010110011111001", 
    37 => "00111100000010101110101110000001", 
    38 => "00111101101100011111011000000001", 
    39 => "00111101111110110111010110100111", 
    40 => "00111101101110001001101101010010", 
    41 => "10111100001111111100011001010100", 
    42 => "10111101101101010100111010110001", 
    43 => "10111110000011100110100101101010", 
    44 => "10111101011111101011011010111111", 
    45 => "00111011010100111100111111110110", 
    46 => "00111101110111110111000011011111", 
    47 => "00111101111011100111010001101101", 
    48 => "00111101011001101010110010101000", 
    49 => "10111100100010110100001110010110", 
    50 => "10111101011001111111010111101000", 
    51 => "10111101110001001100011100101010", 
    52 => "00111011101011011011110001100110", 
    53 => "10111011111110011001100000000111", 
    54 => "10111100011100111011101001110111", 
    55 => "10111100100010000100100000111000", 
    56 => "10111011110001000101100010001010", 
    57 => "10111101000001011110001011001110", 
    58 => "10111101001001011100010111111000", 
    59 => "10111100101000001110100001000010", 
    60 => "00111101001100110010111100000001", 
    61 => "00111101110110001000101110010111", 
    62 => "00111101101101101111010000111000", 
    63 => "00111100101010010101001000001001", 
    64 => "10111101100101001000001111001011", 
    65 => "10111101110011000001001100110100", 
    66 => "10111101011100100101100100011001", 
    67 => "00111100110100100000011011001000", 
    68 => "00111100111111100110001011011100", 
    69 => "00111100100100010001011010101001", 
    70 => "10111100101101001100001111000010", 
    71 => "10111100000110111011111100001110", 
    72 => "00111101011100011011100010101010", 
    73 => "00111101101111010000110010000000", 
    74 => "00111101011101000001111000010101", 
    75 => "10111101001111110111100010111100", 
    76 => "10111101110101100001101110110000", 
    77 => "10111110000000010101011110101100", 
    78 => "00111101100100000111111010011110", 
    79 => "00111110000000101010111000001000", 
    80 => "00111110000000110110000111011101", 
    81 => "00111101100011001111101001101010", 
    82 => "10111100111100101010100111010110", 
    83 => "10111101101010000001101010011100", 
    84 => "10111101100001111111001000111101", 
    85 => "10111101101101110100110001001101", 
    86 => "10111100111111101101110001111111", 
    87 => "00111100001111011000011110110101", 
    88 => "00111101100111100010100110110111", 
    89 => "00111101110011100110001110100110", 
    90 => "00111101101101010010011011011001", 
    91 => "00111011000011001110011100000100", 
    92 => "10111101110101011001101100111101", 
    93 => "10111110000010101100111001101000", 
    94 => "10111101101100111110101100111010", 
    95 => "10111011010110110001011000111100", 
    96 => "00111101101111011111010111001111", 
    97 => "00111101111100100010001000001100", 
    98 => "00111101000100000011011001000100", 
    99 => "10111100101010110111010101100100", 
    100 => "10111101101111110101100101000111", 
    101 => "10111101101111010101111111011101", 
    102 => "10111101010001010101001000011010", 
    103 => "00111100000011101101101000100011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_49 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_49 is
    component L3_up_L2_WEIGHTS_49_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_49_rom_U :  component L3_up_L2_WEIGHTS_49_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


