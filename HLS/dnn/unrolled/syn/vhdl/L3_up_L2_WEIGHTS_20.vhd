-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_20_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_20_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100011100010010110000101000", 
    1 => "10111100000011011000111011001001", 
    2 => "00111011011011101101000000101101", 
    3 => "00111011101110111011000111110010", 
    4 => "00111100000010100110100101111011", 
    5 => "00111011100100000011111010100111", 
    6 => "10111001011001011010001101011101", 
    7 => "10111001111100011011001001011111", 
    8 => "10111010101000001111010011011000", 
    9 => "00111001001010111111011101101010", 
    10 => "10111001001010111111011101101010", 
    11 => "10111011010011001011110000000110", 
    12 => "00111011001001110000110100100000", 
    13 => "10111001111110010000100101101100", 
    14 => "00111011100000011101110000001110", 
    15 => "00111010111100001010010111110000", 
    16 => "00111010101010110000110010001001", 
    17 => "10111010111001000111010101100000", 
    18 => "00111001111011110001001101001001", 
    19 => "10111011000000111000011111011111", 
    20 => "10111011110101011100011101000111", 
    21 => "10111011100110001011101101001101", 
    22 => "10111001100011101001101100111001", 
    23 => "00111011100000001110000001100101", 
    24 => "00111011001011100010000100010000", 
    25 => "10111000110111000011001101110010", 
    26 => "00111010111101100100100011000111", 
    27 => "00111011000001010101110110100010", 
    28 => "10111011000111001010000110001100", 
    29 => "10111100000000001111100110010000", 
    30 => "10111011010101010001111110000010", 
    31 => "10111000010001010010000111011110", 
    32 => "10111010110001111100000011110100", 
    33 => "00111011001011111000000101100010", 
    34 => "10111010101100000000011110011010", 
    35 => "00111011000100001100010011011111", 
    36 => "10111010100011000001110110110000", 
    37 => "00111010101110000000011001101100", 
    38 => "10111010101000000000100111110110", 
    39 => "10111001001100000010100100101000", 
    40 => "00111011110110000100110100110100", 
    41 => "00111010110001010110010011111001", 
    42 => "00111011011111000110000100001111", 
    43 => "10111011010010000000010000010000", 
    44 => "10111011101110101001010010111100", 
    45 => "10111011010111011000001011111101", 
    46 => "10111010001101101011011011100001", 
    47 => "10111010110010011111101101100001", 
    48 => "10111000110100111100111111110110", 
    49 => "00110111110100011011011100010111", 
    50 => "10111010011000000010001000010100", 
    51 => "00111010000010110111010111101010", 
    52 => "00111011101000110101000011010011", 
    53 => "00111100000101010111100010100011", 
    54 => "00111100011001010110010001110011", 
    55 => "00111011101110110011010000011110", 
    56 => "10111011100100000011011001000100", 
    57 => "10111010101111101111100011001111", 
    58 => "10111011101001101010100001110110", 
    59 => "10111001110101001101110001100110", 
    60 => "00111010111011100100100111110101", 
    61 => "00111001111101111111110011111100", 
    62 => "00111010000001110000000100010001", 
    63 => "10111011001001111111100000000001", 
    64 => "00111011000000011001000010001110", 
    65 => "00111011010000000001011000000101", 
    66 => "00111100001011100100011011010000", 
    67 => "10111001010110000000000110110100", 
    68 => "10111011100111001111010101101111", 
    69 => "10111011000101010010100011110010", 
    70 => "10111011110111110000010011011110", 
    71 => "00111010100110110011000001110011", 
    72 => "00111010101011101111101100101011", 
    73 => "00111011000001000100000001101100", 
    74 => "00111011010001100011111100010100", 
    75 => "00111011000100101010101101101001", 
    76 => "10111010110110100011110000100001", 
    77 => "10111011000011101011110011000111", 
    78 => "10111010111011100000011011011001", 
    79 => "10111000011110111010100010000010", 
    80 => "10111011100100011000111000110010", 
    81 => "10111011000100101001101010100010", 
    82 => "00111001110101100110111100001101", 
    83 => "00111011100111010010011111000100", 
    84 => "00111010000001100111101011011001", 
    85 => "00111010101110110010101110111011", 
    86 => "00111001001011100001000001001001", 
    87 => "00111011011000001010100001001100", 
    88 => "10111011100101011010011011000110", 
    89 => "00111010000001101011110111110101", 
    90 => "00111010111111111011100010110010", 
    91 => "10111010101010000100101111100100", 
    92 => "00111011100100100100011010111111", 
    93 => "00111011000100010010100110001001", 
    94 => "10111011101001100011101101101001", 
    95 => "10111011001101110010110001010010", 
    96 => "10111011100110000101111100000111", 
    97 => "00111011001011100010000100010000", 
    98 => "00111010000000011100001011100011", 
    99 => "10111010100010101100111000100101", 
    100 => "00111010101111011110110001011111", 
    101 => "00111011011101111001100001010010", 
    102 => "10111011100011010100101110101101", 
    103 => "10111011010010000000010000010000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_20 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_20 is
    component L3_up_L2_WEIGHTS_20_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_20_rom_U :  component L3_up_L2_WEIGHTS_20_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


