-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_8_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_8_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101000100011100000010000111", 
    1 => "00111101110000001101110101000000", 
    2 => "00111101100001011101001100010011", 
    3 => "10111101000001010111101011111111", 
    4 => "10111101110001100111001011111100", 
    5 => "10111101101010001000111110000110", 
    6 => "10111100000100010011000111101100", 
    7 => "00111101100111101101101011101100", 
    8 => "00111101110010010111010100101001", 
    9 => "00111100101001110100110000001010", 
    10 => "10111101011011110000100011001100", 
    11 => "10111101101101101111111100111011", 
    12 => "10111101001100001101101001011110", 
    13 => "00111101001101111011110100000110", 
    14 => "00111101100001010100010011111110", 
    15 => "00111101001000000000010111000100", 
    16 => "10111101001000111100110010001110", 
    17 => "10111101010110111110010011001101", 
    18 => "10111100010100101001110111000111", 
    19 => "00111100110011010101101101101000", 
    20 => "00111101100110110000010001101000", 
    21 => "00111100100100110001110010101000", 
    22 => "10111101010110111000001000111101", 
    23 => "10111101100111111001011110101011", 
    24 => "10111101000101001000010101011110", 
    25 => "00111101010010101001010001111001", 
    26 => "00111101100011010111000101101101", 
    27 => "00111011000000110001001001101111", 
    28 => "10111101100111010101110010111000", 
    29 => "10111101100111101011101111111101", 
    30 => "10111101000010001011101010000100", 
    31 => "00111101001000101000000000101000", 
    32 => "00111101110000000001000111010011", 
    33 => "00111101100101001001010100011000", 
    34 => "10111010100001111110101111110010", 
    35 => "10111101011010010000111011101101", 
    36 => "10111101101110110001100101100001", 
    37 => "10111101010100011111010011110101", 
    38 => "00111101001111100101111110110111", 
    39 => "00111101101111100000111110000000", 
    40 => "00111101101001010010001011101010", 
    41 => "00111100000110010011110101010011", 
    42 => "10111101101000101000011011111001", 
    43 => "10111101110001000001111111101011", 
    44 => "10111101000011111011010101001010", 
    45 => "00111101010011111111110110100100", 
    46 => "00111101101011111110010001111010", 
    47 => "00111101010000000111010001100100", 
    48 => "10111100100110111011110011110101", 
    49 => "10111101010110001011101001000001", 
    50 => "10111101000111001110100011011001", 
    51 => "00111011110110100101110110101111", 
    52 => "00111101101111000000010001000011", 
    53 => "00111100110011110110110111111100", 
    54 => "10111101100110101000010110001000", 
    55 => "10111101110100001110111101010110", 
    56 => "10111101000000111101100010011101", 
    57 => "00111101011001100011100001000011", 
    58 => "00111101110101000001010100101011", 
    59 => "00111101011000100011000001110111", 
    60 => "10111100110111100110001101100011", 
    61 => "10111101110011010000111001010110", 
    62 => "10111101100000111011000000111110", 
    63 => "00111100101011011100101100010100", 
    64 => "00111101100101111011001000000011", 
    65 => "00111101011100111010110011010110", 
    66 => "10111100000001110011101111001001", 
    67 => "10111101010011101001111101101011", 
    68 => "10111101010100101100011010101100", 
    69 => "00111100011100111100111101110000", 
    70 => "00111101010010110010111010011101", 
    71 => "00111101010101001101011100101000", 
    72 => "10111100001000101110110000101001", 
    73 => "10111101011010101000000100010011", 
    74 => "10111101011000110100111010111010", 
    75 => "10111011011000100001100101100101", 
    76 => "00111101100111100010000001000111", 
    77 => "00111101101000010111010011000101", 
    78 => "10111101010111110111011100101001", 
    79 => "10111101110101010110011111011100", 
    80 => "10111101011010110100110110001100", 
    81 => "00111100100010110011001011001111", 
    82 => "00111101101000011110010001110001", 
    83 => "00111101110000011011100111111010", 
    84 => "00111101000001101010110100101110", 
    85 => "10111101100000111010000010000100", 
    86 => "10111101101101100010110011111110", 
    87 => "10111101011011000111110110100010", 
    88 => "00111100011011011100011111101111", 
    89 => "00111101011101100010100101010010", 
    90 => "00111101101101111110010001011000", 
    91 => "00111100101000111010000010000100", 
    92 => "10111101010111011100010000000000", 
    93 => "10111101110011101110110001111101", 
    94 => "10111101010111111110001100101010", 
    95 => "00111100010110101010100100101110", 
    96 => "00111101101101001011001110000001", 
    97 => "00111101100000000011101010111000", 
    98 => "00111100000010100110010101001001", 
    99 => "10111101010000010101101000001000", 
    100 => "10111101100100101011100110010001", 
    101 => "10111100100111000010111000110100", 
    102 => "00111101001100110111010000110110", 
    103 => "00111101010111110000111101011010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_8 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_8 is
    component L3_up_L2_WEIGHTS_8_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_8_rom_U :  component L3_up_L2_WEIGHTS_8_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


