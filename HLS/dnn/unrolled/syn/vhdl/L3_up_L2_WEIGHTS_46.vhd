-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_46_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_46_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100000100100110100001001101", 
    1 => "10111100100100010101001101111010", 
    2 => "10111100010101010011100010101100", 
    3 => "10111010100010011010000000100111", 
    4 => "00111100001110010110111100100010", 
    5 => "00111100000111010110111100010001", 
    6 => "00111010100101000001110010000010", 
    7 => "10111011100101010111010001110001", 
    8 => "10111011110100000010010001110000", 
    9 => "10111010101110110000101000101101", 
    10 => "00111011111000110001110101110001", 
    11 => "00111100000011001110011100000100", 
    12 => "00111011100000011100101101000111", 
    13 => "00111001010111000011001101110010", 
    14 => "10111011110001000101000000100111", 
    15 => "00111011100011100000010000111010", 
    16 => "00111100100001110000011101011011", 
    17 => "00111010010000100011111110101011", 
    18 => "00111011100111001000100001100001", 
    19 => "10111100001011101000100111101100", 
    20 => "10111100000111111010110110110000", 
    21 => "00111011011001001011100001111100", 
    22 => "00111100100011001001010100111010", 
    23 => "00111011111101100101000100101011", 
    24 => "00111010001111010000000101111110", 
    25 => "10111100000001011101111110101000", 
    26 => "00111010001011101001011010000001", 
    27 => "00111011101010000110110101110010", 
    28 => "00111100000000100110001001000101", 
    29 => "00111010101000100100010001100011", 
    30 => "10111011111100110101111000110001", 
    31 => "10111011001110000101101001001111", 
    32 => "00111010001110101110100010011111", 
    33 => "00111010111111001111100000001110", 
    34 => "00111011001001111101011001110011", 
    35 => "10111001101110000000011001101100", 
    36 => "00111010010100110000011010100011", 
    37 => "00111011001111111011000101011011", 
    38 => "00111011100000011001100011110010", 
    39 => "10111011010001011011100011011100", 
    40 => "10111011011011100100100111110101", 
    41 => "10111100000011110111100110000101", 
    42 => "10111010101010110000110010001001", 
    43 => "00111011000101010101101101000110", 
    44 => "00111011110110100010101101011010", 
    45 => "00111011011000100111111000001111", 
    46 => "00111001100111111110100001101000", 
    47 => "00111010001100000010100100101000", 
    48 => "10111011110010001110111011110010", 
    49 => "10111011100011110100001011111111", 
    50 => "10111010000001110100010000101100", 
    51 => "00111011100010111101001000110001", 
    52 => "10111100100011001101101001101110", 
    53 => "00111001100101101111111010110101", 
    54 => "00111100000110001010011001010101", 
    55 => "00111100011110100010101011010100", 
    56 => "00111100001000010111101100001111", 
    57 => "00111010110000000000010100111110", 
    58 => "10111100001001101101111011111100", 
    59 => "10111011101101010100111000101011", 
    60 => "00111011011111100101100001100000", 
    61 => "00111100001100000101011101001011", 
    62 => "00111011111011010010010001011011", 
    63 => "00111011001001100111011000100001", 
    64 => "10111100000111100010011110011110", 
    65 => "10111001010011011000010101011001", 
    66 => "00111100001100000010000011000101", 
    67 => "00111011101110010101010111111000", 
    68 => "00111010001100010111100010110011", 
    69 => "10111011101001111010110010000010", 
    70 => "10111100011101001011000111101110", 
    71 => "10111011101010110000010000100101", 
    72 => "00111100000100010100111101001000", 
    73 => "00111100000100011111011100001110", 
    74 => "00111011011100110001001010110010", 
    75 => "10111011110011001110010111110111", 
    76 => "10111100011011010001001110010100", 
    77 => "10111010110001001011110100110100", 
    78 => "00111100000110011010011000101111", 
    79 => "00111011101001001000111110010111", 
    80 => "10111011101010101100000100001001", 
    81 => "10111100000111011111100101111011", 
    82 => "10111011001010000101110010101011", 
    83 => "10111010111111110101010000001001", 
    84 => "00111100001000001010010100100111", 
    85 => "00111010111100101001110101000001", 
    86 => "00111011100000001010010110101101", 
    87 => "10111010101010000110110101110010", 
    88 => "00111011001000000100110100010010", 
    89 => "10111010110000111111001111100000", 
    90 => "10111011000000101011111010001100", 
    91 => "10111011100100010111110101101011", 
    92 => "10111011110011001000000101001101", 
    93 => "00111010111010001000010110010000", 
    94 => "00111011100101000111000001100101", 
    95 => "00111100000010110101110011000000", 
    96 => "00111011010011010101001100000101", 
    97 => "10111010100010101010110010010111", 
    98 => "10111100001000111011100110101110", 
    99 => "10111011101110110000000111001001", 
    100 => "10111011010001110000100001101000", 
    101 => "00111011110011101110010110101100", 
    102 => "00111100000000010010001110000001", 
    103 => "10111010011110101001110000010011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_46 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_46 is
    component L3_up_L2_WEIGHTS_46_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_46_rom_U :  component L3_up_L2_WEIGHTS_46_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


