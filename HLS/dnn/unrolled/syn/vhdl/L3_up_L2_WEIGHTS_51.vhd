-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_51_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_51_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101110100001011001100001", 
    1 => "00111101100110110010000100111110", 
    2 => "00111101001011001100011100001000", 
    3 => "10111101011010010101111110101011", 
    4 => "10111110000011111000010010001000", 
    5 => "10111101111011110010100001000001", 
    6 => "10111101101000110101101111010101", 
    7 => "10111011110010001100110101100100", 
    8 => "00111101101011100001111001110001", 
    9 => "00111101111110101011001110101011", 
    10 => "00111101111001010011100101110101", 
    11 => "00111011001000001110010000010001", 
    12 => "10111101100101001111110111110100", 
    13 => "10111101111100111101011111010100", 
    14 => "10111110000010011110100110001110", 
    15 => "10111101101001001001110010110010", 
    16 => "00111100010111101010010001100110", 
    17 => "00111101101001011110010001100000", 
    18 => "00111110000000111000110100011110", 
    19 => "00111101100111111000010111010111", 
    20 => "00111100100101101100000111100011", 
    21 => "10111101000001001101101110011100", 
    22 => "10111101111100111100101010111000", 
    23 => "10111101100111000011100010110000", 
    24 => "10111101001001110110011001000001", 
    25 => "00111100011111111100010101001000", 
    26 => "00111101101011011100010111010110", 
    27 => "00111101110011111100010110001011", 
    28 => "00111101100011111101010111001011", 
    29 => "00111100101001101101100010110010", 
    30 => "10111101011001011101010010100110", 
    31 => "10111110000010100010111100000110", 
    32 => "10111110000011110001101100100110", 
    33 => "10111101111000010001110000101010", 
    34 => "00111011011101110010001011100010", 
    35 => "00111101110101101010110001100100", 
    36 => "00111110000000001110001011000001", 
    37 => "00111101101100011111101010111001", 
    38 => "00111100100101010101010011111100", 
    39 => "10111101101111000111101000111010", 
    40 => "10111101111000001110101001011011", 
    41 => "10111101101100010100011011100101", 
    42 => "10111101000100000101111100101001", 
    43 => "00111010100100110011000110100001", 
    44 => "00111101011001010101010111000101", 
    45 => "00111101101100010011101101011100", 
    46 => "00111101110110010101000000110011", 
    47 => "00111101011000101100101010011011", 
    48 => "10111011110010110001000000110100", 
    49 => "10111101110000100001001110100001", 
    50 => "10111110000101101101100001101111", 
    51 => "10111101111010101101111011101100", 
    52 => "10111100001111000011100000101010", 
    53 => "10111101100011101001000000110110", 
    54 => "10111101110011100011010110000011", 
    55 => "10111101111100101001011001110000", 
    56 => "10111100101011100100100011101001", 
    57 => "00111101100110110100000111000000", 
    58 => "00111101111001001011101000001111", 
    59 => "00111110000100000011101100111111", 
    60 => "00111101110001010110110001010001", 
    61 => "10111100010011100010010010111100", 
    62 => "10111101111001101110010000111011", 
    63 => "10111101111010000111010101001111", 
    64 => "10111101111101011001011110010010", 
    65 => "10111101100110001001111110000100", 
    66 => "00111101011001101110111111000011", 
    67 => "00111101111001111000011000111100", 
    68 => "00111110000100101000101111110100", 
    69 => "00111101000100101011100100001010", 
    70 => "10111101001011010010101110110010", 
    71 => "10111101110101010101110001010011", 
    72 => "10111101111000110001001001101111", 
    73 => "10111101111101100010000011101111", 
    74 => "10111101000001011111000001101111", 
    75 => "00111101000011001110101000101001", 
    76 => "00111101111110100100101101010101", 
    77 => "00111101100001100011010000010001", 
    78 => "00111101100011010101110011111011", 
    79 => "10111011111000101110001010111001", 
    80 => "10111101011010010110110101001100", 
    81 => "10111101101100110110101011000110", 
    82 => "10111110000000001000011101000100", 
    83 => "10111100111000011000000001001110", 
    84 => "00111101010100000100111001100010", 
    85 => "00111101111001100101100111010001", 
    86 => "00111110000010011000000001101111", 
    87 => "00111101100111110110011111110101", 
    88 => "10111011111111111011100010110010", 
    89 => "10111101100001000111010011011010", 
    90 => "10111101111111100100111001101010", 
    91 => "10111101101100100000001110100011", 
    92 => "10111011011001000010000101111101", 
    93 => "00111101100000110000000110101000", 
    94 => "00111101110001110000101110001101", 
    95 => "00111101100001100110011111111001", 
    96 => "00111101000001110010110100011011", 
    97 => "00111100011010011100010001010100", 
    98 => "10111011000100011100000010000111", 
    99 => "10111101100011001010101010111001", 
    100 => "10111110000001110111111010100010", 
    101 => "10111101101100011000101000000001", 
    102 => "10111100010001001100110111111011", 
    103 => "00111101100100110011011001011001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_51 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_51 is
    component L3_up_L2_WEIGHTS_51_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_51_rom_U :  component L3_up_L2_WEIGHTS_51_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


