-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_18_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_18_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111010110000101100010111100011", 
    1 => "00111010101000010101100110000001", 
    2 => "00111011000100111100100010011111", 
    3 => "10111001111111000010111010111010", 
    4 => "00111011000111000101111001110000", 
    5 => "00111010011100001010010111110000", 
    6 => "00111001110110010000111000100100", 
    7 => "10111011010111100111111010100110", 
    8 => "00111010000011110010000101110001", 
    9 => "00111011001011000001100011111000", 
    10 => "00111010110001000111101000011000", 
    11 => "00111010000011010100101110101101", 
    12 => "00111011011000100010101000101100", 
    13 => "00111011001100100100001000000111", 
    14 => "00111010000111111110100001101000", 
    15 => "10111100000100011000010111001111", 
    16 => "10111011000001001101011101101011", 
    17 => "00111011100001000100000001101100", 
    18 => "10111011111110010100110010001000", 
    19 => "10111011001101011010101001110001", 
    20 => "10111011111100100101000111000010", 
    21 => "00111100000000111111000010111011", 
    22 => "00111100000110110111011111000000", 
    23 => "00111011100001011010000010111110", 
    24 => "10111011111010011000100110011100", 
    25 => "10111100001100110100101001000101", 
    26 => "00111011001010110111000100110010", 
    27 => "00111011111100111001100011101001", 
    28 => "00111011110111100010101011000011", 
    29 => "00111010110011101111011001110011", 
    30 => "10111100000000110100100011110101", 
    31 => "10111011011000100111111000001111", 
    32 => "10111011110100000101111100101001", 
    33 => "10111011001010110110000001101011", 
    34 => "00111100010010000001100100001001", 
    35 => "00111000010101011110100011010101", 
    36 => "00111010000001111000011101001000", 
    37 => "00111011000001100011011110111101", 
    38 => "00111010000101010010100011110010", 
    39 => "00111010101111001001110011010100", 
    40 => "10111100000101001001000111110011", 
    41 => "10111100010000100111101001100011", 
    42 => "10111011110000000001111001101001", 
    43 => "10111011100000110000000110101000", 
    44 => "00111011001110011101110000101111", 
    45 => "00111010101100111111011000111100", 
    46 => "00111100001001100010011001110000", 
    47 => "10111001111100111100101100111110", 
    48 => "00111011100110011101100010000100", 
    49 => "10111011111000111110011011000101", 
    50 => "10111011010101101110010001111110", 
    51 => "10111011100110010000011011001101", 
    52 => "10111011011111010111111001000110", 
    53 => "10111011101111010001101010101000", 
    54 => "10111011101111110110111000111111", 
    55 => "00111011011110101000101101001100", 
    56 => "10111011100101001101010100001111", 
    57 => "00111011011111110011001001111011", 
    58 => "10111010111011110101011001100101", 
    59 => "10111011000110010100100111101001", 
    60 => "00111000111000100111111000001111", 
    61 => "00111011101000010110000111100101", 
    62 => "10111000101110001000110010100100", 
    63 => "10111010001100100100001000000111", 
    64 => "00111011001100011011101111001111", 
    65 => "10111011111101111001100001010010", 
    66 => "00111010100111010100100101010010", 
    67 => "10111011101101000010000000101110", 
    68 => "10111010111110000100000000011000", 
    69 => "10111011100100011011100000100100", 
    70 => "10111011001100110010110011101001", 
    71 => "10111001100100001011010000011000", 
    72 => "00111011101001000010101011101101", 
    73 => "00111011111000001111110000101111", 
    74 => "10111011010101001010101000010001", 
    75 => "10111011011001110101011110010011", 
    76 => "10111001011011001111101001101010", 
    77 => "10111011110010101100010010110101", 
    78 => "00111100011000100001010100110011", 
    79 => "00111011011001101000111000111111", 
    80 => "00111010100001011101001100010011", 
    81 => "10111011010011100011110111100110", 
    82 => "10111100000101111100001111010111", 
    83 => "10111011000000000110001010010001", 
    84 => "00111011111001010011011001010000", 
    85 => "00111100000001101110110000011000", 
    86 => "00111011110010101111111101101101", 
    87 => "10111011011111110001000011101101", 
    88 => "10111011101100101100100000111111", 
    89 => "00111011111000010110100100111100", 
    90 => "00111011100001111000011101001000", 
    91 => "10111011001101100100000101110000", 
    92 => "10111011101010000011001010111010", 
    93 => "10111010000110110011000001110011", 
    94 => "00111011011010111011101110100101", 
    95 => "00111100000110010000011011001101", 
    96 => "00111011111101100000010110101011", 
    97 => "00111011010001111100000011110100", 
    98 => "10111010000000101100111101010011", 
    99 => "00111011011101010001101011001010", 
    100 => "10111010111010000110010000000010", 
    101 => "10111011110001010010000111011110", 
    102 => "00111010110010110000011111010001", 
    103 => "00111100000111101011101001101011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_18 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_18 is
    component L3_up_L2_WEIGHTS_18_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_18_rom_U :  component L3_up_L2_WEIGHTS_18_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


