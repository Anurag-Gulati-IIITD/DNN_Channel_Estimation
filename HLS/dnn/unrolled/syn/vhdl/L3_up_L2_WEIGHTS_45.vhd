-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_45_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_45_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100110001001010010000001", 
    1 => "00111100101001001111001000101000", 
    2 => "10111101011011111010001111111101", 
    3 => "10111101110100101001100010001001", 
    4 => "10111101101110001010010000111100", 
    5 => "10111101000001000011110000111010", 
    6 => "00111100101011000011000000001010", 
    7 => "00111101101110011101010111100101", 
    8 => "00111101011101011000110100010101", 
    9 => "00111101001001110010011101010111", 
    10 => "00111100100101101101111101000000", 
    11 => "10111100000111001101001111100001", 
    12 => "10111101011101010011101000111111", 
    13 => "10111101101111111000101010001111", 
    14 => "10111101100011110011111011001101", 
    15 => "00111101001001100001111000001100", 
    16 => "00111101101111101110001111010110", 
    17 => "00111101101110101110000000111011", 
    18 => "00111101100100010101110001100100", 
    19 => "10111011000001100010011011110110", 
    20 => "10111101100011100100011011010000", 
    21 => "10111101110001111001000000110010", 
    22 => "10111101100100010000111101010010", 
    23 => "00111100010101100100110101111111", 
    24 => "00111101101000110010100001110100", 
    25 => "00111101100000011110000111010010", 
    26 => "10111100000101100100101001011010", 
    27 => "10111100111011000001001110111010", 
    28 => "10111100101110100011000000010010", 
    29 => "10111101000010000111110010100110", 
    30 => "10111100100111111000101000001001", 
    31 => "10111100010101001001000011100110", 
    32 => "00111100101011110110110001101010", 
    33 => "00111101100011010111000011100111", 
    34 => "00111101011001011001011111010101", 
    35 => "00111101001000011100101011000001", 
    36 => "00111010111110001010010011000010", 
    37 => "10111101011001101111000011010000", 
    38 => "10111101010100101011000010100111", 
    39 => "10111101001010010000111111111001", 
    40 => "10111011110000100000110101010110", 
    41 => "00111100110001100110001010111011", 
    42 => "00111101000111111010110110110000", 
    43 => "00111101001010001101100001100110", 
    44 => "00111101100000110000101110011110", 
    45 => "00111101100011011111011000010010", 
    46 => "00111100000101011001101000110001", 
    47 => "10111100110101001000111011001110", 
    48 => "10111101111100010100111101001000", 
    49 => "10111101101011000101000010001011", 
    50 => "10111101011110110100101100110000", 
    51 => "00111101011001101101001001100111", 
    52 => "10111101100001100000111111100100", 
    53 => "10111101110101011100010000100010", 
    54 => "10111101010111111110011001001111", 
    55 => "10111101001011001011010000101001", 
    56 => "00111101100001110010011111011101", 
    57 => "00111101101011010101101001011100", 
    58 => "00111101101001000101111101011011", 
    59 => "00111101000010000000010000010000", 
    60 => "10111100001101010001001101110011", 
    61 => "10111101010011010111010110011111", 
    62 => "10111101011011100001101011000101", 
    63 => "10111101010100001100010011011111", 
    64 => "10111101011000101010010111101000", 
    65 => "00111100111000111010111000100101", 
    66 => "00111101010111111010000000001110", 
    67 => "00111101101010011101101011100000", 
    68 => "00111101100101111101101011101000", 
    69 => "00111100110001100011010010011000", 
    70 => "10111101101100100101000100111011", 
    71 => "10111101110011001100111011100110", 
    72 => "10111101110001000001011001111011", 
    73 => "10111100101000100010001011010101", 
    74 => "00111101101100011000010000111100", 
    75 => "00111101100010000010110001101111", 
    76 => "00111100101011001111101101110110", 
    77 => "10111011100011100001010100000001", 
    78 => "10111101010110011010000111111101", 
    79 => "10111100111100111110010001101001", 
    80 => "10111100110011111101110100100011", 
    81 => "10111011100111111100111100111110", 
    82 => "00111100111111101100110111010001", 
    83 => "00111101001101001111011100100011", 
    84 => "00111101010001001110111001111100", 
    85 => "00111100110111100010010001111001", 
    86 => "10111100110000001101100100001110", 
    87 => "10111101100010100011011000011010", 
    88 => "10111101010111011000111010000110", 
    89 => "10111101010110001110100101110000", 
    90 => "10111100110010011010000100110100", 
    91 => "00111100010000001110101111101110", 
    92 => "00111101001010001111100111110100", 
    93 => "00111101000010101010101110001010", 
    94 => "00111100110100110001000100011111", 
    95 => "00111101001100010001010100010110", 
    96 => "10111100000011100100011101010110", 
    97 => "10111100100111000011110011100010", 
    98 => "10111101101001000101100110010110", 
    99 => "10111101111110111010001000111000", 
    100 => "10111101001110010011101111000001", 
    101 => "00111101100010110101101100101101", 
    102 => "00111101101011010011100101010100", 
    103 => "00111101100000101100101110100111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_45 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_45 is
    component L3_up_L2_WEIGHTS_45_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_45_rom_U :  component L3_up_L2_WEIGHTS_45_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


