-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_23_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_23_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101010100000111011000111", 
    1 => "10111101000100011100110100011100", 
    2 => "10111101111110011011111111011111", 
    3 => "10111101110111001110111110101010", 
    4 => "10111101001001000110011010110010", 
    5 => "00111101010010000110100010111010", 
    6 => "00111101110101110000101011000100", 
    7 => "00111101101110101111001100011011", 
    8 => "00111100100011010001110110001010", 
    9 => "10111101010101100010111100010110", 
    10 => "10111101101011101111101110110001", 
    11 => "10111101010010100000101000001111", 
    12 => "00111100000100001010101110110100", 
    13 => "00111101100110011011111001001101", 
    14 => "00111101101100110010010100001011", 
    15 => "00111101000111101000101100111011", 
    16 => "10111100110111100001001110110010", 
    17 => "10111101110011111011001100110001", 
    18 => "10111101110011110101101000010000", 
    19 => "10111100101101110101011001000011", 
    20 => "00111101100001110100100001011110", 
    21 => "00111110000100000100110000000110", 
    22 => "00111101111001011100010111111000", 
    23 => "00111100010000011010010001111011", 
    24 => "10111101110111000100100101110111", 
    25 => "10111110000101111111000101110011", 
    26 => "00111101001100011010110000010101", 
    27 => "00111101110100001111111100010001", 
    28 => "00111101101111110111101111100001", 
    29 => "00111011101000000101110111011001", 
    30 => "10111101101000110100111101000000", 
    31 => "10111101100100000001110100011001", 
    32 => "10111100100100100001011010000011", 
    33 => "00111101010001101001111110001100", 
    34 => "00111101100001110110100101100110", 
    35 => "00111100010100000001001110101001", 
    36 => "10111100111100111010010101111111", 
    37 => "10111101010110111100011001100101", 
    38 => "10111101001101101101101010001000", 
    39 => "00111011101111001001010001110000", 
    40 => "00111101001010001100001101101110", 
    41 => "00111101000011101000001000001110", 
    42 => "00111100101101010011100100110010", 
    43 => "10111100101000111100100001011100", 
    44 => "10111100111011011101100010110110", 
    45 => "10111100110000111110111110101110", 
    46 => "00111100100101011101100100011011", 
    47 => "00111101001111110110011011101000", 
    48 => "00111100101100001100000000100111", 
    49 => "10111100100011010110101100100011", 
    50 => "10111101010111110000011011110111", 
    51 => "10111101010111101101100111100000", 
    52 => "10111101111101100110111100001101", 
    53 => "10111110000010000011001001110110", 
    54 => "10111101011000110000101110011110", 
    55 => "00111101000110110101001100001101", 
    56 => "00111101110111111100110000011000", 
    57 => "00111101110101000101010010011011", 
    58 => "00111101000101101101101100001110", 
    59 => "10111101001111100011011111011111", 
    60 => "10111101110010101000011101011101", 
    61 => "10111101011101101100101111011010", 
    62 => "10111011100001011110001111011010", 
    63 => "00111101010101011111110111001110", 
    64 => "00111101101000110011011000010101", 
    65 => "00111101011000110100001000100100", 
    66 => "10111100100000101111010100010010", 
    67 => "10111101101010001110111111111110", 
    68 => "10111101101110101011011001001010", 
    69 => "10111101010000000100001100011100", 
    70 => "00111101010010111100101011011010", 
    71 => "00111101111001010011010010111101", 
    72 => "00111101110101100001001101001101", 
    73 => "00111100001010111110101011010101", 
    74 => "10111101101110000101111110001101", 
    75 => "10111110000010101000001000011111", 
    76 => "10111101101111010111001111001001", 
    77 => "00111100111000010100101111100000", 
    78 => "00111101111011110101000100100110", 
    79 => "00111101010000011011101010000000", 
    80 => "10111101011000110101110001011011", 
    81 => "10111101101101111111101011100011", 
    82 => "10111101010011000111101100000011", 
    83 => "00111100010011000000101111011101", 
    84 => "00111101100001010101001110101100", 
    85 => "00111101011000110100101110010100", 
    86 => "10111100010000110010101010001101", 
    87 => "10111101100010101000001010100101", 
    88 => "10111101010100010011010000000101", 
    89 => "00111011101101011010101001110001", 
    90 => "00111101001011001001110000001011", 
    91 => "00111101011010100110100011110101", 
    92 => "00111100100010001101110100011110", 
    93 => "10111100000101110000011100011000", 
    94 => "10111101001100111110010001101001", 
    95 => "10111100110101111011001000000011", 
    96 => "10111011111111011011100011111110", 
    97 => "00111101001011111000001101111011", 
    98 => "00111100101010000011110100110110", 
    99 => "10111100010110110100100010010001", 
    100 => "10111101000010110101111111100101", 
    101 => "10111101001111011110011100100001", 
    102 => "10111100110111110110001100111101", 
    103 => "00111100110101010101011000001000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_23 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_23 is
    component L3_up_L2_WEIGHTS_23_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_23_rom_U :  component L3_up_L2_WEIGHTS_23_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


