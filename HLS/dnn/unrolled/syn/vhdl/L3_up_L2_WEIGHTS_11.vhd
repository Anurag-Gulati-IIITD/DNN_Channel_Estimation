-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_up_L2_WEIGHTS_11_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_up_L2_WEIGHTS_11_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110011101111000001111100000", 
    1 => "10111101111011011000010101011001", 
    2 => "00111101100101001000110100111011", 
    3 => "00111110001110011011110001110111", 
    4 => "00111101101110110001100111100111", 
    5 => "10111101011010100100000000010000", 
    6 => "10111110000000011100000101010001", 
    7 => "10111101010001010100110111101000", 
    8 => "00111101011010100100111111001010", 
    9 => "00111101110100100101000010110101", 
    10 => "00111101000111100111000100000100", 
    11 => "10111101001011110000101011100101", 
    12 => "10111101100011110111011011100110", 
    13 => "10111100001111001111010011101000", 
    14 => "00111101010111100101101011111111", 
    15 => "00111101010111001001011100001111", 
    16 => "00111100010000000011011110010011", 
    17 => "10111101011010001000110011100111", 
    18 => "10111101010100111010001111101100", 
    19 => "00111011100011101111011101111111", 
    20 => "00111100111101101100110011100110", 
    21 => "00111101000001001101110010101001", 
    22 => "10111100100011100100010100111101", 
    23 => "10111101000000000110100011011100", 
    24 => "10111100000010010101000001110110", 
    25 => "00111101001011000010100110111111", 
    26 => "00111100100000100101001110010111", 
    27 => "10111101100101010010000110011011", 
    28 => "10111101101110110100100000001010", 
    29 => "10111101011000001000100011010111", 
    30 => "00111100001101010010000000001000", 
    31 => "00111101100100001000100000001110", 
    32 => "00111101011000011111011111010111", 
    33 => "00111100110001110101011000000000", 
    34 => "00111100011100100000011001000010", 
    35 => "10111100000100111011110000001010", 
    36 => "10111011110111001110101111111111", 
    37 => "10111100111000000001011110011000", 
    38 => "10111101100001110011011010001011", 
    39 => "10111101001100011110111100110001", 
    40 => "00111100001000010011110000100101", 
    41 => "00111101010000111010111110111000", 
    42 => "00111101010011111111000100001111", 
    43 => "10111100010000010110010110010000", 
    44 => "10111100101101001011011100101100", 
    45 => "10111011010100000011010100110111", 
    46 => "00111101101000010001000010100001", 
    47 => "00111101100111001000100101101110", 
    48 => "10111101000010100111011000010000", 
    49 => "10111110001110100010010111011001", 
    50 => "10111110010001100010010000010100", 
    51 => "10111101000111011111011001010101", 
    52 => "10111100000001111000111110101100", 
    53 => "00111110001010110000011100000111", 
    54 => "00111110001101100101101011011110", 
    55 => "00111100100010100011011100100110", 
    56 => "10111110000000010101000100011110", 
    57 => "10111101111101010101000101010000", 
    58 => "00111011001110101001010010111100", 
    59 => "00111101110100110010011110101010", 
    60 => "00111101101100010010100001111100", 
    61 => "00111011101100001111001001111100", 
    62 => "10111101101100110101111010110111", 
    63 => "10111101100011101010101001101101", 
    64 => "00111100001111100011110000010000", 
    65 => "00111101100101000001010100101011", 
    66 => "00111101001110111100001111000110", 
    67 => "10111100110100101111011111110101", 
    68 => "10111101100010011010111111100010", 
    69 => "10111101000100010001010010010000", 
    70 => "00111100110100111111010110110110", 
    71 => "00111101000110011101101110101001", 
    72 => "00111100011111100100101111001011", 
    73 => "10111101001010011101011000101000", 
    74 => "10111101000100101111000010011110", 
    75 => "00111100100100110111110100100000", 
    76 => "00111101011010110011001101010101", 
    77 => "00111101001001001100111010000001", 
    78 => "10111101101010111100100111001101", 
    79 => "10111101100000101100111101010011", 
    80 => "00111011011100101001110101000001", 
    81 => "00111101101001111101010011100001", 
    82 => "00111101101000101010001101001000", 
    83 => "00111100110110010111100100011000", 
    84 => "10111100010011110101011011101011", 
    85 => "10111100111001010101010111000101", 
    86 => "10111100110010011110101010011010", 
    87 => "10111100110100011101100010100101", 
    88 => "10111100111111101101111010011000", 
    89 => "10111100100011110001011011110100", 
    90 => "10111011111010101011111111111101", 
    91 => "00111101010110101111000001111100", 
    92 => "00111101011001010000100100111001", 
    93 => "00111100110111110100000110101111", 
    94 => "10111100111011110111001111000001", 
    95 => "10111101000010011110010101011100", 
    96 => "00111011001100001111001001111100", 
    97 => "00111101011000010010001011111011", 
    98 => "00111010000010010001100111110000", 
    99 => "10111101110001101011110111110101", 
    100 => "10111110000110011111101111100111", 
    101 => "10111101100010010000001011011110", 
    102 => "00111101110101001100001010110101", 
    103 => "00111110100000111101110010001100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_up_L2_WEIGHTS_11 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_up_L2_WEIGHTS_11 is
    component L3_up_L2_WEIGHTS_11_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_up_L2_WEIGHTS_11_rom_U :  component L3_up_L2_WEIGHTS_11_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


