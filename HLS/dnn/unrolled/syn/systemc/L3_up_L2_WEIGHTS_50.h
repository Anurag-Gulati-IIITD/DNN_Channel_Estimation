// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __L3_up_L2_WEIGHTS_50_H__
#define __L3_up_L2_WEIGHTS_50_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct L3_up_L2_WEIGHTS_50_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 104;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(L3_up_L2_WEIGHTS_50_ram) {
        ram[0] = "0b10111101000101001001000011100110";
        ram[1] = "0b10111101110001101001011100101001";
        ram[2] = "0b10111101100010100111000001001100";
        ram[3] = "0b00111101000001111011000100111010";
        ram[4] = "0b00111101110010111010101001011000";
        ram[5] = "0b00111101101011010110010101011110";
        ram[6] = "0b00111100000101100010110011111110";
        ram[7] = "0b10111101101000110111010110000110";
        ram[8] = "0b10111101110011110110101101011101";
        ram[9] = "0b10111100101010111010100111010010";
        ram[10] = "0b00111101011101101101011001010110";
        ram[11] = "0b00111101101111010001000000101100";
        ram[12] = "0b00111101001101111000001001001101";
        ram[13] = "0b10111101001111001110101001101100";
        ram[14] = "0b10111101100010011100001111001110";
        ram[15] = "0b10111101001001100011000111111001";
        ram[16] = "0b00111101001001110011111101110101";
        ram[17] = "0b00111101011000011010110101100100";
        ram[18] = "0b00111100010110111000001101001001";
        ram[19] = "0b10111100110100100100011111001011";
        ram[20] = "0b10111101100111110101100111001101";
        ram[21] = "0b10111100100101001111000001010010";
        ram[22] = "0b00111101011000110111011110011111";
        ram[23] = "0b00111101101001001001011101110100";
        ram[24] = "0b00111101000110001010111010111000";
        ram[25] = "0b10111101010100011001001001100100";
        ram[26] = "0b10111101100100100000010010110000";
        ram[27] = "0b10111011000010001110011110011011";
        ram[28] = "0b00111101101000100100110001000000";
        ram[29] = "0b00111101101000111010111010101011";
        ram[30] = "0b00111101000011010010001011001001";
        ram[31] = "0b10111101001001110000000110010111";
        ram[32] = "0b10111101110001011001101001110100";
        ram[33] = "0b10111101100110001101101011000010";
        ram[34] = "0b00111010101000011011111000101011";
        ram[35] = "0b00111101011011111100100110111100";
        ram[36] = "0b00111101110000001000000011111010";
        ram[37] = "0b00111101010101111011110001111111";
        ram[38] = "0b10111101010001001100111100000111";
        ram[39] = "0b10111101110000111011001111101010";
        ram[40] = "0b10111101101010100001100010111101";
        ram[41] = "0b10111100000111100011100001100101";
        ram[42] = "0b00111101101001111000111010011111";
        ram[43] = "0b00111101110010100000000000011001";
        ram[44] = "0b00111101000101010001011100011110";
        ram[45] = "0b10111101010101010011110011011110";
        ram[46] = "0b10111101101101001100101110011111";
        ram[47] = "0b10111101010001101001011100101001";
        ram[48] = "0b00111100100111010101111001001010";
        ram[49] = "0b00111101010111001111010101101111";
        ram[50] = "0b00111101001000000000011111011101";
        ram[51] = "0b10111011111000011010001111110100";
        ram[52] = "0b10111101110000100101110110001101";
        ram[53] = "0b10111100110110010101110111010101";
        ram[54] = "0b00111101100111100100110011010111";
        ram[55] = "0b00111101110101101111111000101110";
        ram[56] = "0b00111101000010001010000101011010";
        ram[57] = "0b10111101011010111011011101110100";
        ram[58] = "0b10111101110110011111110000101011";
        ram[59] = "0b10111101011010001001001000100101";
        ram[60] = "0b00111100111001011010111111110011";
        ram[61] = "0b00111101110100111001110100011011";
        ram[62] = "0b00111101100010000010011100110001";
        ram[63] = "0b10111100101100110101000010001111";
        ram[64] = "0b10111101100111001011001101011111";
        ram[65] = "0b10111101011111000011101101001111";
        ram[66] = "0b00111100000001001000011110111010";
        ram[67] = "0b00111101010101001101101001001101";
        ram[68] = "0b00111101010110011110110001110000";
        ram[69] = "0b10111100011101110001011001001100";
        ram[70] = "0b10111101010100000111010000100001";
        ram[71] = "0b10111101010110101000110111101011";
        ram[72] = "0b00111100001010000101000000010110";
        ram[73] = "0b00111101011100010101011100100110";
        ram[74] = "0b00111101011010011000100010010000";
        ram[75] = "0b00111011010110001110110010010110";
        ram[76] = "0b10111101101000111000001110101110";
        ram[77] = "0b10111101101001101000101000001101";
        ram[78] = "0b00111101011001101100001010101101";
        ram[79] = "0b00111101110111000010111101000000";
        ram[80] = "0b00111101011100110001010011001011";
        ram[81] = "0b10111100100011101100001100010001";
        ram[82] = "0b10111101101001101010011001011101";
        ram[83] = "0b10111101110001111001110101001110";
        ram[84] = "0b10111101000010101010001100100111";
        ram[85] = "0b00111101100001110111111011100101";
        ram[86] = "0b00111101101110111000001101001001";
        ram[87] = "0b00111101011100101101000110101111";
        ram[88] = "0b10111100011101110111001010010011";
        ram[89] = "0b10111101011111011000111100001100";
        ram[90] = "0b10111101101111010100111010010000";
        ram[91] = "0b10111100101001111001011110001001";
        ram[92] = "0b00111101011001001100011000011110";
        ram[93] = "0b00111101110101011001111011101001";
        ram[94] = "0b00111101011001110010101110001000";
        ram[95] = "0b10111100010111101011010100101101";
        ram[96] = "0b10111101101110011111010101011010";
        ram[97] = "0b10111101100001000110001110001101";
        ram[98] = "0b10111100000101010110110000001101";
        ram[99] = "0b00111101010001010100110011011011";
        ram[100] = "0b00111101100101100110100011000010";
        ram[101] = "0b00111100101000010100110011101100";
        ram[102] = "0b10111101001101111001000011111011";
        ram[103] = "0b10111101011000111000011001001101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(L3_up_L2_WEIGHTS_50) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 104;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


L3_up_L2_WEIGHTS_50_ram* meminst;


SC_CTOR(L3_up_L2_WEIGHTS_50) {
meminst = new L3_up_L2_WEIGHTS_50_ram("L3_up_L2_WEIGHTS_50_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~L3_up_L2_WEIGHTS_50() {
    delete meminst;
}


};//endmodule
#endif
