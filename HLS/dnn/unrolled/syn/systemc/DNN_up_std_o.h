// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __DNN_up_std_o_H__
#define __DNN_up_std_o_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct DNN_up_std_o_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 104;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(DNN_up_std_o_ram) {
        ram[0] = "0b00111111001101001001010010100011";
        ram[1] = "0b00111111001101100110100100010110";
        ram[2] = "0b00111111001101110010110111100100";
        ram[3] = "0b00111111001101011011100111011000";
        ram[4] = "0b00111111001101001101111101011001";
        ram[5] = "0b00111111001101100001010100100011";
        ram[6] = "0b00111111001101110000101011110110";
        ram[7] = "0b00111111001101100011100010101000";
        ram[8] = "0b00111111001101010101010010111001";
        ram[9] = "0b00111111001101011110100110101111";
        ram[10] = "0b00111111001101101100010011000110";
        ram[11] = "0b00111111001101100110011111101000";
        ram[12] = "0b00111111001101011001111010010101";
        ram[13] = "0b00111111001101011110010111110011";
        ram[14] = "0b00111111001101101010011110111101";
        ram[15] = "0b00111111001101100101101101000010";
        ram[16] = "0b00111111001101011000101100101111";
        ram[17] = "0b00111111001101011110000100011010";
        ram[18] = "0b00111111001101101011111101110111";
        ram[19] = "0b00111111001101100100100111110101";
        ram[20] = "0b00111111001101010011011001100001";
        ram[21] = "0b00111111001101011011000011011110";
        ram[22] = "0b00111111001101101111010111001011";
        ram[23] = "0b00111111001101100111111010010101";
        ram[24] = "0b00111111001101001111100101101110";
        ram[25] = "0b00111111001101010101011100000100";
        ram[26] = "0b00111111001101110000000100110010";
        ram[27] = "0b00111111001101010001011000110011";
        ram[28] = "0b00111111001101001110011101101000";
        ram[29] = "0b00111111001101101110010010011111";
        ram[30] = "0b00111111001101110110111000101111";
        ram[31] = "0b00111111001101010111101111001000";
        ram[32] = "0b00111111001101000111100111110110";
        ram[33] = "0b00111111001101100001100101000100";
        ram[34] = "0b00111111001101110101010000111011";
        ram[35] = "0b00111111001101011111101010011000";
        ram[36] = "0b00111111001101000101010000000100";
        ram[37] = "0b00111111001101010000010010000001";
        ram[38] = "0b00111111001101101010110000100001";
        ram[39] = "0b00111111001101101000000111001011";
        ram[40] = "0b00111111001101001100101011100110";
        ram[41] = "0b00111111001101000100000111101110";
        ram[42] = "0b00111111001101011100100101110001";
        ram[43] = "0b00111111001101101111001100001010";
        ram[44] = "0b00111111001101011100110100011100";
        ram[45] = "0b00111111001101000010110011010100";
        ram[46] = "0b00111111001101001111000111000011";
        ram[47] = "0b00111111001101101111100100000001";
        ram[48] = "0b00111111001101101100110000111110";
        ram[49] = "0b00111111001101001010010111110000";
        ram[50] = "0b00111111001101000100010010111111";
        ram[51] = "0b00111111001101100101111101010010";
        ram[52] = "0b00111111001101110001011101101010";
        ram[53] = "0b00111111001101010101111000011000";
        ram[54] = "0b00111111001101001010111100111110";
        ram[55] = "0b00111111001101100011101100100101";
        ram[56] = "0b00111111001101110010011100000011";
        ram[57] = "0b00111111001101100000001110000010";
        ram[58] = "0b00111111001101010001101001010100";
        ram[59] = "0b00111111001101011111100110001011";
        ram[60] = "0b00111111001101101110011000110010";
        ram[61] = "0b00111111001101100101100110011111";
        ram[62] = "0b00111111001101011000001110100101";
        ram[63] = "0b00111111001101011110010010010011";
        ram[64] = "0b00111111001101101010111011110011";
        ram[65] = "0b00111111001101100110011010101010";
        ram[66] = "0b00111111001101011010000011001111";
        ram[67] = "0b00111111001101011110011100100001";
        ram[68] = "0b00111111001101101010111000011001";
        ram[69] = "0b00111111001101100100111000111000";
        ram[70] = "0b00111111001101010110010000001111";
        ram[71] = "0b00111111001101011100111101000110";
        ram[72] = "0b00111111001101101101100010110010";
        ram[73] = "0b00111111001101100101100001100000";
        ram[74] = "0b00111111001101010000111100001111";
        ram[75] = "0b00111111001101011000011110110101";
        ram[76] = "0b00111111001101110000111111110001";
        ram[77] = "0b00111111001101101011101001011010";
        ram[78] = "0b00111111001101010010000011110011";
        ram[79] = "0b00111111001101110001001001001101";
        ram[80] = "0b00111111001101110100001011101110";
        ram[81] = "0b00111111001101010100001101001010";
        ram[82] = "0b00111111001101001010110101111001";
        ram[83] = "0b00111111001101101000111111110011";
        ram[84] = "0b00111111001101110111010110100111";
        ram[85] = "0b00111111001101011011100111000111";
        ram[86] = "0b00111111001101000101011111000001";
        ram[87] = "0b00111111001101011000111010101000";
        ram[88] = "0b00111111001101110000110110010101";
        ram[89] = "0b00111111001101100011110110110100";
        ram[90] = "0b00111111001101000111100101001111";
        ram[91] = "0b00111111001101001001000000101110";
        ram[92] = "0b00111111001101100011110001110101";
        ram[93] = "0b00111111001101101100000110100000";
        ram[94] = "0b00111111001101010100000110110111";
        ram[95] = "0b00111111001101000010000101001011";
        ram[96] = "0b00111111001101010101101000001000";
        ram[97] = "0b00111111001101110000100100110001";
        ram[98] = "0b00111111001101100101011101100100";
        ram[99] = "0b00111111001101000101110001111001";
        ram[100] = "0b00111111001101001001001110100111";
        ram[101] = "0b00111111001101101011111010001100";
        ram[102] = "0b00111111001101110001110110000010";
        ram[103] = "0b00111111001101001111111111001001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(DNN_up_std_o) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 104;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


DNN_up_std_o_ram* meminst;


SC_CTOR(DNN_up_std_o) {
meminst = new DNN_up_std_o_ram("DNN_up_std_o_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~DNN_up_std_o() {
    delete meminst;
}


};//endmodule
#endif
