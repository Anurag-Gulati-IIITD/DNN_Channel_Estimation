// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __L3_up_L2_WEIGHTS_0_H__
#define __L3_up_L2_WEIGHTS_0_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct L3_up_L2_WEIGHTS_0_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 104;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(L3_up_L2_WEIGHTS_0_ram) {
        ram[0] = "0b00111011001010100110010011000011";
        ram[1] = "0b00111011111100000011000001111111";
        ram[2] = "0b00111011010110010101000101000000";
        ram[3] = "0b00111010101000110111001001100000";
        ram[4] = "0b10111011110111001111110011000110";
        ram[5] = "0b10111011011111010110110101111111";
        ram[6] = "0b10111100010010100111110101100111";
        ram[7] = "0b10111011000010010110110111010010";
        ram[8] = "0b10111011001011011110111010111011";
        ram[9] = "0b10111001111001100010100110010101";
        ram[10] = "0b00111011110000101010010001010101";
        ram[11] = "0b00111100001011100100111100110011";
        ram[12] = "0b00111011000001010010101101001110";
        ram[13] = "0b10111010110001010110010011111001";
        ram[14] = "0b10111100000010010001100111110000";
        ram[15] = "0b00111010110001010100001101101100";
        ram[16] = "0b00111011000010011000111101100000";
        ram[17] = "0b00111010101001011000101100111111";
        ram[18] = "0b00111010011001001101101000001010";
        ram[19] = "0b10111100001010000000010010010110";
        ram[20] = "0b10111010010000010111011001010111";
        ram[21] = "0b10111010110101011110100011010101";
        ram[22] = "0b00111010010001000001010101101110";
        ram[23] = "0b00111100001010001000001001101011";
        ram[24] = "0b00111010100101111100100000001000";
        ram[25] = "0b10111011010000000011011110010011";
        ram[26] = "0b10111100100111000001011100100010";
        ram[27] = "0b10111011010110011100011010110000";
        ram[28] = "0b00111011100100001001101011101101";
        ram[29] = "0b00111100010100011110000100001001";
        ram[30] = "0b00111100010010110000001110011111";
        ram[31] = "0b10111001011001011010001101011101";
        ram[32] = "0b00111011011101111001100001010010";
        ram[33] = "0b10111001101100110100111001110111";
        ram[34] = "0b10111011100100000111100101011111";
        ram[35] = "0b00111011010100101110010100010101";
        ram[36] = "0b10111010100111110100000010100011";
        ram[37] = "0b10111010111011010101111100010100";
        ram[38] = "0b00111011101111100101000100001001";
        ram[39] = "0b00111011011110101011110110100001";
        ram[40] = "0b00111011010111110111101001001110";
        ram[41] = "0b10111011000001001101011101101011";
        ram[42] = "0b10111100000000001100101101101100";
        ram[43] = "0b00111010010100101100001110000111";
        ram[44] = "0b00111100010111010010001010000101";
        ram[45] = "0b00111100010001000111010111100110";
        ram[46] = "0b10111011110111010010111100011011";
        ram[47] = "0b10111100100111101010110111010110";
        ram[48] = "0b10111100101001000001001111011011";
        ram[49] = "0b10111010100110111001010100011100";
        ram[50] = "0b00111100101100111110000101000011";
        ram[51] = "0b00111100110001001000111100010001";
        ram[52] = "0b00111100100110011001111111100100";
        ram[53] = "0b00111011110101110100000011000100";
        ram[54] = "0b00111010100010111101101010010100";
        ram[55] = "0b10111100000111010001001011001011";
        ram[56] = "0b10111011101101101010111001111101";
        ram[57] = "0b10111011100110011110100101001011";
        ram[58] = "0b00111011000010101011110101011110";
        ram[59] = "0b00111010110111000011001101110010";
        ram[60] = "0b00111100000001011101011101000101";
        ram[61] = "0b00111011111011000001011111101100";
        ram[62] = "0b00111100001101000011100101011000";
        ram[63] = "0b00111010110110000010001101000010";
        ram[64] = "0b10111011110001100000010001011100";
        ram[65] = "0b10111011101001101111001111110101";
        ram[66] = "0b10111011011111111110101100000111";
        ram[67] = "0b00111011110111101010100010010111";
        ram[68] = "0b00111011010101111100111101011111";
        ram[69] = "0b00111011100110010011000010111110";
        ram[70] = "0b10111011101101110000101011000100";
        ram[71] = "0b00111001000011001000001001011010";
        ram[72] = "0b00111010111000001110101101101000";
        ram[73] = "0b00111100001100001101100101010001";
        ram[74] = "0b00111010110010000100011100101100";
        ram[75] = "0b10111011101110110111011100111010";
        ram[76] = "0b10111100001100100111100010001110";
        ram[77] = "0b10111100000100110010110101101111";
        ram[78] = "0b00111011100101111111000111111010";
        ram[79] = "0b00111011111000010101100001110101";
        ram[80] = "0b00111011101101111011001010001001";
        ram[81] = "0b10111010110101001111110111110100";
        ram[82] = "0b10111011100111001110010010101000";
        ram[83] = "0b10111011101111100111001010010111";
        ram[84] = "0b10111011010011000000001101111001";
        ram[85] = "0b10111011010100101111010111011100";
        ram[86] = "0b10111001101000010111101100001111";
        ram[87] = "0b00111001010110110010011100000011";
        ram[88] = "0b00111011101000110100000000001100";
        ram[89] = "0b10111100000011101111001101001101";
        ram[90] = "0b10111011100000001010111000010000";
        ram[91] = "0b10111001111110010000100101101100";
        ram[92] = "0b10111011111011010011010100100010";
        ram[93] = "0b10111100000001111000011101001000";
        ram[94] = "0b00111011001011011011110001100110";
        ram[95] = "0b00111011101100010001110001101101";
        ram[96] = "0b00111010100101111000010011101100";
        ram[97] = "0b10111100010001110101110001001011";
        ram[98] = "0b10111100010110001110010000110010";
        ram[99] = "0b10111011111110000011011110110101";
        ram[100] = "0b00111100011001010111100101101100";
        ram[101] = "0b00111100111100001110010011011010";
        ram[102] = "0b00111100011000110100011101100011";
        ram[103] = "0b10111100000000100110101010101001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(L3_up_L2_WEIGHTS_0) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 104;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


L3_up_L2_WEIGHTS_0_ram* meminst;


SC_CTOR(L3_up_L2_WEIGHTS_0) {
meminst = new L3_up_L2_WEIGHTS_0_ram("L3_up_L2_WEIGHTS_0_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~L3_up_L2_WEIGHTS_0() {
    delete meminst;
}


};//endmodule
#endif
