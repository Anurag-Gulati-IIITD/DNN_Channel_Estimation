// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __L3_up_L2_WEIGHTS_2_H__
#define __L3_up_L2_WEIGHTS_2_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct L3_up_L2_WEIGHTS_2_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 104;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(L3_up_L2_WEIGHTS_2_ram) {
        ram[0] = "0b10111001001011110001110010111001";
        ram[1] = "0b00111010101010011011110011111101";
        ram[2] = "0b00111011001011101111101100101011";
        ram[3] = "0b00111010101001011100111001011011";
        ram[4] = "0b00111010000101001010001010111010";
        ram[5] = "0b00111001111110110010001001001011";
        ram[6] = "0b10111011010011001111111100100010";
        ram[7] = "0b10111011101000001000011111001010";
        ram[8] = "0b10111011101000010000111000000010";
        ram[9] = "0b10111010100111000001101101010100";
        ram[10] = "0b00111011100001000110000111111010";
        ram[11] = "0b00111011111000111101010111111110";
        ram[12] = "0b00111011110011101001101000101100";
        ram[13] = "0b10111010101001011010110011001101";
        ram[14] = "0b10111011101110001110000010000111";
        ram[15] = "0b10111011101110111001100011001000";
        ram[16] = "0b10111011010000110101110011100010";
        ram[17] = "0b00111011011111001100010110111001";
        ram[18] = "0b00111011101110110000101000101101";
        ram[19] = "0b00111010110110101110001111100111";
        ram[20] = "0b10111010111000110000010001000111";
        ram[21] = "0b10111011100011001010110001001011";
        ram[22] = "0b10111010101110010001001011011100";
        ram[23] = "0b00111010110011010110001111001100";
        ram[24] = "0b00111010101000000000100111110110";
        ram[25] = "0b10111000111101110111011011000101";
        ram[26] = "0b10111011011100111100101100111110";
        ram[27] = "0b10111001110100100011110101001111";
        ram[28] = "0b00111011010001010110010011111001";
        ram[29] = "0b00111011000011111001011011100001";
        ram[30] = "0b00111011000101111000010011101100";
        ram[31] = "0b10111010101001010000010100001000";
        ram[32] = "0b10111011001100010010010011010001";
        ram[33] = "0b10111010110010100001110011101111";
        ram[34] = "0b10111001100011111010011110101000";
        ram[35] = "0b00111000110001110011101010111101";
        ram[36] = "0b00111010010101000001001100010010";
        ram[37] = "0b00111010101111010000000101111110";
        ram[38] = "0b00111010110010111010111110010110";
        ram[39] = "0b00111011100001111000011101001000";
        ram[40] = "0b00111011000010001110011110011011";
        ram[41] = "0b10111011000010000110000101100011";
        ram[42] = "0b10111011101010011000101010101000";
        ram[43] = "0b10111011110001000011111101100000";
        ram[44] = "0b10111011001111101011010110110011";
        ram[45] = "0b00111011000101001000000100101100";
        ram[46] = "0b00111011101001111001001101010111";
        ram[47] = "0b00111011011000011010001111110100";
        ram[48] = "0b00111010110000000100100001011010";
        ram[49] = "0b10111011010010100011111001111101";
        ram[50] = "0b10111011001111101011010110110011";
        ram[51] = "0b10111010101000011001110010011101";
        ram[52] = "0b00111011011001011100010011101011";
        ram[53] = "0b00111010010111011100011000011001";
        ram[54] = "0b10111010100010000101000010011100";
        ram[55] = "0b00111010010000010011001100111100";
        ram[56] = "0b10111011001100101010011010110001";
        ram[57] = "0b10111011010010001001101100001111";
        ram[58] = "0b10111011011101001000001111001011";
        ram[59] = "0b10111010111100111110110011001100";
        ram[60] = "0b00111011011101101011111000111000";
        ram[61] = "0b00111011111011110100010110011110";
        ram[62] = "0b00111011110101001001100101001010";
        ram[63] = "0b00111010110001100111000101101001";
        ram[64] = "0b10111011101000111101011100001010";
        ram[65] = "0b10111011110111000101110101100100";
        ram[66] = "0b10111011101001111001001101010111";
        ram[67] = "0b00111011001101101001010101010011";
        ram[68] = "0b00111011101001010110000101001110";
        ram[69] = "0b00111011100111101111010100100011";
        ram[70] = "0b00111010101001011100111001011011";
        ram[71] = "0b10111011100111010001011011111101";
        ram[72] = "0b10111011100100100010110110010101";
        ram[73] = "0b00111001010111000011001101110010";
        ram[74] = "0b00111010001101111000000000110100";
        ram[75] = "0b00111011000001101001110001100111";
        ram[76] = "0b10111010111100001000010001100010";
        ram[77] = "0b10111011100001101011110111110101";
        ram[78] = "0b00111010100101001110010111010110";
        ram[79] = "0b00111011001111000111101101000110";
        ram[80] = "0b00111011000100110011000110100001";
        ram[81] = "0b10111010100000110111011100011000";
        ram[82] = "0b10111011010010000110100010111010";
        ram[83] = "0b10111011000111011010110111111011";
        ram[84] = "0b10111010110000000100100001011010";
        ram[85] = "0b00111010100110110011000001110011";
        ram[86] = "0b00111011001100011000100101111010";
        ram[87] = "0b00111011000011010001100101011001";
        ram[88] = "0b00111010101110010001001011011100";
        ram[89] = "0b00111011000001011111010010100001";
        ram[90] = "0b10111001110111010011111111100010";
        ram[91] = "0b10111010101100001000110111010010";
        ram[92] = "0b10111011001111000110101001111111";
        ram[93] = "0b10111011101111101111100011001111";
        ram[94] = "0b10111011001011011110111010111011";
        ram[95] = "0b00111011010001000111101000011000";
        ram[96] = "0b00111011110110010110101001101010";
        ram[97] = "0b00111011100101001101010100001111";
        ram[98] = "0b00111010111101000010111111101000";
        ram[99] = "0b10111011000001111110101111110010";
        ram[100] = "0b10111011101100011000100101111010";
        ram[101] = "0b10111011001001001111010001000001";
        ram[102] = "0b00111010000100110001000000010011";
        ram[103] = "0b00111011001100001000110111010010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(L3_up_L2_WEIGHTS_2) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 104;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


L3_up_L2_WEIGHTS_2_ram* meminst;


SC_CTOR(L3_up_L2_WEIGHTS_2) {
meminst = new L3_up_L2_WEIGHTS_2_ram("L3_up_L2_WEIGHTS_2_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~L3_up_L2_WEIGHTS_2() {
    delete meminst;
}


};//endmodule
#endif
