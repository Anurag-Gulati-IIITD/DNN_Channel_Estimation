// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __normalize_up_meanbkb_H__
#define __normalize_up_meanbkb_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct normalize_up_meanbkb_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 104;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(normalize_up_meanbkb_ram) {
        ram[0] = "0b10111011001101111001000011111011";
        ram[1] = "0b10111010101011001110001001001100";
        ram[2] = "0b00111010001000100100010001100011";
        ram[3] = "0b00111011000110010011100100100010";
        ram[4] = "0b00111011010101001010101000010001";
        ram[5] = "0b00111011001111100010111101111011";
        ram[6] = "0b00111010101000100110010111110001";
        ram[7] = "0b10111010100111110100000010100011";
        ram[8] = "0b10111011011000101000111011010110";
        ram[9] = "0b10111011100010101001001101101100";
        ram[10] = "0b10111011001111111000111111001101";
        ram[11] = "0b00110111111110111010100010000010";
        ram[12] = "0b00111011010100001101110011111101";
        ram[13] = "0b00111011100111110111001011110111";
        ram[14] = "0b00111011100001101011010110010001";
        ram[15] = "0b00111010101000111101011100001010";
        ram[16] = "0b10111011000100101111111101001100";
        ram[17] = "0b10111011100101110010100010100110";
        ram[18] = "0b10111011100110110001111110101100";
        ram[19] = "0b10111011001010100100001100110101";
        ram[20] = "0b00111010010001101111011110100001";
        ram[21] = "0b00111011011100010101111001111101";
        ram[22] = "0b00111011100111110111001011110111";
        ram[23] = "0b00111011011101100100100011000111";
        ram[24] = "0b00111010011100110100010100000111";
        ram[25] = "0b10111011000101011101000010110111";
        ram[26] = "0b10111011100100100010110110010101";
        ram[27] = "0b10111011001001000011101110110100";
        ram[28] = "0b00111010000101011111001001000101";
        ram[29] = "0b00111011010111100101110100011000";
        ram[30] = "0b00111011100110011001010101101000";
        ram[31] = "0b00111011011111001110011101000111";
        ram[32] = "0b00111010101000110010111101000101";
        ram[33] = "0b10111011000010001000001011110001";
        ram[34] = "0b10111011100101001000000100101100";
        ram[35] = "0b10111011100111111010110110110000";
        ram[36] = "0b10111011001100111101010010101110";
        ram[37] = "0b00111010011001001101101000001010";
        ram[38] = "0b00111011100001100110101000010010";
        ram[39] = "0b00111011101010010010010111111111";
        ram[40] = "0b00111011011000110110100011110001";
        ram[41] = "0b00110110111010101110000110001011";
        ram[42] = "0b10111011010100110011100011111000";
        ram[43] = "0b10111011100100100001010001101010";
        ram[44] = "0b10111011010101101101001110110111";
        ram[45] = "0b10111010001111011000011110110101";
        ram[46] = "0b00111010110110111111000001010110";
        ram[47] = "0b00111011001101100000111100011011";
        ram[48] = "0b00111011001001100101010010010011";
        ram[49] = "0b00111010110001101101011000010011";
        ram[50] = "0b00111001101101100111001111000101";
        ram[51] = "0b10111010001111011100101011010001";
        ram[52] = "0b00111010110001101101011000010011";
        ram[53] = "0b00111011001111010100010010011010";
        ram[54] = "0b00111011010000101100010111100011";
        ram[55] = "0b00111011000001010011110000010101";
        ram[56] = "0b00111001110000010111011001010111";
        ram[57] = "0b10111010111000101100000100101011";
        ram[58] = "0b10111011011000100110110101001000";
        ram[59] = "0b10111011011010010100111011100100";
        ram[60] = "0b10111011000100001101010110100110";
        ram[61] = "0b00111010001101110011110100011001";
        ram[62] = "0b00111011011000110000010001000111";
        ram[63] = "0b00111011100110101101110010010000";
        ram[64] = "0b00111011011011111010101001000111";
        ram[65] = "0b00111010001100001010111101100000";
        ram[66] = "0b10111011001100100111010001011100";
        ram[67] = "0b10111011101000001110110001110100";
        ram[68] = "0b10111011100101010101001011100011";
        ram[69] = "0b10111010111100110110011010010101";
        ram[70] = "0b00111010110100110010100000110001";
        ram[71] = "0b00111011100010000010011010101011";
        ram[72] = "0b00111011101000011100011010001111";
        ram[73] = "0b00111011010011011111101011001010";
        ram[74] = "0b00111001001000000110111010100000";
        ram[75] = "0b10111011010000101001001110001110";
        ram[76] = "0b10111011100101111111000111111010";
        ram[77] = "0b10111011100001101000001100111100";
        ram[78] = "0b00111010110010010101001110011100";
        ram[79] = "0b00111011011111101000101010110101";
        ram[80] = "0b00111011100101010110110000001101";
        ram[81] = "0b00111011010101110100100100101000";
        ram[82] = "0b00111001110101011110100011010101";
        ram[83] = "0b10111011001110000100100110001000";
        ram[84] = "0b10111011100101011110000101111110";
        ram[85] = "0b10111011100100110110001111110101";
        ram[86] = "0b10111011000000100110101010101001";
        ram[87] = "0b00111010101100111111011000111100";
        ram[88] = "0b00111011100011001100010101110110";
        ram[89] = "0b00111011101001011100111001011011";
        ram[90] = "0b00111011010011100011110111100110";
        ram[91] = "0b10111001111101110111011011000101";
        ram[92] = "0b10111011011100000101001000001101";
        ram[93] = "0b10111011100111111100011011011010";
        ram[94] = "0b10111011011010000110010000000010";
        ram[95] = "0b10111001111000011111011111010111";
        ram[96] = "0b00111011001010100010000110100111";
        ram[97] = "0b00111011011011101001110111011000";
        ram[98] = "0b00111011010001011100100110100011";
        ram[99] = "0b00111010100001101001110001100111";
        ram[100] = "0b10111010001000110000110110110111";
        ram[101] = "0b10111010110111011000001011111101";
        ram[102] = "0b10111011000001001011010111011101";
        ram[103] = "0b10111010111100111110110011001100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(normalize_up_meanbkb) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 104;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


normalize_up_meanbkb_ram* meminst;


SC_CTOR(normalize_up_meanbkb) {
meminst = new normalize_up_meanbkb_ram("normalize_up_meanbkb_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~normalize_up_meanbkb() {
    delete meminst;
}


};//endmodule
#endif
