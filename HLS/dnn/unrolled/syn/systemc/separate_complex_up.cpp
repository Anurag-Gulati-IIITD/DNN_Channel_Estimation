// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "separate_complex_up.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic separate_complex_up::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic separate_complex_up::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> separate_complex_up::ap_ST_fsm_state1 = "1";
const sc_lv<3> separate_complex_up::ap_ST_fsm_state2 = "10";
const sc_lv<3> separate_complex_up::ap_ST_fsm_state3 = "100";
const sc_lv<32> separate_complex_up::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> separate_complex_up::ap_const_lv32_1 = "1";
const sc_lv<1> separate_complex_up::ap_const_lv1_0 = "0";
const sc_lv<6> separate_complex_up::ap_const_lv6_0 = "000000";
const sc_lv<6> separate_complex_up::ap_const_lv6_34 = "110100";
const sc_lv<6> separate_complex_up::ap_const_lv6_1 = "1";
const sc_lv<32> separate_complex_up::ap_const_lv32_20 = "100000";
const sc_lv<32> separate_complex_up::ap_const_lv32_3F = "111111";
const sc_lv<7> separate_complex_up::ap_const_lv7_34 = "110100";
const sc_lv<32> separate_complex_up::ap_const_lv32_2 = "10";
const sc_lv<1> separate_complex_up::ap_const_lv1_1 = "1";
const bool separate_complex_up::ap_const_boolean_1 = true;

separate_complex_up::separate_complex_up(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_LS_stream_TDATA_blk_n);
    sensitive << ( LS_stream_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln257_fu_96_p2 );

    SC_METHOD(thread_LS_stream_TREADY);
    sensitive << ( LS_stream_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln257_fu_96_p2 );

    SC_METHOD(thread_add_ln261_fu_145_p2);
    sensitive << ( zext_ln257_fu_108_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state2);
    sensitive << ( LS_stream_TVALID );
    sensitive << ( icmp_ln257_fu_96_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_i_fu_102_p2);
    sensitive << ( i_0_reg_85 );

    SC_METHOD(thread_icmp_ln257_fu_96_p2);
    sensitive << ( LS_stream_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln257_fu_96_p2 );
    sensitive << ( i_0_reg_85 );

    SC_METHOD(thread_sep_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln260_fu_140_p1 );

    SC_METHOD(thread_sep_address1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln261_fu_151_p1 );

    SC_METHOD(thread_sep_ce0);
    sensitive << ( LS_stream_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln257_fu_96_p2 );

    SC_METHOD(thread_sep_ce1);
    sensitive << ( LS_stream_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln257_fu_96_p2 );

    SC_METHOD(thread_sep_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( trunc_ln13_fu_116_p1 );

    SC_METHOD(thread_sep_d1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_data_M_imag_loa_fu_125_p4 );

    SC_METHOD(thread_sep_we0);
    sensitive << ( LS_stream_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln257_fu_96_p2 );

    SC_METHOD(thread_sep_we1);
    sensitive << ( LS_stream_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln257_fu_96_p2 );

    SC_METHOD(thread_tmp_data_M_imag_loa_fu_125_p4);
    sensitive << ( LS_stream_TDATA );

    SC_METHOD(thread_trunc_ln13_fu_116_p1);
    sensitive << ( LS_stream_TDATA );

    SC_METHOD(thread_zext_ln257_fu_108_p1);
    sensitive << ( i_0_reg_85 );

    SC_METHOD(thread_zext_ln260_fu_140_p1);
    sensitive << ( i_0_reg_85 );

    SC_METHOD(thread_zext_ln261_fu_151_p1);
    sensitive << ( add_ln261_fu_145_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( LS_stream_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln257_fu_96_p2 );

    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "separate_complex_up_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, LS_stream_TDATA, "(port)LS_stream_TDATA");
    sc_trace(mVcdFile, LS_stream_TVALID, "(port)LS_stream_TVALID");
    sc_trace(mVcdFile, LS_stream_TREADY, "(port)LS_stream_TREADY");
    sc_trace(mVcdFile, LS_stream_TLAST, "(port)LS_stream_TLAST");
    sc_trace(mVcdFile, sep_address0, "(port)sep_address0");
    sc_trace(mVcdFile, sep_ce0, "(port)sep_ce0");
    sc_trace(mVcdFile, sep_we0, "(port)sep_we0");
    sc_trace(mVcdFile, sep_d0, "(port)sep_d0");
    sc_trace(mVcdFile, sep_address1, "(port)sep_address1");
    sc_trace(mVcdFile, sep_ce1, "(port)sep_ce1");
    sc_trace(mVcdFile, sep_we1, "(port)sep_we1");
    sc_trace(mVcdFile, sep_d1, "(port)sep_d1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, LS_stream_TDATA_blk_n, "LS_stream_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln257_fu_96_p2, "icmp_ln257_fu_96_p2");
    sc_trace(mVcdFile, i_fu_102_p2, "i_fu_102_p2");
    sc_trace(mVcdFile, ap_block_state2, "ap_block_state2");
    sc_trace(mVcdFile, i_0_reg_85, "i_0_reg_85");
    sc_trace(mVcdFile, zext_ln260_fu_140_p1, "zext_ln260_fu_140_p1");
    sc_trace(mVcdFile, zext_ln261_fu_151_p1, "zext_ln261_fu_151_p1");
    sc_trace(mVcdFile, trunc_ln13_fu_116_p1, "trunc_ln13_fu_116_p1");
    sc_trace(mVcdFile, tmp_data_M_imag_loa_fu_125_p4, "tmp_data_M_imag_loa_fu_125_p4");
    sc_trace(mVcdFile, zext_ln257_fu_108_p1, "zext_ln257_fu_108_p1");
    sc_trace(mVcdFile, add_ln261_fu_145_p2, "add_ln261_fu_145_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

separate_complex_up::~separate_complex_up() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void separate_complex_up::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln257_fu_96_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(icmp_ln257_fu_96_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, LS_stream_TVALID.read())))) {
        i_0_reg_85 = i_fu_102_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_85 = ap_const_lv6_0;
    }
}

void separate_complex_up::thread_LS_stream_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln257_fu_96_p2.read(), ap_const_lv1_0))) {
        LS_stream_TDATA_blk_n = LS_stream_TVALID.read();
    } else {
        LS_stream_TDATA_blk_n = ap_const_logic_1;
    }
}

void separate_complex_up::thread_LS_stream_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln257_fu_96_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(icmp_ln257_fu_96_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, LS_stream_TVALID.read())))) {
        LS_stream_TREADY = ap_const_logic_1;
    } else {
        LS_stream_TREADY = ap_const_logic_0;
    }
}

void separate_complex_up::thread_add_ln261_fu_145_p2() {
    add_ln261_fu_145_p2 = (!ap_const_lv7_34.is_01() || !zext_ln257_fu_108_p1.read().is_01())? sc_lv<7>(): (sc_biguint<7>(ap_const_lv7_34) + sc_biguint<7>(zext_ln257_fu_108_p1.read()));
}

void separate_complex_up::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void separate_complex_up::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void separate_complex_up::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void separate_complex_up::thread_ap_block_state2() {
    ap_block_state2 = (esl_seteq<1,1,1>(icmp_ln257_fu_96_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, LS_stream_TVALID.read()));
}

void separate_complex_up::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void separate_complex_up::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void separate_complex_up::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void separate_complex_up::thread_i_fu_102_p2() {
    i_fu_102_p2 = (!i_0_reg_85.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_0_reg_85.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void separate_complex_up::thread_icmp_ln257_fu_96_p2() {
    icmp_ln257_fu_96_p2 = (!i_0_reg_85.read().is_01() || !ap_const_lv6_34.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_85.read() == ap_const_lv6_34);
}

void separate_complex_up::thread_sep_address0() {
    sep_address0 =  (sc_lv<7>) (zext_ln260_fu_140_p1.read());
}

void separate_complex_up::thread_sep_address1() {
    sep_address1 =  (sc_lv<7>) (zext_ln261_fu_151_p1.read());
}

void separate_complex_up::thread_sep_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(icmp_ln257_fu_96_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, LS_stream_TVALID.read())))) {
        sep_ce0 = ap_const_logic_1;
    } else {
        sep_ce0 = ap_const_logic_0;
    }
}

void separate_complex_up::thread_sep_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(icmp_ln257_fu_96_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, LS_stream_TVALID.read())))) {
        sep_ce1 = ap_const_logic_1;
    } else {
        sep_ce1 = ap_const_logic_0;
    }
}

void separate_complex_up::thread_sep_d0() {
    sep_d0 = trunc_ln13_fu_116_p1.read();
}

void separate_complex_up::thread_sep_d1() {
    sep_d1 = tmp_data_M_imag_loa_fu_125_p4.read();
}

void separate_complex_up::thread_sep_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln257_fu_96_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(icmp_ln257_fu_96_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, LS_stream_TVALID.read())))) {
        sep_we0 = ap_const_logic_1;
    } else {
        sep_we0 = ap_const_logic_0;
    }
}

void separate_complex_up::thread_sep_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln257_fu_96_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(icmp_ln257_fu_96_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, LS_stream_TVALID.read())))) {
        sep_we1 = ap_const_logic_1;
    } else {
        sep_we1 = ap_const_logic_0;
    }
}

void separate_complex_up::thread_tmp_data_M_imag_loa_fu_125_p4() {
    tmp_data_M_imag_loa_fu_125_p4 = LS_stream_TDATA.read().range(63, 32);
}

void separate_complex_up::thread_trunc_ln13_fu_116_p1() {
    trunc_ln13_fu_116_p1 = LS_stream_TDATA.read().range(32-1, 0);
}

void separate_complex_up::thread_zext_ln257_fu_108_p1() {
    zext_ln257_fu_108_p1 = esl_zext<7,6>(i_0_reg_85.read());
}

void separate_complex_up::thread_zext_ln260_fu_140_p1() {
    zext_ln260_fu_140_p1 = esl_zext<64,6>(i_0_reg_85.read());
}

void separate_complex_up::thread_zext_ln261_fu_151_p1() {
    zext_ln261_fu_151_p1 = esl_zext<64,7>(add_ln261_fu_145_p2.read());
}

void separate_complex_up::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln257_fu_96_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(icmp_ln257_fu_96_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, LS_stream_TVALID.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(icmp_ln257_fu_96_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, LS_stream_TVALID.read())) && esl_seteq<1,1,1>(icmp_ln257_fu_96_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

