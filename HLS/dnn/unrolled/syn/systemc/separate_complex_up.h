// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _separate_complex_up_HH_
#define _separate_complex_up_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct separate_complex_up : public sc_module {
    // Port declarations 18
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<64> > LS_stream_TDATA;
    sc_in< sc_logic > LS_stream_TVALID;
    sc_out< sc_logic > LS_stream_TREADY;
    sc_in< sc_lv<1> > LS_stream_TLAST;
    sc_out< sc_lv<7> > sep_address0;
    sc_out< sc_logic > sep_ce0;
    sc_out< sc_logic > sep_we0;
    sc_out< sc_lv<32> > sep_d0;
    sc_out< sc_lv<7> > sep_address1;
    sc_out< sc_logic > sep_ce1;
    sc_out< sc_logic > sep_we1;
    sc_out< sc_lv<32> > sep_d1;


    // Module declarations
    separate_complex_up(sc_module_name name);
    SC_HAS_PROCESS(separate_complex_up);

    ~separate_complex_up();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > LS_stream_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln257_fu_96_p2;
    sc_signal< sc_lv<6> > i_fu_102_p2;
    sc_signal< bool > ap_block_state2;
    sc_signal< sc_lv<6> > i_0_reg_85;
    sc_signal< sc_lv<64> > zext_ln260_fu_140_p1;
    sc_signal< sc_lv<64> > zext_ln261_fu_151_p1;
    sc_signal< sc_lv<32> > trunc_ln13_fu_116_p1;
    sc_signal< sc_lv<32> > tmp_data_M_imag_loa_fu_125_p4;
    sc_signal< sc_lv<7> > zext_ln257_fu_108_p1;
    sc_signal< sc_lv<7> > add_ln261_fu_145_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<6> ap_const_lv6_34;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_3F;
    static const sc_lv<7> ap_const_lv7_34;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_LS_stream_TDATA_blk_n();
    void thread_LS_stream_TREADY();
    void thread_add_ln261_fu_145_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_block_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i_fu_102_p2();
    void thread_icmp_ln257_fu_96_p2();
    void thread_sep_address0();
    void thread_sep_address1();
    void thread_sep_ce0();
    void thread_sep_ce1();
    void thread_sep_d0();
    void thread_sep_d1();
    void thread_sep_we0();
    void thread_sep_we1();
    void thread_tmp_data_M_imag_loa_fu_125_p4();
    void thread_trunc_ln13_fu_116_p1();
    void thread_zext_ln257_fu_108_p1();
    void thread_zext_ln260_fu_140_p1();
    void thread_zext_ln261_fu_151_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
