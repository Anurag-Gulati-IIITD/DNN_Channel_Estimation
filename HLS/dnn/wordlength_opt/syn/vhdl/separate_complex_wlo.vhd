-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity separate_complex_wlo is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    LS_stream_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    LS_stream_TVALID : IN STD_LOGIC;
    LS_stream_TREADY : OUT STD_LOGIC;
    LS_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    sep_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sep_ce0 : OUT STD_LOGIC;
    sep_we0 : OUT STD_LOGIC;
    sep_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    sep_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    sep_ce1 : OUT STD_LOGIC;
    sep_we1 : OUT STD_LOGIC;
    sep_d1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of separate_complex_wlo is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_34 : STD_LOGIC_VECTOR (5 downto 0) := "110100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv7_34 : STD_LOGIC_VECTOR (6 downto 0) := "0110100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal LS_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln480_fu_105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_85 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln480_reg_165 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_111_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_169 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_phi_mux_i_0_phi_fu_89_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln483_fu_149_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln484_fu_160_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_97_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_101_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_97_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_101_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln16_fu_121_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_M_imag_loa_fu_130_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln480_fu_145_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln484_fu_154_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_97_ce : STD_LOGIC;
    signal grp_fu_101_ce : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component DNN_wlo_sptohp_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    DNN_wlo_sptohp_32bkb_U1 : component DNN_wlo_sptohp_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_97_p0,
        ce => grp_fu_97_ce,
        dout => grp_fu_97_p1);

    DNN_wlo_sptohp_32bkb_U2 : component DNN_wlo_sptohp_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_101_p0,
        ce => grp_fu_101_ce,
        dout => grp_fu_101_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_85_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln480_reg_165 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_reg_85 <= i_reg_169;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_85 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_reg_169 <= i_fu_111_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln480_reg_165 <= icmp_ln480_fu_105_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln480_fu_105_p2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln480_fu_105_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln480_fu_105_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    LS_stream_TDATA_blk_n_assign_proc : process(LS_stream_TVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln480_fu_105_p2)
    begin
        if (((icmp_ln480_fu_105_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            LS_stream_TDATA_blk_n <= LS_stream_TVALID;
        else 
            LS_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    LS_stream_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln480_fu_105_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln480_fu_105_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            LS_stream_TREADY <= ap_const_logic_1;
        else 
            LS_stream_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    add_ln484_fu_154_p2 <= std_logic_vector(unsigned(ap_const_lv7_34) + unsigned(zext_ln480_fu_145_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(LS_stream_TVALID, ap_enable_reg_pp0_iter0, icmp_ln480_fu_105_p2)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln480_fu_105_p2 = ap_const_lv1_0) and (ap_const_logic_0 = LS_stream_TVALID) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(LS_stream_TVALID, ap_enable_reg_pp0_iter0, icmp_ln480_fu_105_p2)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln480_fu_105_p2 = ap_const_lv1_0) and (ap_const_logic_0 = LS_stream_TVALID) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(LS_stream_TVALID, icmp_ln480_fu_105_p2)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((icmp_ln480_fu_105_p2 = ap_const_lv1_0) and (ap_const_logic_0 = LS_stream_TVALID));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln480_fu_105_p2)
    begin
        if ((icmp_ln480_fu_105_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_89_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_0_reg_85, icmp_ln480_reg_165, i_reg_169, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln480_reg_165 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_0_phi_fu_89_p4 <= i_reg_169;
        else 
            ap_phi_mux_i_0_phi_fu_89_p4 <= i_0_reg_85;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_101_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_101_ce <= ap_const_logic_1;
        else 
            grp_fu_101_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_101_p0 <= tmp_data_M_imag_loa_fu_130_p4;

    grp_fu_97_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_97_ce <= ap_const_logic_1;
        else 
            grp_fu_97_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_97_p0 <= trunc_ln16_fu_121_p1;
    i_fu_111_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_89_p4) + unsigned(ap_const_lv6_1));
    icmp_ln480_fu_105_p2 <= "1" when (ap_phi_mux_i_0_phi_fu_89_p4 = ap_const_lv6_34) else "0";
    sep_address0 <= zext_ln483_fu_149_p1(7 - 1 downto 0);
    sep_address1 <= zext_ln484_fu_160_p1(7 - 1 downto 0);

    sep_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sep_ce0 <= ap_const_logic_1;
        else 
            sep_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sep_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sep_ce1 <= ap_const_logic_1;
        else 
            sep_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    sep_d0 <= grp_fu_97_p1;
    sep_d1 <= grp_fu_101_p1;

    sep_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln480_reg_165, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln480_reg_165 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sep_we0 <= ap_const_logic_1;
        else 
            sep_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sep_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln480_reg_165, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln480_reg_165 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sep_we1 <= ap_const_logic_1;
        else 
            sep_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_data_M_imag_loa_fu_130_p4 <= LS_stream_TDATA(63 downto 32);
    trunc_ln16_fu_121_p1 <= LS_stream_TDATA(32 - 1 downto 0);
    zext_ln480_fu_145_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_85),7));
    zext_ln483_fu_149_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_85),64));
    zext_ln484_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln484_fu_154_p2),64));
end behav;
