-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_wlo_L2_WEIGHTSckv_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_wlo_L2_WEIGHTSckv_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1010011011011101", 1 => "0010100110001010", 2 => "0010101101011011", 
    3 => "0010100010101110", 4 => "0010001011110000", 5 => "1001111001100010", 
    6 => "1010000001100110", 7 => "1010001010010000", 8 => "1010100101101001", 
    9 => "1010101100101101", 10 => "1010011000100100", 11 => "0010100101100100", 
    12 => "0010111001100110", 13 => "0010111100101101", 14 => "0010100110010011", 
    15 => "1010101010001110", 16 => "1011000000100101", 17 => "1010111111010011", 
    18 => "1010100011101011", 19 => "0010101001010110", 20 => "0011000000011001", 
    21 => "0011000000000111", 22 => "0010101101110010", 23 => "1010010110011011", 
    24 => "1010111000000001", 25 => "1010111110111101", 26 => "1010000001011001", 
    27 => "0010110011111000", 28 => "0011000000111110", 29 => "0010111110100000", 
    30 => "0010011110011010", 31 => "1010110000100011", 32 => "1011000001011000", 
    33 => "1010111111100100", 34 => "1010100010001010", 35 => "0010110011100000", 
    36 => "0011000010001111", 37 => "0011000000110100", 38 => "0010100111011111", 
    39 => "1010110001100110", 40 => "1011000010100110", 41 => "1011000001110010", 
    42 => "1010100111001110", 43 => "0010110001011000", 44 => "0011000100001010", 
    45 => "0011000001110000", 46 => "0010100011101001", 47 => "1010110110011000", 
    48 => "1011000100010110", 49 => "1010111100110010", 50 => "0010000101001000", 
    51 => "0010111100101111", 52 => "0010110001100010", 53 => "0010101110101100", 
    54 => "0010001101110011", 55 => "1010100001100001", 56 => "1010100000011110", 
    57 => "1010011000110110", 58 => "1010010100110000", 59 => "1010010111110101", 
    60 => "1010000101010010", 61 => "0010011000110100", 62 => "0010110010000000", 
    63 => "0010110111110001", 64 => "0010100010011000", 65 => "1010101000001000", 
    66 => "1010111111001001", 67 => "1010111110010011", 68 => "1010101001001010", 
    69 => "0010110001010010", 70 => "0011000000011011", 71 => "0010111111100111", 
    72 => "0010101000100000", 73 => "1010100110110101", 74 => "1010111011110001", 
    75 => "1011000000100101", 76 => "1010110001110000", 77 => "0010001001000010", 
    78 => "0011000001001111", 79 => "0010111001101110", 80 => "0010010000100000", 
    81 => "1010110100000001", 82 => "1011000001110011", 83 => "1010111110101010", 
    84 => "1010010101100100", 85 => "0010110001111001", 86 => "0011000010010110", 
    87 => "0011000000011000", 88 => "0010100100011111", 89 => "1010110011100001", 
    90 => "1011000011000001", 91 => "1011000001111101", 92 => "1010101001010011", 
    93 => "0010110000001010", 94 => "0011000010110010", 95 => "0011000010001111", 
    96 => "0010100111101010", 97 => "1010110100001011", 98 => "1011000101101001", 
    99 => "1011000001100010", 100 => "1010010111101000", 101 => "0010111011110011", 
    102 => "0011000011000110", 103 => "0010110010101010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_wlo_L2_WEIGHTSckv is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_wlo_L2_WEIGHTSckv is
    component L3_wlo_L2_WEIGHTSckv_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_wlo_L2_WEIGHTSckv_rom_U :  component L3_wlo_L2_WEIGHTSckv_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


