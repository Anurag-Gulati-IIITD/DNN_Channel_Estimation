-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_wlo_L2_WEIGHTSbVr_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_wlo_L2_WEIGHTSbVr_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1001110001111001", 1 => "1001101111110101", 2 => "1001101100011101", 
    3 => "1001110010011001", 4 => "0001100011000010", 5 => "0001110000001110", 
    6 => "0001110100010011", 7 => "0001110101110111", 8 => "1001001011101000", 
    9 => "1001101101011011", 10 => "1001101110000111", 11 => "1001110000101010", 
    12 => "1001101010000100", 13 => "0001010001011111", 14 => "1000100100001100", 
    15 => "0000110000101001", 16 => "0001110101000011", 17 => "0001101000101001", 
    18 => "0001100011111011", 19 => "1000010010010110", 20 => "1001100110101111", 
    21 => "1001011110101110", 22 => "1001100101100000", 23 => "1001011011010111", 
    24 => "0001001010100011", 25 => "0001011011100100", 26 => "0001111000101010", 
    27 => "0001100100011001", 28 => "1001011110101111", 29 => "1001111101101011", 
    30 => "1001111110010110", 31 => "1000110100001100", 32 => "0001110011010110", 
    33 => "0010000000000001", 34 => "0001100110000011", 35 => "1001111101111110", 
    36 => "1001111110001101", 37 => "1001110111111000", 38 => "0001110010101011", 
    39 => "0010000101101010", 40 => "0010000000011111", 41 => "0001100000100101", 
    42 => "1001111001101001", 43 => "1001111001111000", 44 => "1001011010110110", 
    45 => "0001101001001101", 46 => "0001100010110010", 47 => "1001011001101010", 
    48 => "1001101111010101", 49 => "1001100011001101", 50 => "0001110100000101", 
    51 => "0010000000010011", 52 => "1001100000000101", 53 => "0001010011001111", 
    54 => "0001101001101000", 55 => "0001100110111101", 56 => "0001110100110100", 
    57 => "0001110111101110", 58 => "1001010011110100", 59 => "1001101111111011", 
    60 => "1001110011010111", 61 => "1001110111010101", 62 => "1000001000011001", 
    63 => "0001101011110111", 64 => "0001100011010011", 65 => "0001100000101011", 
    66 => "0001110100100101", 67 => "0001011001011001", 68 => "0001010101001001", 
    69 => "0000101000111010", 70 => "1001110100111101", 71 => "1001100111111100", 
    72 => "1001010110011111", 73 => "1001000011111011", 74 => "0001100101100100", 
    75 => "0001001101110100", 76 => "0001110000111100", 77 => "0001110000010100", 
    78 => "1000111010100111", 79 => "1001111111100100", 80 => "1001111101110111", 
    81 => "1001011011100101", 82 => "0001100111011000", 83 => "0010000001011000", 
    84 => "0001111100010111", 85 => "1001110001111010", 86 => "1001110100011111", 
    87 => "1001111110010001", 88 => "0001001010000011", 89 => "0010000010100001", 
    90 => "0010000010111011", 91 => "0001110010100011", 92 => "1001110110100111", 
    93 => "1010000101101100", 94 => "1001111000000110", 95 => "1000110101101100", 
    96 => "0001110000111010", 97 => "0001100001010011", 98 => "1001010111011101", 
    99 => "1001100111000000", 100 => "0001100000100011", 101 => "0001110110111111", 
    102 => "0001110111010101", 103 => "0000110101110001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_wlo_L2_WEIGHTSbVr is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_wlo_L2_WEIGHTSbVr is
    component L3_wlo_L2_WEIGHTSbVr_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_wlo_L2_WEIGHTSbVr_rom_U :  component L3_wlo_L2_WEIGHTSbVr_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


