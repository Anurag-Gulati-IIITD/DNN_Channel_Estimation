-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_wlo_L2_WEIGHTSbRq_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_wlo_L2_WEIGHTSbRq_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0010100000000111", 1 => "1010011101100000", 2 => "1010101011111101", 
    3 => "1010010010101000", 4 => "0010010011111010", 5 => "0010001110000010", 
    6 => "1010100110101011", 7 => "1010100011000110", 8 => "1010000111001100", 
    9 => "0010100111010110", 10 => "0010110000001010", 11 => "0010001011111010", 
    12 => "1010100001100011", 13 => "1010101001011110", 14 => "0010000001001110", 
    15 => "0010110001111011", 16 => "0010100101111010", 17 => "1010100100001000", 
    18 => "1010110111111001", 19 => "1010110100000100", 20 => "0010010110110010", 
    21 => "0010110111111100", 22 => "0010110001011111", 23 => "1010000101111010", 
    24 => "1010110011101110", 25 => "1010110001100001", 26 => "0010101011110100", 
    27 => "0010101001001010", 28 => "1010001011001110", 29 => "1010101101111011", 
    30 => "1010011010101101", 31 => "0010010100011100", 32 => "0010101001001001", 
    33 => "0010100000110100", 34 => "1001010101001001", 35 => "1010010010101000", 
    36 => "1001110010001111", 37 => "0010011011101000", 38 => "0010010100101001", 
    39 => "1010010111010011", 40 => "1010101010010001", 41 => "1010010100111001", 
    42 => "0010011000110010", 43 => "0010101000011000", 44 => "0010100001101101", 
    45 => "1010100011101010", 46 => "1010101111010111", 47 => "1010010011000001", 
    48 => "0010110011001010", 49 => "0010110110001110", 50 => "0001111101111111", 
    51 => "1010111111001010", 52 => "1010111000100100", 53 => "1010110110100011", 
    54 => "0001010010001010", 55 => "0010100011110111", 56 => "0010000111111110", 
    57 => "1010011100111010", 58 => "1010011101010010", 59 => "0010001010010010", 
    60 => "0010110000111101", 61 => "0010100011000000", 62 => "1010011010101000", 
    63 => "1010100101010101", 64 => "1010100010101011", 65 => "0010010111110110", 
    66 => "0010100110001001", 67 => "0010000001100101", 68 => "1010110001000111", 
    69 => "1010101011011110", 70 => "1010001001011000", 71 => "0010110001000101", 
    72 => "0010111000000001", 73 => "0010011010110000", 74 => "1010110000001011", 
    75 => "1010111011101001", 76 => "1010100100111111", 77 => "0010100010001110", 
    78 => "0010100010110111", 79 => "1010101001101001", 80 => "1010110010110001", 
    81 => "1010010101000011", 82 => "0010011111110011", 83 => "0010110000011111", 
    84 => "0010011110101011", 85 => "1010100001110011", 86 => "1010100000011101", 
    87 => "0010001110011111", 88 => "0010011011111000", 89 => "0001100010011101", 
    90 => "1010101011110001", 91 => "1010101000100110", 92 => "0001110000001110", 
    93 => "0010100000011011", 94 => "0010101100000000", 95 => "0001110101000010", 
    96 => "1010100101000110", 97 => "1010101100100101", 98 => "0010000111011101", 
    99 => "0010110010001001", 100 => "0010100001101010", 101 => "1010100001110110", 
    102 => "1010111111011010", 103 => "1010110110011100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_wlo_L2_WEIGHTSbRq is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_wlo_L2_WEIGHTSbRq is
    component L3_wlo_L2_WEIGHTSbRq_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_wlo_L2_WEIGHTSbRq_rom_U :  component L3_wlo_L2_WEIGHTSbRq_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


