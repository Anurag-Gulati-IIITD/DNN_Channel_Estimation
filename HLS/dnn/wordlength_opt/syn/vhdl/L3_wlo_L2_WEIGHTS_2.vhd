-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_wlo_L2_WEIGHTS_2_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_wlo_L2_WEIGHTS_2_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1000100101111001", 1 => "0001010101001110", 2 => "0001100101111000", 
    3 => "0001010100101110", 4 => "0001000010100101", 5 => "0000111111011001", 
    6 => "1001101001101000", 7 => "1001110100000100", 8 => "1001110100001000", 
    9 => "1001010011100001", 10 => "0001110000100011", 11 => "0001111100011111", 
    12 => "0001111001110101", 13 => "1001010100101101", 14 => "1001110111000111", 
    15 => "1001110111011101", 16 => "1001101000011011", 17 => "0001101111100110", 
    18 => "0001110111011000", 19 => "0001011011010111", 20 => "1001011100011000", 
    21 => "1001110001100101", 22 => "1001010111001001", 23 => "0001011001101011", 
    24 => "0001010100000000", 25 => "1000011110111100", 26 => "1001101110011110", 
    27 => "1000111010010010", 28 => "0001101000101011", 29 => "0001100001111101", 
    30 => "0001100010111100", 31 => "1001010100101000", 32 => "1001100110001001", 
    33 => "1001011001010001", 34 => "1000110001111101", 35 => "0000011000111010", 
    36 => "0001001010100001", 37 => "0001010111101000", 38 => "0001011001011101", 
    39 => "0001110000111100", 40 => "0001100001000111", 41 => "1001100001000011", 
    42 => "1001110101001100", 43 => "1001111000100010", 44 => "1001100111110110", 
    45 => "0001100010100100", 46 => "0001110100111101", 47 => "0001101100001101", 
    48 => "0001011000000010", 49 => "1001101001010010", 50 => "1001100111110110", 
    51 => "1001010100001101", 52 => "0001101100101110", 53 => "0001001011101110", 
    54 => "1001010001000011", 55 => "0001001000001010", 56 => "1001100110010101", 
    57 => "1001101001000101", 58 => "1001101110100100", 59 => "1001011110011111", 
    60 => "0001101110110110", 61 => "0001111101111010", 62 => "0001111010100101", 
    63 => "0001011000110100", 64 => "1001110100011111", 65 => "1001111011100011", 
    66 => "1001110100111101", 67 => "0001100110110101", 68 => "0001110100101011", 
    69 => "0001110011111000", 70 => "0001010100101110", 71 => "1001110011101001", 
    72 => "1001110010010001", 73 => "0000101011100010", 74 => "0001000110111100", 
    75 => "0001100000110101", 76 => "1001011110000100", 77 => "1001110000110110", 
    78 => "0001010010100111", 79 => "0001100111100100", 80 => "0001100010011010", 
    81 => "1001010000011100", 82 => "1001101001000011", 83 => "1001100011101101", 
    84 => "1001011000000010", 85 => "0001010011011010", 86 => "0001100110001100", 
    87 => "0001100001101001", 88 => "0001010111001001", 89 => "0001100000110000", 
    90 => "1000111011101010", 91 => "1001010110000100", 92 => "1001100111100011", 
    93 => "1001110111111000", 94 => "1001100101101111", 95 => "0001101000100100", 
    96 => "0001111011001011", 97 => "0001110010100111", 98 => "0001011110100001", 
    99 => "1001100000111111", 100 => "1001110110001100", 101 => "1001100100101000", 
    102 => "0001000010011001", 103 => "0001100110000100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_wlo_L2_WEIGHTS_2 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_wlo_L2_WEIGHTS_2 is
    component L3_wlo_L2_WEIGHTS_2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_wlo_L2_WEIGHTS_2_rom_U :  component L3_wlo_L2_WEIGHTS_2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


