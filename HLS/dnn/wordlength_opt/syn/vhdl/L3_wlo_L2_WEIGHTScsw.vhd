-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_wlo_L2_WEIGHTScsw_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_wlo_L2_WEIGHTScsw_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1010100010100101", 1 => "1010111000110101", 2 => "1010110001010100", 
    3 => "0010100000111110", 4 => "0010111001011101", 5 => "0010110101101011", 
    6 => "0010000010110001", 7 => "1010110100011100", 8 => "1010111001111011", 
    9 => "1010010101011101", 10 => "0010101110110111", 11 => "0010110111101001", 
    12 => "0010100110111100", 13 => "1010100111100111", 14 => "1010110001001110", 
    15 => "1010100100110010", 16 => "0010100100111010", 17 => "0010101100001101", 
    18 => "0010001011011100", 19 => "1010011010010010", 20 => "1010110011111011", 
    21 => "1010010010101000", 22 => "0010101100011100", 23 => "0010110100100101", 
    24 => "0010100011000101", 25 => "1010101010001101", 26 => "1010110010010000", 
    27 => "1001100001000111", 28 => "0010110100010010", 29 => "0010110100011101", 
    30 => "0010100001101001", 31 => "1010100100111000", 32 => "1010111000101101", 
    33 => "1010110011000111", 34 => "0001010100001110", 35 => "0010101101111110", 
    36 => "0010111000000100", 37 => "0010101010111110", 38 => "1010101000100110", 
    39 => "1010111000011110", 40 => "1010110101010001", 41 => "1010000011110010", 
    42 => "0010110100111100", 43 => "0010111001010000", 44 => "0010100010101001", 
    45 => "1010101010101010", 46 => "1010110110100110", 47 => "1010101000110101", 
    48 => "0010010011101011", 49 => "0010101011101000", 50 => "0010100100000000", 
    51 => "1001111100001101", 52 => "1010111000010011", 53 => "1010011011001011", 
    54 => "0010110011110010", 55 => "0010111010111000", 56 => "0010100001000101", 
    57 => "1010101101011110", 58 => "1010111011010000", 59 => "1010101101000101", 
    60 => "0010011100101101", 61 => "0010111010011101", 62 => "0010110001000001", 
    63 => "1010010110011011", 64 => "1010110011100110", 65 => "1010101111100010", 
    66 => "0010000000100100", 67 => "0010101010100111", 68 => "0010101011001111", 
    69 => "1010001110111001", 70 => "1010101010000100", 71 => "1010101011010100", 
    72 => "0010000101000011", 73 => "0010101110001011", 74 => "0010101101001100", 
    75 => "0001101011000111", 76 => "1010110100011100", 77 => "1010110100110100", 
    78 => "0010101100110110", 79 => "0010111011100001", 80 => "0010101110011001", 
    81 => "1010010001110110", 82 => "1010110100110101", 83 => "1010111000111101", 
    84 => "1010100001010101", 85 => "0010110000111100", 86 => "0010110111011100", 
    87 => "0010101110010111", 88 => "1010001110111100", 89 => "1010101111101100", 
    90 => "1010110111101010", 91 => "1010010100111101", 92 => "0010101100100110", 
    93 => "0010111010101101", 94 => "0010101100111001", 95 => "1010001011110110", 
    96 => "1010110111010000", 97 => "1010110000100011", 98 => "1010000010101011", 
    99 => "0010101000101010", 100 => "0010110010110011", 101 => "0010010100001010", 
    102 => "1010100110111101", 103 => "1010101100011100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_wlo_L2_WEIGHTScsw is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_wlo_L2_WEIGHTScsw is
    component L3_wlo_L2_WEIGHTScsw_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_wlo_L2_WEIGHTScsw_rom_U :  component L3_wlo_L2_WEIGHTScsw_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


