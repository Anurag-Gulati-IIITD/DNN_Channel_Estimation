-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_wlo_L2_WEIGHTSb9t_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_wlo_L2_WEIGHTSb9t_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0011000101100001", 1 => "0010111101011111", 2 => "1001100111000011", 
    3 => "1010101101001000", 4 => "1010101111110100", 5 => "1010111001010101", 
    6 => "1010011010100111", 7 => "0010100010110111", 8 => "0010110111100001", 
    9 => "0010111010011100", 10 => "0010101011011100", 11 => "0010100100010110", 
    12 => "1010011011101011", 13 => "1010110001100001", 14 => "1010101001110011", 
    15 => "1010100100100001", 16 => "0001110101110101", 17 => "0010110101100010", 
    18 => "0010110010111011", 19 => "0010110011011111", 20 => "0010010110110011", 
    21 => "1010101110001101", 22 => "1010100000110011", 23 => "1010111010010001", 
    24 => "1010110101000110", 25 => "1010011010101010", 26 => "0010110100111011", 
    27 => "0010110010111000", 28 => "0010100011100010", 29 => "1010011001000111", 
    30 => "1010110101010101", 31 => "1010110010000111", 32 => "1010101001111001", 
    33 => "0010100100011000", 34 => "0010110111111010", 35 => "0010111010011110", 
    36 => "0010110110011000", 37 => "0010100101010111", 38 => "1010100011101110", 
    39 => "1010011010001111", 40 => "1010110000010111", 41 => "1010110010110101", 
    42 => "1010110000000110", 43 => "1001110010101010", 44 => "0010011100010111", 
    45 => "0010110011000011", 46 => "0010110111100010", 47 => "0010110010110001", 
    48 => "0001111111111101", 49 => "1010110111100101", 50 => "1010111110010010", 
    51 => "1010111111111000", 52 => "0010001010011001", 53 => "1010110101101011", 
    54 => "1011000011110011", 55 => "1010110010100111", 56 => "1010110100001001", 
    57 => "1010001101011011", 58 => "0010110011111101", 59 => "0010110011111010", 
    60 => "0010101000110110", 61 => "0010010111110001", 62 => "1010010010010110", 
    63 => "1010111010011101", 64 => "1010101100000101", 65 => "1001100110100101", 
    66 => "0010000101010100", 67 => "0010110001100100", 68 => "0010101000010100", 
    69 => "0010111010011001", 70 => "0010110001010110", 71 => "1010000101000101", 
    72 => "1010110000000111", 73 => "1010010110001100", 74 => "1010101010010110", 
    75 => "0010000011110100", 76 => "0010000101101111", 77 => "0010111100011010", 
    78 => "1010000100101001", 79 => "1010101000010011", 80 => "1010111000000111", 
    81 => "1010111101110010", 82 => "1010100000101011", 83 => "1010001110111011", 
    84 => "0010110001001010", 85 => "0010111010110111", 86 => "0010110110010110", 
    87 => "0010100001111010", 88 => "1010101011100100", 89 => "1010111101010100", 
    90 => "1010110000101000", 91 => "1010100111001100", 92 => "1010100001101111", 
    93 => "1001111100001100", 94 => "0010100000011001", 95 => "0010110111001101", 
    96 => "0011000000001011", 97 => "0010101000111010", 98 => "1010101101000001", 
    99 => "1010110111010001", 100 => "1010111010001001", 101 => "1010111101100001", 
    102 => "0001101010100001", 103 => "0011000000110100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_wlo_L2_WEIGHTSb9t is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_wlo_L2_WEIGHTSb9t is
    component L3_wlo_L2_WEIGHTSb9t_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_wlo_L2_WEIGHTSb9t_rom_U :  component L3_wlo_L2_WEIGHTSb9t_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


