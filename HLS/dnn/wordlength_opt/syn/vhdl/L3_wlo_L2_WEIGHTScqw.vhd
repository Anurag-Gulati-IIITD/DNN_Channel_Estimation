-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_wlo_L2_WEIGHTScqw_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_wlo_L2_WEIGHTScqw_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1010110011000010", 1 => "1010010100010011", 2 => "0010101101110110", 
    3 => "0010111010010000", 4 => "0010110111000000", 5 => "0010100000100000", 
    6 => "1010010101010101", 7 => "1010110111001000", 8 => "1010101110101001", 
    9 => "1010100100110101", 10 => "1010010010101111", 11 => "0010000011110100", 
    12 => "0010101110100011", 13 => "0010110111110100", 14 => "0010110001110101", 
    15 => "1010100100110001", 16 => "1010110111110010", 17 => "1010110111001111", 
    18 => "1010110010000111", 19 => "0001100010011011", 20 => "0010110001110000", 
    21 => "0010111000110110", 22 => "0010110010000000", 23 => "1010001010111010", 
    24 => "1010110100010100", 25 => "1010110000001100", 26 => "0010000010111011", 
    27 => "0010011101100000", 28 => "0010010111010111", 29 => "0010100001000101", 
    30 => "0010010011110100", 31 => "0010001010010101", 32 => "1010010110001000", 
    33 => "1010110001101000", 34 => "1010101100101010", 35 => "1010100100001000", 
    36 => "1001011101110001", 37 => "0010101100110011", 38 => "0010101010010001", 
    39 => "0010100101000111", 40 => "0001111000010011", 41 => "1010011000100001", 
    42 => "1010100011111010", 43 => "1010100101000111", 44 => "1010110000010110", 
    45 => "1010110001101010", 46 => "1010000010010100", 47 => "0010011010010111", 
    48 => "0010111110000000", 49 => "0010110101011011", 50 => "0010101111010100", 
    51 => "1010101100100101", 52 => "0010110000101101", 53 => "0010111010101101", 
    54 => "0010101011111011", 55 => "0010100101011100", 56 => "1010110000110110", 
    57 => "1010110101101000", 58 => "1010110100011110", 59 => "1010100000111101", 
    60 => "0010000110100000", 61 => "0010101001100100", 62 => "0010101101100111", 
    63 => "0010101001111011", 64 => "0010101100010001", 65 => "1010011100011110", 
    66 => "1010101011110110", 67 => "1010110101001000", 68 => "1010110010111000", 
    69 => "1010011000100011", 70 => "0010110110010000", 71 => "0010111001100000", 
    72 => "0010111000011001", 73 => "0010010100000110", 74 => "1010110110000100", 
    75 => "1010110000111101", 76 => "1010010101011101", 77 => "0001110010010010", 
    78 => "0010101011001110", 79 => "0010011110100110", 80 => "0010011001110011", 
    81 => "0001110011110100", 82 => "1010100000000000", 83 => "1010100110100111", 
    84 => "1010101000100001", 85 => "1010011011100101", 86 => "0010011000000010", 
    87 => "0010110001001111", 88 => "0010101011101000", 89 => "0010101011000011", 
    90 => "0010011001001101", 91 => "1010001000000010", 92 => "1010100101000100", 
    93 => "1010100001010111", 94 => "1010011010011111", 95 => "1010100110001010", 
    96 => "0010000001101010", 97 => "0010010011100011", 98 => "0010110100011110", 
    99 => "0010111111010100", 100 => "0010100111000101", 101 => "1010110001010100", 
    102 => "1010110101100001", 103 => "1010110000010011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_wlo_L2_WEIGHTScqw is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_wlo_L2_WEIGHTScqw is
    component L3_wlo_L2_WEIGHTScqw_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_wlo_L2_WEIGHTScqw_rom_U :  component L3_wlo_L2_WEIGHTScqw_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


