-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_wlo_L2_WEIGHTSbYs_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_wlo_L2_WEIGHTSbYs_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1010001110001001", 1 => "1010000001101100", 2 => "0001101101110111", 
    3 => "0001110111011110", 4 => "0010000001010011", 5 => "0001110010000010", 
    6 => "1000101100101101", 7 => "1000111110001110", 8 => "1001010100001000", 
    9 => "0000100101100000", 10 => "1000100101100000", 11 => "1001101001100110", 
    12 => "0001100100111000", 13 => "1000111111001000", 14 => "0001110000001111", 
    15 => "0001011110000101", 16 => "0001010101011000", 17 => "1001011100100100", 
    18 => "0000111101111001", 19 => "1001100000011100", 20 => "1001111010101110", 
    21 => "1001110011000110", 22 => "1000110001110101", 23 => "0001110000000111", 
    24 => "0001100101110001", 25 => "1000011011100010", 26 => "0001011110110010", 
    27 => "0001100000101011", 28 => "1001100011100101", 29 => "1010000000001000", 
    30 => "1001101010101001", 31 => "1000001100010101", 32 => "1001011000111110", 
    33 => "0001100101111100", 34 => "1001010110000000", 35 => "0001100010000110", 
    36 => "1001010001100001", 37 => "0001010111000000", 38 => "1001010100000000", 
    39 => "1000100110000001", 40 => "0001111011000010", 41 => "0001011000101011", 
    42 => "0001101111100011", 43 => "1001101001000000", 44 => "1001110111010101", 
    45 => "1001101011101100", 46 => "1001000110110110", 47 => "1001011001010000", 
    48 => "1000011010011110", 49 => "0000000110100011", 50 => "1001001100000001", 
    51 => "0001000001011100", 52 => "0001110100011011", 53 => "0010000010101100", 
    54 => "0010001100101011", 55 => "0001110111011010", 56 => "1001110010000010", 
    57 => "1001010111111000", 58 => "1001110100110101", 59 => "1000111010100111", 
    60 => "0001011101110010", 61 => "0000111111000000", 62 => "0001000000111000", 
    63 => "1001100101000000", 64 => "0001100000001101", 65 => "0001101000000001", 
    66 => "0010000101110010", 67 => "1000101011000000", 68 => "1001110011101000", 
    69 => "1001100010101001", 70 => "1001111011111000", 71 => "0001010011011010", 
    72 => "0001010101111000", 73 => "0001100000100010", 74 => "0001101000110010", 
    75 => "0001100010010101", 76 => "1001011011010010", 77 => "1001100001110110", 
    78 => "1001011101110000", 79 => "1000001111101111", 80 => "1001110010001100", 
    81 => "1001100010010101", 82 => "0000111010110011", 83 => "0001110011101001", 
    84 => "0001000000110100", 85 => "0001010111011001", 86 => "0000100101110001", 
    87 => "0001101100000101", 88 => "1001110010101101", 89 => "0001000000110110", 
    90 => "0001011111111110", 91 => "1001010101000010", 92 => "0001110010010010", 
    93 => "0001100010001001", 94 => "1001110100110010", 95 => "1001100110111001", 
    96 => "1001110011000011", 97 => "0001100101110001", 98 => "0001000000001110", 
    99 => "1001010001010110", 100 => "0001010111101111", 101 => "0001101110111101", 
    102 => "1001110001101010", 103 => "1001101001000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_wlo_L2_WEIGHTSbYs is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_wlo_L2_WEIGHTSbYs is
    component L3_wlo_L2_WEIGHTSbYs_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_wlo_L2_WEIGHTSbYs_rom_U :  component L3_wlo_L2_WEIGHTSbYs_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


