-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_wlo_L2_WEIGHTSccu_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_wlo_L2_WEIGHTSccu_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1010100010010101", 1 => "1010101000010101", 2 => "0010000010011100", 
    3 => "1010001111011010", 4 => "1010100010011011", 5 => "1010011110111100", 
    6 => "0010000000111101", 7 => "0010100111000111", 8 => "0010110000111110", 
    9 => "0010010111011000", 10 => "1010101011110000", 11 => "1010111010110100", 
    12 => "1010110000001001", 13 => "1010010111111101", 14 => "0010101000001011", 
    15 => "0010110000011000", 16 => "0010010110101101", 17 => "1010011001111010", 
    18 => "1001110011010010", 19 => "0010100100100110", 20 => "0010010010001110", 
    21 => "1010011110001110", 22 => "1010110010100110", 23 => "1011000000011011", 
    24 => "1010101110010000", 25 => "0010101010001011", 26 => "0010111100011010", 
    27 => "0010101110001100", 28 => "1010101010111111", 29 => "1011000001001010", 
    30 => "1010110100111001", 31 => "1010110100001001", 32 => "0001100000000010", 
    33 => "0010101011001011", 34 => "0010110110110111", 35 => "0010111000000101", 
    36 => "0010101100010010", 37 => "1010010111011000", 38 => "1010110111001001", 
    39 => "1010111110100101", 40 => "1010110100010000", 41 => "0001100001001000", 
    42 => "0010110100111101", 43 => "0011000001000110", 44 => "0010110000011101", 
    45 => "0001011000001100", 46 => "1010111010011111", 47 => "1010111001110110", 
    48 => "1010101001111000", 49 => "0001110111111000", 50 => "0010100010011011", 
    51 => "0010110000110111", 52 => "1010001000001010", 53 => "1010010101001100", 
    54 => "0010000000101101", 55 => "0010011011110010", 56 => "0010000011101111", 
    57 => "0010100001111010", 58 => "0010100000100010", 59 => "0010010110001110", 
    60 => "1010011101000111", 61 => "1010110100100010", 62 => "1010110010011010", 
    63 => "1010001001101011", 64 => "0010100111110111", 65 => "0010110101100101", 
    66 => "0010101000011111", 67 => "1010010111001101", 68 => "1010011001111100", 
    69 => "1010001000101001", 70 => "0010000101110101", 71 => "0001110100011110", 
    72 => "1010101100111010", 73 => "1010110011111110", 74 => "1010101111101001", 
    75 => "0010100101000101", 76 => "0010110101010010", 77 => "0010111001010101", 
    78 => "1010110100010011", 79 => "1011000000011011", 80 => "1010111011100000", 
    81 => "1010110000010011", 82 => "0010100111001011", 83 => "0010110110000111", 
    84 => "0010110000100100", 85 => "0010110100011001", 86 => "0010011010100111", 
    87 => "1010011000010000", 88 => "1010110100111101", 89 => "1010111001111100", 
    90 => "1010110101100011", 91 => "0001110011100110", 92 => "0010111010010000", 
    93 => "0011000001100011", 94 => "0010110111011011", 95 => "0010010101101000", 
    96 => "1010110010101011", 97 => "1010111101001001", 98 => "1010100011111000", 
    99 => "0010001001100101", 100 => "0010110010011110", 101 => "0010110011100000", 
    102 => "0010100101111111", 103 => "0010001100001011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_wlo_L2_WEIGHTSccu is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_wlo_L2_WEIGHTSccu is
    component L3_wlo_L2_WEIGHTSccu_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_wlo_L2_WEIGHTSccu_rom_U :  component L3_wlo_L2_WEIGHTSccu_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


