-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_wlo_L2_WEIGHTScau_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_wlo_L2_WEIGHTScau_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1010011011001000", 1 => "1010110101011101", 2 => "1010110000101000", 
    3 => "1010101110010000", 4 => "0010010010110000", 5 => "1001110111110000", 
    6 => "0010011111001110", 7 => "1010000011010010", 8 => "0010011100001100", 
    9 => "0010100100111100", 10 => "0010010100010010", 11 => "1010011100011100", 
    12 => "1010011100100100", 13 => "1010111000110010", 14 => "1010010101000111", 
    15 => "0010010010000100", 16 => "0010101010001001", 17 => "0010101000000110", 
    18 => "1010011000101101", 19 => "1010100100010011", 20 => "1010100100010110", 
    21 => "1001110111110011", 22 => "0010011110110011", 23 => "0010001110110110", 
    24 => "0010010001010001", 25 => "1010100110010001", 26 => "0010000011111000", 
    27 => "0010010011010111", 28 => "0001111110000100", 29 => "1010100000110011", 
    30 => "1010000000000101", 31 => "0000000010010111", 32 => "0010110001101100", 
    33 => "0010101011001111", 34 => "0010000101000101", 35 => "1010100101111001", 
    36 => "1010110000101001", 37 => "1010011111100011", 38 => "0001110101110011", 
    39 => "0010011000110110", 40 => "0010000100100001", 41 => "1010010000101001", 
    42 => "1010101001000001", 43 => "0010100001111111", 44 => "0010100100010100", 
    45 => "0010110101100000", 46 => "0010001111000110", 47 => "1010101001100100", 
    48 => "1010111000101010", 49 => "1010111100111110", 50 => "1010101111101001", 
    51 => "0010101000100010", 52 => "1011000010010110", 53 => "1010011110110000", 
    54 => "0010011001101011", 55 => "0010100100111000", 56 => "0010101000010001", 
    57 => "0010011100111101", 58 => "1010001011010000", 59 => "0001100100010100", 
    60 => "0010010100001001", 61 => "1001010000000011", 62 => "1010100111111110", 
    63 => "1010010001001101", 64 => "1010011001100001", 65 => "0010010001101110", 
    66 => "0010101100010101", 67 => "0010011111111011", 68 => "1001100010011101", 
    69 => "1010100111101101", 70 => "1001111001111010", 71 => "1001110011010010", 
    72 => "0010101000110111", 73 => "0010101110011001", 74 => "0010010110001001", 
    75 => "1010010101100011", 76 => "1010011100110000", 77 => "1010011100010011", 
    78 => "0010011100111001", 79 => "1001110101101001", 80 => "1010010010010100", 
    81 => "1001100110110011", 82 => "0010101011101110", 83 => "0010011010000101", 
    84 => "0010010000001000", 85 => "1010100111000101", 86 => "1010100101111010", 
    87 => "1010101100111101", 88 => "1001101110010011", 89 => "0010110000011111", 
    90 => "0010100111110100", 91 => "0010011110111010", 92 => "1010000110100100", 
    93 => "1010101101011000", 94 => "1001110010001100", 95 => "0010100101100101", 
    96 => "0010100000100001", 97 => "1010011001000101", 98 => "1010101010011001", 
    99 => "1010110010001000", 100 => "1001110000101011", 101 => "0010110001111001", 
    102 => "0010111000110100", 103 => "0010110101000100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_wlo_L2_WEIGHTScau is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_wlo_L2_WEIGHTScau is
    component L3_wlo_L2_WEIGHTScau_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_wlo_L2_WEIGHTScau_rom_U :  component L3_wlo_L2_WEIGHTScau_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


