-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_wlo_L2_WEIGHTSb3s_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_wlo_L2_WEIGHTSb3s_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1010011111110001", 1 => "0010011101001000", 2 => "0001101110011100", 
    3 => "0010100110110111", 4 => "1001010001010110", 5 => "1001110101110100", 
    6 => "1010000111000000", 7 => "1001110010010010", 8 => "0001110000010100", 
    9 => "1010000101101100", 10 => "0001011100000100", 11 => "0010010011000001", 
    12 => "1010010101001111", 13 => "0010100100100000", 14 => "0000100000010000", 
    15 => "1010011011100110", 16 => "1001110100011000", 17 => "0001111111011000", 
    18 => "0010001001100000", 19 => "1001100001101110", 20 => "0010010010010111", 
    21 => "1010010110111101", 22 => "0001111010011010", 23 => "1001101000001111", 
    24 => "1010001101101001", 25 => "1010000110010001", 26 => "0010011011110100", 
    27 => "0010011010111010", 28 => "1010000110111011", 29 => "1010011001001110", 
    30 => "1001110110111010", 31 => "0001111010111001", 32 => "1010010001001010", 
    33 => "1010011101111111", 34 => "0010001011000010", 35 => "0010001011011000", 
    36 => "0010011100000010", 37 => "0010010110000110", 38 => "1010010001111010", 
    39 => "0001100110100111", 40 => "1010010111111110", 41 => "0010000100010110", 
    42 => "0010010000110001", 43 => "0001011100111100", 44 => "1010010001110011", 
    45 => "0001110111100100", 46 => "0010100010100100", 47 => "1010010100100110", 
    48 => "1001110010011001", 49 => "0010010100010000", 50 => "0001101111101011", 
    51 => "1010010110100110", 52 => "0010100011101111", 53 => "1010001010111000", 
    54 => "1010010000111010", 55 => "0010010100000010", 56 => "1001111001011000", 
    57 => "0010000011011001", 58 => "1010000001111001", 59 => "1001100001110110", 
    60 => "1001110010001011", 61 => "1010010101100001", 62 => "0001101100100101", 
    63 => "1010000110100111", 64 => "0001101110111011", 65 => "1010001111111110", 
    66 => "1010010101001101", 67 => "0010010100111111", 68 => "1010000101011000", 
    69 => "0010100011101110", 70 => "1010011011101111", 71 => "0001111011111110", 
    72 => "0010010001101100", 73 => "1001101010111110", 74 => "0001110001100101", 
    75 => "1010001000011100", 76 => "1010001000101001", 77 => "1010100100010110", 
    78 => "1010011000011110", 79 => "0010001011010101", 80 => "0001110011111010", 
    81 => "0010000010011110", 82 => "0010001000000011", 83 => "0010010010111001", 
    84 => "0010100010100111", 85 => "0010000001010000", 86 => "0001110001110000", 
    87 => "0001111100011111", 88 => "1001111011010110", 89 => "0010100000011001", 
    90 => "0010001000000001", 91 => "1010100001011111", 92 => "1010100010111000", 
    93 => "0010100101100110", 94 => "0010010100000011", 95 => "0001101111100110", 
    96 => "1010011101000101", 97 => "0001111100000011", 98 => "0010001101001010", 
    99 => "1010010111110111", 100 => "1010001001110111", 101 => "1010010001011110", 
    102 => "0001111000110110", 103 => "0010010111101110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_wlo_L2_WEIGHTSb3s is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_wlo_L2_WEIGHTSb3s is
    component L3_wlo_L2_WEIGHTSb3s_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_wlo_L2_WEIGHTSb3s_rom_U :  component L3_wlo_L2_WEIGHTSb3s_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


