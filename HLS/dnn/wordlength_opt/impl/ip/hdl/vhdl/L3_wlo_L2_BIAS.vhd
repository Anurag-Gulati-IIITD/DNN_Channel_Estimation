-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_wlo_L2_BIAS_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_wlo_L2_BIAS_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0011000100001000", 1 => "0010110010011111", 2 => "1010100010001001", 
    3 => "1011000000001011", 4 => "1010110100111110", 5 => "1001100000000000", 
    6 => "0010110100111100", 7 => "0010100000111101", 8 => "1001110000001111", 
    9 => "1010011101011001", 10 => "0001010011001001", 11 => "0010100010100100", 
    12 => "0010100000000011", 13 => "1010001001010001", 14 => "1010110010111011", 
    15 => "1010110110011110", 16 => "1010100101101010", 17 => "0010101110000100", 
    18 => "0010110110111000", 19 => "0010110000010010", 20 => "0010010100000101", 
    21 => "1010010111000100", 22 => "0001110011011101", 23 => "0010001001010110", 
    24 => "0001111101100010", 25 => "1010100001001011", 26 => "1010101010101000", 
    27 => "0010100011000100", 28 => "0010110111101011", 29 => "0010111011001101", 
    30 => "0010100101001010", 31 => "1010100010100010", 32 => "1010110001110011", 
    33 => "1010110000001101", 34 => "1010101001010001", 35 => "0001110000100111", 
    36 => "0001110110110000", 37 => "0001100111000110", 38 => "0010011101010001", 
    39 => "0010011100111100", 40 => "0010010100001000", 41 => "0010000010011010", 
    42 => "0001110011101111", 43 => "0010011010110000", 44 => "1010010000101001", 
    45 => "1010010010011101", 46 => "1010110010111110", 47 => "1010110000011010", 
    48 => "1010000110101110", 49 => "0010111001111010", 50 => "0011000000111011", 
    51 => "0010110110100111", 52 => "0001111000100110", 53 => "1010110101110110", 
    54 => "1011000000100011", 55 => "1010100010000000", 56 => "0010110001010011", 
    57 => "0010110110000010", 58 => "0010011110111011", 59 => "1010010100110101", 
    60 => "1010100011111010", 61 => "1010001010110010", 62 => "0010100100101000", 
    63 => "1001000010110100", 64 => "1010100010101001", 65 => "1010110011100011", 
    66 => "1010100001101000", 67 => "0010100010000010", 68 => "0010111001111110", 
    69 => "0010110000111001", 70 => "0010010001110111", 71 => "1010010011101110", 
    72 => "1010100111110111", 73 => "0001111010100001", 74 => "0010001111011101", 
    75 => "1001111111001110", 76 => "1010101011011011", 77 => "1010100111111101", 
    78 => "0010110011111000", 79 => "0010111101100101", 80 => "0010110001101000", 
    81 => "1010100011101010", 82 => "1010110100101100", 83 => "1010110101111011", 
    84 => "1010101001000110", 85 => "0010001010000101", 86 => "0010011101010110", 
    87 => "0010011001000001", 88 => "0010010001110010", 89 => "0001111101101011", 
    90 => "0010101000000000", 91 => "0001100000001010", 92 => "1001100111111010", 
    93 => "0001101010101110", 94 => "1010000101000010", 95 => "1010011000011111", 
    96 => "1010100100111110", 97 => "1010100110110000", 98 => "0001101000110011", 
    99 => "0010110010001001", 100 => "0010111110111110", 101 => "0010101111110100", 
    102 => "1001010000001101", 103 => "1011000000000011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_wlo_L2_BIAS is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_wlo_L2_BIAS is
    component L3_wlo_L2_BIAS_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_wlo_L2_BIAS_rom_U :  component L3_wlo_L2_BIAS_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


