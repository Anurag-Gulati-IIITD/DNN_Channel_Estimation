-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_wlo_L2_WEIGHTS_5_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_wlo_L2_WEIGHTS_5_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1010101111001010", 1 => "1010100101111011", 2 => "0010010000010111", 
    3 => "0010101100111100", 4 => "0010110000011110", 5 => "0001011111100011", 
    6 => "1010010110110101", 7 => "1010100001001001", 8 => "0001110100000100", 
    9 => "0010100011010111", 10 => "0010011101001001", 11 => "1010010001101101", 
    12 => "1010101100110100", 13 => "1010100001010001", 14 => "0010010010100111", 
    15 => "0010101101100100", 16 => "0010101001001011", 17 => "0010010010000101", 
    18 => "1010010000011001", 19 => "1010011011011000", 20 => "0001000110100011", 
    21 => "0010010001101010", 22 => "0010000011100001", 23 => "1010010011111110", 
    24 => "1010011011010101", 25 => "1001110000111010", 26 => "0010101011011101", 
    27 => "0010100001100110", 28 => "1001111001001001", 29 => "1010011100100011", 
    30 => "1010100001001011", 31 => "1000111110010110", 32 => "0001110011100001", 
    33 => "1010000001010111", 34 => "1010010100011000", 35 => "1000110010010010", 
    36 => "0010011001101111", 37 => "0010100110100110", 38 => "0010011110100110", 
    39 => "1010000011010011", 40 => "1010100101011001", 41 => "1010100101011111", 
    42 => "1000110011100110", 43 => "0010011000001010", 44 => "0010000110101001", 
    45 => "1001110010011010", 46 => "1010001011000010", 47 => "0010001001100100", 
    48 => "0010010101101100", 49 => "0010011111010001", 50 => "0001011010111000", 
    51 => "1010011010111001", 52 => "1010000100111101", 53 => "0010101111110010", 
    54 => "0010110010011000", 55 => "0010011001111101", 56 => "1010011011001100", 
    57 => "1010101011111110", 58 => "1010100000101110", 59 => "0010010111100000", 
    60 => "0010100001110011", 61 => "0001110111001111", 62 => "1010100001010100", 
    63 => "1010100111000000", 64 => "1001110110110110", 65 => "0010101000101011", 
    66 => "0010110000110101", 67 => "0010011010111111", 68 => "1010011010101011", 
    69 => "1010101011101110", 70 => "1010011111101100", 71 => "0010000101001101", 
    72 => "0010001111010010", 73 => "0010001001101101", 74 => "1010000100001001", 
    75 => "1010001101001010", 76 => "0010001110111010", 77 => "0010100111111001", 
    78 => "0001110111010110", 79 => "1010011100000101", 80 => "1010100101101011", 
    81 => "1010011001101101", 82 => "0010001001010100", 83 => "0010000010010100", 
    84 => "0010000011010111", 85 => "1001010110010100", 86 => "0010000011011000", 
    87 => "0010011000111110", 88 => "0010011000011100", 89 => "1001110010110110", 
    90 => "1010011011111110", 91 => "1010101001000111", 92 => "1010010100100110", 
    93 => "0010010111010011", 94 => "0010011101000110", 95 => "0010010011011000", 
    96 => "1010000110000011", 97 => "1001110110011000", 98 => "1001101001010100", 
    99 => "0010010010111100", 100 => "0010001001100000", 101 => "1010011010010001", 
    102 => "1010011111000000", 103 => "1010100100000110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_wlo_L2_WEIGHTS_5 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_wlo_L2_WEIGHTS_5 is
    component L3_wlo_L2_WEIGHTS_5_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_wlo_L2_WEIGHTS_5_rom_U :  component L3_wlo_L2_WEIGHTS_5_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


