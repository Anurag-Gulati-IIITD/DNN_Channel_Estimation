-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_wlo_L2_WEIGHTSb4t_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_wlo_L2_WEIGHTSb4t_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1011000011010010", 1 => "1010110101110010", 2 => "1010011110000110", 
    3 => "0001111011101100", 4 => "0010010011111111", 5 => "0010100001000100", 
    6 => "0010101101100100", 7 => "0010111001011100", 8 => "0010110101001011", 
    9 => "0010010010000110", 10 => "1010101101000110", 11 => "1010110111001111", 
    12 => "1010110111001100", 13 => "1010101010011011", 14 => "1010010000001101", 
    15 => "0010011011101001", 16 => "0010101101111010", 17 => "0010110011000101", 
    18 => "0010110101001111", 19 => "0010101010101101", 20 => "0010000000001101", 
    21 => "1010100101111011", 22 => "1010110011101110", 23 => "1010110111010010", 
    24 => "1010110100010010", 25 => "1010100101010101", 26 => "0010101110100010", 
    27 => "0010110101101010", 28 => "0010111000000011", 29 => "0010101101010111", 
    30 => "0001111010100011", 31 => "1010100100110000", 32 => "1010110001001111", 
    33 => "1010110001110010", 34 => "1010100110010110", 35 => "1010100001001101", 
    36 => "0001100100010000", 37 => "0010100110110000", 38 => "0010110010101001", 
    39 => "0010110111110110", 40 => "0010110010001101", 41 => "0001111011110000", 
    42 => "1010101011000100", 43 => "1010110110010000", 44 => "1010101110111111", 
    45 => "1010100111110001", 46 => "1010011000000001", 47 => "1010010000111110", 
    48 => "1001011010011101", 49 => "0010100111000001", 50 => "0011000000100010", 
    51 => "0011000011110001", 52 => "0001111111111110", 53 => "0010110000111001", 
    54 => "0010110100101010", 55 => "0010101110101110", 56 => "0010101000001001", 
    57 => "0010101010010111", 58 => "0010100100110001", 59 => "1010001001011100", 
    60 => "1010110001100001", 61 => "1010111000100010", 62 => "1010110110010111", 
    63 => "1010011100011011", 64 => "0010010101110010", 65 => "0010110010010111", 
    66 => "0010110010001001", 67 => "0010110010101100", 68 => "0010100111000110", 
    69 => "0010100001010100", 70 => "1010010010100110", 71 => "1010110010001001", 
    72 => "1010110111011010", 73 => "1010110110011001", 74 => "1010101100110011", 
    75 => "1001001100001110", 76 => "0010101010010110", 77 => "0010110110111100", 
    78 => "0010110000101101", 79 => "0010001001001101", 80 => "1010100010011111", 
    81 => "1010110011110110", 82 => "1010110111001010", 83 => "1010110100001111", 
    84 => "1010011101101011", 85 => "0010000001010101", 86 => "0010101010100111", 
    87 => "0010110000100111", 88 => "0010110010111111", 89 => "0010110000000100", 
    90 => "0010011011100011", 91 => "1010001101110001", 92 => "1010110100001000", 
    93 => "1010111100011001", 94 => "1010110100100110", 95 => "1010010101101000", 
    96 => "0010011110111000", 97 => "0010100101110010", 98 => "0010011010101010", 
    99 => "0010100100001000", 100 => "0010110000110111", 101 => "0010111001001011", 
    102 => "0010101000111010", 103 => "1010100110010110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_wlo_L2_WEIGHTSb4t is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_wlo_L2_WEIGHTSb4t is
    component L3_wlo_L2_WEIGHTSb4t_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_wlo_L2_WEIGHTSb4t_rom_U :  component L3_wlo_L2_WEIGHTSb4t_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


