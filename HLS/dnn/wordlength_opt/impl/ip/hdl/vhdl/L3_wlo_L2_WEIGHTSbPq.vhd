-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_wlo_L2_WEIGHTSbPq_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_wlo_L2_WEIGHTSbPq_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1011001110111100", 1 => "1010111101101100", 2 => "0010110010100100", 
    3 => "0011000111001110", 4 => "0010110111011001", 5 => "1010101101010010", 
    6 => "1011000000001110", 7 => "1010101000101010", 8 => "0010101101010010", 
    9 => "0010111010010011", 10 => "0010100011110100", 11 => "1010100101111000", 
    12 => "1010110001111100", 13 => "1010000111101000", 14 => "0010101011110011", 
    15 => "0010101011100101", 16 => "0010001000000010", 17 => "1010101101000100", 
    18 => "1010101010011101", 19 => "0001110001111000", 20 => "0010011110110110", 
    21 => "0010100000100111", 22 => "1010010001110010", 23 => "1010100000000011", 
    24 => "1010000001001011", 25 => "0010100101100001", 26 => "0010010000010011", 
    27 => "1010110010101001", 28 => "1010110111011010", 29 => "1010101100000100", 
    30 => "0010000110101001", 31 => "0010110010000100", 32 => "0010101100010000", 
    33 => "0010011000111011", 34 => "0010001110010000", 35 => "1010000010011110", 
    36 => "1001111011100111", 37 => "1010011100000001", 38 => "1010110000111010", 
    39 => "1010100110001111", 40 => "0010000100001010", 41 => "0010101000011101", 
    42 => "0010101010000000", 43 => "1010001000001011", 44 => "1010010110100110", 
    45 => "1001101010000010", 46 => "0010110100001001", 47 => "0010110011100100", 
    48 => "1010100001010100", 49 => "1011000111010001", 50 => "1011001000110001", 
    51 => "1010100011110000", 52 => "1010000000111100", 53 => "0011000101011000", 
    54 => "0011000110110011", 55 => "0010010001010010", 56 => "1011000000001011", 
    57 => "1010111110101011", 58 => "0001100111010101", 59 => "0010111010011001", 
    60 => "0010110110001001", 61 => "0001110110001000", 62 => "1010110110011011", 
    63 => "1010110001110101", 64 => "0010000111110010", 65 => "0010110010100001", 
    66 => "0010100111011110", 67 => "1010011010011000", 68 => "1010110001001101", 
    69 => "1010100010001001", 70 => "0010011010100000", 71 => "0010100011001111", 
    72 => "0010001111110010", 73 => "1010100101001111", 74 => "1010100010011000", 
    75 => "0010010010011100", 76 => "0010101101011010", 77 => "0010100100100110", 
    78 => "1010110101011110", 79 => "1010110000010110", 80 => "0001101110010101", 
    81 => "0010110100111111", 82 => "0010110100010101", 83 => "0010011011001100", 
    84 => "1010001001111011", 85 => "1010011100101011", 86 => "1010011001001111", 
    87 => "1010011010001111", 88 => "1010011111110111", 89 => "1010010001111001", 
    90 => "1001111101010110", 91 => "0010101011011000", 92 => "0010101100101000", 
    93 => "0010011011111010", 94 => "1010011101111100", 95 => "1010100001001111", 
    96 => "0001100110001000", 97 => "0010101100001001", 98 => "0001000001001001", 
    99 => "1010111000110110", 100 => "1011000011010000", 101 => "1010110001001000", 
    102 => "0010111010100110", 103 => "0011010000011111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_wlo_L2_WEIGHTSbPq is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_wlo_L2_WEIGHTSbPq is
    component L3_wlo_L2_WEIGHTSbPq_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_wlo_L2_WEIGHTSbPq_rom_U :  component L3_wlo_L2_WEIGHTSbPq_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


