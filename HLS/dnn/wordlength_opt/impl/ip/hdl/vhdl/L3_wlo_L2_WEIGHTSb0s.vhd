-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_wlo_L2_WEIGHTSb0s_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_wlo_L2_WEIGHTSb0s_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0001101011011100", 1 => "1010011111101101", 2 => "1010000010000100", 
    3 => "0010100001111000", 4 => "0001100101111001", 5 => "1010010010110110", 
    6 => "1010111000000011", 7 => "1010101100011011", 8 => "0010100000100000", 
    9 => "0010110001001111", 10 => "0010101001010001", 11 => "1010001000111011", 
    12 => "1010110111000110", 13 => "1010110000101000", 14 => "1010011010001101", 
    15 => "0010101111011110", 16 => "0010110010110011", 17 => "1000110001101000", 
    18 => "1010110001100001", 19 => "1010110100100011", 20 => "1001110010011001", 
    21 => "0010101100111000", 22 => "0010110011011100", 23 => "0010100101011000", 
    24 => "1010101000100111", 25 => "1010110101001000", 26 => "0001101010110110", 
    27 => "0010101000110100", 28 => "0010101110100001", 29 => "0010100101010001", 
    30 => "1001101100110001", 31 => "1010100011101010", 32 => "1010011001101111", 
    33 => "1010011100001110", 34 => "1010100111100101", 35 => "1010011101101100", 
    36 => "0010100001100101", 37 => "0010101111011010", 38 => "0010110101110000", 
    39 => "0010011100110010", 40 => "1010100001100011", 41 => "1010110100001100", 
    42 => "1010110100000001", 43 => "1010010100001111", 44 => "0010101100011110", 
    45 => "0010110011111101", 46 => "0010101011001100", 47 => "0010001000001100", 
    48 => "1010010100011011", 49 => "1010001110111110", 50 => "1010100000110001", 
    51 => "1010011100111101", 52 => "0010010010101101", 53 => "0010010100101001", 
    54 => "0010001110100111", 55 => "1010001110010001", 56 => "1010011111111100", 
    57 => "1010100111000010", 58 => "0010010010001111", 59 => "0010101010000101", 
    60 => "0010110000111110", 61 => "0010011100010101", 62 => "1010011110111011", 
    63 => "1010110101101000", 64 => "1010100101001001", 65 => "0010100010101010", 
    66 => "0010110000100111", 67 => "0010101100001101", 68 => "1010001011110110", 
    69 => "1010110010100111", 70 => "1010101110010101", 71 => "0010100001000100", 
    72 => "0010110111000111", 73 => "0010100110110111", 74 => "1010011011101000", 
    75 => "1010110100110110", 76 => "1010110010101101", 77 => "1001101110111111", 
    78 => "0010101010111000", 79 => "0010010001101111", 80 => "1000111101011111", 
    81 => "1010011111010101", 82 => "1010100100001111", 83 => "1010010000011001", 
    84 => "1010100001000001", 85 => "1010000000110000", 86 => "0010011011001000", 
    87 => "0010100010101000", 88 => "0010110001000010", 89 => "0010000011100011", 
    90 => "1010011110000110", 91 => "1010110011111011", 92 => "1010110110100111", 
    93 => "1010010010101001", 94 => "0010101110011010", 95 => "0010110001110000", 
    96 => "0010101100110110", 97 => "0001111101010100", 98 => "1010001011100001", 
    99 => "1010101000000001", 100 => "1010100010110011", 101 => "1010001100101100", 
    102 => "1010001011111010", 103 => "0010101010100110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_wlo_L2_WEIGHTSb0s is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_wlo_L2_WEIGHTSb0s is
    component L3_wlo_L2_WEIGHTSb0s_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_wlo_L2_WEIGHTSb0s_rom_U :  component L3_wlo_L2_WEIGHTSb0s_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


