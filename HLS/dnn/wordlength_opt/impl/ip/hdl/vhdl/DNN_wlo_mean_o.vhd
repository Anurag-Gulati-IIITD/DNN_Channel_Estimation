-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity DNN_wlo_mean_o_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of DNN_wlo_mean_o_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1001100111000000", 1 => "1001010101101110", 2 => "0001000100100001", 
    3 => "0001100011001101", 4 => "0001101010100010", 5 => "0001100111101110", 
    6 => "0001010100011011", 7 => "1001010100000001", 8 => "1001101100010001", 
    9 => "1001110001010110", 10 => "1001101000000000", 11 => "0000000110000010", 
    12 => "0001101010000100", 13 => "0001110011111010", 14 => "0001110000110100", 
    15 => "0001010100100110", 16 => "1001100010010101", 17 => "1001110010111011", 
    18 => "1001110011011011", 19 => "1001100101001110", 20 => "0001001000101001", 
    21 => "0001101110001111", 22 => "0001110011111010", 23 => "0001101110101111", 
    24 => "0001001110001011", 25 => "1001100010110010", 26 => "1001110010010011", 
    27 => "1001100100011111", 28 => "0001000010111110", 29 => "0001101011101111", 
    30 => "0001110011001011", 31 => "0001101111101010", 32 => "0001010100010010", 
    33 => "1001100001000001", 34 => "1001110010100110", 35 => "1001110011111100", 
    36 => "1001100110011100", 37 => "0001001100110101", 38 => "0001110000110101", 
    39 => "0001110101001011", 40 => "0001101100011000", 41 => "0000000000010001", 
    42 => "1001101010010110", 43 => "1001110010001111", 44 => "1001101010111010", 
    45 => "1001000111011110", 46 => "0001011011011000", 47 => "0001100110110100", 
    48 => "0001100100101111", 49 => "0001011000101111", 50 => "0000110110010110", 
    51 => "1001000111111101", 52 => "0001010111101101", 53 => "0001100111000101", 
    54 => "0001101000111011", 55 => "0001100001001111", 56 => "0000110011100110", 
    57 => "1001011101011111", 58 => "1001101011101111", 59 => "1001101101101111", 
    60 => "1001100001100010", 61 => "0001000100100111", 62 => "0001101011110011", 
    63 => "0001110011000101", 64 => "0001101101011001", 65 => "0001000011110011", 
    66 => "1001100110111000", 67 => "1001110011110101", 68 => "1001110010011000", 
    69 => "1001011111100101", 70 => "0001011001010000", 71 => "0001110001010100", 
    72 => "0001110011111100", 73 => "0001101010010101", 74 => "0000010101110001", 
    75 => "1001101000111001", 76 => "1001110011010010", 77 => "1001110001000110", 
    78 => "0001011000000001", 79 => "0001110000001101", 80 => "0001110010111110", 
    81 => "0001101010010110", 82 => "0000110110001110", 83 => "1001100110011110", 
    84 => "1001110011000001", 85 => "1001110010001001", 86 => "1001100000111000", 
    87 => "0001010111101001", 88 => "0001110001111001", 89 => "0001110101000001", 
    90 => "0001101010010111", 91 => "1000111010010110", 92 => "1001101110100111", 
    93 => "1001110100010001", 94 => "1001101100011110", 95 => "1000110111101010", 
    96 => "0001100100101100", 97 => "0001101110011010", 98 => "0001101000001010", 
    99 => "0001010001111110", 100 => "1001000110101011", 101 => "1001011100110101", 
    102 => "1001100001001010", 103 => "1001011111101001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity DNN_wlo_mean_o is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of DNN_wlo_mean_o is
    component DNN_wlo_mean_o_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    DNN_wlo_mean_o_rom_U :  component DNN_wlo_mean_o_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


