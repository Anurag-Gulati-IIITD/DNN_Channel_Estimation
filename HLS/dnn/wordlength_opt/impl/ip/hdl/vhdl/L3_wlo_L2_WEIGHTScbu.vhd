-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_wlo_L2_WEIGHTScbu_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_wlo_L2_WEIGHTScbu_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0001100000010110", 1 => "0001100111110111", 2 => "0001000100000011", 
    3 => "1000001001011100", 4 => "1001100000111000", 5 => "0001100011000011", 
    6 => "0001101100011001", 7 => "0001101000111000", 8 => "1001101001011100", 
    9 => "1001110010101111", 10 => "1001101000000100", 11 => "0000111011111111", 
    12 => "0001101011001100", 13 => "0001111011001100", 14 => "0001001000101011", 
    15 => "1001100110111011", 16 => "1001100111010110", 17 => "1001100110011101", 
    18 => "0001011111100101", 19 => "0001100111001011", 20 => "1001010011100010", 
    21 => "1001000100010100", 22 => "1001000001001111", 23 => "0000010010010110", 
    24 => "0000100011100010", 25 => "0001100110001110", 26 => "1000111111110010", 
    27 => "0000111000111010", 28 => "1000100110000001", 29 => "1000110100001000", 
    30 => "1001101000101000", 31 => "1001011110011100", 32 => "1001101001001011", 
    33 => "0000101100000011", 34 => "0001101011010101", 35 => "0001011100000011", 
    36 => "1001001111010011", 37 => "1001100101100100", 38 => "1001010000110001", 
    39 => "0001100011101101", 40 => "0001100111011010", 41 => "0001001000010000", 
    42 => "1001001111101010", 43 => "1001110011101000", 44 => "1001010100010001", 
    45 => "0000101001100100", 46 => "0001100110001010", 47 => "0000001110001010", 
    48 => "1001010111011010", 49 => "1001000101001101", 50 => "0001100110001001", 
    51 => "0001101110011011", 52 => "0001110100000010", 53 => "1001100111110101", 
    54 => "1001101010000001", 55 => "0001001101010111", 56 => "0001010111001111", 
    57 => "0001100001010000", 58 => "1000000100001100", 59 => "1001100011101000", 
    60 => "1001110010101010", 61 => "1001100010101110", 62 => "0001101101100111", 
    63 => "0001011111110000", 64 => "0001011110111110", 65 => "1001011111110011", 
    66 => "1001101000011111", 67 => "1001100101101010", 68 => "0001010110101110", 
    69 => "0001100110001101", 70 => "1001011100011011", 71 => "1001000100110100", 
    72 => "1001100110111001", 73 => "1001011100101001", 74 => "0001010000100010", 
    75 => "0001100110110111", 76 => "0001000100100101", 77 => "1001000000010000", 
    78 => "1001001101010001", 79 => "0001001111001010", 80 => "1000110011001101", 
    81 => "1001011001111000", 82 => "1001101010110101", 83 => "0001011001101010", 
    84 => "0001101000000101", 85 => "0001101101011100", 86 => "1001010000100000", 
    87 => "1001001110110101", 88 => "1001100100100000", 89 => "1000110100101101", 
    90 => "0001100100111101", 91 => "0001010011111001", 92 => "1001000011000101", 
    93 => "0000111111111011", 94 => "1001000110100011", 95 => "0001000001100010", 
    96 => "0001100100011101", 97 => "0001011001000011", 98 => "1001011000011000", 
    99 => "1001011010001011", 100 => "1001011100000111", 101 => "1000110001111101", 
    102 => "0001110000010011", 103 => "0001011001001111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_wlo_L2_WEIGHTScbu is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_wlo_L2_WEIGHTScbu is
    component L3_wlo_L2_WEIGHTScbu_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_wlo_L2_WEIGHTScbu_rom_U :  component L3_wlo_L2_WEIGHTScbu_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


