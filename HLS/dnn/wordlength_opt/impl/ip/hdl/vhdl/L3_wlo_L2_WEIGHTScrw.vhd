-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_wlo_L2_WEIGHTScrw_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_wlo_L2_WEIGHTScrw_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0010101001001111", 1 => "0010011111101001", 2 => "1010001000100111", 
    3 => "0001111111100010", 4 => "0010100010011001", 5 => "0010011000010110", 
    6 => "1010011001001010", 7 => "1010110000001110", 8 => "1010110000010000", 
    9 => "1010010011101101", 10 => "0010110001011111", 11 => "0010111110111110", 
    12 => "0010110010100111", 13 => "0010011100001101", 14 => "1010110000000110", 
    15 => "1010110010000010", 16 => "1010011001100101", 17 => "0010010110001100", 
    18 => "0010010011011101", 19 => "1010101100011110", 20 => "1010100000010111", 
    21 => "0010011011110101", 22 => "0010111001001100", 23 => "0011000011001010", 
    24 => "0010110001101010", 25 => "1010101010010001", 26 => "1011000001101100", 
    27 => "1010110011000101", 28 => "0010100111101011", 29 => "0011000001011011", 
    30 => "0010111000110010", 31 => "0010110110111111", 32 => "0010010110010101", 
    33 => "1010100111001011", 34 => "1010110011110111", 35 => "1010111001011100", 
    36 => "1010110001111001", 37 => "0010000001010111", 38 => "0010110110010000", 
    39 => "0010111111011100", 40 => "0010110111000101", 41 => "1010000111111110", 
    42 => "1010110110101010", 43 => "1011000001110011", 44 => "1010101111110110", 
    45 => "0001101010011110", 46 => "0010111011111100", 47 => "0010111101110100", 
    48 => "0010101100110101", 49 => "1010010001011010", 50 => "1010101101000000", 
    51 => "1010111000100110", 52 => "0001110101101110", 53 => "1001111111001101", 
    54 => "1010001110011110", 55 => "1010010001000010", 56 => "1001111000100011", 
    57 => "1010100000101111", 58 => "1010100100101110", 59 => "1010010100000111", 
    60 => "0010100110011001", 61 => "0010111011000100", 62 => "0010110110111000", 
    63 => "0010010101001011", 64 => "1010110010100100", 65 => "1010111001100001", 
    66 => "1010101110010011", 67 => "0010011010010000", 68 => "0010011111110011", 
    69 => "0010010010001001", 70 => "1010010110100110", 71 => "1010000011011110", 
    72 => "0010101110001110", 73 => "0010110111101000", 74 => "0010101110100001", 
    75 => "1010100111111100", 76 => "1010111010110001", 77 => "1011000000001011", 
    78 => "0010110010000100", 79 => "0011000000010101", 80 => "0011000000011011", 
    81 => "0010110001101000", 82 => "1010011110010101", 83 => "1010110101000001", 
    84 => "1010110001000000", 85 => "1010110110111010", 86 => "1010011111110111", 
    87 => "0010000111101100", 88 => "0010110011110001", 89 => "0010111001110011", 
    90 => "0010110110101001", 91 => "0001100001100111", 92 => "1010111010101101", 
    93 => "1011000001010110", 94 => "1010110110011111", 95 => "1001101011011001", 
    96 => "0010110111110000", 97 => "0010111110010001", 98 => "0010100010000010", 
    99 => "1010010101011100", 100 => "1010110111111011", 101 => "1010110111101011", 
    102 => "1010101000101011", 103 => "0010000001110111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_wlo_L2_WEIGHTScrw is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_wlo_L2_WEIGHTScrw is
    component L3_wlo_L2_WEIGHTScrw_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_wlo_L2_WEIGHTScrw_rom_U :  component L3_wlo_L2_WEIGHTScrw_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


