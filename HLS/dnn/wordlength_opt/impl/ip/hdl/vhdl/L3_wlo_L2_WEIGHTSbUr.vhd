-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_wlo_L2_WEIGHTSbUr_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_wlo_L2_WEIGHTSbUr_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0001110000011001", 1 => "0001100100100110", 2 => "0001111001011011", 
    3 => "1010000010110011", 4 => "1001101000100011", 5 => "1010010110101000", 
    6 => "1010000001110010", 7 => "1001111010000010", 8 => "0010001100111011", 
    9 => "0010001011111000", 10 => "0001101100111111", 11 => "1001111010000011", 
    12 => "0001010010111110", 13 => "1010010000000011", 14 => "1001001111111101", 
    15 => "1001011101110000", 16 => "1001110000101010", 17 => "1001100110010010", 
    18 => "1001111111001000", 19 => "0001011100011000", 20 => "0010000001110000", 
    21 => "0001110000100100", 22 => "1001100000110101", 23 => "1001110000011010", 
    24 => "0001111000010111", 25 => "1010000011001001", 26 => "0001001001011101", 
    27 => "1001110110000100", 28 => "0001001100011000", 29 => "0001100111111001", 
    30 => "0010001000111111", 31 => "0001110101000001", 32 => "0010001100111000", 
    33 => "1000110001001011", 34 => "1001111111000010", 35 => "1001110110101010", 
    36 => "0001100000011001", 37 => "0001100100100100", 38 => "1001110001000010", 
    39 => "1010001001000100", 40 => "1001111011010010", 41 => "0001110110001011", 
    42 => "0001110010000101", 43 => "0010010110001010", 44 => "0000110000011101", 
    45 => "0001000001101000", 46 => "1010000111000001", 47 => "1001000010101001", 
    48 => "0001101101111001", 49 => "1001001110110101", 50 => "1010010000100001", 
    51 => "1010001000101001", 52 => "1010001101111110", 53 => "0010000110000001", 
    54 => "0001000110111110", 55 => "1010010100011101", 56 => "1001111000011010", 
    57 => "0001100100001001", 58 => "0001111000100111", 59 => "0010000111010100", 
    60 => "0010001001110100", 61 => "0001100100010001", 62 => "1010000011110000", 
    63 => "0001111101111100", 64 => "1001011111100001", 65 => "0001100101000011", 
    66 => "1001100111110110", 67 => "1010000010001011", 68 => "1001110110111000", 
    69 => "0000110011000000", 70 => "0010010101100011", 71 => "0010001001101000", 
    72 => "0010001000100100", 73 => "0001010001101000", 74 => "1001101001001001", 
    75 => "1010000000100010", 76 => "0001100010101110", 77 => "1001010010101001", 
    78 => "0001011110011001", 79 => "1001110000100101", 80 => "0001110000110010", 
    81 => "0010000100100010", 82 => "0010010001000011", 83 => "1010000011110100", 
    84 => "1010000001011000", 85 => "1010001111101001", 86 => "0001111110100011", 
    87 => "1001101111011110", 88 => "0001010101101101", 89 => "0001100010000010", 
    90 => "1001110011111001", 91 => "0001111111100010", 92 => "0010000011010110", 
    93 => "1001111100001100", 94 => "1001110011110011", 95 => "1010000001001000", 
    96 => "1010001000111011", 97 => "1001110000000111", 98 => "0010000111110001", 
    99 => "0001111101010100", 100 => "0010000100100000", 101 => "0001110101101001", 
    102 => "1010001110110010", 103 => "1010000011101101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_wlo_L2_WEIGHTSbUr is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_wlo_L2_WEIGHTSbUr is
    component L3_wlo_L2_WEIGHTSbUr_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_wlo_L2_WEIGHTSbUr_rom_U :  component L3_wlo_L2_WEIGHTSbUr_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


