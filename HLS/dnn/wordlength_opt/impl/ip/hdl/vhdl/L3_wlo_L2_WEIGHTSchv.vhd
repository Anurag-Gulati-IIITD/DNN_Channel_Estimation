-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_wlo_L2_WEIGHTSchv_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_wlo_L2_WEIGHTSchv_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1011000101010101", 1 => "1011000000110100", 2 => "1010010000111100", 
    3 => "0010110100101010", 4 => "0010111100101100", 5 => "0011000000010111", 
    6 => "0010101011000100", 7 => "1010011100101100", 8 => "1010110111111100", 
    9 => "1011000000100011", 10 => "1010110100111001", 11 => "1010011001101011", 
    12 => "0010101010100110", 13 => "0010110010110010", 14 => "0010110101100000", 
    15 => "0010101111001011", 16 => "0001110100111000", 17 => "1010110100011000", 
    18 => "1010111000010100", 19 => "1010110111010111", 20 => "1010011111101010", 
    21 => "0010100000101101", 22 => "0010101100000010", 23 => "0010111010110000", 
    24 => "0010110011001011", 25 => "0001101110110011", 26 => "1010111010011100", 
    27 => "1010111001010110", 28 => "1010101101011001", 29 => "0010011111101100", 
    30 => "0010110111000101", 31 => "0010111011100111", 32 => "0010110111000110", 
    33 => "0010001001101100", 34 => "1010110101010110", 35 => "1010111111011100", 
    36 => "1010111110100101", 37 => "1010110010110100", 38 => "0010100001101001", 
    39 => "0010110010111011", 40 => "0010111010110000", 41 => "0010111000000100", 
    42 => "0010100111111001", 43 => "1001111111011001", 44 => "1010101010000101", 
    45 => "1010110101100011", 46 => "1010111010010010", 47 => "1010110101111111", 
    48 => "1010001101100011", 49 => "0010111011111101", 50 => "0011000011111111", 
    51 => "0011000010011110", 52 => "1001001110011000", 53 => "0010111000001000", 
    54 => "0011000100111011", 55 => "0010111100110011", 56 => "0010110001010101", 
    57 => "1010011010111000", 58 => "1010111000101100", 59 => "1010111110111100", 
    60 => "1010110100100110", 61 => "1010001001111110", 62 => "0010101001010101", 
    63 => "0010111100100100", 64 => "0010110010111001", 65 => "0010010111011011", 
    66 => "1010010011111101", 67 => "1010110011111111", 68 => "1010110101011000", 
    69 => "1010110101101011", 70 => "1010101000011110", 71 => "0010100001100011", 
    72 => "0010110101001000", 73 => "0010101101011100", 74 => "0010101011011000", 
    75 => "1010010010000101", 76 => "1010101010010100", 77 => "1010111011001011", 
    78 => "1010010001100111", 79 => "0010100101110101", 80 => "0010111001000010", 
    81 => "0010111101100011", 82 => "0010101111100100", 83 => "0010010100001001", 
    84 => "1010110001010100", 85 => "1011000000110101", 86 => "1010111111000100", 
    87 => "1010101001101101", 88 => "0010101011100000", 89 => "0010111111011101", 
    90 => "0010111010111001", 91 => "0010110011000001", 92 => "0010010010100011", 
    93 => "1010011111000111", 94 => "1010110101000001", 95 => "1010111001110100", 
    96 => "1010111000000010", 97 => "1010100011011001", 98 => "0010101011001011", 
    99 => "0010110111010010", 100 => "0011000010011100", 101 => "0011000000111000", 
    102 => "0010001011100010", 103 => "1011000000010100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_wlo_L2_WEIGHTSchv is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_wlo_L2_WEIGHTSchv is
    component L3_wlo_L2_WEIGHTSchv_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_wlo_L2_WEIGHTSchv_rom_U :  component L3_wlo_L2_WEIGHTSchv_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


