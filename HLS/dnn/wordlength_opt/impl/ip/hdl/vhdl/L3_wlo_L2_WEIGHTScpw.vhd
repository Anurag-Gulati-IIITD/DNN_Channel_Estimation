-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_wlo_L2_WEIGHTScpw_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_wlo_L2_WEIGHTScpw_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0001011010001110", 1 => "0010001100011001", 2 => "0010000000100000", 
    3 => "0001101110000100", 4 => "1010000000100001", 5 => "1010000111110011", 
    6 => "1010001101000110", 7 => "1010000100001011", 8 => "0001100000010101", 
    9 => "0010000011111101", 10 => "0010000110100011", 11 => "0010000000110010", 
    12 => "0001000011001001", 13 => "1001110101101100", 14 => "1001111101011111", 
    15 => "1001100000011011", 16 => "1001010100100010", 17 => "1001101011011011", 
    18 => "1001111001011101", 19 => "0001101001110110", 20 => "1001100000001010", 
    21 => "1000110111001101", 22 => "0001010111101011", 23 => "1001011100111011", 
    24 => "0001001110100101", 25 => "0001010011001111", 26 => "1001101101000110", 
    27 => "1001110011011010", 28 => "1001010011110111", 29 => "0001010110100110", 
    30 => "0001110110111011", 31 => "0010001011110011", 32 => "0001101000101011", 
    33 => "0001011111001011", 34 => "1001110100100001", 35 => "1001111001011101", 
    36 => "1001111111111110", 37 => "1001111001001100", 38 => "1001010001110101", 
    39 => "0001010101101110", 40 => "0010000101100000", 41 => "0010001110001011", 
    42 => "0001111100011010", 43 => "1001100010000010", 44 => "1010001101001000", 
    45 => "1010001001000111", 46 => "1001011111101111", 47 => "0001110111000100", 
    48 => "0010000110001010", 49 => "0010000101110010", 50 => "1001101101111001", 
    51 => "1001101101000001", 52 => "0001111111001110", 53 => "0001110001011110", 
    54 => "1001100001001100", 55 => "1010001101000101", 56 => "1010001000101001", 
    57 => "1010000010011110", 58 => "0001111101000100", 59 => "0010000111001101", 
    60 => "0010000100110110", 61 => "0001110111100110", 62 => "1001100111101010", 
    63 => "1010000111110111", 64 => "1001111000100001", 65 => "1001111011110101", 
    66 => "1001001110010000", 67 => "0000101001000010", 68 => "0001000100100101", 
    69 => "0001100100101010", 70 => "1001100111111000", 71 => "0001101011011011", 
    72 => "0001110100100101", 73 => "1001101010011010", 74 => "0001101001001100", 
    75 => "0001010110111011", 76 => "1001101100100100", 77 => "1000110110000001", 
    78 => "0000000011011010", 79 => "0001101110100101", 80 => "0001110011100010", 
    81 => "0010001001001111", 82 => "0001010000101001", 83 => "1000110001110101", 
    84 => "1001110001101010", 85 => "1010000101011111", 86 => "1010000101010100", 
    87 => "0000101011000000", 88 => "1001100011011001", 89 => "0001101011111110", 
    90 => "0010000001101001", 91 => "0001111101101111", 92 => "0001111010010101", 
    93 => "1000011101000110", 94 => "1010000101100101", 95 => "1010001111100001", 
    96 => "1001111100100010", 97 => "0001101110000100", 98 => "0010001101100010", 
    99 => "0010001000110010", 100 => "1001011000011100", 101 => "1001110101100001", 
    102 => "1010000110100110", 103 => "1001111111110110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_wlo_L2_WEIGHTScpw is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_wlo_L2_WEIGHTScpw is
    component L3_wlo_L2_WEIGHTScpw_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_wlo_L2_WEIGHTScpw_rom_U :  component L3_wlo_L2_WEIGHTScpw_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


