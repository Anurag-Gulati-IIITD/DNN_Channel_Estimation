-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_wlo_L2_WEIGHTScjv_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_wlo_L2_WEIGHTScjv_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1010100101111100", 1 => "1010111011000110", 2 => "1010111101000000", 
    3 => "1010100100110010", 4 => "0010011101101001", 5 => "0010111011001111", 
    6 => "0010110110110010", 7 => "0010100011000001", 8 => "1010011101101011", 
    9 => "1010011010000011", 10 => "1010000001010010", 11 => "1010001100010100", 
    12 => "1010100111011100", 13 => "1010100010100001", 14 => "1010001000101001", 
    15 => "0010100011111011", 16 => "0010110110001000", 17 => "0010110011010101", 
    18 => "0010000101001010", 19 => "1010101110000011", 20 => "1010110111110011", 
    21 => "1010100011011101", 22 => "0010011110111101", 23 => "0010100101111001", 
    24 => "0010000010101111", 25 => "0010000100011010", 26 => "0010000001011000", 
    27 => "0010100001111011", 28 => "1001110111100101", 29 => "1010101010000100", 
    30 => "1010110001001111", 31 => "1010010110111100", 32 => "0010001101010100", 
    33 => "0010110000101001", 34 => "0010101001000111", 35 => "1010010000110111", 
    36 => "1010110011010111", 37 => "1010101000001001", 38 => "0010010001010100", 
    39 => "0010110010001111", 40 => "0010100001011111", 41 => "1010100100101000", 
    42 => "1010110000101010", 43 => "1010100111101000", 44 => "0010101001101010", 
    45 => "0010111000100011", 46 => "0010110001101110", 47 => "1010101100110110", 
    48 => "1011000000100110", 49 => "1011000000011111", 50 => "1001001011000100", 
    51 => "0010111011111110", 52 => "1010111011010111", 53 => "1010110101110100", 
    54 => "0010010101011111", 55 => "0011000001011010", 56 => "0010111000000101", 
    57 => "0010100010001010", 58 => "1010100000111111", 59 => "1010101110001010", 
    60 => "1010101010110101", 61 => "1010011101011100", 62 => "1010001011110011", 
    63 => "1010101001101101", 64 => "1001110111110010", 65 => "0010010101100001", 
    66 => "0010110101001111", 67 => "0010110101001011", 68 => "0010010111000111", 
    69 => "1010101111100000", 70 => "1010111101000111", 71 => "1010110010101001", 
    72 => "1001110101001110", 73 => "0010110000111010", 74 => "0010101101000011", 
    75 => "0010011100001100", 76 => "1010011101110001", 77 => "1010011001001001", 
    78 => "0010000100010111", 79 => "0001101111000001", 80 => "1010100100011110", 
    81 => "1010100101101000", 82 => "1001111111101101", 83 => "0010110010111001", 
    84 => "0010101111001000", 85 => "0010011000110100", 86 => "1010110100010001", 
    87 => "1010101001100000", 88 => "1010010011100011", 89 => "0010101010000110", 
    90 => "0010110001100001", 91 => "1000100011101010", 92 => "1010101000011001", 
    93 => "1010011000101110", 94 => "0010010110010100", 95 => "0010110101010111", 
    96 => "0010110100111101", 97 => "1010010000101100", 98 => "1010111101110010", 
    99 => "1010111110111010", 100 => "1010101011100001", 101 => "0010101110010110", 
    102 => "0011000110100011", 103 => "0011000001111100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_wlo_L2_WEIGHTScjv is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_wlo_L2_WEIGHTScjv is
    component L3_wlo_L2_WEIGHTScjv_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_wlo_L2_WEIGHTScjv_rom_U :  component L3_wlo_L2_WEIGHTScjv_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


