-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_wlo_L2_WEIGHTSbQq_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_wlo_L2_WEIGHTSbQq_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1010110000001100", 1 => "1010100011011111", 2 => "1010011111010101", 
    3 => "0010010111110101", 4 => "0010111000100101", 5 => "0010110100101000", 
    6 => "0010101110101110", 7 => "0010000010101110", 8 => "1010110011111011", 
    9 => "1010110111001010", 10 => "1010110111011001", 11 => "1010000010111011", 
    12 => "0010101011000000", 13 => "0011000000001111", 14 => "0010111101011110", 
    15 => "0010110000011011", 16 => "1010011110111011", 17 => "1010110101011110", 
    18 => "1010111101100110", 19 => "1010101100101001", 20 => "1001110011010110", 
    21 => "0010101101101100", 22 => "0010111101110010", 23 => "0010101111111100", 
    24 => "0010100010000100", 25 => "0000101010001110", 26 => "1010101011111100", 
    27 => "1010110011000001", 28 => "1010101011010111", 29 => "1010100110100010", 
    30 => "0010100010011010", 31 => "0010111010100010", 32 => "0010111101000101", 
    33 => "0010110110101001", 34 => "0010001100011000", 35 => "1010110011100000", 
    36 => "1010110111101010", 37 => "1010101101010101", 38 => "1010100000010111", 
    39 => "0010101000010010", 40 => "0010110001011000", 41 => "0010101111001111", 
    42 => "0010100111110011", 43 => "0010001011100110", 44 => "1010100000110110", 
    45 => "1010110011010000", 46 => "1010110111111111", 47 => "1010011111010101", 
    48 => "0010010100010011", 49 => "0010110001111001", 50 => "0010111010001011", 
    51 => "0010110100110101", 52 => "0001101100110000", 53 => "0010101001010011", 
    54 => "0010110001001010", 55 => "0010110011110010", 56 => "0010001111011110", 
    57 => "1010101001110011", 58 => "1010111000011000", 59 => "1010111001110010", 
    60 => "1010110001001110", 61 => "0010000101011010", 62 => "0010111001100100", 
    63 => "0010111010010011", 64 => "0010111101001000", 65 => "0010110010000010", 
    66 => "1010101101111101", 67 => "1010111100110111", 68 => "1010111111110000", 
    69 => "1010100010100000", 70 => "0010101011000000", 71 => "0010111010000101", 
    72 => "0010111001001001", 73 => "0010111010010110", 74 => "0010010110111011", 
    75 => "1010100000001000", 76 => "1010111010010110", 77 => "1010101011110101", 
    78 => "1010101101101001", 79 => "1001001010110001", 80 => "0010100011010001", 
    81 => "0010110011100100", 82 => "0010111101100001", 83 => "0010011001011001", 
    84 => "1010100110000110", 85 => "1010110011100000", 86 => "1010111001110100", 
    87 => "1010110001111010", 88 => "1010000000100111", 89 => "0010100001011100", 
    90 => "0010110110010100", 91 => "0010101110101010", 92 => "0010001110001111", 
    93 => "1010100010101111", 94 => "1010101001011000", 95 => "1010100101001001", 
    96 => "1010100110001101", 97 => "1010010000110101", 98 => "1010001000101010", 
    99 => "0010101110001001", 100 => "0010110101001001", 101 => "0010101010100110", 
    102 => "1001110110011100", 103 => "1010101011110010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_wlo_L2_WEIGHTSbQq is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_wlo_L2_WEIGHTSbQq is
    component L3_wlo_L2_WEIGHTSbQq_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_wlo_L2_WEIGHTSbQq_rom_U :  component L3_wlo_L2_WEIGHTSbQq_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


