-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_wlo_L2_WEIGHTSb1s_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_wlo_L2_WEIGHTSb1s_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0010110101010000", 1 => "1010100010001110", 2 => "1010111111001110", 
    3 => "1010111011100111", 4 => "1010100100100011", 5 => "0010101001000011", 
    6 => "0010111010111000", 7 => "0010110111011000", 8 => "0010010001101001", 
    9 => "1010101010110001", 10 => "1010110101111000", 11 => "1010101001010000", 
    12 => "0010000010000101", 13 => "0010110011001110", 14 => "0010110110011001", 
    15 => "0010100011110100", 16 => "1010011011110001", 17 => "1010111001111110", 
    18 => "1010111001111011", 19 => "1010010110111011", 20 => "0010110000111010", 
    21 => "0011000010000010", 22 => "0010111100101110", 23 => "0010001000001101", 
    24 => "1010111011100010", 25 => "1011000011000000", 26 => "0010100110001101", 
    27 => "0010111010001000", 28 => "0010110111111100", 29 => "0001110100000011", 
    30 => "1010110100011010", 31 => "1010110010000001", 32 => "1010010010010001", 
    33 => "0010101000110101", 34 => "0010110000111011", 35 => "0010001010000001", 
    36 => "1010011110011101", 37 => "1010101011011110", 38 => "1010100110110111", 
    39 => "0001110111100101", 40 => "0010100101000110", 41 => "0010100001110100", 
    42 => "0010010110101010", 43 => "1010010100011110", 44 => "1010011101101111", 
    45 => "1010011000011111", 46 => "0010010010101111", 47 => "0010100111111011", 
    48 => "0010010110000110", 49 => "1010010001101011", 50 => "1010101011111000", 
    51 => "1010101011110111", 52 => "1010111110110011", 53 => "1011000001000010", 
    54 => "1010101100011000", 55 => "0010100011011011", 56 => "0010111011111110", 
    57 => "0010111010100011", 58 => "0010100010110111", 59 => "1010100111110010", 
    60 => "1010111001010100", 61 => "1010101110110110", 62 => "1001110000101111", 
    63 => "0010101010110000", 64 => "0010110100011010", 65 => "0010101100011010", 
    66 => "1010010000011000", 67 => "1010110101000111", 68 => "1010110111010110", 
    69 => "1010101000000010", 70 => "0010101001011110", 71 => "0010111100101010", 
    72 => "0010111010110001", 73 => "0010000101011111", 74 => "1010110111000011", 
    75 => "1011000001010100", 76 => "1010110111101100", 77 => "0010011100001010", 
    78 => "0010111101111011", 79 => "0010101000001110", 80 => "1010101100011011", 
    81 => "1010110111000000", 82 => "1010101001100100", 83 => "0010001001100000", 
    84 => "0010110000101011", 85 => "0010101100011010", 86 => "1010001000011001", 
    87 => "1010110001010100", 88 => "1010101010001010", 89 => "0001110110101101", 
    90 => "0010100101100101", 91 => "0010101101010011", 92 => "0010010001000111", 
    93 => "1010000010111000", 94 => "1010100110011111", 95 => "1010011010111110", 
    96 => "1001111111101110", 97 => "0010100101111100", 98 => "0010010101000010", 
    99 => "1010001011011010", 100 => "1010100001011011", 101 => "1010100111101111", 
    102 => "1010011011111011", 103 => "0010011010101011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_wlo_L2_WEIGHTSb1s is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_wlo_L2_WEIGHTSb1s is
    component L3_wlo_L2_WEIGHTSb1s_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_wlo_L2_WEIGHTSb1s_rom_U :  component L3_wlo_L2_WEIGHTSb1s_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


