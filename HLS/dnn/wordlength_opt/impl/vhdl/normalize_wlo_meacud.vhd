-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity normalize_wlo_meacud_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of normalize_wlo_meacud_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1001100110111101", 1 => "1001010101100111", 2 => "0001000100010010", 
    3 => "0001100011001010", 4 => "0001101010100101", 5 => "0001100111110001", 
    6 => "0001010100010011", 7 => "1001010011111010", 8 => "1001101100010100", 
    9 => "1001110001010101", 10 => "1001100111111100", 11 => "0000000111110111", 
    12 => "0001101010000111", 13 => "0001110011111100", 14 => "0001110000110110", 
    15 => "0001010100011111", 16 => "1001100010011000", 17 => "1001110010111001", 
    18 => "1001110011011001", 19 => "1001100101010010", 20 => "0001001000111000", 
    21 => "0001101110001011", 22 => "0001110011111100", 23 => "0001101110110010", 
    24 => "0001001110011010", 25 => "1001100010101111", 26 => "1001110010010001", 
    27 => "1001100100100010", 28 => "0001000010110000", 29 => "0001101011110011", 
    30 => "0001110011001101", 31 => "0001101111100111", 32 => "0001010100011001", 
    33 => "1001100001000100", 34 => "1001110010100100", 35 => "1001110011111101", 
    36 => "1001100110011111", 37 => "0001001100100111", 38 => "0001110000110011", 
    39 => "0001110101001001", 40 => "0001101100011011", 41 => "0000000001110101", 
    42 => "1001101010011010", 43 => "1001110010010001", 44 => "1001101010110111", 
    45 => "1001000111101100", 46 => "0001011011100000", 47 => "0001100110110000", 
    48 => "0001100100110011", 49 => "0001011000110111", 50 => "0000110110110100", 
    51 => "1001000111101110", 52 => "0001011000110111", 53 => "0001100111101010", 
    54 => "0001101000010110", 55 => "0001100000101010", 56 => "0000111000001100", 
    57 => "1001011100010110", 58 => "1001101100010011", 59 => "1001101101001010", 
    60 => "1001100010000111", 61 => "0001000110111010", 62 => "0001101100011000", 
    63 => "0001110011010111", 64 => "0001101101111101", 65 => "0001000110000101", 
    66 => "1001100110010100", 67 => "1001110100000111", 68 => "1001110010101011", 
    69 => "1001011110011011", 70 => "0001011010011001", 71 => "0001110001000001", 
    72 => "0001110100001110", 73 => "0001101001110000", 74 => "0000100100000011", 
    75 => "1001101000010101", 76 => "1001110011000000", 77 => "1001110000110100", 
    78 => "0001011001001011", 79 => "0001101111110100", 80 => "0001110010101011", 
    81 => "0001101010111010", 82 => "0000111010101111", 83 => "1001100111000010", 
    84 => "1001110010101111", 85 => "1001110010011011", 86 => "1001100000010011", 
    87 => "0001010110100000", 88 => "0001110001100110", 89 => "0001110100101110", 
    90 => "0001101001110010", 91 => "1000111110111100", 92 => "1001101110000011", 
    93 => "1001110011111110", 94 => "1001101101000011", 95 => "1000111100010000", 
    96 => "0001100101010001", 97 => "0001101101110101", 98 => "0001101000101110", 
    99 => "0001010000110101", 100 => "1001000100011000", 101 => "1001011011101100", 
    102 => "1001100000100110", 103 => "1001011110011111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity normalize_wlo_meacud is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of normalize_wlo_meacud is
    component normalize_wlo_meacud_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    normalize_wlo_meacud_rom_U :  component normalize_wlo_meacud_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


