-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_wlo_L2_WEIGHTS_7_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_wlo_L2_WEIGHTS_7_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1001101100001111", 1 => "0010100000010010", 2 => "0010000010011010", 
    3 => "1010100010010010", 4 => "1001100101101111", 5 => "0010010011100001", 
    6 => "0010111000101001", 7 => "0010101101001000", 8 => "1010100001000001", 
    9 => "1010110001101100", 10 => "1010101001111010", 11 => "0010001001101011", 
    12 => "0010110111101100", 13 => "0010110001000111", 14 => "0010011010111111", 
    15 => "1010110000000111", 16 => "1010110011010001", 17 => "0000100101101000", 
    18 => "0010110001111011", 19 => "0010110101000010", 20 => "0001110010101010", 
    21 => "1010101101100011", 22 => "1010110011111001", 23 => "1010100101110111", 
    24 => "0010101001010000", 25 => "0010110101101100", 26 => "1001101011011000", 
    27 => "1010101001100000", 28 => "1010101111011001", 29 => "1010100101111001", 
    30 => "0001101100101011", 31 => "0010100100001111", 32 => "0010011010011111", 
    33 => "0010011101000100", 34 => "0010101000001100", 35 => "0010011110011000", 
    36 => "1010100010000100", 37 => "1010110000000111", 38 => "1010110110010100", 
    39 => "1010011101011101", 40 => "0010100010000000", 41 => "0010110100101101", 
    42 => "0010110100100010", 43 => "0010010100100111", 44 => "1010101101001100", 
    45 => "1010110100011110", 46 => "1010101011110100", 47 => "1010001000101111", 
    48 => "0010010100111111", 49 => "0010001111110000", 50 => "0010100001001110", 
    51 => "0010011101101001", 52 => "1010010011000011", 53 => "1010010101001100", 
    54 => "1010001111011000", 55 => "0010001111010000", 56 => "0010100000010111", 
    57 => "0010100111100010", 58 => "1010010010110100", 59 => "1010101010110010", 
    60 => "1010110001011010", 61 => "1010011101000000", 62 => "0010011111110110", 
    63 => "0010110110001010", 64 => "0010100101101110", 65 => "1010100011000111", 
    66 => "1010110001000010", 67 => "1010101100111100", 68 => "0010001100010000", 
    69 => "0010110011000011", 70 => "0010101111000011", 71 => "1010100001011101", 
    72 => "1010110111101010", 73 => "1010100111011000", 74 => "0010011100011000", 
    75 => "0010110101011000", 76 => "0010110011001011", 77 => "0001101111110011", 
    78 => "1010101011101000", 79 => "1010010010010100", 80 => "0000111010011010", 
    81 => "0010100000001001", 82 => "0010100100110011", 83 => "0010010001000010", 
    84 => "0010100001011110", 85 => "0010000001000101", 86 => "1010011100000000", 
    87 => "1010100011001000", 88 => "1010110001011110", 89 => "1010000100000100", 
    90 => "0010011110111010", 91 => "0010110100011011", 92 => "0010110111001100", 
    93 => "0010010011001001", 94 => "1010101111001001", 95 => "1010110010001101", 
    96 => "1010101101100100", 97 => "1001111110000001", 98 => "0010001100000011", 
    99 => "0010101000100111", 100 => "0010100011001101", 101 => "0010001101001001", 
    102 => "0010001100101100", 103 => "1010101011001101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_wlo_L2_WEIGHTS_7 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_wlo_L2_WEIGHTS_7 is
    component L3_wlo_L2_WEIGHTS_7_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_wlo_L2_WEIGHTS_7_rom_U :  component L3_wlo_L2_WEIGHTS_7_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


