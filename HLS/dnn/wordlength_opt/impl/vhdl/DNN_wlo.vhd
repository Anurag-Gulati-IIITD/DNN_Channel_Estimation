-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DNN_wlo is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    LS_stream_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    LS_stream_TVALID : IN STD_LOGIC;
    LS_stream_TREADY : OUT STD_LOGIC;
    LS_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    DNN_out_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    DNN_out_TVALID : OUT STD_LOGIC;
    DNN_out_TREADY : IN STD_LOGIC;
    DNN_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of DNN_wlo is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "DNN_wlo,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.482400,HLS_SYN_LAT=1765,HLS_SYN_TPT=none,HLS_SYN_MEM=60,HLS_SYN_DSP=162,HLS_SYN_FF=33972,HLS_SYN_LUT=26927,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv7_68 : STD_LOGIC_VECTOR (6 downto 0) := "1101000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal LS_stream_V_data_0_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal LS_stream_V_data_0_vld_in : STD_LOGIC;
    signal LS_stream_V_data_0_vld_out : STD_LOGIC;
    signal LS_stream_V_data_0_ack_in : STD_LOGIC;
    signal LS_stream_V_data_0_ack_out : STD_LOGIC;
    signal LS_stream_V_data_0_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal LS_stream_V_data_0_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal LS_stream_V_data_0_sel_rd : STD_LOGIC := '0';
    signal LS_stream_V_data_0_sel_wr : STD_LOGIC := '0';
    signal LS_stream_V_data_0_sel : STD_LOGIC;
    signal LS_stream_V_data_0_load_A : STD_LOGIC;
    signal LS_stream_V_data_0_load_B : STD_LOGIC;
    signal LS_stream_V_data_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal LS_stream_V_data_0_state_cmp_full : STD_LOGIC;
    signal LS_stream_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal LS_stream_V_last_V_0_vld_in : STD_LOGIC;
    signal LS_stream_V_last_V_0_vld_out : STD_LOGIC;
    signal LS_stream_V_last_V_0_ack_in : STD_LOGIC;
    signal LS_stream_V_last_V_0_ack_out : STD_LOGIC;
    signal LS_stream_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal LS_stream_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal LS_stream_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal LS_stream_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal LS_stream_V_last_V_0_sel : STD_LOGIC;
    signal LS_stream_V_last_V_0_load_A : STD_LOGIC;
    signal LS_stream_V_last_V_0_load_B : STD_LOGIC;
    signal LS_stream_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal LS_stream_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal DNN_out_V_data_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal DNN_out_V_data_1_vld_in : STD_LOGIC;
    signal DNN_out_V_data_1_vld_out : STD_LOGIC;
    signal DNN_out_V_data_1_ack_in : STD_LOGIC;
    signal DNN_out_V_data_1_ack_out : STD_LOGIC;
    signal DNN_out_V_data_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal DNN_out_V_data_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal DNN_out_V_data_1_sel_rd : STD_LOGIC := '0';
    signal DNN_out_V_data_1_sel_wr : STD_LOGIC := '0';
    signal DNN_out_V_data_1_sel : STD_LOGIC;
    signal DNN_out_V_data_1_load_A : STD_LOGIC;
    signal DNN_out_V_data_1_load_B : STD_LOGIC;
    signal DNN_out_V_data_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal DNN_out_V_data_1_state_cmp_full : STD_LOGIC;
    signal DNN_out_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal DNN_out_V_last_V_1_vld_in : STD_LOGIC;
    signal DNN_out_V_last_V_1_vld_out : STD_LOGIC;
    signal DNN_out_V_last_V_1_ack_in : STD_LOGIC;
    signal DNN_out_V_last_V_1_ack_out : STD_LOGIC;
    signal DNN_out_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal DNN_out_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal DNN_out_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal DNN_out_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal DNN_out_V_last_V_1_sel : STD_LOGIC;
    signal DNN_out_V_last_V_1_load_A : STD_LOGIC;
    signal DNN_out_V_last_V_1_load_B : STD_LOGIC;
    signal DNN_out_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal DNN_out_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal std_o_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal std_o_ce0 : STD_LOGIC;
    signal std_o_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mean_o_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mean_o_ce0 : STD_LOGIC;
    signal mean_o_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_0_i_reg_450 : STD_LOGIC_VECTOR (6 downto 0);
    signal norm_LS_data_0_0_reg_1775 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_normalize_wlo_fu_942_ap_ready : STD_LOGIC;
    signal grp_normalize_wlo_fu_942_ap_done : STD_LOGIC;
    signal norm_LS_data_0_1_reg_1780 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_1_0_reg_1785 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_1_1_reg_1790 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_2_0_reg_1795 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_2_1_reg_1800 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_3_0_reg_1805 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_3_1_reg_1810 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_4_0_reg_1815 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_4_1_reg_1820 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_5_0_reg_1825 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_5_1_reg_1830 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_6_0_reg_1835 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_6_1_reg_1840 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_7_0_reg_1845 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_7_1_reg_1850 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_8_0_reg_1855 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_8_1_reg_1860 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_9_0_reg_1865 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_9_1_reg_1870 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_10_0_reg_1875 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_10_1_reg_1880 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_11_0_reg_1885 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_11_1_reg_1890 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_12_0_reg_1895 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_12_1_reg_1900 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_13_0_reg_1905 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_13_1_reg_1910 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_14_0_reg_1915 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_14_1_reg_1920 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_15_0_reg_1925 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_15_1_reg_1930 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_16_0_reg_1935 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_16_1_reg_1940 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_17_0_reg_1945 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_17_1_reg_1950 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_18_0_reg_1955 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_18_1_reg_1960 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_19_0_reg_1965 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_19_1_reg_1970 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_20_0_reg_1975 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_20_1_reg_1980 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_21_0_reg_1985 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_21_1_reg_1990 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_22_0_reg_1995 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_22_1_reg_2000 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_23_0_reg_2005 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_23_1_reg_2010 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_24_0_reg_2015 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_24_1_reg_2020 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_25_0_reg_2025 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_25_1_reg_2030 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_26_0_reg_2035 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_26_1_reg_2040 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_27_0_reg_2045 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_27_1_reg_2050 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_28_0_reg_2055 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_28_1_reg_2060 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_29_0_reg_2065 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_29_1_reg_2070 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_30_0_reg_2075 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_30_1_reg_2080 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_31_0_reg_2085 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_31_1_reg_2090 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_32_0_reg_2095 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_32_1_reg_2100 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_33_0_reg_2105 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_33_1_reg_2110 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_34_0_reg_2115 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_34_1_reg_2120 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_35_0_reg_2125 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_35_1_reg_2130 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_36_0_reg_2135 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_36_1_reg_2140 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_37_0_reg_2145 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_37_1_reg_2150 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_38_0_reg_2155 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_38_1_reg_2160 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_39_0_reg_2165 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_39_1_reg_2170 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_40_0_reg_2175 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_40_1_reg_2180 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_41_0_reg_2185 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_41_1_reg_2190 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_42_0_reg_2195 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_42_1_reg_2200 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_43_0_reg_2205 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_43_1_reg_2210 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_44_0_reg_2215 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_44_1_reg_2220 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_45_0_reg_2225 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_45_1_reg_2230 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_46_0_reg_2235 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_46_1_reg_2240 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_47_0_reg_2245 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_47_1_reg_2250 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_48_0_reg_2255 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_48_1_reg_2260 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_49_0_reg_2265 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_49_1_reg_2270 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_50_0_reg_2275 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_50_1_reg_2280 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_51_0_reg_2285 : STD_LOGIC_VECTOR (15 downto 0);
    signal norm_LS_data_51_1_reg_2290 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_0_0_reg_2295 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_L2_wlo_fu_461_ap_ready : STD_LOGIC;
    signal grp_L2_wlo_fu_461_ap_done : STD_LOGIC;
    signal y_L2_0_1_reg_2300 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_1_0_reg_2305 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_1_1_reg_2310 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_2_0_reg_2315 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_2_1_reg_2320 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_3_0_reg_2325 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_3_1_reg_2330 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_4_0_reg_2335 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_4_1_reg_2340 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_5_0_reg_2345 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_5_1_reg_2350 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_6_0_reg_2355 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_6_1_reg_2360 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_7_0_reg_2365 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_7_1_reg_2370 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_8_0_reg_2375 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_8_1_reg_2380 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_9_0_reg_2385 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_9_1_reg_2390 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_10_0_reg_2395 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_10_1_reg_2400 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_11_0_reg_2405 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_11_1_reg_2410 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_12_0_reg_2415 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_12_1_reg_2420 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_13_0_reg_2425 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_13_1_reg_2430 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_14_0_reg_2435 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_14_1_reg_2440 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_15_0_reg_2445 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_15_1_reg_2450 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_16_0_reg_2455 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_16_1_reg_2460 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_17_0_reg_2465 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_17_1_reg_2470 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_18_0_reg_2475 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_18_1_reg_2480 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_19_0_reg_2485 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_19_1_reg_2490 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_20_0_reg_2495 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_20_1_reg_2500 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_21_0_reg_2505 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_21_1_reg_2510 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_22_0_reg_2515 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_22_1_reg_2520 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_23_0_reg_2525 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_23_1_reg_2530 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_24_0_reg_2535 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_24_1_reg_2540 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_25_0_reg_2545 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L2_25_1_reg_2550 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln529_fu_1757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln529_reg_2555 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state8_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln529_reg_2555_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln529_reg_2555_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln529_reg_2555_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln529_reg_2555_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln529_reg_2555_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln529_reg_2555_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln529_reg_2555_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln529_reg_2555_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln529_reg_2555_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln529_reg_2555_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_1763_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal zext_ln531_fu_1769_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln531_reg_2564 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln531_reg_2564_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln531_reg_2564_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln531_reg_2564_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln531_reg_2564_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln531_reg_2564_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln531_reg_2564_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln531_reg_2564_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln531_reg_2564_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln531_reg_2564_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln531_reg_2564_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal y_L3_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_L3_load_reg_2580 : STD_LOGIC_VECTOR (15 downto 0);
    signal std_o_load_reg_2585 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_973_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_i_reg_2595 : STD_LOGIC_VECTOR (15 downto 0);
    signal mean_o_load_reg_2600 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_969_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_i_reg_2605 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_L3_wlo_fu_779_ap_ready : STD_LOGIC;
    signal grp_L3_wlo_fu_779_ap_done : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state8 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal LS_data_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal LS_data_ce0 : STD_LOGIC;
    signal LS_data_we0 : STD_LOGIC;
    signal LS_data_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal LS_data_ce1 : STD_LOGIC;
    signal LS_data_we1 : STD_LOGIC;
    signal y_L3_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal y_L3_ce0 : STD_LOGIC;
    signal y_L3_we0 : STD_LOGIC;
    signal denorm_DNN_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal denorm_DNN_ce0 : STD_LOGIC;
    signal denorm_DNN_we0 : STD_LOGIC;
    signal denorm_DNN_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal denorm_DNN_ce1 : STD_LOGIC;
    signal denorm_DNN_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_start : STD_LOGIC;
    signal grp_L2_wlo_fu_461_ap_idle : STD_LOGIC;
    signal grp_L2_wlo_fu_461_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_7 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_8 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_9 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_11 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_12 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_13 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_14 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_15 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_16 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_17 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_18 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_19 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_20 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_21 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_22 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_23 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_24 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_25 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_26 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_27 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_28 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_29 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_30 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_31 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_32 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_33 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_34 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_35 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_36 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_37 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_38 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_39 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_40 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_41 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_42 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_43 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_44 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_45 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_46 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_47 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_48 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_49 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_50 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L2_wlo_fu_461_ap_return_51 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_L3_wlo_fu_779_ap_start : STD_LOGIC;
    signal grp_L3_wlo_fu_779_ap_idle : STD_LOGIC;
    signal grp_L3_wlo_fu_779_y_L3_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_L3_wlo_fu_779_y_L3_ce0 : STD_LOGIC;
    signal grp_L3_wlo_fu_779_y_L3_we0 : STD_LOGIC;
    signal grp_L3_wlo_fu_779_y_L3_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_start : STD_LOGIC;
    signal grp_normalize_wlo_fu_942_ap_idle : STD_LOGIC;
    signal grp_normalize_wlo_fu_942_LS_data_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_normalize_wlo_fu_942_LS_data_ce0 : STD_LOGIC;
    signal grp_normalize_wlo_fu_942_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_7 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_8 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_9 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_11 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_12 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_13 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_14 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_15 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_16 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_17 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_18 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_19 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_20 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_21 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_22 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_23 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_24 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_25 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_26 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_27 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_28 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_29 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_30 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_31 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_32 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_33 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_34 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_35 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_36 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_37 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_38 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_39 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_40 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_41 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_42 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_43 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_44 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_45 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_46 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_47 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_48 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_49 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_50 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_51 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_52 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_53 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_54 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_55 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_56 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_57 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_58 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_59 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_60 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_61 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_62 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_63 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_64 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_65 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_66 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_67 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_68 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_69 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_70 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_71 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_72 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_73 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_74 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_75 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_76 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_77 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_78 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_79 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_80 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_81 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_82 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_83 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_84 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_85 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_86 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_87 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_88 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_89 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_90 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_91 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_92 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_93 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_94 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_95 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_96 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_97 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_98 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_99 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_100 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_101 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_102 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_normalize_wlo_fu_942_ap_return_103 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_separate_complex_wlo_fu_951_ap_start : STD_LOGIC;
    signal grp_separate_complex_wlo_fu_951_ap_done : STD_LOGIC;
    signal grp_separate_complex_wlo_fu_951_ap_idle : STD_LOGIC;
    signal grp_separate_complex_wlo_fu_951_ap_ready : STD_LOGIC;
    signal grp_separate_complex_wlo_fu_951_LS_stream_TVALID : STD_LOGIC;
    signal grp_separate_complex_wlo_fu_951_LS_stream_TREADY : STD_LOGIC;
    signal grp_separate_complex_wlo_fu_951_sep_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_separate_complex_wlo_fu_951_sep_ce0 : STD_LOGIC;
    signal grp_separate_complex_wlo_fu_951_sep_we0 : STD_LOGIC;
    signal grp_separate_complex_wlo_fu_951_sep_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_separate_complex_wlo_fu_951_sep_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_separate_complex_wlo_fu_951_sep_ce1 : STD_LOGIC;
    signal grp_separate_complex_wlo_fu_951_sep_we1 : STD_LOGIC;
    signal grp_separate_complex_wlo_fu_951_sep_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_reconstruct_complex_s_fu_960_ap_start : STD_LOGIC;
    signal grp_reconstruct_complex_s_fu_960_ap_done : STD_LOGIC;
    signal grp_reconstruct_complex_s_fu_960_ap_idle : STD_LOGIC;
    signal grp_reconstruct_complex_s_fu_960_ap_ready : STD_LOGIC;
    signal grp_reconstruct_complex_s_fu_960_y_L3_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_reconstruct_complex_s_fu_960_y_L3_ce0 : STD_LOGIC;
    signal grp_reconstruct_complex_s_fu_960_y_L3_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_reconstruct_complex_s_fu_960_y_L3_ce1 : STD_LOGIC;
    signal grp_reconstruct_complex_s_fu_960_DNN_out_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_reconstruct_complex_s_fu_960_DNN_out_TVALID : STD_LOGIC;
    signal grp_reconstruct_complex_s_fu_960_DNN_out_TREADY : STD_LOGIC;
    signal grp_reconstruct_complex_s_fu_960_DNN_out_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_L2_wlo_fu_461_ap_start_reg : STD_LOGIC := '0';
    signal grp_L3_wlo_fu_779_ap_start_reg : STD_LOGIC := '0';
    signal grp_normalize_wlo_fu_942_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_separate_complex_wlo_fu_951_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_reconstruct_complex_s_fu_960_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_block_state22 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component L2_wlo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read10 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read11 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read12 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read13 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read14 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read15 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read16 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read17 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read18 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read19 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read20 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read21 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read22 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read23 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read24 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read25 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read26 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read27 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read28 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read29 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read30 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read31 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read32 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read33 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read34 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read35 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read36 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read37 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read38 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read39 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read40 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read41 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read42 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read43 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read44 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read45 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read46 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read47 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read48 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read49 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read50 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read51 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read52 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read53 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read54 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read55 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read56 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read57 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read58 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read59 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read60 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read61 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read62 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read63 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read64 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read65 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read66 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read67 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read68 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read69 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read70 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read71 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read72 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read73 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read74 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read75 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read76 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read77 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read78 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read79 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read80 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read81 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read82 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read83 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read84 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read85 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read86 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read87 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read88 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read89 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read90 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read91 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read92 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read93 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read94 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read95 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read96 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read97 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read98 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read99 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read100 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read101 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read102 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read103 : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_20 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_21 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_22 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_23 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_24 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_25 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_26 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_27 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_28 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_29 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_30 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_31 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_32 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_33 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_34 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_35 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_36 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_37 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_38 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_39 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_40 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_41 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_42 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_43 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_44 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_45 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_46 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_47 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_48 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_49 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_50 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_51 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component L3_wlo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read10 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read11 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read12 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read13 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read14 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read15 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read16 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read17 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read18 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read19 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read20 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read21 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read22 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read23 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read24 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read25 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read26 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read27 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read28 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read29 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read30 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read31 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read32 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read33 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read34 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read35 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read36 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read37 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read38 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read39 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read40 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read41 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read42 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read43 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read44 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read45 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read46 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read47 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read48 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read49 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read50 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read51 : IN STD_LOGIC_VECTOR (15 downto 0);
        y_L3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        y_L3_ce0 : OUT STD_LOGIC;
        y_L3_we0 : OUT STD_LOGIC;
        y_L3_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component normalize_wlo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        LS_data_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        LS_data_ce0 : OUT STD_LOGIC;
        LS_data_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_20 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_21 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_22 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_23 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_24 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_25 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_26 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_27 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_28 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_29 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_30 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_31 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_32 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_33 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_34 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_35 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_36 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_37 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_38 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_39 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_40 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_41 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_42 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_43 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_44 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_45 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_46 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_47 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_48 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_49 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_50 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_51 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_52 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_53 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_54 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_55 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_56 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_57 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_58 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_59 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_60 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_61 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_62 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_63 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_64 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_65 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_66 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_67 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_68 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_69 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_70 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_71 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_72 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_73 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_74 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_75 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_76 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_77 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_78 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_79 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_80 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_81 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_82 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_83 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_84 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_85 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_86 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_87 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_88 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_89 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_90 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_91 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_92 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_93 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_94 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_95 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_96 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_97 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_98 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_99 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_100 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_101 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_102 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_103 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component separate_complex_wlo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        LS_stream_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        LS_stream_TVALID : IN STD_LOGIC;
        LS_stream_TREADY : OUT STD_LOGIC;
        LS_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        sep_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        sep_ce0 : OUT STD_LOGIC;
        sep_we0 : OUT STD_LOGIC;
        sep_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        sep_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        sep_ce1 : OUT STD_LOGIC;
        sep_we1 : OUT STD_LOGIC;
        sep_d1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component reconstruct_complex_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        y_L3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        y_L3_ce0 : OUT STD_LOGIC;
        y_L3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        y_L3_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        y_L3_ce1 : OUT STD_LOGIC;
        y_L3_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        DNN_out_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        DNN_out_TVALID : OUT STD_LOGIC;
        DNN_out_TREADY : IN STD_LOGIC;
        DNN_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component DNN_wlo_hadd_16nsbLp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component DNN_wlo_hmul_16nsbMq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component DNN_wlo_std_o IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component DNN_wlo_mean_o IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component DNN_wlo_LS_data IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component DNN_wlo_y_L3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component DNN_wlo_denorm_DNN IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    std_o_U : component DNN_wlo_std_o
    generic map (
        DataWidth => 16,
        AddressRange => 104,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => std_o_address0,
        ce0 => std_o_ce0,
        q0 => std_o_q0);

    mean_o_U : component DNN_wlo_mean_o
    generic map (
        DataWidth => 16,
        AddressRange => 104,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => mean_o_address0,
        ce0 => mean_o_ce0,
        q0 => mean_o_q0);

    LS_data_U : component DNN_wlo_LS_data
    generic map (
        DataWidth => 16,
        AddressRange => 104,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => LS_data_address0,
        ce0 => LS_data_ce0,
        we0 => LS_data_we0,
        d0 => grp_separate_complex_wlo_fu_951_sep_d0,
        q0 => LS_data_q0,
        address1 => grp_separate_complex_wlo_fu_951_sep_address1,
        ce1 => LS_data_ce1,
        we1 => LS_data_we1,
        d1 => grp_separate_complex_wlo_fu_951_sep_d1);

    y_L3_U : component DNN_wlo_y_L3
    generic map (
        DataWidth => 16,
        AddressRange => 104,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => y_L3_address0,
        ce0 => y_L3_ce0,
        we0 => y_L3_we0,
        d0 => grp_L3_wlo_fu_779_y_L3_d0,
        q0 => y_L3_q0);

    denorm_DNN_U : component DNN_wlo_denorm_DNN
    generic map (
        DataWidth => 16,
        AddressRange => 104,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => denorm_DNN_address0,
        ce0 => denorm_DNN_ce0,
        we0 => denorm_DNN_we0,
        d0 => tmp_5_i_reg_2605,
        q0 => denorm_DNN_q0,
        address1 => grp_reconstruct_complex_s_fu_960_y_L3_address1,
        ce1 => denorm_DNN_ce1,
        q1 => denorm_DNN_q1);

    grp_L2_wlo_fu_461 : component L2_wlo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_L2_wlo_fu_461_ap_start,
        ap_done => grp_L2_wlo_fu_461_ap_done,
        ap_idle => grp_L2_wlo_fu_461_ap_idle,
        ap_ready => grp_L2_wlo_fu_461_ap_ready,
        p_read => norm_LS_data_0_0_reg_1775,
        p_read1 => norm_LS_data_0_1_reg_1780,
        p_read2 => norm_LS_data_1_0_reg_1785,
        p_read3 => norm_LS_data_1_1_reg_1790,
        p_read4 => norm_LS_data_2_0_reg_1795,
        p_read5 => norm_LS_data_2_1_reg_1800,
        p_read6 => norm_LS_data_3_0_reg_1805,
        p_read7 => norm_LS_data_3_1_reg_1810,
        p_read8 => norm_LS_data_4_0_reg_1815,
        p_read9 => norm_LS_data_4_1_reg_1820,
        p_read10 => norm_LS_data_5_0_reg_1825,
        p_read11 => norm_LS_data_5_1_reg_1830,
        p_read12 => norm_LS_data_6_0_reg_1835,
        p_read13 => norm_LS_data_6_1_reg_1840,
        p_read14 => norm_LS_data_7_0_reg_1845,
        p_read15 => norm_LS_data_7_1_reg_1850,
        p_read16 => norm_LS_data_8_0_reg_1855,
        p_read17 => norm_LS_data_8_1_reg_1860,
        p_read18 => norm_LS_data_9_0_reg_1865,
        p_read19 => norm_LS_data_9_1_reg_1870,
        p_read20 => norm_LS_data_10_0_reg_1875,
        p_read21 => norm_LS_data_10_1_reg_1880,
        p_read22 => norm_LS_data_11_0_reg_1885,
        p_read23 => norm_LS_data_11_1_reg_1890,
        p_read24 => norm_LS_data_12_0_reg_1895,
        p_read25 => norm_LS_data_12_1_reg_1900,
        p_read26 => norm_LS_data_13_0_reg_1905,
        p_read27 => norm_LS_data_13_1_reg_1910,
        p_read28 => norm_LS_data_14_0_reg_1915,
        p_read29 => norm_LS_data_14_1_reg_1920,
        p_read30 => norm_LS_data_15_0_reg_1925,
        p_read31 => norm_LS_data_15_1_reg_1930,
        p_read32 => norm_LS_data_16_0_reg_1935,
        p_read33 => norm_LS_data_16_1_reg_1940,
        p_read34 => norm_LS_data_17_0_reg_1945,
        p_read35 => norm_LS_data_17_1_reg_1950,
        p_read36 => norm_LS_data_18_0_reg_1955,
        p_read37 => norm_LS_data_18_1_reg_1960,
        p_read38 => norm_LS_data_19_0_reg_1965,
        p_read39 => norm_LS_data_19_1_reg_1970,
        p_read40 => norm_LS_data_20_0_reg_1975,
        p_read41 => norm_LS_data_20_1_reg_1980,
        p_read42 => norm_LS_data_21_0_reg_1985,
        p_read43 => norm_LS_data_21_1_reg_1990,
        p_read44 => norm_LS_data_22_0_reg_1995,
        p_read45 => norm_LS_data_22_1_reg_2000,
        p_read46 => norm_LS_data_23_0_reg_2005,
        p_read47 => norm_LS_data_23_1_reg_2010,
        p_read48 => norm_LS_data_24_0_reg_2015,
        p_read49 => norm_LS_data_24_1_reg_2020,
        p_read50 => norm_LS_data_25_0_reg_2025,
        p_read51 => norm_LS_data_25_1_reg_2030,
        p_read52 => norm_LS_data_26_0_reg_2035,
        p_read53 => norm_LS_data_26_1_reg_2040,
        p_read54 => norm_LS_data_27_0_reg_2045,
        p_read55 => norm_LS_data_27_1_reg_2050,
        p_read56 => norm_LS_data_28_0_reg_2055,
        p_read57 => norm_LS_data_28_1_reg_2060,
        p_read58 => norm_LS_data_29_0_reg_2065,
        p_read59 => norm_LS_data_29_1_reg_2070,
        p_read60 => norm_LS_data_30_0_reg_2075,
        p_read61 => norm_LS_data_30_1_reg_2080,
        p_read62 => norm_LS_data_31_0_reg_2085,
        p_read63 => norm_LS_data_31_1_reg_2090,
        p_read64 => norm_LS_data_32_0_reg_2095,
        p_read65 => norm_LS_data_32_1_reg_2100,
        p_read66 => norm_LS_data_33_0_reg_2105,
        p_read67 => norm_LS_data_33_1_reg_2110,
        p_read68 => norm_LS_data_34_0_reg_2115,
        p_read69 => norm_LS_data_34_1_reg_2120,
        p_read70 => norm_LS_data_35_0_reg_2125,
        p_read71 => norm_LS_data_35_1_reg_2130,
        p_read72 => norm_LS_data_36_0_reg_2135,
        p_read73 => norm_LS_data_36_1_reg_2140,
        p_read74 => norm_LS_data_37_0_reg_2145,
        p_read75 => norm_LS_data_37_1_reg_2150,
        p_read76 => norm_LS_data_38_0_reg_2155,
        p_read77 => norm_LS_data_38_1_reg_2160,
        p_read78 => norm_LS_data_39_0_reg_2165,
        p_read79 => norm_LS_data_39_1_reg_2170,
        p_read80 => norm_LS_data_40_0_reg_2175,
        p_read81 => norm_LS_data_40_1_reg_2180,
        p_read82 => norm_LS_data_41_0_reg_2185,
        p_read83 => norm_LS_data_41_1_reg_2190,
        p_read84 => norm_LS_data_42_0_reg_2195,
        p_read85 => norm_LS_data_42_1_reg_2200,
        p_read86 => norm_LS_data_43_0_reg_2205,
        p_read87 => norm_LS_data_43_1_reg_2210,
        p_read88 => norm_LS_data_44_0_reg_2215,
        p_read89 => norm_LS_data_44_1_reg_2220,
        p_read90 => norm_LS_data_45_0_reg_2225,
        p_read91 => norm_LS_data_45_1_reg_2230,
        p_read92 => norm_LS_data_46_0_reg_2235,
        p_read93 => norm_LS_data_46_1_reg_2240,
        p_read94 => norm_LS_data_47_0_reg_2245,
        p_read95 => norm_LS_data_47_1_reg_2250,
        p_read96 => norm_LS_data_48_0_reg_2255,
        p_read97 => norm_LS_data_48_1_reg_2260,
        p_read98 => norm_LS_data_49_0_reg_2265,
        p_read99 => norm_LS_data_49_1_reg_2270,
        p_read100 => norm_LS_data_50_0_reg_2275,
        p_read101 => norm_LS_data_50_1_reg_2280,
        p_read102 => norm_LS_data_51_0_reg_2285,
        p_read103 => norm_LS_data_51_1_reg_2290,
        ap_return_0 => grp_L2_wlo_fu_461_ap_return_0,
        ap_return_1 => grp_L2_wlo_fu_461_ap_return_1,
        ap_return_2 => grp_L2_wlo_fu_461_ap_return_2,
        ap_return_3 => grp_L2_wlo_fu_461_ap_return_3,
        ap_return_4 => grp_L2_wlo_fu_461_ap_return_4,
        ap_return_5 => grp_L2_wlo_fu_461_ap_return_5,
        ap_return_6 => grp_L2_wlo_fu_461_ap_return_6,
        ap_return_7 => grp_L2_wlo_fu_461_ap_return_7,
        ap_return_8 => grp_L2_wlo_fu_461_ap_return_8,
        ap_return_9 => grp_L2_wlo_fu_461_ap_return_9,
        ap_return_10 => grp_L2_wlo_fu_461_ap_return_10,
        ap_return_11 => grp_L2_wlo_fu_461_ap_return_11,
        ap_return_12 => grp_L2_wlo_fu_461_ap_return_12,
        ap_return_13 => grp_L2_wlo_fu_461_ap_return_13,
        ap_return_14 => grp_L2_wlo_fu_461_ap_return_14,
        ap_return_15 => grp_L2_wlo_fu_461_ap_return_15,
        ap_return_16 => grp_L2_wlo_fu_461_ap_return_16,
        ap_return_17 => grp_L2_wlo_fu_461_ap_return_17,
        ap_return_18 => grp_L2_wlo_fu_461_ap_return_18,
        ap_return_19 => grp_L2_wlo_fu_461_ap_return_19,
        ap_return_20 => grp_L2_wlo_fu_461_ap_return_20,
        ap_return_21 => grp_L2_wlo_fu_461_ap_return_21,
        ap_return_22 => grp_L2_wlo_fu_461_ap_return_22,
        ap_return_23 => grp_L2_wlo_fu_461_ap_return_23,
        ap_return_24 => grp_L2_wlo_fu_461_ap_return_24,
        ap_return_25 => grp_L2_wlo_fu_461_ap_return_25,
        ap_return_26 => grp_L2_wlo_fu_461_ap_return_26,
        ap_return_27 => grp_L2_wlo_fu_461_ap_return_27,
        ap_return_28 => grp_L2_wlo_fu_461_ap_return_28,
        ap_return_29 => grp_L2_wlo_fu_461_ap_return_29,
        ap_return_30 => grp_L2_wlo_fu_461_ap_return_30,
        ap_return_31 => grp_L2_wlo_fu_461_ap_return_31,
        ap_return_32 => grp_L2_wlo_fu_461_ap_return_32,
        ap_return_33 => grp_L2_wlo_fu_461_ap_return_33,
        ap_return_34 => grp_L2_wlo_fu_461_ap_return_34,
        ap_return_35 => grp_L2_wlo_fu_461_ap_return_35,
        ap_return_36 => grp_L2_wlo_fu_461_ap_return_36,
        ap_return_37 => grp_L2_wlo_fu_461_ap_return_37,
        ap_return_38 => grp_L2_wlo_fu_461_ap_return_38,
        ap_return_39 => grp_L2_wlo_fu_461_ap_return_39,
        ap_return_40 => grp_L2_wlo_fu_461_ap_return_40,
        ap_return_41 => grp_L2_wlo_fu_461_ap_return_41,
        ap_return_42 => grp_L2_wlo_fu_461_ap_return_42,
        ap_return_43 => grp_L2_wlo_fu_461_ap_return_43,
        ap_return_44 => grp_L2_wlo_fu_461_ap_return_44,
        ap_return_45 => grp_L2_wlo_fu_461_ap_return_45,
        ap_return_46 => grp_L2_wlo_fu_461_ap_return_46,
        ap_return_47 => grp_L2_wlo_fu_461_ap_return_47,
        ap_return_48 => grp_L2_wlo_fu_461_ap_return_48,
        ap_return_49 => grp_L2_wlo_fu_461_ap_return_49,
        ap_return_50 => grp_L2_wlo_fu_461_ap_return_50,
        ap_return_51 => grp_L2_wlo_fu_461_ap_return_51);

    grp_L3_wlo_fu_779 : component L3_wlo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_L3_wlo_fu_779_ap_start,
        ap_done => grp_L3_wlo_fu_779_ap_done,
        ap_idle => grp_L3_wlo_fu_779_ap_idle,
        ap_ready => grp_L3_wlo_fu_779_ap_ready,
        p_read => y_L2_0_0_reg_2295,
        p_read1 => y_L2_0_1_reg_2300,
        p_read2 => y_L2_1_0_reg_2305,
        p_read3 => y_L2_1_1_reg_2310,
        p_read4 => y_L2_2_0_reg_2315,
        p_read5 => y_L2_2_1_reg_2320,
        p_read6 => y_L2_3_0_reg_2325,
        p_read7 => y_L2_3_1_reg_2330,
        p_read8 => y_L2_4_0_reg_2335,
        p_read9 => y_L2_4_1_reg_2340,
        p_read10 => y_L2_5_0_reg_2345,
        p_read11 => y_L2_5_1_reg_2350,
        p_read12 => y_L2_6_0_reg_2355,
        p_read13 => y_L2_6_1_reg_2360,
        p_read14 => y_L2_7_0_reg_2365,
        p_read15 => y_L2_7_1_reg_2370,
        p_read16 => y_L2_8_0_reg_2375,
        p_read17 => y_L2_8_1_reg_2380,
        p_read18 => y_L2_9_0_reg_2385,
        p_read19 => y_L2_9_1_reg_2390,
        p_read20 => y_L2_10_0_reg_2395,
        p_read21 => y_L2_10_1_reg_2400,
        p_read22 => y_L2_11_0_reg_2405,
        p_read23 => y_L2_11_1_reg_2410,
        p_read24 => y_L2_12_0_reg_2415,
        p_read25 => y_L2_12_1_reg_2420,
        p_read26 => y_L2_13_0_reg_2425,
        p_read27 => y_L2_13_1_reg_2430,
        p_read28 => y_L2_14_0_reg_2435,
        p_read29 => y_L2_14_1_reg_2440,
        p_read30 => y_L2_15_0_reg_2445,
        p_read31 => y_L2_15_1_reg_2450,
        p_read32 => y_L2_16_0_reg_2455,
        p_read33 => y_L2_16_1_reg_2460,
        p_read34 => y_L2_17_0_reg_2465,
        p_read35 => y_L2_17_1_reg_2470,
        p_read36 => y_L2_18_0_reg_2475,
        p_read37 => y_L2_18_1_reg_2480,
        p_read38 => y_L2_19_0_reg_2485,
        p_read39 => y_L2_19_1_reg_2490,
        p_read40 => y_L2_20_0_reg_2495,
        p_read41 => y_L2_20_1_reg_2500,
        p_read42 => y_L2_21_0_reg_2505,
        p_read43 => y_L2_21_1_reg_2510,
        p_read44 => y_L2_22_0_reg_2515,
        p_read45 => y_L2_22_1_reg_2520,
        p_read46 => y_L2_23_0_reg_2525,
        p_read47 => y_L2_23_1_reg_2530,
        p_read48 => y_L2_24_0_reg_2535,
        p_read49 => y_L2_24_1_reg_2540,
        p_read50 => y_L2_25_0_reg_2545,
        p_read51 => y_L2_25_1_reg_2550,
        y_L3_address0 => grp_L3_wlo_fu_779_y_L3_address0,
        y_L3_ce0 => grp_L3_wlo_fu_779_y_L3_ce0,
        y_L3_we0 => grp_L3_wlo_fu_779_y_L3_we0,
        y_L3_d0 => grp_L3_wlo_fu_779_y_L3_d0);

    grp_normalize_wlo_fu_942 : component normalize_wlo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_normalize_wlo_fu_942_ap_start,
        ap_done => grp_normalize_wlo_fu_942_ap_done,
        ap_idle => grp_normalize_wlo_fu_942_ap_idle,
        ap_ready => grp_normalize_wlo_fu_942_ap_ready,
        LS_data_address0 => grp_normalize_wlo_fu_942_LS_data_address0,
        LS_data_ce0 => grp_normalize_wlo_fu_942_LS_data_ce0,
        LS_data_q0 => LS_data_q0,
        ap_return_0 => grp_normalize_wlo_fu_942_ap_return_0,
        ap_return_1 => grp_normalize_wlo_fu_942_ap_return_1,
        ap_return_2 => grp_normalize_wlo_fu_942_ap_return_2,
        ap_return_3 => grp_normalize_wlo_fu_942_ap_return_3,
        ap_return_4 => grp_normalize_wlo_fu_942_ap_return_4,
        ap_return_5 => grp_normalize_wlo_fu_942_ap_return_5,
        ap_return_6 => grp_normalize_wlo_fu_942_ap_return_6,
        ap_return_7 => grp_normalize_wlo_fu_942_ap_return_7,
        ap_return_8 => grp_normalize_wlo_fu_942_ap_return_8,
        ap_return_9 => grp_normalize_wlo_fu_942_ap_return_9,
        ap_return_10 => grp_normalize_wlo_fu_942_ap_return_10,
        ap_return_11 => grp_normalize_wlo_fu_942_ap_return_11,
        ap_return_12 => grp_normalize_wlo_fu_942_ap_return_12,
        ap_return_13 => grp_normalize_wlo_fu_942_ap_return_13,
        ap_return_14 => grp_normalize_wlo_fu_942_ap_return_14,
        ap_return_15 => grp_normalize_wlo_fu_942_ap_return_15,
        ap_return_16 => grp_normalize_wlo_fu_942_ap_return_16,
        ap_return_17 => grp_normalize_wlo_fu_942_ap_return_17,
        ap_return_18 => grp_normalize_wlo_fu_942_ap_return_18,
        ap_return_19 => grp_normalize_wlo_fu_942_ap_return_19,
        ap_return_20 => grp_normalize_wlo_fu_942_ap_return_20,
        ap_return_21 => grp_normalize_wlo_fu_942_ap_return_21,
        ap_return_22 => grp_normalize_wlo_fu_942_ap_return_22,
        ap_return_23 => grp_normalize_wlo_fu_942_ap_return_23,
        ap_return_24 => grp_normalize_wlo_fu_942_ap_return_24,
        ap_return_25 => grp_normalize_wlo_fu_942_ap_return_25,
        ap_return_26 => grp_normalize_wlo_fu_942_ap_return_26,
        ap_return_27 => grp_normalize_wlo_fu_942_ap_return_27,
        ap_return_28 => grp_normalize_wlo_fu_942_ap_return_28,
        ap_return_29 => grp_normalize_wlo_fu_942_ap_return_29,
        ap_return_30 => grp_normalize_wlo_fu_942_ap_return_30,
        ap_return_31 => grp_normalize_wlo_fu_942_ap_return_31,
        ap_return_32 => grp_normalize_wlo_fu_942_ap_return_32,
        ap_return_33 => grp_normalize_wlo_fu_942_ap_return_33,
        ap_return_34 => grp_normalize_wlo_fu_942_ap_return_34,
        ap_return_35 => grp_normalize_wlo_fu_942_ap_return_35,
        ap_return_36 => grp_normalize_wlo_fu_942_ap_return_36,
        ap_return_37 => grp_normalize_wlo_fu_942_ap_return_37,
        ap_return_38 => grp_normalize_wlo_fu_942_ap_return_38,
        ap_return_39 => grp_normalize_wlo_fu_942_ap_return_39,
        ap_return_40 => grp_normalize_wlo_fu_942_ap_return_40,
        ap_return_41 => grp_normalize_wlo_fu_942_ap_return_41,
        ap_return_42 => grp_normalize_wlo_fu_942_ap_return_42,
        ap_return_43 => grp_normalize_wlo_fu_942_ap_return_43,
        ap_return_44 => grp_normalize_wlo_fu_942_ap_return_44,
        ap_return_45 => grp_normalize_wlo_fu_942_ap_return_45,
        ap_return_46 => grp_normalize_wlo_fu_942_ap_return_46,
        ap_return_47 => grp_normalize_wlo_fu_942_ap_return_47,
        ap_return_48 => grp_normalize_wlo_fu_942_ap_return_48,
        ap_return_49 => grp_normalize_wlo_fu_942_ap_return_49,
        ap_return_50 => grp_normalize_wlo_fu_942_ap_return_50,
        ap_return_51 => grp_normalize_wlo_fu_942_ap_return_51,
        ap_return_52 => grp_normalize_wlo_fu_942_ap_return_52,
        ap_return_53 => grp_normalize_wlo_fu_942_ap_return_53,
        ap_return_54 => grp_normalize_wlo_fu_942_ap_return_54,
        ap_return_55 => grp_normalize_wlo_fu_942_ap_return_55,
        ap_return_56 => grp_normalize_wlo_fu_942_ap_return_56,
        ap_return_57 => grp_normalize_wlo_fu_942_ap_return_57,
        ap_return_58 => grp_normalize_wlo_fu_942_ap_return_58,
        ap_return_59 => grp_normalize_wlo_fu_942_ap_return_59,
        ap_return_60 => grp_normalize_wlo_fu_942_ap_return_60,
        ap_return_61 => grp_normalize_wlo_fu_942_ap_return_61,
        ap_return_62 => grp_normalize_wlo_fu_942_ap_return_62,
        ap_return_63 => grp_normalize_wlo_fu_942_ap_return_63,
        ap_return_64 => grp_normalize_wlo_fu_942_ap_return_64,
        ap_return_65 => grp_normalize_wlo_fu_942_ap_return_65,
        ap_return_66 => grp_normalize_wlo_fu_942_ap_return_66,
        ap_return_67 => grp_normalize_wlo_fu_942_ap_return_67,
        ap_return_68 => grp_normalize_wlo_fu_942_ap_return_68,
        ap_return_69 => grp_normalize_wlo_fu_942_ap_return_69,
        ap_return_70 => grp_normalize_wlo_fu_942_ap_return_70,
        ap_return_71 => grp_normalize_wlo_fu_942_ap_return_71,
        ap_return_72 => grp_normalize_wlo_fu_942_ap_return_72,
        ap_return_73 => grp_normalize_wlo_fu_942_ap_return_73,
        ap_return_74 => grp_normalize_wlo_fu_942_ap_return_74,
        ap_return_75 => grp_normalize_wlo_fu_942_ap_return_75,
        ap_return_76 => grp_normalize_wlo_fu_942_ap_return_76,
        ap_return_77 => grp_normalize_wlo_fu_942_ap_return_77,
        ap_return_78 => grp_normalize_wlo_fu_942_ap_return_78,
        ap_return_79 => grp_normalize_wlo_fu_942_ap_return_79,
        ap_return_80 => grp_normalize_wlo_fu_942_ap_return_80,
        ap_return_81 => grp_normalize_wlo_fu_942_ap_return_81,
        ap_return_82 => grp_normalize_wlo_fu_942_ap_return_82,
        ap_return_83 => grp_normalize_wlo_fu_942_ap_return_83,
        ap_return_84 => grp_normalize_wlo_fu_942_ap_return_84,
        ap_return_85 => grp_normalize_wlo_fu_942_ap_return_85,
        ap_return_86 => grp_normalize_wlo_fu_942_ap_return_86,
        ap_return_87 => grp_normalize_wlo_fu_942_ap_return_87,
        ap_return_88 => grp_normalize_wlo_fu_942_ap_return_88,
        ap_return_89 => grp_normalize_wlo_fu_942_ap_return_89,
        ap_return_90 => grp_normalize_wlo_fu_942_ap_return_90,
        ap_return_91 => grp_normalize_wlo_fu_942_ap_return_91,
        ap_return_92 => grp_normalize_wlo_fu_942_ap_return_92,
        ap_return_93 => grp_normalize_wlo_fu_942_ap_return_93,
        ap_return_94 => grp_normalize_wlo_fu_942_ap_return_94,
        ap_return_95 => grp_normalize_wlo_fu_942_ap_return_95,
        ap_return_96 => grp_normalize_wlo_fu_942_ap_return_96,
        ap_return_97 => grp_normalize_wlo_fu_942_ap_return_97,
        ap_return_98 => grp_normalize_wlo_fu_942_ap_return_98,
        ap_return_99 => grp_normalize_wlo_fu_942_ap_return_99,
        ap_return_100 => grp_normalize_wlo_fu_942_ap_return_100,
        ap_return_101 => grp_normalize_wlo_fu_942_ap_return_101,
        ap_return_102 => grp_normalize_wlo_fu_942_ap_return_102,
        ap_return_103 => grp_normalize_wlo_fu_942_ap_return_103);

    grp_separate_complex_wlo_fu_951 : component separate_complex_wlo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_separate_complex_wlo_fu_951_ap_start,
        ap_done => grp_separate_complex_wlo_fu_951_ap_done,
        ap_idle => grp_separate_complex_wlo_fu_951_ap_idle,
        ap_ready => grp_separate_complex_wlo_fu_951_ap_ready,
        LS_stream_TDATA => LS_stream_V_data_0_data_out,
        LS_stream_TVALID => grp_separate_complex_wlo_fu_951_LS_stream_TVALID,
        LS_stream_TREADY => grp_separate_complex_wlo_fu_951_LS_stream_TREADY,
        LS_stream_TLAST => LS_stream_V_last_V_0_data_out,
        sep_address0 => grp_separate_complex_wlo_fu_951_sep_address0,
        sep_ce0 => grp_separate_complex_wlo_fu_951_sep_ce0,
        sep_we0 => grp_separate_complex_wlo_fu_951_sep_we0,
        sep_d0 => grp_separate_complex_wlo_fu_951_sep_d0,
        sep_address1 => grp_separate_complex_wlo_fu_951_sep_address1,
        sep_ce1 => grp_separate_complex_wlo_fu_951_sep_ce1,
        sep_we1 => grp_separate_complex_wlo_fu_951_sep_we1,
        sep_d1 => grp_separate_complex_wlo_fu_951_sep_d1);

    grp_reconstruct_complex_s_fu_960 : component reconstruct_complex_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_reconstruct_complex_s_fu_960_ap_start,
        ap_done => grp_reconstruct_complex_s_fu_960_ap_done,
        ap_idle => grp_reconstruct_complex_s_fu_960_ap_idle,
        ap_ready => grp_reconstruct_complex_s_fu_960_ap_ready,
        y_L3_address0 => grp_reconstruct_complex_s_fu_960_y_L3_address0,
        y_L3_ce0 => grp_reconstruct_complex_s_fu_960_y_L3_ce0,
        y_L3_q0 => denorm_DNN_q0,
        y_L3_address1 => grp_reconstruct_complex_s_fu_960_y_L3_address1,
        y_L3_ce1 => grp_reconstruct_complex_s_fu_960_y_L3_ce1,
        y_L3_q1 => denorm_DNN_q1,
        DNN_out_TDATA => grp_reconstruct_complex_s_fu_960_DNN_out_TDATA,
        DNN_out_TVALID => grp_reconstruct_complex_s_fu_960_DNN_out_TVALID,
        DNN_out_TREADY => grp_reconstruct_complex_s_fu_960_DNN_out_TREADY,
        DNN_out_TLAST => grp_reconstruct_complex_s_fu_960_DNN_out_TLAST);

    DNN_wlo_hadd_16nsbLp_U417 : component DNN_wlo_hadd_16nsbLp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_i_reg_2595,
        din1 => mean_o_load_reg_2600,
        ce => ap_const_logic_1,
        dout => grp_fu_969_p2);

    DNN_wlo_hmul_16nsbMq_U418 : component DNN_wlo_hmul_16nsbMq
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => y_L3_load_reg_2580,
        din1 => std_o_load_reg_2585,
        ce => ap_const_logic_1,
        dout => grp_fu_973_p2);





    DNN_out_V_data_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                DNN_out_V_data_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = DNN_out_V_data_1_ack_out) and (ap_const_logic_1 = DNN_out_V_data_1_vld_out))) then 
                                        DNN_out_V_data_1_sel_rd <= not(DNN_out_V_data_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    DNN_out_V_data_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                DNN_out_V_data_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = DNN_out_V_data_1_ack_in) and (ap_const_logic_1 = DNN_out_V_data_1_vld_in))) then 
                                        DNN_out_V_data_1_sel_wr <= not(DNN_out_V_data_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    DNN_out_V_data_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                DNN_out_V_data_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = DNN_out_V_data_1_state) and (ap_const_logic_0 = DNN_out_V_data_1_vld_in)) or ((ap_const_lv2_3 = DNN_out_V_data_1_state) and (ap_const_logic_0 = DNN_out_V_data_1_vld_in) and (ap_const_logic_1 = DNN_out_V_data_1_ack_out)))) then 
                    DNN_out_V_data_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = DNN_out_V_data_1_state) and (ap_const_logic_0 = DNN_out_TREADY)) or ((ap_const_lv2_3 = DNN_out_V_data_1_state) and (ap_const_logic_0 = DNN_out_TREADY) and (ap_const_logic_1 = DNN_out_V_data_1_vld_in)))) then 
                    DNN_out_V_data_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = DNN_out_V_data_1_vld_in) and (ap_const_logic_1 = DNN_out_V_data_1_ack_out))) and not(((ap_const_logic_0 = DNN_out_TREADY) and (ap_const_logic_1 = DNN_out_V_data_1_vld_in))) and (ap_const_lv2_3 = DNN_out_V_data_1_state)) or ((ap_const_lv2_1 = DNN_out_V_data_1_state) and (ap_const_logic_1 = DNN_out_V_data_1_ack_out)) or ((ap_const_lv2_2 = DNN_out_V_data_1_state) and (ap_const_logic_1 = DNN_out_V_data_1_vld_in)))) then 
                    DNN_out_V_data_1_state <= ap_const_lv2_3;
                else 
                    DNN_out_V_data_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    DNN_out_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                DNN_out_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = DNN_out_V_last_V_1_ack_out) and (ap_const_logic_1 = DNN_out_V_last_V_1_vld_out))) then 
                                        DNN_out_V_last_V_1_sel_rd <= not(DNN_out_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    DNN_out_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                DNN_out_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = DNN_out_V_last_V_1_ack_in) and (ap_const_logic_1 = DNN_out_V_last_V_1_vld_in))) then 
                                        DNN_out_V_last_V_1_sel_wr <= not(DNN_out_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    DNN_out_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                DNN_out_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = DNN_out_V_last_V_1_state) and (ap_const_logic_0 = DNN_out_V_last_V_1_vld_in)) or ((ap_const_lv2_3 = DNN_out_V_last_V_1_state) and (ap_const_logic_0 = DNN_out_V_last_V_1_vld_in) and (ap_const_logic_1 = DNN_out_V_last_V_1_ack_out)))) then 
                    DNN_out_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = DNN_out_V_last_V_1_state) and (ap_const_logic_0 = DNN_out_TREADY)) or ((ap_const_lv2_3 = DNN_out_V_last_V_1_state) and (ap_const_logic_0 = DNN_out_TREADY) and (ap_const_logic_1 = DNN_out_V_last_V_1_vld_in)))) then 
                    DNN_out_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = DNN_out_V_last_V_1_vld_in) and (ap_const_logic_1 = DNN_out_V_last_V_1_ack_out))) and not(((ap_const_logic_0 = DNN_out_TREADY) and (ap_const_logic_1 = DNN_out_V_last_V_1_vld_in))) and (ap_const_lv2_3 = DNN_out_V_last_V_1_state)) or ((ap_const_lv2_1 = DNN_out_V_last_V_1_state) and (ap_const_logic_1 = DNN_out_V_last_V_1_ack_out)) or ((ap_const_lv2_2 = DNN_out_V_last_V_1_state) and (ap_const_logic_1 = DNN_out_V_last_V_1_vld_in)))) then 
                    DNN_out_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    DNN_out_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    LS_stream_V_data_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                LS_stream_V_data_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = LS_stream_V_data_0_ack_out) and (ap_const_logic_1 = LS_stream_V_data_0_vld_out))) then 
                                        LS_stream_V_data_0_sel_rd <= not(LS_stream_V_data_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    LS_stream_V_data_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                LS_stream_V_data_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = LS_stream_V_data_0_ack_in) and (ap_const_logic_1 = LS_stream_V_data_0_vld_in))) then 
                                        LS_stream_V_data_0_sel_wr <= not(LS_stream_V_data_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    LS_stream_V_data_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                LS_stream_V_data_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = LS_stream_V_data_0_state) and (ap_const_logic_0 = LS_stream_V_data_0_vld_in)) or ((ap_const_lv2_3 = LS_stream_V_data_0_state) and (ap_const_logic_0 = LS_stream_V_data_0_vld_in) and (ap_const_logic_1 = LS_stream_V_data_0_ack_out)))) then 
                    LS_stream_V_data_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = LS_stream_V_data_0_state) and (ap_const_logic_0 = LS_stream_V_data_0_ack_out)) or ((ap_const_lv2_3 = LS_stream_V_data_0_state) and (ap_const_logic_0 = LS_stream_V_data_0_ack_out) and (ap_const_logic_1 = LS_stream_V_data_0_vld_in)))) then 
                    LS_stream_V_data_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = LS_stream_V_data_0_vld_in) and (ap_const_logic_1 = LS_stream_V_data_0_ack_out))) and not(((ap_const_logic_0 = LS_stream_V_data_0_ack_out) and (ap_const_logic_1 = LS_stream_V_data_0_vld_in))) and (ap_const_lv2_3 = LS_stream_V_data_0_state)) or ((ap_const_lv2_1 = LS_stream_V_data_0_state) and (ap_const_logic_1 = LS_stream_V_data_0_ack_out)) or ((ap_const_lv2_2 = LS_stream_V_data_0_state) and (ap_const_logic_1 = LS_stream_V_data_0_vld_in)))) then 
                    LS_stream_V_data_0_state <= ap_const_lv2_3;
                else 
                    LS_stream_V_data_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    LS_stream_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                LS_stream_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = LS_stream_V_last_V_0_ack_out) and (ap_const_logic_1 = LS_stream_V_last_V_0_vld_out))) then 
                                        LS_stream_V_last_V_0_sel_rd <= not(LS_stream_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    LS_stream_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                LS_stream_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = LS_stream_V_last_V_0_ack_in) and (ap_const_logic_1 = LS_stream_V_last_V_0_vld_in))) then 
                                        LS_stream_V_last_V_0_sel_wr <= not(LS_stream_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    LS_stream_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                LS_stream_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = LS_stream_V_last_V_0_state) and (ap_const_logic_0 = LS_stream_V_last_V_0_vld_in)) or ((ap_const_lv2_3 = LS_stream_V_last_V_0_state) and (ap_const_logic_0 = LS_stream_V_last_V_0_vld_in) and (ap_const_logic_1 = LS_stream_V_last_V_0_ack_out)))) then 
                    LS_stream_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = LS_stream_V_last_V_0_state) and (ap_const_logic_0 = LS_stream_V_last_V_0_ack_out)) or ((ap_const_lv2_3 = LS_stream_V_last_V_0_state) and (ap_const_logic_0 = LS_stream_V_last_V_0_ack_out) and (ap_const_logic_1 = LS_stream_V_last_V_0_vld_in)))) then 
                    LS_stream_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = LS_stream_V_last_V_0_vld_in) and (ap_const_logic_1 = LS_stream_V_last_V_0_ack_out))) and not(((ap_const_logic_0 = LS_stream_V_last_V_0_ack_out) and (ap_const_logic_1 = LS_stream_V_last_V_0_vld_in))) and (ap_const_lv2_3 = LS_stream_V_last_V_0_state)) or ((ap_const_lv2_1 = LS_stream_V_last_V_0_state) and (ap_const_logic_1 = LS_stream_V_last_V_0_ack_out)) or ((ap_const_lv2_2 = LS_stream_V_last_V_0_state) and (ap_const_logic_1 = LS_stream_V_last_V_0_vld_in)))) then 
                    LS_stream_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    LS_stream_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((grp_L3_wlo_fu_779_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state8);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                elsif (((grp_L3_wlo_fu_779_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    grp_L2_wlo_fu_461_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_L2_wlo_fu_461_ap_start_reg <= ap_const_logic_0;
            else
                if (((grp_normalize_wlo_fu_942_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_L2_wlo_fu_461_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_L2_wlo_fu_461_ap_ready = ap_const_logic_1)) then 
                    grp_L2_wlo_fu_461_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_L3_wlo_fu_779_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_L3_wlo_fu_779_ap_start_reg <= ap_const_logic_0;
            else
                if (((grp_L2_wlo_fu_461_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    grp_L3_wlo_fu_779_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_L3_wlo_fu_779_ap_ready = ap_const_logic_1)) then 
                    grp_L3_wlo_fu_779_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_normalize_wlo_fu_942_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_normalize_wlo_fu_942_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_normalize_wlo_fu_942_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_normalize_wlo_fu_942_ap_ready = ap_const_logic_1)) then 
                    grp_normalize_wlo_fu_942_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_reconstruct_complex_s_fu_960_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_reconstruct_complex_s_fu_960_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    grp_reconstruct_complex_s_fu_960_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_reconstruct_complex_s_fu_960_ap_ready = ap_const_logic_1)) then 
                    grp_reconstruct_complex_s_fu_960_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_separate_complex_wlo_fu_951_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_separate_complex_wlo_fu_951_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_separate_complex_wlo_fu_951_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_separate_complex_wlo_fu_951_ap_ready = ap_const_logic_1)) then 
                    grp_separate_complex_wlo_fu_951_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_reg_450_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln529_fu_1757_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_i_reg_450 <= i_fu_1763_p2;
            elsif (((grp_L3_wlo_fu_779_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_0_i_reg_450 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = DNN_out_V_data_1_load_A)) then
                DNN_out_V_data_1_payload_A <= grp_reconstruct_complex_s_fu_960_DNN_out_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = DNN_out_V_data_1_load_B)) then
                DNN_out_V_data_1_payload_B <= grp_reconstruct_complex_s_fu_960_DNN_out_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = DNN_out_V_last_V_1_load_A)) then
                DNN_out_V_last_V_1_payload_A <= grp_reconstruct_complex_s_fu_960_DNN_out_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = DNN_out_V_last_V_1_load_B)) then
                DNN_out_V_last_V_1_payload_B <= grp_reconstruct_complex_s_fu_960_DNN_out_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = LS_stream_V_data_0_load_A)) then
                LS_stream_V_data_0_payload_A <= LS_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = LS_stream_V_data_0_load_B)) then
                LS_stream_V_data_0_payload_B <= LS_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = LS_stream_V_last_V_0_load_A)) then
                LS_stream_V_last_V_0_payload_A <= LS_stream_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = LS_stream_V_last_V_0_load_B)) then
                LS_stream_V_last_V_0_payload_B <= LS_stream_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln529_reg_2555 <= icmp_ln529_fu_1757_p2;
                icmp_ln529_reg_2555_pp0_iter1_reg <= icmp_ln529_reg_2555;
                    zext_ln531_reg_2564_pp0_iter1_reg(6 downto 0) <= zext_ln531_reg_2564(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln529_reg_2555_pp0_iter10_reg <= icmp_ln529_reg_2555_pp0_iter9_reg;
                icmp_ln529_reg_2555_pp0_iter2_reg <= icmp_ln529_reg_2555_pp0_iter1_reg;
                icmp_ln529_reg_2555_pp0_iter3_reg <= icmp_ln529_reg_2555_pp0_iter2_reg;
                icmp_ln529_reg_2555_pp0_iter4_reg <= icmp_ln529_reg_2555_pp0_iter3_reg;
                icmp_ln529_reg_2555_pp0_iter5_reg <= icmp_ln529_reg_2555_pp0_iter4_reg;
                icmp_ln529_reg_2555_pp0_iter6_reg <= icmp_ln529_reg_2555_pp0_iter5_reg;
                icmp_ln529_reg_2555_pp0_iter7_reg <= icmp_ln529_reg_2555_pp0_iter6_reg;
                icmp_ln529_reg_2555_pp0_iter8_reg <= icmp_ln529_reg_2555_pp0_iter7_reg;
                icmp_ln529_reg_2555_pp0_iter9_reg <= icmp_ln529_reg_2555_pp0_iter8_reg;
                    zext_ln531_reg_2564_pp0_iter10_reg(6 downto 0) <= zext_ln531_reg_2564_pp0_iter9_reg(6 downto 0);
                    zext_ln531_reg_2564_pp0_iter2_reg(6 downto 0) <= zext_ln531_reg_2564_pp0_iter1_reg(6 downto 0);
                    zext_ln531_reg_2564_pp0_iter3_reg(6 downto 0) <= zext_ln531_reg_2564_pp0_iter2_reg(6 downto 0);
                    zext_ln531_reg_2564_pp0_iter4_reg(6 downto 0) <= zext_ln531_reg_2564_pp0_iter3_reg(6 downto 0);
                    zext_ln531_reg_2564_pp0_iter5_reg(6 downto 0) <= zext_ln531_reg_2564_pp0_iter4_reg(6 downto 0);
                    zext_ln531_reg_2564_pp0_iter6_reg(6 downto 0) <= zext_ln531_reg_2564_pp0_iter5_reg(6 downto 0);
                    zext_ln531_reg_2564_pp0_iter7_reg(6 downto 0) <= zext_ln531_reg_2564_pp0_iter6_reg(6 downto 0);
                    zext_ln531_reg_2564_pp0_iter8_reg(6 downto 0) <= zext_ln531_reg_2564_pp0_iter7_reg(6 downto 0);
                    zext_ln531_reg_2564_pp0_iter9_reg(6 downto 0) <= zext_ln531_reg_2564_pp0_iter8_reg(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln529_reg_2555_pp0_iter4_reg = ap_const_lv1_0))) then
                mean_o_load_reg_2600 <= mean_o_q0;
                tmp_i_reg_2595 <= grp_fu_973_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_normalize_wlo_fu_942_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                norm_LS_data_0_0_reg_1775 <= grp_normalize_wlo_fu_942_ap_return_0;
                norm_LS_data_0_1_reg_1780 <= grp_normalize_wlo_fu_942_ap_return_1;
                norm_LS_data_10_0_reg_1875 <= grp_normalize_wlo_fu_942_ap_return_20;
                norm_LS_data_10_1_reg_1880 <= grp_normalize_wlo_fu_942_ap_return_21;
                norm_LS_data_11_0_reg_1885 <= grp_normalize_wlo_fu_942_ap_return_22;
                norm_LS_data_11_1_reg_1890 <= grp_normalize_wlo_fu_942_ap_return_23;
                norm_LS_data_12_0_reg_1895 <= grp_normalize_wlo_fu_942_ap_return_24;
                norm_LS_data_12_1_reg_1900 <= grp_normalize_wlo_fu_942_ap_return_25;
                norm_LS_data_13_0_reg_1905 <= grp_normalize_wlo_fu_942_ap_return_26;
                norm_LS_data_13_1_reg_1910 <= grp_normalize_wlo_fu_942_ap_return_27;
                norm_LS_data_14_0_reg_1915 <= grp_normalize_wlo_fu_942_ap_return_28;
                norm_LS_data_14_1_reg_1920 <= grp_normalize_wlo_fu_942_ap_return_29;
                norm_LS_data_15_0_reg_1925 <= grp_normalize_wlo_fu_942_ap_return_30;
                norm_LS_data_15_1_reg_1930 <= grp_normalize_wlo_fu_942_ap_return_31;
                norm_LS_data_16_0_reg_1935 <= grp_normalize_wlo_fu_942_ap_return_32;
                norm_LS_data_16_1_reg_1940 <= grp_normalize_wlo_fu_942_ap_return_33;
                norm_LS_data_17_0_reg_1945 <= grp_normalize_wlo_fu_942_ap_return_34;
                norm_LS_data_17_1_reg_1950 <= grp_normalize_wlo_fu_942_ap_return_35;
                norm_LS_data_18_0_reg_1955 <= grp_normalize_wlo_fu_942_ap_return_36;
                norm_LS_data_18_1_reg_1960 <= grp_normalize_wlo_fu_942_ap_return_37;
                norm_LS_data_19_0_reg_1965 <= grp_normalize_wlo_fu_942_ap_return_38;
                norm_LS_data_19_1_reg_1970 <= grp_normalize_wlo_fu_942_ap_return_39;
                norm_LS_data_1_0_reg_1785 <= grp_normalize_wlo_fu_942_ap_return_2;
                norm_LS_data_1_1_reg_1790 <= grp_normalize_wlo_fu_942_ap_return_3;
                norm_LS_data_20_0_reg_1975 <= grp_normalize_wlo_fu_942_ap_return_40;
                norm_LS_data_20_1_reg_1980 <= grp_normalize_wlo_fu_942_ap_return_41;
                norm_LS_data_21_0_reg_1985 <= grp_normalize_wlo_fu_942_ap_return_42;
                norm_LS_data_21_1_reg_1990 <= grp_normalize_wlo_fu_942_ap_return_43;
                norm_LS_data_22_0_reg_1995 <= grp_normalize_wlo_fu_942_ap_return_44;
                norm_LS_data_22_1_reg_2000 <= grp_normalize_wlo_fu_942_ap_return_45;
                norm_LS_data_23_0_reg_2005 <= grp_normalize_wlo_fu_942_ap_return_46;
                norm_LS_data_23_1_reg_2010 <= grp_normalize_wlo_fu_942_ap_return_47;
                norm_LS_data_24_0_reg_2015 <= grp_normalize_wlo_fu_942_ap_return_48;
                norm_LS_data_24_1_reg_2020 <= grp_normalize_wlo_fu_942_ap_return_49;
                norm_LS_data_25_0_reg_2025 <= grp_normalize_wlo_fu_942_ap_return_50;
                norm_LS_data_25_1_reg_2030 <= grp_normalize_wlo_fu_942_ap_return_51;
                norm_LS_data_26_0_reg_2035 <= grp_normalize_wlo_fu_942_ap_return_52;
                norm_LS_data_26_1_reg_2040 <= grp_normalize_wlo_fu_942_ap_return_53;
                norm_LS_data_27_0_reg_2045 <= grp_normalize_wlo_fu_942_ap_return_54;
                norm_LS_data_27_1_reg_2050 <= grp_normalize_wlo_fu_942_ap_return_55;
                norm_LS_data_28_0_reg_2055 <= grp_normalize_wlo_fu_942_ap_return_56;
                norm_LS_data_28_1_reg_2060 <= grp_normalize_wlo_fu_942_ap_return_57;
                norm_LS_data_29_0_reg_2065 <= grp_normalize_wlo_fu_942_ap_return_58;
                norm_LS_data_29_1_reg_2070 <= grp_normalize_wlo_fu_942_ap_return_59;
                norm_LS_data_2_0_reg_1795 <= grp_normalize_wlo_fu_942_ap_return_4;
                norm_LS_data_2_1_reg_1800 <= grp_normalize_wlo_fu_942_ap_return_5;
                norm_LS_data_30_0_reg_2075 <= grp_normalize_wlo_fu_942_ap_return_60;
                norm_LS_data_30_1_reg_2080 <= grp_normalize_wlo_fu_942_ap_return_61;
                norm_LS_data_31_0_reg_2085 <= grp_normalize_wlo_fu_942_ap_return_62;
                norm_LS_data_31_1_reg_2090 <= grp_normalize_wlo_fu_942_ap_return_63;
                norm_LS_data_32_0_reg_2095 <= grp_normalize_wlo_fu_942_ap_return_64;
                norm_LS_data_32_1_reg_2100 <= grp_normalize_wlo_fu_942_ap_return_65;
                norm_LS_data_33_0_reg_2105 <= grp_normalize_wlo_fu_942_ap_return_66;
                norm_LS_data_33_1_reg_2110 <= grp_normalize_wlo_fu_942_ap_return_67;
                norm_LS_data_34_0_reg_2115 <= grp_normalize_wlo_fu_942_ap_return_68;
                norm_LS_data_34_1_reg_2120 <= grp_normalize_wlo_fu_942_ap_return_69;
                norm_LS_data_35_0_reg_2125 <= grp_normalize_wlo_fu_942_ap_return_70;
                norm_LS_data_35_1_reg_2130 <= grp_normalize_wlo_fu_942_ap_return_71;
                norm_LS_data_36_0_reg_2135 <= grp_normalize_wlo_fu_942_ap_return_72;
                norm_LS_data_36_1_reg_2140 <= grp_normalize_wlo_fu_942_ap_return_73;
                norm_LS_data_37_0_reg_2145 <= grp_normalize_wlo_fu_942_ap_return_74;
                norm_LS_data_37_1_reg_2150 <= grp_normalize_wlo_fu_942_ap_return_75;
                norm_LS_data_38_0_reg_2155 <= grp_normalize_wlo_fu_942_ap_return_76;
                norm_LS_data_38_1_reg_2160 <= grp_normalize_wlo_fu_942_ap_return_77;
                norm_LS_data_39_0_reg_2165 <= grp_normalize_wlo_fu_942_ap_return_78;
                norm_LS_data_39_1_reg_2170 <= grp_normalize_wlo_fu_942_ap_return_79;
                norm_LS_data_3_0_reg_1805 <= grp_normalize_wlo_fu_942_ap_return_6;
                norm_LS_data_3_1_reg_1810 <= grp_normalize_wlo_fu_942_ap_return_7;
                norm_LS_data_40_0_reg_2175 <= grp_normalize_wlo_fu_942_ap_return_80;
                norm_LS_data_40_1_reg_2180 <= grp_normalize_wlo_fu_942_ap_return_81;
                norm_LS_data_41_0_reg_2185 <= grp_normalize_wlo_fu_942_ap_return_82;
                norm_LS_data_41_1_reg_2190 <= grp_normalize_wlo_fu_942_ap_return_83;
                norm_LS_data_42_0_reg_2195 <= grp_normalize_wlo_fu_942_ap_return_84;
                norm_LS_data_42_1_reg_2200 <= grp_normalize_wlo_fu_942_ap_return_85;
                norm_LS_data_43_0_reg_2205 <= grp_normalize_wlo_fu_942_ap_return_86;
                norm_LS_data_43_1_reg_2210 <= grp_normalize_wlo_fu_942_ap_return_87;
                norm_LS_data_44_0_reg_2215 <= grp_normalize_wlo_fu_942_ap_return_88;
                norm_LS_data_44_1_reg_2220 <= grp_normalize_wlo_fu_942_ap_return_89;
                norm_LS_data_45_0_reg_2225 <= grp_normalize_wlo_fu_942_ap_return_90;
                norm_LS_data_45_1_reg_2230 <= grp_normalize_wlo_fu_942_ap_return_91;
                norm_LS_data_46_0_reg_2235 <= grp_normalize_wlo_fu_942_ap_return_92;
                norm_LS_data_46_1_reg_2240 <= grp_normalize_wlo_fu_942_ap_return_93;
                norm_LS_data_47_0_reg_2245 <= grp_normalize_wlo_fu_942_ap_return_94;
                norm_LS_data_47_1_reg_2250 <= grp_normalize_wlo_fu_942_ap_return_95;
                norm_LS_data_48_0_reg_2255 <= grp_normalize_wlo_fu_942_ap_return_96;
                norm_LS_data_48_1_reg_2260 <= grp_normalize_wlo_fu_942_ap_return_97;
                norm_LS_data_49_0_reg_2265 <= grp_normalize_wlo_fu_942_ap_return_98;
                norm_LS_data_49_1_reg_2270 <= grp_normalize_wlo_fu_942_ap_return_99;
                norm_LS_data_4_0_reg_1815 <= grp_normalize_wlo_fu_942_ap_return_8;
                norm_LS_data_4_1_reg_1820 <= grp_normalize_wlo_fu_942_ap_return_9;
                norm_LS_data_50_0_reg_2275 <= grp_normalize_wlo_fu_942_ap_return_100;
                norm_LS_data_50_1_reg_2280 <= grp_normalize_wlo_fu_942_ap_return_101;
                norm_LS_data_51_0_reg_2285 <= grp_normalize_wlo_fu_942_ap_return_102;
                norm_LS_data_51_1_reg_2290 <= grp_normalize_wlo_fu_942_ap_return_103;
                norm_LS_data_5_0_reg_1825 <= grp_normalize_wlo_fu_942_ap_return_10;
                norm_LS_data_5_1_reg_1830 <= grp_normalize_wlo_fu_942_ap_return_11;
                norm_LS_data_6_0_reg_1835 <= grp_normalize_wlo_fu_942_ap_return_12;
                norm_LS_data_6_1_reg_1840 <= grp_normalize_wlo_fu_942_ap_return_13;
                norm_LS_data_7_0_reg_1845 <= grp_normalize_wlo_fu_942_ap_return_14;
                norm_LS_data_7_1_reg_1850 <= grp_normalize_wlo_fu_942_ap_return_15;
                norm_LS_data_8_0_reg_1855 <= grp_normalize_wlo_fu_942_ap_return_16;
                norm_LS_data_8_1_reg_1860 <= grp_normalize_wlo_fu_942_ap_return_17;
                norm_LS_data_9_0_reg_1865 <= grp_normalize_wlo_fu_942_ap_return_18;
                norm_LS_data_9_1_reg_1870 <= grp_normalize_wlo_fu_942_ap_return_19;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln529_reg_2555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                std_o_load_reg_2585 <= std_o_q0;
                y_L3_load_reg_2580 <= y_L3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln529_reg_2555_pp0_iter9_reg = ap_const_lv1_0))) then
                tmp_5_i_reg_2605 <= grp_fu_969_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_L2_wlo_fu_461_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                y_L2_0_0_reg_2295 <= grp_L2_wlo_fu_461_ap_return_0;
                y_L2_0_1_reg_2300 <= grp_L2_wlo_fu_461_ap_return_1;
                y_L2_10_0_reg_2395 <= grp_L2_wlo_fu_461_ap_return_20;
                y_L2_10_1_reg_2400 <= grp_L2_wlo_fu_461_ap_return_21;
                y_L2_11_0_reg_2405 <= grp_L2_wlo_fu_461_ap_return_22;
                y_L2_11_1_reg_2410 <= grp_L2_wlo_fu_461_ap_return_23;
                y_L2_12_0_reg_2415 <= grp_L2_wlo_fu_461_ap_return_24;
                y_L2_12_1_reg_2420 <= grp_L2_wlo_fu_461_ap_return_25;
                y_L2_13_0_reg_2425 <= grp_L2_wlo_fu_461_ap_return_26;
                y_L2_13_1_reg_2430 <= grp_L2_wlo_fu_461_ap_return_27;
                y_L2_14_0_reg_2435 <= grp_L2_wlo_fu_461_ap_return_28;
                y_L2_14_1_reg_2440 <= grp_L2_wlo_fu_461_ap_return_29;
                y_L2_15_0_reg_2445 <= grp_L2_wlo_fu_461_ap_return_30;
                y_L2_15_1_reg_2450 <= grp_L2_wlo_fu_461_ap_return_31;
                y_L2_16_0_reg_2455 <= grp_L2_wlo_fu_461_ap_return_32;
                y_L2_16_1_reg_2460 <= grp_L2_wlo_fu_461_ap_return_33;
                y_L2_17_0_reg_2465 <= grp_L2_wlo_fu_461_ap_return_34;
                y_L2_17_1_reg_2470 <= grp_L2_wlo_fu_461_ap_return_35;
                y_L2_18_0_reg_2475 <= grp_L2_wlo_fu_461_ap_return_36;
                y_L2_18_1_reg_2480 <= grp_L2_wlo_fu_461_ap_return_37;
                y_L2_19_0_reg_2485 <= grp_L2_wlo_fu_461_ap_return_38;
                y_L2_19_1_reg_2490 <= grp_L2_wlo_fu_461_ap_return_39;
                y_L2_1_0_reg_2305 <= grp_L2_wlo_fu_461_ap_return_2;
                y_L2_1_1_reg_2310 <= grp_L2_wlo_fu_461_ap_return_3;
                y_L2_20_0_reg_2495 <= grp_L2_wlo_fu_461_ap_return_40;
                y_L2_20_1_reg_2500 <= grp_L2_wlo_fu_461_ap_return_41;
                y_L2_21_0_reg_2505 <= grp_L2_wlo_fu_461_ap_return_42;
                y_L2_21_1_reg_2510 <= grp_L2_wlo_fu_461_ap_return_43;
                y_L2_22_0_reg_2515 <= grp_L2_wlo_fu_461_ap_return_44;
                y_L2_22_1_reg_2520 <= grp_L2_wlo_fu_461_ap_return_45;
                y_L2_23_0_reg_2525 <= grp_L2_wlo_fu_461_ap_return_46;
                y_L2_23_1_reg_2530 <= grp_L2_wlo_fu_461_ap_return_47;
                y_L2_24_0_reg_2535 <= grp_L2_wlo_fu_461_ap_return_48;
                y_L2_24_1_reg_2540 <= grp_L2_wlo_fu_461_ap_return_49;
                y_L2_25_0_reg_2545 <= grp_L2_wlo_fu_461_ap_return_50;
                y_L2_25_1_reg_2550 <= grp_L2_wlo_fu_461_ap_return_51;
                y_L2_2_0_reg_2315 <= grp_L2_wlo_fu_461_ap_return_4;
                y_L2_2_1_reg_2320 <= grp_L2_wlo_fu_461_ap_return_5;
                y_L2_3_0_reg_2325 <= grp_L2_wlo_fu_461_ap_return_6;
                y_L2_3_1_reg_2330 <= grp_L2_wlo_fu_461_ap_return_7;
                y_L2_4_0_reg_2335 <= grp_L2_wlo_fu_461_ap_return_8;
                y_L2_4_1_reg_2340 <= grp_L2_wlo_fu_461_ap_return_9;
                y_L2_5_0_reg_2345 <= grp_L2_wlo_fu_461_ap_return_10;
                y_L2_5_1_reg_2350 <= grp_L2_wlo_fu_461_ap_return_11;
                y_L2_6_0_reg_2355 <= grp_L2_wlo_fu_461_ap_return_12;
                y_L2_6_1_reg_2360 <= grp_L2_wlo_fu_461_ap_return_13;
                y_L2_7_0_reg_2365 <= grp_L2_wlo_fu_461_ap_return_14;
                y_L2_7_1_reg_2370 <= grp_L2_wlo_fu_461_ap_return_15;
                y_L2_8_0_reg_2375 <= grp_L2_wlo_fu_461_ap_return_16;
                y_L2_8_1_reg_2380 <= grp_L2_wlo_fu_461_ap_return_17;
                y_L2_9_0_reg_2385 <= grp_L2_wlo_fu_461_ap_return_18;
                y_L2_9_1_reg_2390 <= grp_L2_wlo_fu_461_ap_return_19;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln529_fu_1757_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln531_reg_2564(6 downto 0) <= zext_ln531_fu_1769_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln531_reg_2564(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln531_reg_2564_pp0_iter1_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln531_reg_2564_pp0_iter2_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln531_reg_2564_pp0_iter3_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln531_reg_2564_pp0_iter4_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln531_reg_2564_pp0_iter5_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln531_reg_2564_pp0_iter6_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln531_reg_2564_pp0_iter7_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln531_reg_2564_pp0_iter8_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln531_reg_2564_pp0_iter9_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln531_reg_2564_pp0_iter10_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (DNN_out_TREADY, DNN_out_V_data_1_state, DNN_out_V_last_V_1_state, ap_CS_fsm, ap_CS_fsm_state5, grp_normalize_wlo_fu_942_ap_done, ap_CS_fsm_state6, grp_L2_wlo_fu_461_ap_done, icmp_ln529_fu_1757_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state7, grp_L3_wlo_fu_779_ap_done, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, grp_separate_complex_wlo_fu_951_ap_done, grp_reconstruct_complex_s_fu_960_ap_done, ap_CS_fsm_state3, ap_CS_fsm_state21, ap_CS_fsm_state22)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_separate_complex_wlo_fu_951_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((grp_normalize_wlo_fu_942_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((grp_L2_wlo_fu_461_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((grp_L3_wlo_fu_779_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln529_fu_1757_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln529_fu_1757_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (grp_reconstruct_complex_s_fu_960_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if ((not(((ap_const_lv2_1 = DNN_out_V_last_V_1_state) or (ap_const_lv2_1 = DNN_out_V_data_1_state) or ((ap_const_lv2_3 = DNN_out_V_last_V_1_state) and (ap_const_logic_0 = DNN_out_TREADY)) or ((ap_const_lv2_3 = DNN_out_V_data_1_state) and (ap_const_logic_0 = DNN_out_TREADY)))) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    DNN_out_TDATA <= DNN_out_V_data_1_data_out;
    DNN_out_TLAST <= DNN_out_V_last_V_1_data_out;
    DNN_out_TVALID <= DNN_out_V_last_V_1_state(0);
    DNN_out_V_data_1_ack_in <= DNN_out_V_data_1_state(1);
    DNN_out_V_data_1_ack_out <= DNN_out_TREADY;

    DNN_out_V_data_1_data_out_assign_proc : process(DNN_out_V_data_1_payload_A, DNN_out_V_data_1_payload_B, DNN_out_V_data_1_sel)
    begin
        if ((ap_const_logic_1 = DNN_out_V_data_1_sel)) then 
            DNN_out_V_data_1_data_out <= DNN_out_V_data_1_payload_B;
        else 
            DNN_out_V_data_1_data_out <= DNN_out_V_data_1_payload_A;
        end if; 
    end process;

    DNN_out_V_data_1_load_A <= (not(DNN_out_V_data_1_sel_wr) and DNN_out_V_data_1_state_cmp_full);
    DNN_out_V_data_1_load_B <= (DNN_out_V_data_1_state_cmp_full and DNN_out_V_data_1_sel_wr);
    DNN_out_V_data_1_sel <= DNN_out_V_data_1_sel_rd;
    DNN_out_V_data_1_state_cmp_full <= '0' when (DNN_out_V_data_1_state = ap_const_lv2_1) else '1';
    DNN_out_V_data_1_vld_in <= grp_reconstruct_complex_s_fu_960_DNN_out_TVALID;
    DNN_out_V_data_1_vld_out <= DNN_out_V_data_1_state(0);
    DNN_out_V_last_V_1_ack_in <= DNN_out_V_last_V_1_state(1);
    DNN_out_V_last_V_1_ack_out <= DNN_out_TREADY;

    DNN_out_V_last_V_1_data_out_assign_proc : process(DNN_out_V_last_V_1_payload_A, DNN_out_V_last_V_1_payload_B, DNN_out_V_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = DNN_out_V_last_V_1_sel)) then 
            DNN_out_V_last_V_1_data_out <= DNN_out_V_last_V_1_payload_B;
        else 
            DNN_out_V_last_V_1_data_out <= DNN_out_V_last_V_1_payload_A;
        end if; 
    end process;

    DNN_out_V_last_V_1_load_A <= (not(DNN_out_V_last_V_1_sel_wr) and DNN_out_V_last_V_1_state_cmp_full);
    DNN_out_V_last_V_1_load_B <= (DNN_out_V_last_V_1_state_cmp_full and DNN_out_V_last_V_1_sel_wr);
    DNN_out_V_last_V_1_sel <= DNN_out_V_last_V_1_sel_rd;
    DNN_out_V_last_V_1_state_cmp_full <= '0' when (DNN_out_V_last_V_1_state = ap_const_lv2_1) else '1';
    DNN_out_V_last_V_1_vld_in <= grp_reconstruct_complex_s_fu_960_DNN_out_TVALID;
    DNN_out_V_last_V_1_vld_out <= DNN_out_V_last_V_1_state(0);

    LS_data_address0_assign_proc : process(ap_CS_fsm_state5, grp_normalize_wlo_fu_942_LS_data_address0, grp_separate_complex_wlo_fu_951_sep_address0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            LS_data_address0 <= grp_separate_complex_wlo_fu_951_sep_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            LS_data_address0 <= grp_normalize_wlo_fu_942_LS_data_address0;
        else 
            LS_data_address0 <= "XXXXXXX";
        end if; 
    end process;


    LS_data_ce0_assign_proc : process(ap_CS_fsm_state5, grp_normalize_wlo_fu_942_LS_data_ce0, grp_separate_complex_wlo_fu_951_sep_ce0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            LS_data_ce0 <= grp_separate_complex_wlo_fu_951_sep_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            LS_data_ce0 <= grp_normalize_wlo_fu_942_LS_data_ce0;
        else 
            LS_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    LS_data_ce1_assign_proc : process(grp_separate_complex_wlo_fu_951_sep_ce1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            LS_data_ce1 <= grp_separate_complex_wlo_fu_951_sep_ce1;
        else 
            LS_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    LS_data_we0_assign_proc : process(grp_separate_complex_wlo_fu_951_sep_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            LS_data_we0 <= grp_separate_complex_wlo_fu_951_sep_we0;
        else 
            LS_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    LS_data_we1_assign_proc : process(grp_separate_complex_wlo_fu_951_sep_we1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            LS_data_we1 <= grp_separate_complex_wlo_fu_951_sep_we1;
        else 
            LS_data_we1 <= ap_const_logic_0;
        end if; 
    end process;

    LS_stream_TREADY <= LS_stream_V_last_V_0_state(1);
    LS_stream_V_data_0_ack_in <= LS_stream_V_data_0_state(1);

    LS_stream_V_data_0_ack_out_assign_proc : process(grp_separate_complex_wlo_fu_951_LS_stream_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            LS_stream_V_data_0_ack_out <= grp_separate_complex_wlo_fu_951_LS_stream_TREADY;
        else 
            LS_stream_V_data_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    LS_stream_V_data_0_data_out_assign_proc : process(LS_stream_V_data_0_payload_A, LS_stream_V_data_0_payload_B, LS_stream_V_data_0_sel)
    begin
        if ((ap_const_logic_1 = LS_stream_V_data_0_sel)) then 
            LS_stream_V_data_0_data_out <= LS_stream_V_data_0_payload_B;
        else 
            LS_stream_V_data_0_data_out <= LS_stream_V_data_0_payload_A;
        end if; 
    end process;

    LS_stream_V_data_0_load_A <= (not(LS_stream_V_data_0_sel_wr) and LS_stream_V_data_0_state_cmp_full);
    LS_stream_V_data_0_load_B <= (LS_stream_V_data_0_state_cmp_full and LS_stream_V_data_0_sel_wr);
    LS_stream_V_data_0_sel <= LS_stream_V_data_0_sel_rd;
    LS_stream_V_data_0_state_cmp_full <= '0' when (LS_stream_V_data_0_state = ap_const_lv2_1) else '1';
    LS_stream_V_data_0_vld_in <= LS_stream_TVALID;
    LS_stream_V_data_0_vld_out <= LS_stream_V_data_0_state(0);
    LS_stream_V_last_V_0_ack_in <= LS_stream_V_last_V_0_state(1);

    LS_stream_V_last_V_0_ack_out_assign_proc : process(grp_separate_complex_wlo_fu_951_LS_stream_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            LS_stream_V_last_V_0_ack_out <= grp_separate_complex_wlo_fu_951_LS_stream_TREADY;
        else 
            LS_stream_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    LS_stream_V_last_V_0_data_out_assign_proc : process(LS_stream_V_last_V_0_payload_A, LS_stream_V_last_V_0_payload_B, LS_stream_V_last_V_0_sel)
    begin
        if ((ap_const_logic_1 = LS_stream_V_last_V_0_sel)) then 
            LS_stream_V_last_V_0_data_out <= LS_stream_V_last_V_0_payload_B;
        else 
            LS_stream_V_last_V_0_data_out <= LS_stream_V_last_V_0_payload_A;
        end if; 
    end process;

    LS_stream_V_last_V_0_load_A <= (not(LS_stream_V_last_V_0_sel_wr) and LS_stream_V_last_V_0_state_cmp_full);
    LS_stream_V_last_V_0_load_B <= (LS_stream_V_last_V_0_state_cmp_full and LS_stream_V_last_V_0_sel_wr);
    LS_stream_V_last_V_0_sel <= LS_stream_V_last_V_0_sel_rd;
    LS_stream_V_last_V_0_state_cmp_full <= '0' when (LS_stream_V_last_V_0_state = ap_const_lv2_1) else '1';
    LS_stream_V_last_V_0_vld_in <= LS_stream_TVALID;
    LS_stream_V_last_V_0_vld_out <= LS_stream_V_last_V_0_state(0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(8);
    ap_CS_fsm_state21 <= ap_CS_fsm(9);
    ap_CS_fsm_state22 <= ap_CS_fsm(10);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state22_assign_proc : process(DNN_out_TREADY, DNN_out_V_data_1_state, DNN_out_V_last_V_1_state)
    begin
                ap_block_state22 <= ((ap_const_lv2_1 = DNN_out_V_last_V_1_state) or (ap_const_lv2_1 = DNN_out_V_data_1_state) or ((ap_const_lv2_3 = DNN_out_V_last_V_1_state) and (ap_const_logic_0 = DNN_out_TREADY)) or ((ap_const_lv2_3 = DNN_out_V_data_1_state) and (ap_const_logic_0 = DNN_out_TREADY)));
    end process;

        ap_block_state8_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state8_assign_proc : process(icmp_ln529_fu_1757_p2)
    begin
        if ((icmp_ln529_fu_1757_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    denorm_DNN_address0_assign_proc : process(zext_ln531_reg_2564_pp0_iter10_reg, ap_enable_reg_pp0_iter11, grp_reconstruct_complex_s_fu_960_y_L3_address0, ap_CS_fsm_state21, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            denorm_DNN_address0 <= zext_ln531_reg_2564_pp0_iter10_reg(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            denorm_DNN_address0 <= grp_reconstruct_complex_s_fu_960_y_L3_address0;
        else 
            denorm_DNN_address0 <= "XXXXXXX";
        end if; 
    end process;


    denorm_DNN_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter11, grp_reconstruct_complex_s_fu_960_y_L3_ce0, ap_CS_fsm_state21)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            denorm_DNN_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            denorm_DNN_ce0 <= grp_reconstruct_complex_s_fu_960_y_L3_ce0;
        else 
            denorm_DNN_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    denorm_DNN_ce1_assign_proc : process(grp_reconstruct_complex_s_fu_960_y_L3_ce1, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            denorm_DNN_ce1 <= grp_reconstruct_complex_s_fu_960_y_L3_ce1;
        else 
            denorm_DNN_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    denorm_DNN_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln529_reg_2555_pp0_iter10_reg, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln529_reg_2555_pp0_iter10_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            denorm_DNN_we0 <= ap_const_logic_1;
        else 
            denorm_DNN_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_L2_wlo_fu_461_ap_start <= grp_L2_wlo_fu_461_ap_start_reg;
    grp_L3_wlo_fu_779_ap_start <= grp_L3_wlo_fu_779_ap_start_reg;
    grp_normalize_wlo_fu_942_ap_start <= grp_normalize_wlo_fu_942_ap_start_reg;
    grp_reconstruct_complex_s_fu_960_DNN_out_TREADY <= ((ap_CS_fsm_state21 and DNN_out_V_last_V_1_ack_in) or (ap_CS_fsm_state21 and DNN_out_V_data_1_ack_in));
    grp_reconstruct_complex_s_fu_960_ap_start <= grp_reconstruct_complex_s_fu_960_ap_start_reg;
    grp_separate_complex_wlo_fu_951_LS_stream_TVALID <= LS_stream_V_last_V_0_state(0);
    grp_separate_complex_wlo_fu_951_ap_start <= grp_separate_complex_wlo_fu_951_ap_start_reg;
    i_fu_1763_p2 <= std_logic_vector(unsigned(i_0_i_reg_450) + unsigned(ap_const_lv7_1));
    icmp_ln529_fu_1757_p2 <= "1" when (i_0_i_reg_450 = ap_const_lv7_68) else "0";
    mean_o_address0 <= zext_ln531_reg_2564_pp0_iter3_reg(7 - 1 downto 0);

    mean_o_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            mean_o_ce0 <= ap_const_logic_1;
        else 
            mean_o_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    std_o_address0 <= zext_ln531_fu_1769_p1(7 - 1 downto 0);

    std_o_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            std_o_ce0 <= ap_const_logic_1;
        else 
            std_o_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_L3_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln531_fu_1769_p1, ap_CS_fsm_state7, grp_L3_wlo_fu_779_y_L3_address0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_L3_address0 <= zext_ln531_fu_1769_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            y_L3_address0 <= grp_L3_wlo_fu_779_y_L3_address0;
        else 
            y_L3_address0 <= "XXXXXXX";
        end if; 
    end process;


    y_L3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state7, grp_L3_wlo_fu_779_y_L3_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_L3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            y_L3_ce0 <= grp_L3_wlo_fu_779_y_L3_ce0;
        else 
            y_L3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_L3_we0_assign_proc : process(ap_CS_fsm_state7, grp_L3_wlo_fu_779_y_L3_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            y_L3_we0 <= grp_L3_wlo_fu_779_y_L3_we0;
        else 
            y_L3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln531_fu_1769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_450),64));
end behav;
