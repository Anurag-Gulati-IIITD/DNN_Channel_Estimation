-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_wlo_L2_WEIGHTSbOq_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_wlo_L2_WEIGHTSbOq_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1010011001100101", 1 => "1010101110111011", 2 => "1010110111001101", 
    3 => "1010110101101010", 4 => "1010100001011111", 5 => "0010100110111101", 
    6 => "0010111100101010", 7 => "0011000001011010", 8 => "0010111001000111", 
    9 => "1010011101101110", 10 => "1011000001000110", 11 => "1011000101011111", 
    12 => "1010111100111011", 13 => "0010011100011001", 14 => "0010111100100111", 
    15 => "0011000010010101", 16 => "0010111100000011", 17 => "0010101000010000", 
    18 => "1010100101011000", 19 => "1011000001110100", 20 => "1011000000101001", 
    21 => "1010110110011110", 22 => "0001100101010110", 23 => "0010111010001010", 
    24 => "0011000000101110", 25 => "0010111011000100", 26 => "1010101001101100", 
    27 => "1010110011100101", 28 => "1010101010000100", 29 => "0001100011100110", 
    30 => "1010010000001000", 31 => "1010010100001011", 32 => "1010010010101110", 
    33 => "0010010001001010", 34 => "0010110111010010", 35 => "0010111110111000", 
    36 => "0010101110011110", 37 => "1010101001011100", 38 => "1011000001101011", 
    39 => "1011000010100001", 40 => "1010101010101011", 41 => "0010110001011011", 
    42 => "0011000001010001", 43 => "0010111011000011", 44 => "0010100010100010", 
    45 => "1010101110110111", 46 => "1010110100010111", 47 => "1010110100011011", 
    48 => "1010100001010111", 49 => "0001000000101011", 50 => "0010101011001011", 
    51 => "0010101100100100", 52 => "1010110000101100", 53 => "1010100011110100", 
    54 => "1010010010110101", 55 => "0010100110110010", 56 => "0010111001001000", 
    57 => "0010111110000011", 58 => "0010110010101110", 59 => "1010100001001011", 
    60 => "1011000000001001", 61 => "1011000100010001", 62 => "1010111000011110", 
    63 => "0010011110011011", 64 => "0011000001000011", 65 => "0011000011110000", 
    66 => "0010111011110010", 67 => "0010011001001100", 68 => "1010110110111100", 
    69 => "1011000001101110", 70 => "1011000001000111", 71 => "1010110001100111", 
    72 => "0010100100001000", 73 => "0010111110100001", 74 => "0011000001011010", 
    75 => "0010111000100110", 76 => "0010100000010011", 77 => "1010110001110111", 
    78 => "1010110001111110", 79 => "1010011101011001", 80 => "0010011011000101", 
    81 => "0010011101101000", 82 => "0001010110010001", 83 => "0010010100101101", 
    84 => "0010110001001011", 85 => "0010110001100101", 86 => "0010101110110100", 
    87 => "1010100000011111", 88 => "1011000000000110", 89 => "1011000011100010", 
    90 => "1010101011101011", 91 => "0010110001100101", 92 => "0011000010100010", 
    93 => "0011000000100101", 94 => "0010100110110001", 95 => "1010110101110001", 
    96 => "1010111101100001", 97 => "1010111011011001", 98 => "1010100101001101", 
    99 => "0010100111111010", 100 => "0010101110100000", 101 => "0010110000010101", 
    102 => "0010110001000000", 103 => "0010100110010101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_wlo_L2_WEIGHTSbOq is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_wlo_L2_WEIGHTSbOq is
    component L3_wlo_L2_WEIGHTSbOq_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_wlo_L2_WEIGHTSbOq_rom_U :  component L3_wlo_L2_WEIGHTSbOq_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


