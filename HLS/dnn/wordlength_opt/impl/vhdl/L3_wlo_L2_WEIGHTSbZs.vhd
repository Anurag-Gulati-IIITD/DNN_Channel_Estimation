-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_wlo_L2_WEIGHTSbZs_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_wlo_L2_WEIGHTSbZs_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0010010010010111", 1 => "0010001110110001", 2 => "0001100111010000", 
    3 => "1001111110110110", 4 => "1010000110111111", 5 => "1001111000011010", 
    6 => "0001011111011100", 7 => "0001111010100011", 8 => "0001101101100000", 
    9 => "1001110000000101", 10 => "1001100000010100", 11 => "1001101000001101", 
    12 => "0001001000111010", 13 => "0010000000100001", 14 => "1001101111100111", 
    15 => "1010000000001101", 16 => "1010000001111000", 17 => "1001011000011001", 
    18 => "0001111011000111", 19 => "0010001110000110", 20 => "0010001000101101", 
    21 => "0001100101000010", 22 => "1001101010110000", 23 => "1001100100010101", 
    24 => "0001110101101010", 25 => "0010000000010101", 26 => "1010000000010110", 
    27 => "1010001110010011", 28 => "1010000001010100", 29 => "0001110011101100", 
    30 => "0001110110011000", 31 => "0001111111111110", 32 => "0001000001111001", 
    33 => "1001101010111010", 34 => "0001010010000010", 35 => "0000111111100110", 
    36 => "0001110111010101", 37 => "1001111101111011", 38 => "1010001001000101", 
    39 => "1001110010000000", 40 => "1001100111000111", 41 => "1001001001101000", 
    42 => "0010000101100110", 43 => "0001011110001110", 44 => "0001110000011101", 
    45 => "1001010010111111", 46 => "1001110010111101", 47 => "1001110010111001", 
    48 => "1001111111111001", 49 => "1001101100101011", 50 => "1000111010101111", 
    51 => "0010000011100100", 52 => "0001101000111011", 53 => "1010000101110100", 
    54 => "1010001100100111", 55 => "1010000111010001", 56 => "0001011000110000", 
    57 => "0010000000010110", 58 => "0010000011101011", 59 => "0001100110100000", 
    60 => "1001111010111111", 61 => "1001110111011001", 62 => "0001001010010110", 
    63 => "0001110110101110", 64 => "1001101111010000", 65 => "1001100110011010", 
    66 => "1010001101000100", 67 => "1001100111100101", 68 => "0001111110100011", 
    69 => "0010000001111001", 70 => "0010000011010100", 71 => "1001011001101111", 
    72 => "1001111100010100", 73 => "1010000101110110", 74 => "0000110000010100", 
    75 => "0001010110111010", 76 => "0001110001110010", 77 => "1001001100111110", 
    78 => "1001110011010110", 79 => "0001010101001001", 80 => "0010000010101000", 
    81 => "0010001101010010", 82 => "0001110110100010", 83 => "1001001011010001", 
    84 => "1001001101111011", 85 => "1001101001111001", 86 => "0001000010110000", 
    87 => "1001111010111001", 88 => "1001100011000110", 89 => "1010000100111000", 
    90 => "1001110010001100", 91 => "0001101101101100", 92 => "0010000100101100", 
    93 => "0001110111101101", 94 => "0001100101110001", 95 => "1001000010001000", 
    96 => "1001111000110001", 97 => "1001110101011100", 98 => "1001110110011110", 
    99 => "0000101101001111", 100 => "1001110010000011", 101 => "0001111010010000", 
    102 => "0010000100011001", 103 => "0001011010100100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_wlo_L2_WEIGHTSbZs is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_wlo_L2_WEIGHTSbZs is
    component L3_wlo_L2_WEIGHTSbZs_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_wlo_L2_WEIGHTSbZs_rom_U :  component L3_wlo_L2_WEIGHTSbZs_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


