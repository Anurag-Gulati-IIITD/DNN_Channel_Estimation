-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_wlo_L2_WEIGHTScmv_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_wlo_L2_WEIGHTScmv_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0001111001001110", 1 => "1001011110010101", 2 => "0001101000001111", 
    3 => "0001111010011011", 4 => "0001001000000001", 5 => "1001110011110111", 
    6 => "0001100010001110", 7 => "1001110110011011", 8 => "1001100001010001", 
    9 => "0001010010000110", 10 => "0001101100011110", 11 => "0001101111011111", 
    12 => "0001111100110100", 13 => "0001111011001011", 14 => "1001101011000110", 
    15 => "1010001010000101", 16 => "1001101000111001", 17 => "1001001011111101", 
    18 => "0001100111001110", 19 => "0001110100101111", 20 => "1001111010110000", 
    21 => "1001100100000101", 22 => "0001111010011001", 23 => "0001110001100011", 
    24 => "1001000010110000", 25 => "0001100111101110", 26 => "1010000100010101", 
    27 => "0010000011001011", 28 => "1000111100100101", 29 => "0001111010001010", 
    30 => "0001110010110001", 31 => "1010000001110000", 32 => "1010000010000111", 
    33 => "1001110110110100", 34 => "0000111110010010", 35 => "0001010111110100", 
    36 => "0010000100110001", 37 => "0001100000001001", 38 => "1001011000110101", 
    39 => "1001010110010100", 40 => "0001101010010011", 41 => "1001001000010010", 
    42 => "1001100100110100", 43 => "1001110111101001", 44 => "1000101000111010", 
    45 => "0001001100111100", 46 => "0001110001011011", 47 => "0001111100110101", 
    48 => "0001111010101101", 49 => "1001110110011011", 50 => "1001100100101010", 
    51 => "1010000100100111", 52 => "0001110000011011", 53 => "0001000010110110", 
    54 => "1001110010110101", 55 => "1001010001000100", 56 => "1001100011000110", 
    57 => "1001101011010011", 58 => "1001010011110110", 59 => "0001110000011110", 
    60 => "0001011110100111", 61 => "0001011110101101", 62 => "0001110100100011", 
    63 => "0001110000011010", 64 => "1001100011011110", 65 => "1010000111011101", 
    66 => "1001100101010111", 67 => "1001001001010001", 68 => "0001101000111110", 
    69 => "0001111100001101", 70 => "1001110110011010", 71 => "1001100111110000", 
    72 => "0001110000010010", 73 => "1001011000010011", 74 => "0001100001001000", 
    75 => "0001101111111000", 76 => "1001101100010000", 77 => "1010000000111100", 
    78 => "1001100100100011", 79 => "0001110101110100", 80 => "0010000110100110", 
    81 => "1010000010001101", 82 => "1001111000011001", 83 => "1001110010001100", 
    84 => "1001010100100011", 85 => "0001101001001001", 86 => "0010001000011000", 
    87 => "0001100110110001", 88 => "1001100101010111", 89 => "0001010001101011", 
    90 => "1001100001000101", 91 => "1000110000001000", 92 => "1000001011100010", 
    93 => "0001001001111001", 94 => "0000101011000000", 95 => "0000110011100110", 
    96 => "0001100111110000", 97 => "0001110001111011", 98 => "1000000000000000", 
    99 => "1001101100111110", 100 => "1001100010101111", 101 => "1010000011110001", 
    102 => "1001110000010111", 103 => "0010000000101101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_wlo_L2_WEIGHTScmv is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_wlo_L2_WEIGHTScmv is
    component L3_wlo_L2_WEIGHTScmv_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_wlo_L2_WEIGHTScmv_rom_U :  component L3_wlo_L2_WEIGHTScmv_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


