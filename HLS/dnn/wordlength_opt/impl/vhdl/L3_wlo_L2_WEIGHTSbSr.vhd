-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_wlo_L2_WEIGHTSbSr_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_wlo_L2_WEIGHTSbSr_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1011000011001011", 1 => "1010111011111010", 2 => "0001101011101011", 
    3 => "0010110110111110", 4 => "0011000001010001", 5 => "0010111000100001", 
    6 => "1001111111101101", 7 => "1010110110100000", 8 => "1010111110111010", 
    9 => "1010110110100011", 10 => "1010001000011100", 11 => "0010100110000101", 
    12 => "0010110010000001", 13 => "0010100101101101", 14 => "0010001001001001", 
    15 => "0001111111101011", 16 => "1010011100110110", 17 => "1010100000111011", 
    18 => "1010011100011011", 19 => "1010011000011101", 20 => "0010000000011011", 
    21 => "0010001011010101", 22 => "0010011101100101", 23 => "0010011000000101", 
    24 => "0001110101000001", 25 => "1010100101000100", 26 => "1010100001111111", 
    27 => "0010101101111100", 28 => "0010111010011001", 29 => "0010110100000100", 
    30 => "0001110110000000", 31 => "1010111100000101", 32 => "1010111100110000", 
    33 => "1010100000001011", 34 => "0010101010110000", 35 => "0010111011111101", 
    36 => "0010101000110110", 37 => "1010100110101010", 38 => "1010101001111101", 
    39 => "1010000100100010", 40 => "0010110000010101", 41 => "0010110101101110", 
    42 => "1010000001111111", 43 => "1010110111111000", 44 => "1010111111010101", 
    45 => "1010010111010000", 46 => "0010110011001110", 47 => "0011000001101011", 
    48 => "0010110110110011", 49 => "1010000111011000", 50 => "1010111110100011", 
    51 => "1010111001010100", 52 => "1001111010101001", 53 => "0010111001111010", 
    54 => "0011000011101010", 55 => "0010111010010100", 56 => "0010000000101110", 
    57 => "1010111001111100", 58 => "1011000001111001", 59 => "1010111001001000", 
    60 => "0001000010011011", 61 => "0010101100100111", 62 => "0010111001100000", 
    63 => "0010110100110011", 64 => "0010001101000011", 65 => "1010011110000011", 
    66 => "1010101101101010", 67 => "1010101000000011", 68 => "1010010011111101", 
    69 => "0010001001011010", 70 => "0010000001011011", 71 => "0010100000111111", 
    72 => "0010011000011101", 73 => "0010011100000010", 74 => "0010000010100000", 
    75 => "1010100110101001", 76 => "1010110001001000", 77 => "1010100110110101", 
    78 => "0010110011011101", 79 => "0010110010000110", 80 => "0001111111100011", 
    81 => "1010110110110111", 82 => "1010111101101011", 83 => "1010101001011100", 
    84 => "0010100011001110", 85 => "0010111001111111", 86 => "0010110101100101", 
    87 => "0001110010111110", 88 => "1010110000110110", 89 => "1010110100001100", 
    90 => "1000100010100111", 91 => "0010101000101110", 92 => "0010100110110011", 
    93 => "1010101010000011", 94 => "1010111000010101", 95 => "1010101101111101", 
    96 => "0010101010001011", 97 => "0010111111001110", 98 => "0011000000101100", 
    99 => "0010000110011001", 100 => "1010111011100001", 101 => "1011000000000101", 
    102 => "1010101111000100", 103 => "0010100100001100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_wlo_L2_WEIGHTSbSr is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_wlo_L2_WEIGHTSbSr is
    component L3_wlo_L2_WEIGHTSbSr_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_wlo_L2_WEIGHTSbSr_rom_U :  component L3_wlo_L2_WEIGHTSbSr_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


