-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_wlo_L2_WEIGHTS_9_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_wlo_L2_WEIGHTS_9_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0010011011100110", 1 => "1010100110010010", 2 => "1010101101100111", 
    3 => "1010100010110011", 4 => "1010001011101111", 5 => "0001111001110001", 
    6 => "0010000001100111", 7 => "0010001010001000", 8 => "0010100101101011", 
    9 => "0010101100110101", 10 => "0010011000110000", 11 => "1010100101100110", 
    12 => "1010111001101100", 13 => "1010111100110100", 14 => "1010100110011010", 
    15 => "0010101010010010", 16 => "0011000000101001", 17 => "0010111111011010", 
    18 => "0010100011101110", 19 => "1010101001011100", 20 => "1011000000011101", 
    21 => "1011000000001010", 22 => "1010101101110111", 23 => "0010010110100100", 
    24 => "0010111000000111", 25 => "0010111111000011", 26 => "0010000001011101", 
    27 => "1010110011111101", 28 => "1011000001000010", 29 => "1010111110100111", 
    30 => "1010011110100011", 31 => "0010110000101000", 32 => "0011000001011100", 
    33 => "0010111111101100", 34 => "0010100010001101", 35 => "1010110011100101", 
    36 => "1011000010010100", 37 => "1011000000111000", 38 => "1010100111100101", 
    39 => "0010110001101010", 40 => "0011000010101010", 41 => "0011000001110110", 
    42 => "0010100111010101", 43 => "1010110001011100", 44 => "1011000100001111", 
    45 => "1011000001110100", 46 => "1010100011101100", 47 => "0010110110011110", 
    48 => "0011000100011011", 49 => "0010111100111001", 50 => "1010000101011011", 
    51 => "1010111100111000", 52 => "1010110001101001", 53 => "1010101110110101", 
    54 => "1010001101110110", 55 => "0010100001100110", 56 => "0010100000100011", 
    57 => "0010011000111000", 58 => "0010010100110001", 59 => "0010010111111100", 
    60 => "0010000101100010", 61 => "1010011000110011", 62 => "1010110010000011", 
    63 => "1010110111110111", 64 => "1010100010011110", 65 => "0010101000001011", 
    66 => "0010111111010000", 67 => "0010111110011010", 68 => "0010101001010001", 
    69 => "1010110001010110", 70 => "1011000000011110", 71 => "1010111111101101", 
    72 => "1010101000100011", 73 => "0010100110111011", 74 => "0010111011111000", 
    75 => "0011000000101001", 76 => "0010110001110011", 77 => "1010001001001011", 
    78 => "1011000001010011", 79 => "1010111001110100", 80 => "1010010000100011", 
    81 => "0010110100000111", 82 => "0011000001111000", 83 => "0010111110110001", 
    84 => "0010010101101001", 85 => "1010110001111110", 86 => "1011000010011010", 
    87 => "1011000000011100", 88 => "1010100100100100", 89 => "0010110011100101", 
    90 => "0011000011000101", 91 => "0011000010000001", 92 => "0010101001011010", 
    93 => "1010110000001101", 94 => "1011000010110111", 95 => "1011000010010100", 
    96 => "1010100111110010", 97 => "0010110100010000", 98 => "0011000101101110", 
    99 => "0011000001100110", 100 => "0010010111101010", 101 => "1010111011111011", 
    102 => "1011000011001011", 103 => "1010110010101110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_wlo_L2_WEIGHTS_9 is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_wlo_L2_WEIGHTS_9 is
    component L3_wlo_L2_WEIGHTS_9_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_wlo_L2_WEIGHTS_9_rom_U :  component L3_wlo_L2_WEIGHTS_9_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


