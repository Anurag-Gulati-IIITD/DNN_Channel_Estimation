-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_wlo_L2_WEIGHTScfu_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_wlo_L2_WEIGHTScfu_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0010011001110010", 1 => "0010101111000111", 2 => "0010110111010100", 
    3 => "0010110101101110", 4 => "0010100001100000", 5 => "1010100111000111", 
    6 => "1010111100110010", 7 => "1011000001011111", 8 => "1010111001001110", 
    9 => "0010011101110101", 10 => "0011000001001011", 11 => "0011000101100101", 
    12 => "0010111101000101", 13 => "1010011100100011", 14 => "1010111100110000", 
    15 => "1011000010011011", 16 => "1010111100001100", 17 => "1010101000010101", 
    18 => "0010100101100001", 19 => "0011000001111001", 20 => "0011000000101101", 
    21 => "0010110110100011", 22 => "1001100110001011", 23 => "1010111010010001", 
    24 => "1011000000110010", 25 => "1010111011001011", 26 => "0010101001110010", 
    27 => "0010110011101010", 28 => "0010101010001101", 29 => "1001100011100001", 
    30 => "0010010000010001", 31 => "0010010100001101", 32 => "0010010010110011", 
    33 => "1010010001010000", 34 => "1010110111011001", 35 => "1010111111000000", 
    36 => "1010101110100110", 37 => "0010101001100011", 38 => "0011000001101111", 
    39 => "0011000010100110", 40 => "0010101010110011", 41 => "1010110001100000", 
    42 => "1011000001010110", 43 => "1010111011001010", 44 => "1010100010101000", 
    45 => "0010101111000010", 46 => "0010110100011101", 47 => "0010110100100010", 
    48 => "0010100001011100", 49 => "1001000010000001", 50 => "1010101011010101", 
    51 => "1010101100101100", 52 => "0010110000110001", 53 => "0010100011111010", 
    54 => "0010010010110101", 55 => "1010100110111101", 56 => "1010111001001110", 
    57 => "1010111110001001", 58 => "1010110010110011", 59 => "0010100001001111", 
    60 => "0011000000001101", 61 => "0011000100010111", 62 => "0010111000100101", 
    63 => "1010011110011101", 64 => "1011000001001000", 65 => "1011000011110110", 
    66 => "1010111011111011", 67 => "1010011001010101", 68 => "0010110111000100", 
    69 => "0011000001110011", 70 => "0011000001001100", 71 => "0010110001101100", 
    72 => "1010100100010000", 73 => "1010111110101010", 74 => "1011000001011110", 
    75 => "1010111000101011", 76 => "1010100000010110", 77 => "0010110001111011", 
    78 => "0010110010000011", 79 => "0010011101100001", 80 => "1010011011001001", 
    81 => "1010011101101111", 82 => "1001010101111000", 83 => "1010010100110111", 
    84 => "1010110001010001", 85 => "1010110001101010", 86 => "1010101110111010", 
    87 => "0010100000100010", 88 => "0011000000001011", 89 => "0011000011101000", 
    90 => "0010101011110011", 91 => "1010110001101010", 92 => "1011000010100111", 
    93 => "1011000000101010", 94 => "1010100110111000", 95 => "0010110101110111", 
    96 => "0010111101101010", 97 => "0010111011100001", 98 => "0010100101010101", 
    99 => "1010101000000001", 100 => "1010101110101001", 101 => "1010110000011010", 
    102 => "1010110001000110", 103 => "1010100110011101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_wlo_L2_WEIGHTScfu is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_wlo_L2_WEIGHTScfu is
    component L3_wlo_L2_WEIGHTScfu_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_wlo_L2_WEIGHTScfu_rom_U :  component L3_wlo_L2_WEIGHTScfu_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


