-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_wlo_L2_WEIGHTSb8t_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_wlo_L2_WEIGHTSb8t_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0011000011001001", 1 => "0010111011110010", 2 => "1001101010011110", 
    3 => "1010110110111010", 4 => "1011000001001111", 5 => "1010111000100001", 
    6 => "0001111110010001", 7 => "0010110110011001", 8 => "0010111110111001", 
    9 => "0010110110100001", 10 => "0010001000011111", 11 => "1010100110000010", 
    12 => "1010110001111111", 13 => "1010100101100101", 14 => "1010001001000010", 
    15 => "1001111111000110", 16 => "0010011100101111", 17 => "0010100000110001", 
    18 => "0010011100011110", 19 => "0010011000001100", 20 => "1010000000101011", 
    21 => "1010001011001111", 22 => "1010011101001100", 23 => "1010010111111100", 
    24 => "1001110101000101", 25 => "0010100101000100", 26 => "0010100001110111", 
    27 => "1010101101111100", 28 => "1010111010011010", 29 => "1010110100000101", 
    30 => "1001110101110000", 31 => "0010111100000010", 32 => "0010111100110001", 
    33 => "0010100000001110", 34 => "1010101010100010", 35 => "1010111011110111", 
    36 => "1010101000110011", 37 => "0010100110100010", 38 => "0010101001110001", 
    39 => "0010000100000101", 40 => "1010110000010100", 41 => "1010110101101101", 
    42 => "0010000010001111", 43 => "0010110111110111", 44 => "0010111111010010", 
    45 => "0010010111000110", 46 => "1010110011001101", 47 => "1011000001100111", 
    48 => "1010110110101100", 49 => "0010000111010111", 50 => "0010111110011011", 
    51 => "0010111001000111", 52 => "0001111010111100", 53 => "1010111001111011", 
    54 => "1011000011101000", 55 => "1010111010001110", 56 => "1010000000110111", 
    57 => "0010111001111000", 58 => "0011000001110110", 59 => "0010111001000111", 
    60 => "1000111001100000", 61 => "1010101100011011", 62 => "1010111001011010", 
    63 => "1010110100101111", 64 => "1010001101010101", 65 => "0010011110000010", 
    66 => "0010101101100011", 67 => "0010100111111110", 68 => "0010010011110100", 
    69 => "1010001001100000", 70 => "1010000001101110", 71 => "1010100000111100", 
    72 => "1010011000011001", 73 => "1010011011111011", 74 => "1010000010111000", 
    75 => "0010100110100101", 76 => "0010110001000011", 77 => "0010100110101101", 
    78 => "1010110011100000", 79 => "1010110010001000", 80 => "1001111111000010", 
    81 => "0010110110110011", 82 => "0010111101101100", 83 => "0010101001011110", 
    84 => "1010100011001001", 85 => "1010111001111010", 86 => "1010110101100010", 
    87 => "1001110011100001", 88 => "0010110000110000", 89 => "0010110100000110", 
    90 => "1000001011100010", 91 => "1010101000101001", 92 => "1010100110101010", 
    93 => "0010101010001101", 94 => "0010111000010101", 95 => "0010101110000000", 
    96 => "1010101010000101", 97 => "1010111111001100", 98 => "1011000000101010", 
    99 => "1010000110010000", 100 => "0010111011011010", 101 => "0011000000000000", 
    102 => "0010101110110101", 103 => "1010100100000010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_wlo_L2_WEIGHTSb8t is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_wlo_L2_WEIGHTSb8t is
    component L3_wlo_L2_WEIGHTSb8t_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_wlo_L2_WEIGHTSb8t_rom_U :  component L3_wlo_L2_WEIGHTSb8t_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


