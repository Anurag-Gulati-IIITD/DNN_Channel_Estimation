-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_wlo_L2_WEIGHTSciv_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_wlo_L2_WEIGHTSciv_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1001111010010011", 1 => "1001111101100100", 2 => "0001101101101101", 
    3 => "0010000010000000", 4 => "0001110011010010", 5 => "1001010011100000", 
    6 => "1001111001101011", 7 => "1001110100111011", 8 => "1001100010010000", 
    9 => "0001101111001011", 10 => "0001100000001011", 11 => "0000100110001010", 
    12 => "0000110010110100", 13 => "1001010000011110", 14 => "1001010001001000", 
    15 => "0001101001000000", 16 => "0001110000011011", 17 => "1000011001111101", 
    18 => "1001011011010001", 19 => "1001101100111001", 20 => "1001111010101110", 
    21 => "1001100101011010", 22 => "0001010110010000", 23 => "0001110001011110", 
    24 => "0001010100110010", 25 => "0001010101000111", 26 => "1001110100111001", 
    27 => "1001110000100100", 28 => "1001100000001011", 29 => "0001011110111100", 
    30 => "0001101100011110", 31 => "0001011111000101", 32 => "0000010001100100", 
    33 => "1001011001011101", 34 => "1001010011001100", 35 => "0000101001100100", 
    36 => "0001100110000100", 37 => "0001101010100000", 38 => "0001000100001110", 
    39 => "1001010011010101", 40 => "1001100001010000", 41 => "1001100000010110", 
    42 => "1001100100000010", 43 => "1001001111100100", 44 => "0001010101110111", 
    45 => "0001101110001111", 46 => "0001110111011010", 47 => "0000110011010101", 
    48 => "1001101110000110", 49 => "1001101100101010", 50 => "1001110011110101", 
    51 => "0000111010010110", 52 => "0001011111000010", 53 => "0001101101011111", 
    54 => "0001111111000101", 55 => "0001011010011000", 56 => "1001110111000111", 
    57 => "1001111000011111", 58 => "1001101000111010", 59 => "0001100101101100", 
    60 => "0001110010000101", 61 => "0001101001010001", 62 => "0000110010011111", 
    63 => "1001101001101000", 64 => "1000001000111010", 65 => "0001011001001010", 
    66 => "0001110010100000", 67 => "1000111110000101", 68 => "1001010011100101", 
    69 => "1001110100100100", 70 => "1001110110011000", 71 => "1001011011001011", 
    72 => "0001010001000111", 73 => "0001001000000001", 74 => "0001011101111101", 
    75 => "0001100111100111", 76 => "1001101110100111", 77 => "1001110011011110", 
    78 => "1001110000111110", 79 => "0001110001000000", 80 => "0001110000011001", 
    81 => "0001100111100011", 82 => "1000100100110110", 83 => "1001100011110000", 
    84 => "1001100010101101", 85 => "1000111010101011", 86 => "0001100001000001", 
    87 => "0000100000100001", 88 => "0001000001111001", 89 => "0001100001011100", 
    90 => "1001101110010110", 91 => "1001011001101110", 92 => "1001011110111001", 
    93 => "0001001000001110", 94 => "0000110110111100", 95 => "0001100100000111", 
    96 => "0001110000110110", 97 => "0001100111101011", 98 => "0000111011010101", 
    99 => "1001110101110001", 100 => "1001110011101111", 101 => "0001011100101100", 
    102 => "0000101100110101", 103 => "0001101100110011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_wlo_L2_WEIGHTSciv is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_wlo_L2_WEIGHTSciv is
    component L3_wlo_L2_WEIGHTSciv_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_wlo_L2_WEIGHTSciv_rom_U :  component L3_wlo_L2_WEIGHTSciv_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


