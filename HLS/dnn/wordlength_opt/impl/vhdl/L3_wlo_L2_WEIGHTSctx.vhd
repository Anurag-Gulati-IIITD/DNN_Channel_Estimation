-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity L3_wlo_L2_WEIGHTSctx_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 104
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of L3_wlo_L2_WEIGHTSctx_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0010110111010001", 1 => "0010110011011001", 2 => "0010100101100110", 
    3 => "1010101101001011", 4 => "1011000001111100", 5 => "1010111101111001", 
    6 => "1010110100011011", 7 => "1001111001000110", 8 => "0010110101110001", 
    9 => "0010111111010110", 10 => "0010111100101010", 11 => "0001100100000111", 
    12 => "1010110010101000", 13 => "1010111110011111", 14 => "1011000001001111", 
    15 => "1010110100100101", 16 => "0010001011110101", 17 => "0010110100101111", 
    18 => "0011000000011100", 19 => "0010110011111100", 20 => "0010010010110110", 
    21 => "1010100000100111", 22 => "1010111110011110", 23 => "1010110011100010", 
    24 => "1010100100111011", 25 => "0010001111111110", 26 => "0010110101101110", 
    27 => "0010111001111110", 28 => "0010110001111111", 29 => "0010010100110111", 
    30 => "1010101100101111", 31 => "1011000001010001", 32 => "1011000001111001", 
    33 => "1010111100001001", 34 => "0001101110111001", 35 => "0010111010110101", 
    36 => "0011000000000111", 37 => "0010110110010000", 38 => "0010010010101011", 
    39 => "1010110111100100", 40 => "1010111100000111", 41 => "1010110110001010", 
    42 => "1010100010000011", 43 => "0001010010011010", 44 => "0010101100101011", 
    45 => "0010110110001010", 46 => "0010111011001011", 47 => "0010101100010110", 
    48 => "1001111001011001", 49 => "1010111000010001", 50 => "1011000010110111", 
    51 => "1010111101010111", 52 => "1010000111100010", 53 => "1010110001110101", 
    54 => "1010111001110010", 55 => "1010111110010101", 56 => "1010010101110010", 
    57 => "0010110011011010", 58 => "0010111100100110", 59 => "0011000010000010", 
    60 => "0010111000101011", 61 => "1010001001110001", 62 => "1010111100110111", 
    63 => "1010111101000100", 64 => "1010111110101101", 65 => "1010110011000101", 
    66 => "0010101100110111", 67 => "0010111100111100", 68 => "0011000010010100", 
    69 => "0010100010010110", 70 => "1010100101101001", 71 => "1010111010101011", 
    72 => "1010111100011001", 73 => "1010111110110001", 74 => "1010100000110000", 
    75 => "0010100001100111", 76 => "0010111111010010", 77 => "0010110000110010", 
    78 => "0010110001101011", 79 => "1001111100010111", 80 => "1010101101001011", 
    81 => "1010110110011011", 82 => "1011000000000100", 83 => "1010011100001100", 
    84 => "0010101010000010", 85 => "0010111100110011", 86 => "0011000001001100", 
    87 => "0010110011111011", 88 => "1001111111111110", 89 => "1010110000100100", 
    90 => "1010111111110010", 91 => "1010110110010000", 92 => "1001101100100001", 
    93 => "0010110000011000", 94 => "0010111000111000", 95 => "0010110000110011", 
    96 => "0010100000111001", 97 => "0010001101001110", 98 => "1001100010001110", 
    99 => "1010110001100101", 100 => "1011000000111100", 101 => "1010110110001100", 
    102 => "1010001000100110", 103 => "0010110010011010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity L3_wlo_L2_WEIGHTSctx is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 104;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of L3_wlo_L2_WEIGHTSctx is
    component L3_wlo_L2_WEIGHTSctx_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    L3_wlo_L2_WEIGHTSctx_rom_U :  component L3_wlo_L2_WEIGHTSctx_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


