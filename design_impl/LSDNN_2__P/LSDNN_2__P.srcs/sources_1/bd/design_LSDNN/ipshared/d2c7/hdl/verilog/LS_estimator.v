// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="LS_estimator,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=397,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=24,HLS_SYN_FF=3968,HLS_SYN_LUT=5867,HLS_VERSION=2019_1}" *)

module LS_estimator (
        ap_clk,
        ap_rst_n,
        in_stream_TDATA,
        in_stream_TVALID,
        in_stream_TREADY,
        in_stream_TLAST,
        out_stream_TDATA,
        out_stream_TVALID,
        out_stream_TREADY,
        out_stream_TLAST
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_pp0_stage0 = 10'd64;
parameter    ap_ST_fsm_state35 = 10'd128;
parameter    ap_ST_fsm_pp1_stage0 = 10'd256;
parameter    ap_ST_fsm_state39 = 10'd512;

input   ap_clk;
input   ap_rst_n;
input  [63:0] in_stream_TDATA;
input   in_stream_TVALID;
output   in_stream_TREADY;
input  [0:0] in_stream_TLAST;
output  [63:0] out_stream_TDATA;
output   out_stream_TVALID;
input   out_stream_TREADY;
output  [0:0] out_stream_TLAST;

 reg    ap_rst_n_inv;
reg   [63:0] in_stream_V_data_0_data_out;
wire    in_stream_V_data_0_vld_in;
wire    in_stream_V_data_0_vld_out;
wire    in_stream_V_data_0_ack_in;
reg    in_stream_V_data_0_ack_out;
reg   [63:0] in_stream_V_data_0_payload_A;
reg   [63:0] in_stream_V_data_0_payload_B;
reg    in_stream_V_data_0_sel_rd;
reg    in_stream_V_data_0_sel_wr;
wire    in_stream_V_data_0_sel;
wire    in_stream_V_data_0_load_A;
wire    in_stream_V_data_0_load_B;
reg   [1:0] in_stream_V_data_0_state;
wire    in_stream_V_data_0_state_cmp_full;
wire    in_stream_V_last_V_0_vld_in;
reg    in_stream_V_last_V_0_ack_out;
reg   [1:0] in_stream_V_last_V_0_state;
reg   [63:0] out_stream_V_data_1_data_out;
reg    out_stream_V_data_1_vld_in;
wire    out_stream_V_data_1_vld_out;
wire    out_stream_V_data_1_ack_in;
wire    out_stream_V_data_1_ack_out;
reg   [63:0] out_stream_V_data_1_payload_A;
reg   [63:0] out_stream_V_data_1_payload_B;
reg    out_stream_V_data_1_sel_rd;
reg    out_stream_V_data_1_sel_wr;
wire    out_stream_V_data_1_sel;
wire    out_stream_V_data_1_load_A;
wire    out_stream_V_data_1_load_B;
reg   [1:0] out_stream_V_data_1_state;
wire    out_stream_V_data_1_state_cmp_full;
reg   [0:0] out_stream_V_last_V_1_data_out;
reg    out_stream_V_last_V_1_vld_in;
wire    out_stream_V_last_V_1_vld_out;
wire    out_stream_V_last_V_1_ack_in;
wire    out_stream_V_last_V_1_ack_out;
reg   [0:0] out_stream_V_last_V_1_payload_A;
reg   [0:0] out_stream_V_last_V_1_payload_B;
reg    out_stream_V_last_V_1_sel_rd;
reg    out_stream_V_last_V_1_sel_wr;
wire    out_stream_V_last_V_1_sel;
wire    out_stream_V_last_V_1_load_A;
wire    out_stream_V_last_V_1_load_B;
reg   [1:0] out_stream_V_last_V_1_state;
wire    out_stream_V_last_V_1_state_cmp_full;
reg    in_stream_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln30_fu_469_p2;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln36_fu_501_p2;
reg    out_stream_TDATA_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln49_reg_754;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] icmp_ln49_reg_754_pp1_iter1_reg;
reg   [5:0] i5_0_reg_335;
reg   [5:0] i6_0_reg_346;
wire   [5:0] add_ln25_fu_415_p2;
wire    ap_CS_fsm_state2;
wire   [5:0] add_ln25_1_fu_433_p2;
wire    ap_CS_fsm_state3;
wire   [5:0] add_ln27_fu_451_p2;
wire    ap_CS_fsm_state4;
wire   [5:0] i_fu_475_p2;
reg    ap_block_state5;
reg    ap_block_state6;
wire   [5:0] i_1_fu_507_p2;
wire   [0:0] icmp_ln43_fu_533_p2;
reg   [0:0] icmp_ln43_reg_635;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state7_pp0_stage0_iter0;
wire    ap_block_state8_pp0_stage0_iter1;
wire    ap_block_state9_pp0_stage0_iter2;
wire    ap_block_state10_pp0_stage0_iter3;
wire    ap_block_state11_pp0_stage0_iter4;
wire    ap_block_state12_pp0_stage0_iter5;
wire    ap_block_state13_pp0_stage0_iter6;
wire    ap_block_state14_pp0_stage0_iter7;
wire    ap_block_state15_pp0_stage0_iter8;
wire    ap_block_state16_pp0_stage0_iter9;
wire    ap_block_state17_pp0_stage0_iter10;
wire    ap_block_state18_pp0_stage0_iter11;
wire    ap_block_state19_pp0_stage0_iter12;
wire    ap_block_state20_pp0_stage0_iter13;
wire    ap_block_state21_pp0_stage0_iter14;
wire    ap_block_state22_pp0_stage0_iter15;
wire    ap_block_state23_pp0_stage0_iter16;
wire    ap_block_state24_pp0_stage0_iter17;
wire    ap_block_state25_pp0_stage0_iter18;
wire    ap_block_state26_pp0_stage0_iter19;
wire    ap_block_state27_pp0_stage0_iter20;
wire    ap_block_state28_pp0_stage0_iter21;
wire    ap_block_state29_pp0_stage0_iter22;
wire    ap_block_state30_pp0_stage0_iter23;
wire    ap_block_state31_pp0_stage0_iter24;
wire    ap_block_state32_pp0_stage0_iter25;
wire    ap_block_state33_pp0_stage0_iter26;
wire    ap_block_state34_pp0_stage0_iter27;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln43_reg_635_pp0_iter1_reg;
reg   [0:0] icmp_ln43_reg_635_pp0_iter2_reg;
reg   [0:0] icmp_ln43_reg_635_pp0_iter3_reg;
reg   [0:0] icmp_ln43_reg_635_pp0_iter4_reg;
reg   [0:0] icmp_ln43_reg_635_pp0_iter5_reg;
reg   [0:0] icmp_ln43_reg_635_pp0_iter6_reg;
reg   [0:0] icmp_ln43_reg_635_pp0_iter7_reg;
reg   [0:0] icmp_ln43_reg_635_pp0_iter8_reg;
reg   [0:0] icmp_ln43_reg_635_pp0_iter9_reg;
reg   [0:0] icmp_ln43_reg_635_pp0_iter10_reg;
reg   [0:0] icmp_ln43_reg_635_pp0_iter11_reg;
reg   [0:0] icmp_ln43_reg_635_pp0_iter12_reg;
reg   [0:0] icmp_ln43_reg_635_pp0_iter13_reg;
reg   [0:0] icmp_ln43_reg_635_pp0_iter14_reg;
reg   [0:0] icmp_ln43_reg_635_pp0_iter15_reg;
reg   [0:0] icmp_ln43_reg_635_pp0_iter16_reg;
reg   [0:0] icmp_ln43_reg_635_pp0_iter17_reg;
reg   [0:0] icmp_ln43_reg_635_pp0_iter18_reg;
reg   [0:0] icmp_ln43_reg_635_pp0_iter19_reg;
reg   [0:0] icmp_ln43_reg_635_pp0_iter20_reg;
reg   [0:0] icmp_ln43_reg_635_pp0_iter21_reg;
reg   [0:0] icmp_ln43_reg_635_pp0_iter22_reg;
reg   [0:0] icmp_ln43_reg_635_pp0_iter23_reg;
reg   [0:0] icmp_ln43_reg_635_pp0_iter24_reg;
reg   [0:0] icmp_ln43_reg_635_pp0_iter25_reg;
reg   [0:0] icmp_ln43_reg_635_pp0_iter26_reg;
wire   [5:0] i_2_fu_539_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] zext_ln45_fu_545_p1;
reg   [63:0] zext_ln45_reg_644;
reg   [63:0] zext_ln45_reg_644_pp0_iter1_reg;
reg   [63:0] zext_ln45_reg_644_pp0_iter2_reg;
reg   [63:0] zext_ln45_reg_644_pp0_iter3_reg;
reg   [63:0] zext_ln45_reg_644_pp0_iter4_reg;
reg   [63:0] zext_ln45_reg_644_pp0_iter5_reg;
reg   [63:0] zext_ln45_reg_644_pp0_iter6_reg;
reg   [63:0] zext_ln45_reg_644_pp0_iter7_reg;
reg   [63:0] zext_ln45_reg_644_pp0_iter8_reg;
reg   [63:0] zext_ln45_reg_644_pp0_iter9_reg;
reg   [63:0] zext_ln45_reg_644_pp0_iter10_reg;
reg   [63:0] zext_ln45_reg_644_pp0_iter11_reg;
reg   [63:0] zext_ln45_reg_644_pp0_iter12_reg;
reg   [63:0] zext_ln45_reg_644_pp0_iter13_reg;
reg   [63:0] zext_ln45_reg_644_pp0_iter14_reg;
reg   [63:0] zext_ln45_reg_644_pp0_iter15_reg;
reg   [63:0] zext_ln45_reg_644_pp0_iter16_reg;
reg   [63:0] zext_ln45_reg_644_pp0_iter17_reg;
reg   [63:0] zext_ln45_reg_644_pp0_iter18_reg;
reg   [63:0] zext_ln45_reg_644_pp0_iter19_reg;
reg   [63:0] zext_ln45_reg_644_pp0_iter20_reg;
reg   [63:0] zext_ln45_reg_644_pp0_iter21_reg;
reg   [63:0] zext_ln45_reg_644_pp0_iter22_reg;
reg   [63:0] zext_ln45_reg_644_pp0_iter23_reg;
reg   [63:0] zext_ln45_reg_644_pp0_iter24_reg;
reg   [63:0] zext_ln45_reg_644_pp0_iter25_reg;
reg   [63:0] zext_ln45_reg_644_pp0_iter26_reg;
wire   [31:0] preamble_M_real_q0;
reg   [31:0] p_r_M_real_reg_670;
reg    ap_enable_reg_pp0_iter1;
wire   [31:0] preamble_M_imag_q0;
reg   [31:0] p_r_M_imag_reg_676;
wire   [31:0] training_sym_M_real_q0;
reg   [31:0] p_t_real_reg_682;
wire   [31:0] training_sym_M_imag_q0;
reg   [31:0] p_t_imag_reg_690;
wire   [31:0] grp_fu_369_p2;
reg   [31:0] tmp_i_i_reg_698;
wire   [31:0] grp_fu_373_p2;
reg   [31:0] tmp_1_i_i_reg_703;
wire   [31:0] grp_fu_377_p2;
reg   [31:0] tmp_3_i_i_reg_708;
wire   [31:0] grp_fu_381_p2;
reg   [31:0] tmp_4_i_i_reg_713;
wire   [31:0] grp_fu_385_p2;
reg   [31:0] tmp_6_i_i_reg_718;
wire   [31:0] grp_fu_389_p2;
reg   [31:0] tmp_7_i_i_reg_723;
wire   [31:0] grp_fu_357_p2;
reg   [31:0] tmp_2_i_i_reg_728;
wire   [31:0] grp_fu_361_p2;
reg   [31:0] tmp_5_i_i_reg_733;
wire   [31:0] grp_fu_365_p2;
reg   [31:0] tmp_8_i_i_reg_739;
wire   [31:0] grp_fu_393_p2;
reg   [31:0] complex_M_real_writ_reg_744;
wire   [31:0] grp_fu_397_p2;
reg   [31:0] complex_M_imag_writ_reg_749;
wire   [0:0] icmp_ln49_fu_553_p2;
wire    ap_block_state36_pp1_stage0_iter0;
wire    ap_block_state37_pp1_stage0_iter1;
reg    ap_block_state37_io;
wire    ap_block_state38_pp1_stage0_iter2;
reg    ap_block_state38_io;
reg    ap_block_pp1_stage0_11001;
wire   [5:0] i_3_fu_559_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] tmp_last_V_fu_571_p2;
reg   [0:0] tmp_last_V_reg_773;
wire   [63:0] tmp_data_2_fu_585_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state7;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
wire    ap_CS_fsm_state35;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state36;
reg   [5:0] preamble_M_real_address0;
reg    preamble_M_real_ce0;
reg    preamble_M_real_we0;
reg   [31:0] preamble_M_real_d0;
reg   [5:0] preamble_M_imag_address0;
reg    preamble_M_imag_ce0;
reg    preamble_M_imag_we0;
reg   [31:0] preamble_M_imag_d0;
reg   [5:0] training_sym_M_real_address0;
reg    training_sym_M_real_ce0;
reg    training_sym_M_real_we0;
reg   [31:0] training_sym_M_real_d0;
reg   [5:0] training_sym_M_imag_address0;
reg    training_sym_M_imag_ce0;
reg    training_sym_M_imag_we0;
reg   [31:0] training_sym_M_imag_d0;
reg   [5:0] LS_out_M_real_address0;
reg    LS_out_M_real_ce0;
reg    LS_out_M_real_we0;
reg   [31:0] LS_out_M_real_d0;
wire   [31:0] LS_out_M_real_q0;
reg   [5:0] LS_out_M_imag_address0;
reg    LS_out_M_imag_ce0;
reg    LS_out_M_imag_we0;
reg   [31:0] LS_out_M_imag_d0;
wire   [31:0] LS_out_M_imag_q0;
reg   [5:0] phi_ln25_reg_280;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln25_fu_427_p2;
reg   [5:0] phi_ln25_1_reg_291;
wire   [0:0] icmp_ln25_1_fu_445_p2;
reg   [5:0] phi_ln27_reg_302;
wire   [0:0] icmp_ln27_fu_463_p2;
reg   [5:0] i_0_reg_313;
reg   [5:0] i3_0_reg_324;
wire   [63:0] zext_ln25_fu_421_p1;
wire   [63:0] zext_ln25_1_fu_439_p1;
wire   [63:0] zext_ln27_fu_457_p1;
wire   [63:0] zext_ln33_fu_495_p1;
wire   [63:0] zext_ln39_fu_527_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln53_fu_565_p1;
wire    ap_block_pp1_stage0_01001;
wire   [31:0] bitcast_ln9_fu_485_p1;
wire   [31:0] bitcast_ln9_1_fu_490_p1;
wire   [31:0] bitcast_ln9_2_fu_517_p1;
wire   [31:0] bitcast_ln9_3_fu_522_p1;
wire   [31:0] trunc_ln9_fu_481_p1;
wire   [31:0] grp_fu_405_p4;
wire   [31:0] trunc_ln9_1_fu_513_p1;
wire   [31:0] bitcast_ln162_1_fu_581_p1;
wire   [31:0] bitcast_ln162_fu_577_p1;
reg   [9:0] ap_NS_fsm;
wire    ap_CS_fsm_state39;
reg    ap_block_state39;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 in_stream_V_data_0_sel_rd = 1'b0;
#0 in_stream_V_data_0_sel_wr = 1'b0;
#0 in_stream_V_data_0_state = 2'd0;
#0 in_stream_V_last_V_0_state = 2'd0;
#0 out_stream_V_data_1_sel_rd = 1'b0;
#0 out_stream_V_data_1_sel_wr = 1'b0;
#0 out_stream_V_data_1_state = 2'd0;
#0 out_stream_V_last_V_1_sel_rd = 1'b0;
#0 out_stream_V_last_V_1_sel_wr = 1'b0;
#0 out_stream_V_last_V_1_state = 2'd0;
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
end

LS_estimator_preabkb #(
    .DataWidth( 32 ),
    .AddressRange( 52 ),
    .AddressWidth( 6 ))
preamble_M_real_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(preamble_M_real_address0),
    .ce0(preamble_M_real_ce0),
    .we0(preamble_M_real_we0),
    .d0(preamble_M_real_d0),
    .q0(preamble_M_real_q0)
);

LS_estimator_preabkb #(
    .DataWidth( 32 ),
    .AddressRange( 52 ),
    .AddressWidth( 6 ))
preamble_M_imag_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(preamble_M_imag_address0),
    .ce0(preamble_M_imag_ce0),
    .we0(preamble_M_imag_we0),
    .d0(preamble_M_imag_d0),
    .q0(preamble_M_imag_q0)
);

LS_estimator_preabkb #(
    .DataWidth( 32 ),
    .AddressRange( 52 ),
    .AddressWidth( 6 ))
training_sym_M_real_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(training_sym_M_real_address0),
    .ce0(training_sym_M_real_ce0),
    .we0(training_sym_M_real_we0),
    .d0(training_sym_M_real_d0),
    .q0(training_sym_M_real_q0)
);

LS_estimator_preabkb #(
    .DataWidth( 32 ),
    .AddressRange( 52 ),
    .AddressWidth( 6 ))
training_sym_M_imag_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(training_sym_M_imag_address0),
    .ce0(training_sym_M_imag_ce0),
    .we0(training_sym_M_imag_we0),
    .d0(training_sym_M_imag_d0),
    .q0(training_sym_M_imag_q0)
);

LS_estimator_preabkb #(
    .DataWidth( 32 ),
    .AddressRange( 52 ),
    .AddressWidth( 6 ))
LS_out_M_real_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LS_out_M_real_address0),
    .ce0(LS_out_M_real_ce0),
    .we0(LS_out_M_real_we0),
    .d0(LS_out_M_real_d0),
    .q0(LS_out_M_real_q0)
);

LS_estimator_preabkb #(
    .DataWidth( 32 ),
    .AddressRange( 52 ),
    .AddressWidth( 6 ))
LS_out_M_imag_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(LS_out_M_imag_address0),
    .ce0(LS_out_M_imag_ce0),
    .we0(LS_out_M_imag_we0),
    .d0(LS_out_M_imag_d0),
    .q0(LS_out_M_imag_q0)
);

LS_estimator_faddhbi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LS_estimator_faddhbi_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_i_i_reg_698),
    .din1(tmp_1_i_i_reg_703),
    .ce(1'b1),
    .dout(grp_fu_357_p2)
);

LS_estimator_faddhbi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LS_estimator_faddhbi_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_i_i_reg_708),
    .din1(tmp_4_i_i_reg_713),
    .ce(1'b1),
    .dout(grp_fu_361_p2)
);

LS_estimator_fsubibs #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LS_estimator_fsubibs_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_6_i_i_reg_718),
    .din1(tmp_7_i_i_reg_723),
    .ce(1'b1),
    .dout(grp_fu_365_p2)
);

LS_estimator_fmuljbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LS_estimator_fmuljbC_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(p_r_M_real_reg_670),
    .din1(p_t_real_reg_682),
    .ce(1'b1),
    .dout(grp_fu_369_p2)
);

LS_estimator_fmuljbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LS_estimator_fmuljbC_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(p_r_M_imag_reg_676),
    .din1(p_t_imag_reg_690),
    .ce(1'b1),
    .dout(grp_fu_373_p2)
);

LS_estimator_fmuljbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LS_estimator_fmuljbC_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(p_t_real_reg_682),
    .din1(p_t_real_reg_682),
    .ce(1'b1),
    .dout(grp_fu_377_p2)
);

LS_estimator_fmuljbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LS_estimator_fmuljbC_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(p_t_imag_reg_690),
    .din1(p_t_imag_reg_690),
    .ce(1'b1),
    .dout(grp_fu_381_p2)
);

LS_estimator_fmuljbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LS_estimator_fmuljbC_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(p_r_M_imag_reg_676),
    .din1(p_t_real_reg_682),
    .ce(1'b1),
    .dout(grp_fu_385_p2)
);

LS_estimator_fmuljbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LS_estimator_fmuljbC_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(p_r_M_real_reg_670),
    .din1(p_t_imag_reg_690),
    .ce(1'b1),
    .dout(grp_fu_389_p2)
);

LS_estimator_fdivkbM #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LS_estimator_fdivkbM_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_2_i_i_reg_728),
    .din1(tmp_5_i_i_reg_733),
    .ce(1'b1),
    .dout(grp_fu_393_p2)
);

LS_estimator_fdivkbM #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LS_estimator_fdivkbM_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_8_i_i_reg_739),
    .din1(tmp_5_i_i_reg_733),
    .ce(1'b1),
    .dout(grp_fu_397_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((icmp_ln36_fu_501_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (icmp_ln36_fu_501_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state7)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state7);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end else if ((~((icmp_ln36_fu_501_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (icmp_ln36_fu_501_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_enable_reg_pp0_iter27 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state36) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state35)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state36)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state36);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state35)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_data_0_sel_rd <= 1'b0;
    end else begin
        if (((in_stream_V_data_0_ack_out == 1'b1) & (in_stream_V_data_0_vld_out == 1'b1))) begin
            in_stream_V_data_0_sel_rd <= ~in_stream_V_data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_data_0_sel_wr <= 1'b0;
    end else begin
        if (((in_stream_V_data_0_ack_in == 1'b1) & (in_stream_V_data_0_vld_in == 1'b1))) begin
            in_stream_V_data_0_sel_wr <= ~in_stream_V_data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_data_0_state <= 2'd0;
    end else begin
        if ((((in_stream_V_data_0_state == 2'd2) & (in_stream_V_data_0_vld_in == 1'b0)) | ((in_stream_V_data_0_state == 2'd3) & (in_stream_V_data_0_vld_in == 1'b0) & (in_stream_V_data_0_ack_out == 1'b1)))) begin
            in_stream_V_data_0_state <= 2'd2;
        end else if ((((in_stream_V_data_0_state == 2'd1) & (in_stream_V_data_0_ack_out == 1'b0)) | ((in_stream_V_data_0_state == 2'd3) & (in_stream_V_data_0_ack_out == 1'b0) & (in_stream_V_data_0_vld_in == 1'b1)))) begin
            in_stream_V_data_0_state <= 2'd1;
        end else if (((~((in_stream_V_data_0_vld_in == 1'b0) & (in_stream_V_data_0_ack_out == 1'b1)) & ~((in_stream_V_data_0_ack_out == 1'b0) & (in_stream_V_data_0_vld_in == 1'b1)) & (in_stream_V_data_0_state == 2'd3)) | ((in_stream_V_data_0_state == 2'd1) & (in_stream_V_data_0_ack_out == 1'b1)) | ((in_stream_V_data_0_state == 2'd2) & (in_stream_V_data_0_vld_in == 1'b1)))) begin
            in_stream_V_data_0_state <= 2'd3;
        end else begin
            in_stream_V_data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_stream_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((in_stream_V_last_V_0_state == 2'd2) & (in_stream_V_last_V_0_vld_in == 1'b0)) | ((in_stream_V_last_V_0_state == 2'd3) & (in_stream_V_last_V_0_vld_in == 1'b0) & (in_stream_V_last_V_0_ack_out == 1'b1)))) begin
            in_stream_V_last_V_0_state <= 2'd2;
        end else if ((((in_stream_V_last_V_0_state == 2'd1) & (in_stream_V_last_V_0_ack_out == 1'b0)) | ((in_stream_V_last_V_0_state == 2'd3) & (in_stream_V_last_V_0_ack_out == 1'b0) & (in_stream_V_last_V_0_vld_in == 1'b1)))) begin
            in_stream_V_last_V_0_state <= 2'd1;
        end else if (((~((in_stream_V_last_V_0_vld_in == 1'b0) & (in_stream_V_last_V_0_ack_out == 1'b1)) & ~((in_stream_V_last_V_0_ack_out == 1'b0) & (in_stream_V_last_V_0_vld_in == 1'b1)) & (in_stream_V_last_V_0_state == 2'd3)) | ((in_stream_V_last_V_0_state == 2'd1) & (in_stream_V_last_V_0_ack_out == 1'b1)) | ((in_stream_V_last_V_0_state == 2'd2) & (in_stream_V_last_V_0_vld_in == 1'b1)))) begin
            in_stream_V_last_V_0_state <= 2'd3;
        end else begin
            in_stream_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_data_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_V_data_1_ack_out == 1'b1) & (out_stream_V_data_1_vld_out == 1'b1))) begin
            out_stream_V_data_1_sel_rd <= ~out_stream_V_data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_data_1_sel_wr <= 1'b0;
    end else begin
        if (((out_stream_V_data_1_ack_in == 1'b1) & (out_stream_V_data_1_vld_in == 1'b1))) begin
            out_stream_V_data_1_sel_wr <= ~out_stream_V_data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_data_1_state <= 2'd0;
    end else begin
        if ((((out_stream_V_data_1_state == 2'd2) & (out_stream_V_data_1_vld_in == 1'b0)) | ((out_stream_V_data_1_state == 2'd3) & (out_stream_V_data_1_vld_in == 1'b0) & (out_stream_V_data_1_ack_out == 1'b1)))) begin
            out_stream_V_data_1_state <= 2'd2;
        end else if ((((out_stream_V_data_1_state == 2'd1) & (out_stream_TREADY == 1'b0)) | ((out_stream_V_data_1_state == 2'd3) & (out_stream_TREADY == 1'b0) & (out_stream_V_data_1_vld_in == 1'b1)))) begin
            out_stream_V_data_1_state <= 2'd1;
        end else if (((~((out_stream_V_data_1_vld_in == 1'b0) & (out_stream_V_data_1_ack_out == 1'b1)) & ~((out_stream_TREADY == 1'b0) & (out_stream_V_data_1_vld_in == 1'b1)) & (out_stream_V_data_1_state == 2'd3)) | ((out_stream_V_data_1_state == 2'd1) & (out_stream_V_data_1_ack_out == 1'b1)) | ((out_stream_V_data_1_state == 2'd2) & (out_stream_V_data_1_vld_in == 1'b1)))) begin
            out_stream_V_data_1_state <= 2'd3;
        end else begin
            out_stream_V_data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_stream_V_last_V_1_ack_out == 1'b1) & (out_stream_V_last_V_1_vld_out == 1'b1))) begin
            out_stream_V_last_V_1_sel_rd <= ~out_stream_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_stream_V_last_V_1_ack_in == 1'b1) & (out_stream_V_last_V_1_vld_in == 1'b1))) begin
            out_stream_V_last_V_1_sel_wr <= ~out_stream_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_stream_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((out_stream_V_last_V_1_state == 2'd2) & (out_stream_V_last_V_1_vld_in == 1'b0)) | ((out_stream_V_last_V_1_state == 2'd3) & (out_stream_V_last_V_1_vld_in == 1'b0) & (out_stream_V_last_V_1_ack_out == 1'b1)))) begin
            out_stream_V_last_V_1_state <= 2'd2;
        end else if ((((out_stream_V_last_V_1_state == 2'd1) & (out_stream_TREADY == 1'b0)) | ((out_stream_V_last_V_1_state == 2'd3) & (out_stream_TREADY == 1'b0) & (out_stream_V_last_V_1_vld_in == 1'b1)))) begin
            out_stream_V_last_V_1_state <= 2'd1;
        end else if (((~((out_stream_V_last_V_1_vld_in == 1'b0) & (out_stream_V_last_V_1_ack_out == 1'b1)) & ~((out_stream_TREADY == 1'b0) & (out_stream_V_last_V_1_vld_in == 1'b1)) & (out_stream_V_last_V_1_state == 2'd3)) | ((out_stream_V_last_V_1_state == 2'd1) & (out_stream_V_last_V_1_ack_out == 1'b1)) | ((out_stream_V_last_V_1_state == 2'd2) & (out_stream_V_last_V_1_vld_in == 1'b1)))) begin
            out_stream_V_last_V_1_state <= 2'd3;
        end else begin
            out_stream_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln30_fu_469_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (icmp_ln30_fu_469_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i3_0_reg_324 <= 6'd0;
    end else if ((~((icmp_ln36_fu_501_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (icmp_ln36_fu_501_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        i3_0_reg_324 <= i_1_fu_507_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln36_fu_501_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (icmp_ln36_fu_501_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        i5_0_reg_335 <= 6'd0;
    end else if (((icmp_ln43_fu_533_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i5_0_reg_335 <= i_2_fu_539_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        i6_0_reg_346 <= 6'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln49_fu_553_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i6_0_reg_346 <= i_3_fu_559_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_fu_463_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_0_reg_313 <= 6'd0;
    end else if ((~((icmp_ln30_fu_469_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (icmp_ln30_fu_469_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i_0_reg_313 <= i_fu_475_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_427_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_ln25_1_reg_291 <= 6'd0;
    end else if (((icmp_ln25_1_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_ln25_1_reg_291 <= add_ln25_1_fu_433_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_427_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_ln25_reg_280 <= add_ln25_fu_415_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        phi_ln25_reg_280 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_1_fu_445_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_ln27_reg_302 <= 6'd0;
    end else if (((icmp_ln27_fu_463_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_ln27_reg_302 <= add_ln27_fu_451_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_reg_635_pp0_iter25_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        complex_M_imag_writ_reg_749 <= grp_fu_397_p2;
        complex_M_real_writ_reg_744 <= grp_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln43_reg_635 <= icmp_ln43_fu_533_p2;
        icmp_ln43_reg_635_pp0_iter1_reg <= icmp_ln43_reg_635;
        zext_ln45_reg_644_pp0_iter1_reg[5 : 0] <= zext_ln45_reg_644[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln43_reg_635_pp0_iter10_reg <= icmp_ln43_reg_635_pp0_iter9_reg;
        icmp_ln43_reg_635_pp0_iter11_reg <= icmp_ln43_reg_635_pp0_iter10_reg;
        icmp_ln43_reg_635_pp0_iter12_reg <= icmp_ln43_reg_635_pp0_iter11_reg;
        icmp_ln43_reg_635_pp0_iter13_reg <= icmp_ln43_reg_635_pp0_iter12_reg;
        icmp_ln43_reg_635_pp0_iter14_reg <= icmp_ln43_reg_635_pp0_iter13_reg;
        icmp_ln43_reg_635_pp0_iter15_reg <= icmp_ln43_reg_635_pp0_iter14_reg;
        icmp_ln43_reg_635_pp0_iter16_reg <= icmp_ln43_reg_635_pp0_iter15_reg;
        icmp_ln43_reg_635_pp0_iter17_reg <= icmp_ln43_reg_635_pp0_iter16_reg;
        icmp_ln43_reg_635_pp0_iter18_reg <= icmp_ln43_reg_635_pp0_iter17_reg;
        icmp_ln43_reg_635_pp0_iter19_reg <= icmp_ln43_reg_635_pp0_iter18_reg;
        icmp_ln43_reg_635_pp0_iter20_reg <= icmp_ln43_reg_635_pp0_iter19_reg;
        icmp_ln43_reg_635_pp0_iter21_reg <= icmp_ln43_reg_635_pp0_iter20_reg;
        icmp_ln43_reg_635_pp0_iter22_reg <= icmp_ln43_reg_635_pp0_iter21_reg;
        icmp_ln43_reg_635_pp0_iter23_reg <= icmp_ln43_reg_635_pp0_iter22_reg;
        icmp_ln43_reg_635_pp0_iter24_reg <= icmp_ln43_reg_635_pp0_iter23_reg;
        icmp_ln43_reg_635_pp0_iter25_reg <= icmp_ln43_reg_635_pp0_iter24_reg;
        icmp_ln43_reg_635_pp0_iter26_reg <= icmp_ln43_reg_635_pp0_iter25_reg;
        icmp_ln43_reg_635_pp0_iter2_reg <= icmp_ln43_reg_635_pp0_iter1_reg;
        icmp_ln43_reg_635_pp0_iter3_reg <= icmp_ln43_reg_635_pp0_iter2_reg;
        icmp_ln43_reg_635_pp0_iter4_reg <= icmp_ln43_reg_635_pp0_iter3_reg;
        icmp_ln43_reg_635_pp0_iter5_reg <= icmp_ln43_reg_635_pp0_iter4_reg;
        icmp_ln43_reg_635_pp0_iter6_reg <= icmp_ln43_reg_635_pp0_iter5_reg;
        icmp_ln43_reg_635_pp0_iter7_reg <= icmp_ln43_reg_635_pp0_iter6_reg;
        icmp_ln43_reg_635_pp0_iter8_reg <= icmp_ln43_reg_635_pp0_iter7_reg;
        icmp_ln43_reg_635_pp0_iter9_reg <= icmp_ln43_reg_635_pp0_iter8_reg;
        zext_ln45_reg_644_pp0_iter10_reg[5 : 0] <= zext_ln45_reg_644_pp0_iter9_reg[5 : 0];
        zext_ln45_reg_644_pp0_iter11_reg[5 : 0] <= zext_ln45_reg_644_pp0_iter10_reg[5 : 0];
        zext_ln45_reg_644_pp0_iter12_reg[5 : 0] <= zext_ln45_reg_644_pp0_iter11_reg[5 : 0];
        zext_ln45_reg_644_pp0_iter13_reg[5 : 0] <= zext_ln45_reg_644_pp0_iter12_reg[5 : 0];
        zext_ln45_reg_644_pp0_iter14_reg[5 : 0] <= zext_ln45_reg_644_pp0_iter13_reg[5 : 0];
        zext_ln45_reg_644_pp0_iter15_reg[5 : 0] <= zext_ln45_reg_644_pp0_iter14_reg[5 : 0];
        zext_ln45_reg_644_pp0_iter16_reg[5 : 0] <= zext_ln45_reg_644_pp0_iter15_reg[5 : 0];
        zext_ln45_reg_644_pp0_iter17_reg[5 : 0] <= zext_ln45_reg_644_pp0_iter16_reg[5 : 0];
        zext_ln45_reg_644_pp0_iter18_reg[5 : 0] <= zext_ln45_reg_644_pp0_iter17_reg[5 : 0];
        zext_ln45_reg_644_pp0_iter19_reg[5 : 0] <= zext_ln45_reg_644_pp0_iter18_reg[5 : 0];
        zext_ln45_reg_644_pp0_iter20_reg[5 : 0] <= zext_ln45_reg_644_pp0_iter19_reg[5 : 0];
        zext_ln45_reg_644_pp0_iter21_reg[5 : 0] <= zext_ln45_reg_644_pp0_iter20_reg[5 : 0];
        zext_ln45_reg_644_pp0_iter22_reg[5 : 0] <= zext_ln45_reg_644_pp0_iter21_reg[5 : 0];
        zext_ln45_reg_644_pp0_iter23_reg[5 : 0] <= zext_ln45_reg_644_pp0_iter22_reg[5 : 0];
        zext_ln45_reg_644_pp0_iter24_reg[5 : 0] <= zext_ln45_reg_644_pp0_iter23_reg[5 : 0];
        zext_ln45_reg_644_pp0_iter25_reg[5 : 0] <= zext_ln45_reg_644_pp0_iter24_reg[5 : 0];
        zext_ln45_reg_644_pp0_iter26_reg[5 : 0] <= zext_ln45_reg_644_pp0_iter25_reg[5 : 0];
        zext_ln45_reg_644_pp0_iter2_reg[5 : 0] <= zext_ln45_reg_644_pp0_iter1_reg[5 : 0];
        zext_ln45_reg_644_pp0_iter3_reg[5 : 0] <= zext_ln45_reg_644_pp0_iter2_reg[5 : 0];
        zext_ln45_reg_644_pp0_iter4_reg[5 : 0] <= zext_ln45_reg_644_pp0_iter3_reg[5 : 0];
        zext_ln45_reg_644_pp0_iter5_reg[5 : 0] <= zext_ln45_reg_644_pp0_iter4_reg[5 : 0];
        zext_ln45_reg_644_pp0_iter6_reg[5 : 0] <= zext_ln45_reg_644_pp0_iter5_reg[5 : 0];
        zext_ln45_reg_644_pp0_iter7_reg[5 : 0] <= zext_ln45_reg_644_pp0_iter6_reg[5 : 0];
        zext_ln45_reg_644_pp0_iter8_reg[5 : 0] <= zext_ln45_reg_644_pp0_iter7_reg[5 : 0];
        zext_ln45_reg_644_pp0_iter9_reg[5 : 0] <= zext_ln45_reg_644_pp0_iter8_reg[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln49_reg_754 <= icmp_ln49_fu_553_p2;
        icmp_ln49_reg_754_pp1_iter1_reg <= icmp_ln49_reg_754;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_V_data_0_load_A == 1'b1)) begin
        in_stream_V_data_0_payload_A <= in_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_V_data_0_load_B == 1'b1)) begin
        in_stream_V_data_0_payload_B <= in_stream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_V_data_1_load_A == 1'b1)) begin
        out_stream_V_data_1_payload_A <= tmp_data_2_fu_585_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_V_data_1_load_B == 1'b1)) begin
        out_stream_V_data_1_payload_B <= tmp_data_2_fu_585_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_V_last_V_1_load_A == 1'b1)) begin
        out_stream_V_last_V_1_payload_A <= tmp_last_V_reg_773;
    end
end

always @ (posedge ap_clk) begin
    if ((out_stream_V_last_V_1_load_B == 1'b1)) begin
        out_stream_V_last_V_1_payload_B <= tmp_last_V_reg_773;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_reg_635 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_r_M_imag_reg_676 <= preamble_M_imag_q0;
        p_r_M_real_reg_670 <= preamble_M_real_q0;
        p_t_imag_reg_690 <= training_sym_M_imag_q0;
        p_t_real_reg_682 <= training_sym_M_real_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_reg_635_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_1_i_i_reg_703 <= grp_fu_373_p2;
        tmp_3_i_i_reg_708 <= grp_fu_377_p2;
        tmp_4_i_i_reg_713 <= grp_fu_381_p2;
        tmp_6_i_i_reg_718 <= grp_fu_385_p2;
        tmp_7_i_i_reg_723 <= grp_fu_389_p2;
        tmp_i_i_reg_698 <= grp_fu_369_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_reg_635_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_2_i_i_reg_728 <= grp_fu_357_p2;
        tmp_5_i_i_reg_733 <= grp_fu_361_p2;
        tmp_8_i_i_reg_739 <= grp_fu_365_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln49_fu_553_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_last_V_reg_773 <= tmp_last_V_fu_571_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_fu_533_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln45_reg_644[5 : 0] <= zext_ln45_fu_545_p1[5 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        LS_out_M_imag_address0 = zext_ln53_fu_565_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter27 == 1'b1))) begin
        LS_out_M_imag_address0 = zext_ln45_reg_644_pp0_iter26_reg;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        LS_out_M_imag_address0 = zext_ln27_fu_457_p1;
    end else begin
        LS_out_M_imag_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter27 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        LS_out_M_imag_ce0 = 1'b1;
    end else begin
        LS_out_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter27 == 1'b1))) begin
        LS_out_M_imag_d0 = complex_M_imag_writ_reg_749;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        LS_out_M_imag_d0 = 32'd0;
    end else begin
        LS_out_M_imag_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((icmp_ln43_reg_635_pp0_iter26_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter27 == 1'b1)))) begin
        LS_out_M_imag_we0 = 1'b1;
    end else begin
        LS_out_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        LS_out_M_real_address0 = zext_ln53_fu_565_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter27 == 1'b1))) begin
        LS_out_M_real_address0 = zext_ln45_reg_644_pp0_iter26_reg;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        LS_out_M_real_address0 = zext_ln27_fu_457_p1;
    end else begin
        LS_out_M_real_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter27 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        LS_out_M_real_ce0 = 1'b1;
    end else begin
        LS_out_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter27 == 1'b1))) begin
        LS_out_M_real_d0 = complex_M_real_writ_reg_744;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        LS_out_M_real_d0 = 32'd0;
    end else begin
        LS_out_M_real_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((icmp_ln43_reg_635_pp0_iter26_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter27 == 1'b1)))) begin
        LS_out_M_real_we0 = 1'b1;
    end else begin
        LS_out_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln43_fu_533_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln49_fu_553_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state36 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state36 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln36_fu_501_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln30_fu_469_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        in_stream_TDATA_blk_n = in_stream_V_data_0_state[1'd0];
    end else begin
        in_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((icmp_ln36_fu_501_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (icmp_ln36_fu_501_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | (~((icmp_ln30_fu_469_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (icmp_ln30_fu_469_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        in_stream_V_data_0_ack_out = 1'b1;
    end else begin
        in_stream_V_data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_stream_V_data_0_sel == 1'b1)) begin
        in_stream_V_data_0_data_out = in_stream_V_data_0_payload_B;
    end else begin
        in_stream_V_data_0_data_out = in_stream_V_data_0_payload_A;
    end
end

always @ (*) begin
    if (((~((icmp_ln36_fu_501_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (icmp_ln36_fu_501_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | (~((icmp_ln30_fu_469_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (icmp_ln30_fu_469_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        in_stream_V_last_V_0_ack_out = 1'b1;
    end else begin
        in_stream_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln49_reg_754_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((icmp_ln49_reg_754 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        out_stream_TDATA_blk_n = out_stream_V_data_1_state[1'd1];
    end else begin
        out_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((out_stream_V_data_1_sel == 1'b1)) begin
        out_stream_V_data_1_data_out = out_stream_V_data_1_payload_B;
    end else begin
        out_stream_V_data_1_data_out = out_stream_V_data_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln49_reg_754 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        out_stream_V_data_1_vld_in = 1'b1;
    end else begin
        out_stream_V_data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((out_stream_V_last_V_1_sel == 1'b1)) begin
        out_stream_V_last_V_1_data_out = out_stream_V_last_V_1_payload_B;
    end else begin
        out_stream_V_last_V_1_data_out = out_stream_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln49_reg_754 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        out_stream_V_last_V_1_vld_in = 1'b1;
    end else begin
        out_stream_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        preamble_M_imag_address0 = zext_ln45_fu_545_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        preamble_M_imag_address0 = zext_ln33_fu_495_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        preamble_M_imag_address0 = zext_ln25_fu_421_p1;
    end else begin
        preamble_M_imag_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((icmp_ln30_fu_469_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state5)))) begin
        preamble_M_imag_ce0 = 1'b1;
    end else begin
        preamble_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        preamble_M_imag_d0 = bitcast_ln9_1_fu_490_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        preamble_M_imag_d0 = 32'd0;
    end else begin
        preamble_M_imag_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~((icmp_ln30_fu_469_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (icmp_ln30_fu_469_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        preamble_M_imag_we0 = 1'b1;
    end else begin
        preamble_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        preamble_M_real_address0 = zext_ln45_fu_545_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        preamble_M_real_address0 = zext_ln33_fu_495_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        preamble_M_real_address0 = zext_ln25_fu_421_p1;
    end else begin
        preamble_M_real_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((icmp_ln30_fu_469_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state5)))) begin
        preamble_M_real_ce0 = 1'b1;
    end else begin
        preamble_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        preamble_M_real_d0 = bitcast_ln9_fu_485_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        preamble_M_real_d0 = 32'd0;
    end else begin
        preamble_M_real_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~((icmp_ln30_fu_469_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (icmp_ln30_fu_469_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        preamble_M_real_we0 = 1'b1;
    end else begin
        preamble_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        training_sym_M_imag_address0 = zext_ln45_fu_545_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        training_sym_M_imag_address0 = zext_ln39_fu_527_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        training_sym_M_imag_address0 = zext_ln25_1_fu_439_p1;
    end else begin
        training_sym_M_imag_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((icmp_ln36_fu_501_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state6)))) begin
        training_sym_M_imag_ce0 = 1'b1;
    end else begin
        training_sym_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        training_sym_M_imag_d0 = bitcast_ln9_3_fu_522_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        training_sym_M_imag_d0 = 32'd0;
    end else begin
        training_sym_M_imag_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (~((icmp_ln36_fu_501_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (icmp_ln36_fu_501_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        training_sym_M_imag_we0 = 1'b1;
    end else begin
        training_sym_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        training_sym_M_real_address0 = zext_ln45_fu_545_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        training_sym_M_real_address0 = zext_ln39_fu_527_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        training_sym_M_real_address0 = zext_ln25_1_fu_439_p1;
    end else begin
        training_sym_M_real_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((icmp_ln36_fu_501_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state6)))) begin
        training_sym_M_real_ce0 = 1'b1;
    end else begin
        training_sym_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        training_sym_M_real_d0 = bitcast_ln9_2_fu_517_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        training_sym_M_real_d0 = 32'd0;
    end else begin
        training_sym_M_real_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (~((icmp_ln36_fu_501_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (icmp_ln36_fu_501_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        training_sym_M_real_we0 = 1'b1;
    end else begin
        training_sym_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln25_fu_427_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln25_1_fu_445_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln27_fu_463_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((icmp_ln30_fu_469_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (icmp_ln30_fu_469_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if ((~((icmp_ln30_fu_469_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (icmp_ln30_fu_469_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((icmp_ln36_fu_501_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (icmp_ln36_fu_501_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((icmp_ln36_fu_501_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0)) & (icmp_ln36_fu_501_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln43_fu_533_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter26 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter27 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter26 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter27 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln43_fu_533_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln49_fu_553_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln49_fu_553_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state39 : begin
            if ((~((out_stream_V_last_V_1_state == 2'd1) | (out_stream_V_data_1_state == 2'd1) | ((out_stream_V_last_V_1_state == 2'd3) & (out_stream_TREADY == 1'b0)) | ((out_stream_V_data_1_state == 2'd3) & (out_stream_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln25_1_fu_433_p2 = (phi_ln25_1_reg_291 + 6'd1);

assign add_ln25_fu_415_p2 = (phi_ln25_reg_280 + 6'd1);

assign add_ln27_fu_451_p2 = (phi_ln27_reg_302 + 6'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b1 == ap_block_state38_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state37_io) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b1 == ap_block_state38_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state37_io) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state37_io = ((icmp_ln49_reg_754 == 1'd0) & (out_stream_V_data_1_ack_in == 1'b0));
end

assign ap_block_state37_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state38_io = ((icmp_ln49_reg_754_pp1_iter1_reg == 1'd0) & (out_stream_V_data_1_ack_in == 1'b0));
end

assign ap_block_state38_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state39 = ((out_stream_V_last_V_1_state == 2'd1) | (out_stream_V_data_1_state == 2'd1) | ((out_stream_V_last_V_1_state == 2'd3) & (out_stream_TREADY == 1'b0)) | ((out_stream_V_data_1_state == 2'd3) & (out_stream_TREADY == 1'b0)));
end

always @ (*) begin
    ap_block_state5 = ((icmp_ln30_fu_469_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state6 = ((icmp_ln36_fu_501_p2 == 1'd0) & (in_stream_V_data_0_vld_out == 1'b0));
end

assign ap_block_state7_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln162_1_fu_581_p1 = LS_out_M_imag_q0;

assign bitcast_ln162_fu_577_p1 = LS_out_M_real_q0;

assign bitcast_ln9_1_fu_490_p1 = grp_fu_405_p4;

assign bitcast_ln9_2_fu_517_p1 = trunc_ln9_1_fu_513_p1;

assign bitcast_ln9_3_fu_522_p1 = grp_fu_405_p4;

assign bitcast_ln9_fu_485_p1 = trunc_ln9_fu_481_p1;

assign grp_fu_405_p4 = {{in_stream_V_data_0_data_out[63:32]}};

assign i_1_fu_507_p2 = (i3_0_reg_324 + 6'd1);

assign i_2_fu_539_p2 = (i5_0_reg_335 + 6'd1);

assign i_3_fu_559_p2 = (i6_0_reg_346 + 6'd1);

assign i_fu_475_p2 = (i_0_reg_313 + 6'd1);

assign icmp_ln25_1_fu_445_p2 = ((phi_ln25_1_reg_291 == 6'd51) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_427_p2 = ((phi_ln25_reg_280 == 6'd51) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_463_p2 = ((phi_ln27_reg_302 == 6'd51) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_469_p2 = ((i_0_reg_313 == 6'd52) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_501_p2 = ((i3_0_reg_324 == 6'd52) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_533_p2 = ((i5_0_reg_335 == 6'd52) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_553_p2 = ((i6_0_reg_346 == 6'd52) ? 1'b1 : 1'b0);

assign in_stream_TREADY = in_stream_V_last_V_0_state[1'd1];

assign in_stream_V_data_0_ack_in = in_stream_V_data_0_state[1'd1];

assign in_stream_V_data_0_load_A = (in_stream_V_data_0_state_cmp_full & ~in_stream_V_data_0_sel_wr);

assign in_stream_V_data_0_load_B = (in_stream_V_data_0_state_cmp_full & in_stream_V_data_0_sel_wr);

assign in_stream_V_data_0_sel = in_stream_V_data_0_sel_rd;

assign in_stream_V_data_0_state_cmp_full = ((in_stream_V_data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_stream_V_data_0_vld_in = in_stream_TVALID;

assign in_stream_V_data_0_vld_out = in_stream_V_data_0_state[1'd0];

assign in_stream_V_last_V_0_vld_in = in_stream_TVALID;

assign out_stream_TDATA = out_stream_V_data_1_data_out;

assign out_stream_TLAST = out_stream_V_last_V_1_data_out;

assign out_stream_TVALID = out_stream_V_last_V_1_state[1'd0];

assign out_stream_V_data_1_ack_in = out_stream_V_data_1_state[1'd1];

assign out_stream_V_data_1_ack_out = out_stream_TREADY;

assign out_stream_V_data_1_load_A = (out_stream_V_data_1_state_cmp_full & ~out_stream_V_data_1_sel_wr);

assign out_stream_V_data_1_load_B = (out_stream_V_data_1_state_cmp_full & out_stream_V_data_1_sel_wr);

assign out_stream_V_data_1_sel = out_stream_V_data_1_sel_rd;

assign out_stream_V_data_1_state_cmp_full = ((out_stream_V_data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_stream_V_data_1_vld_out = out_stream_V_data_1_state[1'd0];

assign out_stream_V_last_V_1_ack_in = out_stream_V_last_V_1_state[1'd1];

assign out_stream_V_last_V_1_ack_out = out_stream_TREADY;

assign out_stream_V_last_V_1_load_A = (out_stream_V_last_V_1_state_cmp_full & ~out_stream_V_last_V_1_sel_wr);

assign out_stream_V_last_V_1_load_B = (out_stream_V_last_V_1_state_cmp_full & out_stream_V_last_V_1_sel_wr);

assign out_stream_V_last_V_1_sel = out_stream_V_last_V_1_sel_rd;

assign out_stream_V_last_V_1_state_cmp_full = ((out_stream_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_stream_V_last_V_1_vld_out = out_stream_V_last_V_1_state[1'd0];

assign tmp_data_2_fu_585_p3 = {{bitcast_ln162_1_fu_581_p1}, {bitcast_ln162_fu_577_p1}};

assign tmp_last_V_fu_571_p2 = ((i6_0_reg_346 == 6'd51) ? 1'b1 : 1'b0);

assign trunc_ln9_1_fu_513_p1 = in_stream_V_data_0_data_out[31:0];

assign trunc_ln9_fu_481_p1 = in_stream_V_data_0_data_out[31:0];

assign zext_ln25_1_fu_439_p1 = phi_ln25_1_reg_291;

assign zext_ln25_fu_421_p1 = phi_ln25_reg_280;

assign zext_ln27_fu_457_p1 = phi_ln27_reg_302;

assign zext_ln33_fu_495_p1 = i_0_reg_313;

assign zext_ln39_fu_527_p1 = i3_0_reg_324;

assign zext_ln45_fu_545_p1 = i5_0_reg_335;

assign zext_ln53_fu_565_p1 = i6_0_reg_346;

always @ (posedge ap_clk) begin
    zext_ln45_reg_644[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln45_reg_644_pp0_iter1_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln45_reg_644_pp0_iter2_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln45_reg_644_pp0_iter3_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln45_reg_644_pp0_iter4_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln45_reg_644_pp0_iter5_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln45_reg_644_pp0_iter6_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln45_reg_644_pp0_iter7_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln45_reg_644_pp0_iter8_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln45_reg_644_pp0_iter9_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln45_reg_644_pp0_iter10_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln45_reg_644_pp0_iter11_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln45_reg_644_pp0_iter12_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln45_reg_644_pp0_iter13_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln45_reg_644_pp0_iter14_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln45_reg_644_pp0_iter15_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln45_reg_644_pp0_iter16_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln45_reg_644_pp0_iter17_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln45_reg_644_pp0_iter18_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln45_reg_644_pp0_iter19_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln45_reg_644_pp0_iter20_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln45_reg_644_pp0_iter21_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln45_reg_644_pp0_iter22_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln45_reg_644_pp0_iter23_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln45_reg_644_pp0_iter24_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln45_reg_644_pp0_iter25_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln45_reg_644_pp0_iter26_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //LS_estimator
